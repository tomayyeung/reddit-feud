/**
 * #event_handlers.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { Metadata } from "../../../../../lib/Types.js";
import { AccountDelete, AppInstall, AppUpgrade, AutomoderatorFilterComment, AutomoderatorFilterPost, CommentApprove, CommentCreate, CommentDelete, CommentReport, CommentSubmit, CommentUpdate, PostApprove, PostCreate, PostDelete, PostFlairUpdate, PostNsfwUpdate, PostReport, PostSpoilerUpdate, PostSubmit, PostUpdate, SubredditSubscribe } from "../../../events/v1alpha/events.js";
import { ModAction } from "../../../reddit/v2alpha/modaction.js";
import { ModMail } from "../../../reddit/v2alpha/modmail.js";
/** This needs to rectified with StepResult at some point */
export interface HandlerResult {
}
export declare const HandlerResult: {
    $type: "devvit.actor.automation.v1alpha.HandlerResult";
    encode(_: HandlerResult, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): HandlerResult;
    fromJSON(_: any): HandlerResult;
    toJSON(_: HandlerResult): unknown;
    create(base?: DeepPartial<HandlerResult>): HandlerResult;
    fromPartial(_: DeepPartial<HandlerResult>): HandlerResult;
};
export interface OnPostSubmit {
    OnPostSubmit(request: PostSubmit, metadata?: Metadata): Promise<HandlerResult>;
}
export declare const OnPostSubmitServiceName = "devvit.actor.automation.v1alpha.OnPostSubmit";
export declare class OnPostSubmitClientImpl implements OnPostSubmit {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    OnPostSubmit(request: PostSubmit, metadata?: Metadata): Promise<HandlerResult>;
}
export type OnPostSubmitDefinition = typeof OnPostSubmitDefinition;
export declare const OnPostSubmitDefinition: {
    readonly name: "OnPostSubmit";
    readonly fullName: "devvit.actor.automation.v1alpha.OnPostSubmit";
    readonly methods: {
        readonly onPostSubmit: {
            readonly name: "OnPostSubmit";
            readonly requestType: {
                $type: "devvit.events.v1alpha.PostSubmit";
                encode(message: PostSubmit, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PostSubmit;
                fromJSON(object: any): PostSubmit;
                toJSON(message: PostSubmit): unknown;
                create(base?: {
                    post?: {
                        id?: string;
                        title?: string;
                        selftext?: string;
                        nsfw?: boolean;
                        authorId?: string;
                        crowdControlLevel?: import("../../../reddit/v2alpha/postv2.js").CrowdControlLevel;
                        numReports?: number;
                        isGallery?: boolean;
                        isMeta?: boolean;
                        createdAt?: number;
                        isApproved?: boolean;
                        isArchived?: boolean;
                        distinguished?: import("../../../reddit/v2alpha/postv2.js").DistinguishType;
                        ignoreReports?: boolean;
                        isSelf?: boolean;
                        isVideo?: boolean;
                        isLocked?: boolean;
                        isSpoiler?: boolean;
                        subredditId?: string;
                        upvotes?: number;
                        downvotes?: number;
                        url?: string;
                        isSticky?: boolean;
                        linkFlair?: {
                            text?: string;
                            cssClass?: string;
                            backgroundColor?: string;
                            templateId?: string;
                            textColor?: string;
                        } | undefined;
                        authorFlair?: {
                            userId?: string;
                            subredditId?: string;
                            text?: string;
                            cssClass?: string;
                            templateId?: string;
                            textColor?: string;
                            backgroundColor?: string;
                            enabled?: boolean;
                        } | undefined;
                        spam?: boolean;
                        deleted?: boolean;
                        languageCode?: string;
                        updatedAt?: number;
                        gildings?: number;
                        score?: number;
                        numComments?: number;
                        thumbnail?: string;
                        media?: {
                            type?: string;
                            oembed?: {
                                type?: string;
                                version?: string;
                                title?: string;
                                description?: string;
                                authorName?: string;
                                authorUrl?: string;
                                providerName?: string;
                                providerUrl?: string;
                                thumbnailUrl?: string;
                                thumbnailWidth?: number;
                                thumbnailHeight?: number;
                                html?: string;
                                width?: number;
                                height?: number;
                            } | undefined;
                            redditVideo?: {
                                bitrateKbps?: number;
                                fallbackUrl?: string;
                                height?: number;
                                width?: number;
                                scrubberMediaUrl?: string;
                                dashUrl?: string;
                                duration?: number;
                                hlsUrl?: string;
                                isGif?: boolean;
                                transcodingStatus?: string;
                            } | undefined;
                        } | undefined;
                        crosspostParentId?: string;
                        permalink?: string;
                        isPoll?: boolean;
                        isPromoted?: boolean;
                        isMultiMedia?: boolean;
                        type?: string;
                        unlisted?: boolean;
                        galleryImages?: string[];
                        isImage?: boolean;
                    } | undefined;
                    author?: {
                        id?: string;
                        name?: string;
                        isGold?: boolean;
                        snoovatarImage?: string;
                        url?: string;
                        spam?: boolean;
                        banned?: boolean;
                        flair?: {
                            userId?: string;
                            subredditId?: string;
                            text?: string;
                            cssClass?: string;
                            templateId?: string;
                            textColor?: string;
                            backgroundColor?: string;
                            enabled?: boolean;
                        } | undefined;
                        karma?: number;
                        iconImage?: string;
                        description?: string;
                        suspended?: boolean;
                    } | undefined;
                    subreddit?: {
                        id?: string;
                        name?: string;
                        nsfw?: boolean;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType;
                        spam?: boolean;
                        quarantined?: boolean;
                        topics?: string[];
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating;
                        subscribersCount?: number;
                        permalink?: string;
                    } | undefined;
                } | undefined): PostSubmit;
                fromPartial(object: {
                    post?: {
                        id?: string;
                        title?: string;
                        selftext?: string;
                        nsfw?: boolean;
                        authorId?: string;
                        crowdControlLevel?: import("../../../reddit/v2alpha/postv2.js").CrowdControlLevel;
                        numReports?: number;
                        isGallery?: boolean;
                        isMeta?: boolean;
                        createdAt?: number;
                        isApproved?: boolean;
                        isArchived?: boolean;
                        distinguished?: import("../../../reddit/v2alpha/postv2.js").DistinguishType;
                        ignoreReports?: boolean;
                        isSelf?: boolean;
                        isVideo?: boolean;
                        isLocked?: boolean;
                        isSpoiler?: boolean;
                        subredditId?: string;
                        upvotes?: number;
                        downvotes?: number;
                        url?: string;
                        isSticky?: boolean;
                        linkFlair?: {
                            text?: string;
                            cssClass?: string;
                            backgroundColor?: string;
                            templateId?: string;
                            textColor?: string;
                        } | undefined;
                        authorFlair?: {
                            userId?: string;
                            subredditId?: string;
                            text?: string;
                            cssClass?: string;
                            templateId?: string;
                            textColor?: string;
                            backgroundColor?: string;
                            enabled?: boolean;
                        } | undefined;
                        spam?: boolean;
                        deleted?: boolean;
                        languageCode?: string;
                        updatedAt?: number;
                        gildings?: number;
                        score?: number;
                        numComments?: number;
                        thumbnail?: string;
                        media?: {
                            type?: string;
                            oembed?: {
                                type?: string;
                                version?: string;
                                title?: string;
                                description?: string;
                                authorName?: string;
                                authorUrl?: string;
                                providerName?: string;
                                providerUrl?: string;
                                thumbnailUrl?: string;
                                thumbnailWidth?: number;
                                thumbnailHeight?: number;
                                html?: string;
                                width?: number;
                                height?: number;
                            } | undefined;
                            redditVideo?: {
                                bitrateKbps?: number;
                                fallbackUrl?: string;
                                height?: number;
                                width?: number;
                                scrubberMediaUrl?: string;
                                dashUrl?: string;
                                duration?: number;
                                hlsUrl?: string;
                                isGif?: boolean;
                                transcodingStatus?: string;
                            } | undefined;
                        } | undefined;
                        crosspostParentId?: string;
                        permalink?: string;
                        isPoll?: boolean;
                        isPromoted?: boolean;
                        isMultiMedia?: boolean;
                        type?: string;
                        unlisted?: boolean;
                        galleryImages?: string[];
                        isImage?: boolean;
                    } | undefined;
                    author?: {
                        id?: string;
                        name?: string;
                        isGold?: boolean;
                        snoovatarImage?: string;
                        url?: string;
                        spam?: boolean;
                        banned?: boolean;
                        flair?: {
                            userId?: string;
                            subredditId?: string;
                            text?: string;
                            cssClass?: string;
                            templateId?: string;
                            textColor?: string;
                            backgroundColor?: string;
                            enabled?: boolean;
                        } | undefined;
                        karma?: number;
                        iconImage?: string;
                        description?: string;
                        suspended?: boolean;
                    } | undefined;
                    subreddit?: {
                        id?: string;
                        name?: string;
                        nsfw?: boolean;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType;
                        spam?: boolean;
                        quarantined?: boolean;
                        topics?: string[];
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating;
                        subscribersCount?: number;
                        permalink?: string;
                    } | undefined;
                }): PostSubmit;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.automation.v1alpha.HandlerResult";
                encode(_: HandlerResult, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): HandlerResult;
                fromJSON(_: any): HandlerResult;
                toJSON(_: HandlerResult): unknown;
                create(base?: DeepPartial<HandlerResult>): HandlerResult;
                fromPartial(_: DeepPartial<HandlerResult>): HandlerResult;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
export interface OnPostCreate {
    OnPostCreate(request: PostCreate, metadata?: Metadata): Promise<HandlerResult>;
}
export declare const OnPostCreateServiceName = "devvit.actor.automation.v1alpha.OnPostCreate";
export declare class OnPostCreateClientImpl implements OnPostCreate {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    OnPostCreate(request: PostCreate, metadata?: Metadata): Promise<HandlerResult>;
}
export type OnPostCreateDefinition = typeof OnPostCreateDefinition;
export declare const OnPostCreateDefinition: {
    readonly name: "OnPostCreate";
    readonly fullName: "devvit.actor.automation.v1alpha.OnPostCreate";
    readonly methods: {
        readonly onPostCreate: {
            readonly name: "OnPostCreate";
            readonly requestType: {
                $type: "devvit.events.v1alpha.PostCreate";
                encode(message: PostCreate, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PostCreate;
                fromJSON(object: any): PostCreate;
                toJSON(message: PostCreate): unknown;
                create(base?: {
                    post?: {
                        id?: string;
                        title?: string;
                        selftext?: string;
                        nsfw?: boolean;
                        authorId?: string;
                        crowdControlLevel?: import("../../../reddit/v2alpha/postv2.js").CrowdControlLevel;
                        numReports?: number;
                        isGallery?: boolean;
                        isMeta?: boolean;
                        createdAt?: number;
                        isApproved?: boolean;
                        isArchived?: boolean;
                        distinguished?: import("../../../reddit/v2alpha/postv2.js").DistinguishType;
                        ignoreReports?: boolean;
                        isSelf?: boolean;
                        isVideo?: boolean;
                        isLocked?: boolean;
                        isSpoiler?: boolean;
                        subredditId?: string;
                        upvotes?: number;
                        downvotes?: number;
                        url?: string;
                        isSticky?: boolean;
                        linkFlair?: {
                            text?: string;
                            cssClass?: string;
                            backgroundColor?: string;
                            templateId?: string;
                            textColor?: string;
                        } | undefined;
                        authorFlair?: {
                            userId?: string;
                            subredditId?: string;
                            text?: string;
                            cssClass?: string;
                            templateId?: string;
                            textColor?: string;
                            backgroundColor?: string;
                            enabled?: boolean;
                        } | undefined;
                        spam?: boolean;
                        deleted?: boolean;
                        languageCode?: string;
                        updatedAt?: number;
                        gildings?: number;
                        score?: number;
                        numComments?: number;
                        thumbnail?: string;
                        media?: {
                            type?: string;
                            oembed?: {
                                type?: string;
                                version?: string;
                                title?: string;
                                description?: string;
                                authorName?: string;
                                authorUrl?: string;
                                providerName?: string;
                                providerUrl?: string;
                                thumbnailUrl?: string;
                                thumbnailWidth?: number;
                                thumbnailHeight?: number;
                                html?: string;
                                width?: number;
                                height?: number;
                            } | undefined;
                            redditVideo?: {
                                bitrateKbps?: number;
                                fallbackUrl?: string;
                                height?: number;
                                width?: number;
                                scrubberMediaUrl?: string;
                                dashUrl?: string;
                                duration?: number;
                                hlsUrl?: string;
                                isGif?: boolean;
                                transcodingStatus?: string;
                            } | undefined;
                        } | undefined;
                        crosspostParentId?: string;
                        permalink?: string;
                        isPoll?: boolean;
                        isPromoted?: boolean;
                        isMultiMedia?: boolean;
                        type?: string;
                        unlisted?: boolean;
                        galleryImages?: string[];
                        isImage?: boolean;
                    } | undefined;
                    author?: {
                        id?: string;
                        name?: string;
                        isGold?: boolean;
                        snoovatarImage?: string;
                        url?: string;
                        spam?: boolean;
                        banned?: boolean;
                        flair?: {
                            userId?: string;
                            subredditId?: string;
                            text?: string;
                            cssClass?: string;
                            templateId?: string;
                            textColor?: string;
                            backgroundColor?: string;
                            enabled?: boolean;
                        } | undefined;
                        karma?: number;
                        iconImage?: string;
                        description?: string;
                        suspended?: boolean;
                    } | undefined;
                    subreddit?: {
                        id?: string;
                        name?: string;
                        nsfw?: boolean;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType;
                        spam?: boolean;
                        quarantined?: boolean;
                        topics?: string[];
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating;
                        subscribersCount?: number;
                        permalink?: string;
                    } | undefined;
                } | undefined): PostCreate;
                fromPartial(object: {
                    post?: {
                        id?: string;
                        title?: string;
                        selftext?: string;
                        nsfw?: boolean;
                        authorId?: string;
                        crowdControlLevel?: import("../../../reddit/v2alpha/postv2.js").CrowdControlLevel;
                        numReports?: number;
                        isGallery?: boolean;
                        isMeta?: boolean;
                        createdAt?: number;
                        isApproved?: boolean;
                        isArchived?: boolean;
                        distinguished?: import("../../../reddit/v2alpha/postv2.js").DistinguishType;
                        ignoreReports?: boolean;
                        isSelf?: boolean;
                        isVideo?: boolean;
                        isLocked?: boolean;
                        isSpoiler?: boolean;
                        subredditId?: string;
                        upvotes?: number;
                        downvotes?: number;
                        url?: string;
                        isSticky?: boolean;
                        linkFlair?: {
                            text?: string;
                            cssClass?: string;
                            backgroundColor?: string;
                            templateId?: string;
                            textColor?: string;
                        } | undefined;
                        authorFlair?: {
                            userId?: string;
                            subredditId?: string;
                            text?: string;
                            cssClass?: string;
                            templateId?: string;
                            textColor?: string;
                            backgroundColor?: string;
                            enabled?: boolean;
                        } | undefined;
                        spam?: boolean;
                        deleted?: boolean;
                        languageCode?: string;
                        updatedAt?: number;
                        gildings?: number;
                        score?: number;
                        numComments?: number;
                        thumbnail?: string;
                        media?: {
                            type?: string;
                            oembed?: {
                                type?: string;
                                version?: string;
                                title?: string;
                                description?: string;
                                authorName?: string;
                                authorUrl?: string;
                                providerName?: string;
                                providerUrl?: string;
                                thumbnailUrl?: string;
                                thumbnailWidth?: number;
                                thumbnailHeight?: number;
                                html?: string;
                                width?: number;
                                height?: number;
                            } | undefined;
                            redditVideo?: {
                                bitrateKbps?: number;
                                fallbackUrl?: string;
                                height?: number;
                                width?: number;
                                scrubberMediaUrl?: string;
                                dashUrl?: string;
                                duration?: number;
                                hlsUrl?: string;
                                isGif?: boolean;
                                transcodingStatus?: string;
                            } | undefined;
                        } | undefined;
                        crosspostParentId?: string;
                        permalink?: string;
                        isPoll?: boolean;
                        isPromoted?: boolean;
                        isMultiMedia?: boolean;
                        type?: string;
                        unlisted?: boolean;
                        galleryImages?: string[];
                        isImage?: boolean;
                    } | undefined;
                    author?: {
                        id?: string;
                        name?: string;
                        isGold?: boolean;
                        snoovatarImage?: string;
                        url?: string;
                        spam?: boolean;
                        banned?: boolean;
                        flair?: {
                            userId?: string;
                            subredditId?: string;
                            text?: string;
                            cssClass?: string;
                            templateId?: string;
                            textColor?: string;
                            backgroundColor?: string;
                            enabled?: boolean;
                        } | undefined;
                        karma?: number;
                        iconImage?: string;
                        description?: string;
                        suspended?: boolean;
                    } | undefined;
                    subreddit?: {
                        id?: string;
                        name?: string;
                        nsfw?: boolean;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType;
                        spam?: boolean;
                        quarantined?: boolean;
                        topics?: string[];
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating;
                        subscribersCount?: number;
                        permalink?: string;
                    } | undefined;
                }): PostCreate;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.automation.v1alpha.HandlerResult";
                encode(_: HandlerResult, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): HandlerResult;
                fromJSON(_: any): HandlerResult;
                toJSON(_: HandlerResult): unknown;
                create(base?: DeepPartial<HandlerResult>): HandlerResult;
                fromPartial(_: DeepPartial<HandlerResult>): HandlerResult;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
export interface OnPostUpdate {
    OnPostUpdate(request: PostUpdate, metadata?: Metadata): Promise<HandlerResult>;
}
export declare const OnPostUpdateServiceName = "devvit.actor.automation.v1alpha.OnPostUpdate";
export declare class OnPostUpdateClientImpl implements OnPostUpdate {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    OnPostUpdate(request: PostUpdate, metadata?: Metadata): Promise<HandlerResult>;
}
export type OnPostUpdateDefinition = typeof OnPostUpdateDefinition;
export declare const OnPostUpdateDefinition: {
    readonly name: "OnPostUpdate";
    readonly fullName: "devvit.actor.automation.v1alpha.OnPostUpdate";
    readonly methods: {
        readonly onPostUpdate: {
            readonly name: "OnPostUpdate";
            readonly requestType: {
                $type: "devvit.events.v1alpha.PostUpdate";
                encode(message: PostUpdate, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PostUpdate;
                fromJSON(object: any): PostUpdate;
                toJSON(message: PostUpdate): unknown;
                create(base?: {
                    post?: {
                        id?: string;
                        title?: string;
                        selftext?: string;
                        nsfw?: boolean;
                        authorId?: string;
                        crowdControlLevel?: import("../../../reddit/v2alpha/postv2.js").CrowdControlLevel;
                        numReports?: number;
                        isGallery?: boolean;
                        isMeta?: boolean;
                        createdAt?: number;
                        isApproved?: boolean;
                        isArchived?: boolean;
                        distinguished?: import("../../../reddit/v2alpha/postv2.js").DistinguishType;
                        ignoreReports?: boolean;
                        isSelf?: boolean;
                        isVideo?: boolean;
                        isLocked?: boolean;
                        isSpoiler?: boolean;
                        subredditId?: string;
                        upvotes?: number;
                        downvotes?: number;
                        url?: string;
                        isSticky?: boolean;
                        linkFlair?: {
                            text?: string;
                            cssClass?: string;
                            backgroundColor?: string;
                            templateId?: string;
                            textColor?: string;
                        } | undefined;
                        authorFlair?: {
                            userId?: string;
                            subredditId?: string;
                            text?: string;
                            cssClass?: string;
                            templateId?: string;
                            textColor?: string;
                            backgroundColor?: string;
                            enabled?: boolean;
                        } | undefined;
                        spam?: boolean;
                        deleted?: boolean;
                        languageCode?: string;
                        updatedAt?: number;
                        gildings?: number;
                        score?: number;
                        numComments?: number;
                        thumbnail?: string;
                        media?: {
                            type?: string;
                            oembed?: {
                                type?: string;
                                version?: string;
                                title?: string;
                                description?: string;
                                authorName?: string;
                                authorUrl?: string;
                                providerName?: string;
                                providerUrl?: string;
                                thumbnailUrl?: string;
                                thumbnailWidth?: number;
                                thumbnailHeight?: number;
                                html?: string;
                                width?: number;
                                height?: number;
                            } | undefined;
                            redditVideo?: {
                                bitrateKbps?: number;
                                fallbackUrl?: string;
                                height?: number;
                                width?: number;
                                scrubberMediaUrl?: string;
                                dashUrl?: string;
                                duration?: number;
                                hlsUrl?: string;
                                isGif?: boolean;
                                transcodingStatus?: string;
                            } | undefined;
                        } | undefined;
                        crosspostParentId?: string;
                        permalink?: string;
                        isPoll?: boolean;
                        isPromoted?: boolean;
                        isMultiMedia?: boolean;
                        type?: string;
                        unlisted?: boolean;
                        galleryImages?: string[];
                        isImage?: boolean;
                    } | undefined;
                    author?: {
                        id?: string;
                        name?: string;
                        isGold?: boolean;
                        snoovatarImage?: string;
                        url?: string;
                        spam?: boolean;
                        banned?: boolean;
                        flair?: {
                            userId?: string;
                            subredditId?: string;
                            text?: string;
                            cssClass?: string;
                            templateId?: string;
                            textColor?: string;
                            backgroundColor?: string;
                            enabled?: boolean;
                        } | undefined;
                        karma?: number;
                        iconImage?: string;
                        description?: string;
                        suspended?: boolean;
                    } | undefined;
                    previousBody?: string;
                    subreddit?: {
                        id?: string;
                        name?: string;
                        nsfw?: boolean;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType;
                        spam?: boolean;
                        quarantined?: boolean;
                        topics?: string[];
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating;
                        subscribersCount?: number;
                        permalink?: string;
                    } | undefined;
                } | undefined): PostUpdate;
                fromPartial(object: {
                    post?: {
                        id?: string;
                        title?: string;
                        selftext?: string;
                        nsfw?: boolean;
                        authorId?: string;
                        crowdControlLevel?: import("../../../reddit/v2alpha/postv2.js").CrowdControlLevel;
                        numReports?: number;
                        isGallery?: boolean;
                        isMeta?: boolean;
                        createdAt?: number;
                        isApproved?: boolean;
                        isArchived?: boolean;
                        distinguished?: import("../../../reddit/v2alpha/postv2.js").DistinguishType;
                        ignoreReports?: boolean;
                        isSelf?: boolean;
                        isVideo?: boolean;
                        isLocked?: boolean;
                        isSpoiler?: boolean;
                        subredditId?: string;
                        upvotes?: number;
                        downvotes?: number;
                        url?: string;
                        isSticky?: boolean;
                        linkFlair?: {
                            text?: string;
                            cssClass?: string;
                            backgroundColor?: string;
                            templateId?: string;
                            textColor?: string;
                        } | undefined;
                        authorFlair?: {
                            userId?: string;
                            subredditId?: string;
                            text?: string;
                            cssClass?: string;
                            templateId?: string;
                            textColor?: string;
                            backgroundColor?: string;
                            enabled?: boolean;
                        } | undefined;
                        spam?: boolean;
                        deleted?: boolean;
                        languageCode?: string;
                        updatedAt?: number;
                        gildings?: number;
                        score?: number;
                        numComments?: number;
                        thumbnail?: string;
                        media?: {
                            type?: string;
                            oembed?: {
                                type?: string;
                                version?: string;
                                title?: string;
                                description?: string;
                                authorName?: string;
                                authorUrl?: string;
                                providerName?: string;
                                providerUrl?: string;
                                thumbnailUrl?: string;
                                thumbnailWidth?: number;
                                thumbnailHeight?: number;
                                html?: string;
                                width?: number;
                                height?: number;
                            } | undefined;
                            redditVideo?: {
                                bitrateKbps?: number;
                                fallbackUrl?: string;
                                height?: number;
                                width?: number;
                                scrubberMediaUrl?: string;
                                dashUrl?: string;
                                duration?: number;
                                hlsUrl?: string;
                                isGif?: boolean;
                                transcodingStatus?: string;
                            } | undefined;
                        } | undefined;
                        crosspostParentId?: string;
                        permalink?: string;
                        isPoll?: boolean;
                        isPromoted?: boolean;
                        isMultiMedia?: boolean;
                        type?: string;
                        unlisted?: boolean;
                        galleryImages?: string[];
                        isImage?: boolean;
                    } | undefined;
                    author?: {
                        id?: string;
                        name?: string;
                        isGold?: boolean;
                        snoovatarImage?: string;
                        url?: string;
                        spam?: boolean;
                        banned?: boolean;
                        flair?: {
                            userId?: string;
                            subredditId?: string;
                            text?: string;
                            cssClass?: string;
                            templateId?: string;
                            textColor?: string;
                            backgroundColor?: string;
                            enabled?: boolean;
                        } | undefined;
                        karma?: number;
                        iconImage?: string;
                        description?: string;
                        suspended?: boolean;
                    } | undefined;
                    previousBody?: string;
                    subreddit?: {
                        id?: string;
                        name?: string;
                        nsfw?: boolean;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType;
                        spam?: boolean;
                        quarantined?: boolean;
                        topics?: string[];
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating;
                        subscribersCount?: number;
                        permalink?: string;
                    } | undefined;
                }): PostUpdate;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.automation.v1alpha.HandlerResult";
                encode(_: HandlerResult, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): HandlerResult;
                fromJSON(_: any): HandlerResult;
                toJSON(_: HandlerResult): unknown;
                create(base?: DeepPartial<HandlerResult>): HandlerResult;
                fromPartial(_: DeepPartial<HandlerResult>): HandlerResult;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
export interface OnPostReport {
    OnPostReport(request: PostReport, metadata?: Metadata): Promise<HandlerResult>;
}
export declare const OnPostReportServiceName = "devvit.actor.automation.v1alpha.OnPostReport";
export declare class OnPostReportClientImpl implements OnPostReport {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    OnPostReport(request: PostReport, metadata?: Metadata): Promise<HandlerResult>;
}
export type OnPostReportDefinition = typeof OnPostReportDefinition;
export declare const OnPostReportDefinition: {
    readonly name: "OnPostReport";
    readonly fullName: "devvit.actor.automation.v1alpha.OnPostReport";
    readonly methods: {
        readonly onPostReport: {
            readonly name: "OnPostReport";
            readonly requestType: {
                $type: "devvit.events.v1alpha.PostReport";
                encode(message: PostReport, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PostReport;
                fromJSON(object: any): PostReport;
                toJSON(message: PostReport): unknown;
                create(base?: {
                    post?: {
                        id?: string;
                        title?: string;
                        selftext?: string;
                        nsfw?: boolean;
                        authorId?: string;
                        crowdControlLevel?: import("../../../reddit/v2alpha/postv2.js").CrowdControlLevel;
                        numReports?: number;
                        isGallery?: boolean;
                        isMeta?: boolean;
                        createdAt?: number;
                        isApproved?: boolean;
                        isArchived?: boolean;
                        distinguished?: import("../../../reddit/v2alpha/postv2.js").DistinguishType;
                        ignoreReports?: boolean;
                        isSelf?: boolean;
                        isVideo?: boolean;
                        isLocked?: boolean;
                        isSpoiler?: boolean;
                        subredditId?: string;
                        upvotes?: number;
                        downvotes?: number;
                        url?: string;
                        isSticky?: boolean;
                        linkFlair?: {
                            text?: string;
                            cssClass?: string;
                            backgroundColor?: string;
                            templateId?: string;
                            textColor?: string;
                        } | undefined;
                        authorFlair?: {
                            userId?: string;
                            subredditId?: string;
                            text?: string;
                            cssClass?: string;
                            templateId?: string;
                            textColor?: string;
                            backgroundColor?: string;
                            enabled?: boolean;
                        } | undefined;
                        spam?: boolean;
                        deleted?: boolean;
                        languageCode?: string;
                        updatedAt?: number;
                        gildings?: number;
                        score?: number;
                        numComments?: number;
                        thumbnail?: string;
                        media?: {
                            type?: string;
                            oembed?: {
                                type?: string;
                                version?: string;
                                title?: string;
                                description?: string;
                                authorName?: string;
                                authorUrl?: string;
                                providerName?: string;
                                providerUrl?: string;
                                thumbnailUrl?: string;
                                thumbnailWidth?: number;
                                thumbnailHeight?: number;
                                html?: string;
                                width?: number;
                                height?: number;
                            } | undefined;
                            redditVideo?: {
                                bitrateKbps?: number;
                                fallbackUrl?: string;
                                height?: number;
                                width?: number;
                                scrubberMediaUrl?: string;
                                dashUrl?: string;
                                duration?: number;
                                hlsUrl?: string;
                                isGif?: boolean;
                                transcodingStatus?: string;
                            } | undefined;
                        } | undefined;
                        crosspostParentId?: string;
                        permalink?: string;
                        isPoll?: boolean;
                        isPromoted?: boolean;
                        isMultiMedia?: boolean;
                        type?: string;
                        unlisted?: boolean;
                        galleryImages?: string[];
                        isImage?: boolean;
                    } | undefined;
                    subreddit?: {
                        id?: string;
                        name?: string;
                        nsfw?: boolean;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType;
                        spam?: boolean;
                        quarantined?: boolean;
                        topics?: string[];
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating;
                        subscribersCount?: number;
                        permalink?: string;
                    } | undefined;
                    reason?: string;
                } | undefined): PostReport;
                fromPartial(object: {
                    post?: {
                        id?: string;
                        title?: string;
                        selftext?: string;
                        nsfw?: boolean;
                        authorId?: string;
                        crowdControlLevel?: import("../../../reddit/v2alpha/postv2.js").CrowdControlLevel;
                        numReports?: number;
                        isGallery?: boolean;
                        isMeta?: boolean;
                        createdAt?: number;
                        isApproved?: boolean;
                        isArchived?: boolean;
                        distinguished?: import("../../../reddit/v2alpha/postv2.js").DistinguishType;
                        ignoreReports?: boolean;
                        isSelf?: boolean;
                        isVideo?: boolean;
                        isLocked?: boolean;
                        isSpoiler?: boolean;
                        subredditId?: string;
                        upvotes?: number;
                        downvotes?: number;
                        url?: string;
                        isSticky?: boolean;
                        linkFlair?: {
                            text?: string;
                            cssClass?: string;
                            backgroundColor?: string;
                            templateId?: string;
                            textColor?: string;
                        } | undefined;
                        authorFlair?: {
                            userId?: string;
                            subredditId?: string;
                            text?: string;
                            cssClass?: string;
                            templateId?: string;
                            textColor?: string;
                            backgroundColor?: string;
                            enabled?: boolean;
                        } | undefined;
                        spam?: boolean;
                        deleted?: boolean;
                        languageCode?: string;
                        updatedAt?: number;
                        gildings?: number;
                        score?: number;
                        numComments?: number;
                        thumbnail?: string;
                        media?: {
                            type?: string;
                            oembed?: {
                                type?: string;
                                version?: string;
                                title?: string;
                                description?: string;
                                authorName?: string;
                                authorUrl?: string;
                                providerName?: string;
                                providerUrl?: string;
                                thumbnailUrl?: string;
                                thumbnailWidth?: number;
                                thumbnailHeight?: number;
                                html?: string;
                                width?: number;
                                height?: number;
                            } | undefined;
                            redditVideo?: {
                                bitrateKbps?: number;
                                fallbackUrl?: string;
                                height?: number;
                                width?: number;
                                scrubberMediaUrl?: string;
                                dashUrl?: string;
                                duration?: number;
                                hlsUrl?: string;
                                isGif?: boolean;
                                transcodingStatus?: string;
                            } | undefined;
                        } | undefined;
                        crosspostParentId?: string;
                        permalink?: string;
                        isPoll?: boolean;
                        isPromoted?: boolean;
                        isMultiMedia?: boolean;
                        type?: string;
                        unlisted?: boolean;
                        galleryImages?: string[];
                        isImage?: boolean;
                    } | undefined;
                    subreddit?: {
                        id?: string;
                        name?: string;
                        nsfw?: boolean;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType;
                        spam?: boolean;
                        quarantined?: boolean;
                        topics?: string[];
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating;
                        subscribersCount?: number;
                        permalink?: string;
                    } | undefined;
                    reason?: string;
                }): PostReport;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.automation.v1alpha.HandlerResult";
                encode(_: HandlerResult, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): HandlerResult;
                fromJSON(_: any): HandlerResult;
                toJSON(_: HandlerResult): unknown;
                create(base?: DeepPartial<HandlerResult>): HandlerResult;
                fromPartial(_: DeepPartial<HandlerResult>): HandlerResult;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
export interface OnPostFlairUpdate {
    OnPostFlairUpdate(request: PostFlairUpdate, metadata?: Metadata): Promise<HandlerResult>;
}
export declare const OnPostFlairUpdateServiceName = "devvit.actor.automation.v1alpha.OnPostFlairUpdate";
export declare class OnPostFlairUpdateClientImpl implements OnPostFlairUpdate {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    OnPostFlairUpdate(request: PostFlairUpdate, metadata?: Metadata): Promise<HandlerResult>;
}
export type OnPostFlairUpdateDefinition = typeof OnPostFlairUpdateDefinition;
export declare const OnPostFlairUpdateDefinition: {
    readonly name: "OnPostFlairUpdate";
    readonly fullName: "devvit.actor.automation.v1alpha.OnPostFlairUpdate";
    readonly methods: {
        readonly onPostFlairUpdate: {
            readonly name: "OnPostFlairUpdate";
            readonly requestType: {
                $type: "devvit.events.v1alpha.PostFlairUpdate";
                encode(message: PostFlairUpdate, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PostFlairUpdate;
                fromJSON(object: any): PostFlairUpdate;
                toJSON(message: PostFlairUpdate): unknown;
                create(base?: {
                    post?: {
                        id?: string;
                        title?: string;
                        selftext?: string;
                        nsfw?: boolean;
                        authorId?: string;
                        crowdControlLevel?: import("../../../reddit/v2alpha/postv2.js").CrowdControlLevel;
                        numReports?: number;
                        isGallery?: boolean;
                        isMeta?: boolean;
                        createdAt?: number;
                        isApproved?: boolean;
                        isArchived?: boolean;
                        distinguished?: import("../../../reddit/v2alpha/postv2.js").DistinguishType;
                        ignoreReports?: boolean;
                        isSelf?: boolean;
                        isVideo?: boolean;
                        isLocked?: boolean;
                        isSpoiler?: boolean;
                        subredditId?: string;
                        upvotes?: number;
                        downvotes?: number;
                        url?: string;
                        isSticky?: boolean;
                        linkFlair?: {
                            text?: string;
                            cssClass?: string;
                            backgroundColor?: string;
                            templateId?: string;
                            textColor?: string;
                        } | undefined;
                        authorFlair?: {
                            userId?: string;
                            subredditId?: string;
                            text?: string;
                            cssClass?: string;
                            templateId?: string;
                            textColor?: string;
                            backgroundColor?: string;
                            enabled?: boolean;
                        } | undefined;
                        spam?: boolean;
                        deleted?: boolean;
                        languageCode?: string;
                        updatedAt?: number;
                        gildings?: number;
                        score?: number;
                        numComments?: number;
                        thumbnail?: string;
                        media?: {
                            type?: string;
                            oembed?: {
                                type?: string;
                                version?: string;
                                title?: string;
                                description?: string;
                                authorName?: string;
                                authorUrl?: string;
                                providerName?: string;
                                providerUrl?: string;
                                thumbnailUrl?: string;
                                thumbnailWidth?: number;
                                thumbnailHeight?: number;
                                html?: string;
                                width?: number;
                                height?: number;
                            } | undefined;
                            redditVideo?: {
                                bitrateKbps?: number;
                                fallbackUrl?: string;
                                height?: number;
                                width?: number;
                                scrubberMediaUrl?: string;
                                dashUrl?: string;
                                duration?: number;
                                hlsUrl?: string;
                                isGif?: boolean;
                                transcodingStatus?: string;
                            } | undefined;
                        } | undefined;
                        crosspostParentId?: string;
                        permalink?: string;
                        isPoll?: boolean;
                        isPromoted?: boolean;
                        isMultiMedia?: boolean;
                        type?: string;
                        unlisted?: boolean;
                        galleryImages?: string[];
                        isImage?: boolean;
                    } | undefined;
                    author?: {
                        id?: string;
                        name?: string;
                        isGold?: boolean;
                        snoovatarImage?: string;
                        url?: string;
                        spam?: boolean;
                        banned?: boolean;
                        flair?: {
                            userId?: string;
                            subredditId?: string;
                            text?: string;
                            cssClass?: string;
                            templateId?: string;
                            textColor?: string;
                            backgroundColor?: string;
                            enabled?: boolean;
                        } | undefined;
                        karma?: number;
                        iconImage?: string;
                        description?: string;
                        suspended?: boolean;
                    } | undefined;
                    subreddit?: {
                        id?: string;
                        name?: string;
                        nsfw?: boolean;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType;
                        spam?: boolean;
                        quarantined?: boolean;
                        topics?: string[];
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating;
                        subscribersCount?: number;
                        permalink?: string;
                    } | undefined;
                } | undefined): PostFlairUpdate;
                fromPartial(object: {
                    post?: {
                        id?: string;
                        title?: string;
                        selftext?: string;
                        nsfw?: boolean;
                        authorId?: string;
                        crowdControlLevel?: import("../../../reddit/v2alpha/postv2.js").CrowdControlLevel;
                        numReports?: number;
                        isGallery?: boolean;
                        isMeta?: boolean;
                        createdAt?: number;
                        isApproved?: boolean;
                        isArchived?: boolean;
                        distinguished?: import("../../../reddit/v2alpha/postv2.js").DistinguishType;
                        ignoreReports?: boolean;
                        isSelf?: boolean;
                        isVideo?: boolean;
                        isLocked?: boolean;
                        isSpoiler?: boolean;
                        subredditId?: string;
                        upvotes?: number;
                        downvotes?: number;
                        url?: string;
                        isSticky?: boolean;
                        linkFlair?: {
                            text?: string;
                            cssClass?: string;
                            backgroundColor?: string;
                            templateId?: string;
                            textColor?: string;
                        } | undefined;
                        authorFlair?: {
                            userId?: string;
                            subredditId?: string;
                            text?: string;
                            cssClass?: string;
                            templateId?: string;
                            textColor?: string;
                            backgroundColor?: string;
                            enabled?: boolean;
                        } | undefined;
                        spam?: boolean;
                        deleted?: boolean;
                        languageCode?: string;
                        updatedAt?: number;
                        gildings?: number;
                        score?: number;
                        numComments?: number;
                        thumbnail?: string;
                        media?: {
                            type?: string;
                            oembed?: {
                                type?: string;
                                version?: string;
                                title?: string;
                                description?: string;
                                authorName?: string;
                                authorUrl?: string;
                                providerName?: string;
                                providerUrl?: string;
                                thumbnailUrl?: string;
                                thumbnailWidth?: number;
                                thumbnailHeight?: number;
                                html?: string;
                                width?: number;
                                height?: number;
                            } | undefined;
                            redditVideo?: {
                                bitrateKbps?: number;
                                fallbackUrl?: string;
                                height?: number;
                                width?: number;
                                scrubberMediaUrl?: string;
                                dashUrl?: string;
                                duration?: number;
                                hlsUrl?: string;
                                isGif?: boolean;
                                transcodingStatus?: string;
                            } | undefined;
                        } | undefined;
                        crosspostParentId?: string;
                        permalink?: string;
                        isPoll?: boolean;
                        isPromoted?: boolean;
                        isMultiMedia?: boolean;
                        type?: string;
                        unlisted?: boolean;
                        galleryImages?: string[];
                        isImage?: boolean;
                    } | undefined;
                    author?: {
                        id?: string;
                        name?: string;
                        isGold?: boolean;
                        snoovatarImage?: string;
                        url?: string;
                        spam?: boolean;
                        banned?: boolean;
                        flair?: {
                            userId?: string;
                            subredditId?: string;
                            text?: string;
                            cssClass?: string;
                            templateId?: string;
                            textColor?: string;
                            backgroundColor?: string;
                            enabled?: boolean;
                        } | undefined;
                        karma?: number;
                        iconImage?: string;
                        description?: string;
                        suspended?: boolean;
                    } | undefined;
                    subreddit?: {
                        id?: string;
                        name?: string;
                        nsfw?: boolean;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType;
                        spam?: boolean;
                        quarantined?: boolean;
                        topics?: string[];
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating;
                        subscribersCount?: number;
                        permalink?: string;
                    } | undefined;
                }): PostFlairUpdate;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.automation.v1alpha.HandlerResult";
                encode(_: HandlerResult, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): HandlerResult;
                fromJSON(_: any): HandlerResult;
                toJSON(_: HandlerResult): unknown;
                create(base?: DeepPartial<HandlerResult>): HandlerResult;
                fromPartial(_: DeepPartial<HandlerResult>): HandlerResult;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
export interface OnPostDelete {
    OnPostDelete(request: PostDelete, metadata?: Metadata): Promise<HandlerResult>;
}
export declare const OnPostDeleteServiceName = "devvit.actor.automation.v1alpha.OnPostDelete";
export declare class OnPostDeleteClientImpl implements OnPostDelete {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    OnPostDelete(request: PostDelete, metadata?: Metadata): Promise<HandlerResult>;
}
export type OnPostDeleteDefinition = typeof OnPostDeleteDefinition;
export declare const OnPostDeleteDefinition: {
    readonly name: "OnPostDelete";
    readonly fullName: "devvit.actor.automation.v1alpha.OnPostDelete";
    readonly methods: {
        readonly onPostDelete: {
            readonly name: "OnPostDelete";
            readonly requestType: {
                $type: "devvit.events.v1alpha.PostDelete";
                encode(message: PostDelete, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PostDelete;
                fromJSON(object: any): PostDelete;
                toJSON(message: PostDelete): unknown;
                create(base?: {
                    postId?: string;
                    deletedAt?: Date | undefined;
                    author?: {
                        id?: string;
                        name?: string;
                        isGold?: boolean;
                        snoovatarImage?: string;
                        url?: string;
                        spam?: boolean;
                        banned?: boolean;
                        flair?: {
                            userId?: string;
                            subredditId?: string;
                            text?: string;
                            cssClass?: string;
                            templateId?: string;
                            textColor?: string;
                            backgroundColor?: string;
                            enabled?: boolean;
                        } | undefined;
                        karma?: number;
                        iconImage?: string;
                        description?: string;
                        suspended?: boolean;
                    } | undefined;
                    createdAt?: Date | undefined;
                    source?: import("../../../events/v1alpha/events.js").EventSource;
                    reason?: import("../../../events/v1alpha/events.js").DeletionReason;
                    subreddit?: {
                        id?: string;
                        name?: string;
                        nsfw?: boolean;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType;
                        spam?: boolean;
                        quarantined?: boolean;
                        topics?: string[];
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating;
                        subscribersCount?: number;
                        permalink?: string;
                    } | undefined;
                } | undefined): PostDelete;
                fromPartial(object: {
                    postId?: string;
                    deletedAt?: Date | undefined;
                    author?: {
                        id?: string;
                        name?: string;
                        isGold?: boolean;
                        snoovatarImage?: string;
                        url?: string;
                        spam?: boolean;
                        banned?: boolean;
                        flair?: {
                            userId?: string;
                            subredditId?: string;
                            text?: string;
                            cssClass?: string;
                            templateId?: string;
                            textColor?: string;
                            backgroundColor?: string;
                            enabled?: boolean;
                        } | undefined;
                        karma?: number;
                        iconImage?: string;
                        description?: string;
                        suspended?: boolean;
                    } | undefined;
                    createdAt?: Date | undefined;
                    source?: import("../../../events/v1alpha/events.js").EventSource;
                    reason?: import("../../../events/v1alpha/events.js").DeletionReason;
                    subreddit?: {
                        id?: string;
                        name?: string;
                        nsfw?: boolean;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType;
                        spam?: boolean;
                        quarantined?: boolean;
                        topics?: string[];
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating;
                        subscribersCount?: number;
                        permalink?: string;
                    } | undefined;
                }): PostDelete;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.automation.v1alpha.HandlerResult";
                encode(_: HandlerResult, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): HandlerResult;
                fromJSON(_: any): HandlerResult;
                toJSON(_: HandlerResult): unknown;
                create(base?: DeepPartial<HandlerResult>): HandlerResult;
                fromPartial(_: DeepPartial<HandlerResult>): HandlerResult;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
export interface OnPostApprove {
    OnPostApprove(request: PostApprove, metadata?: Metadata): Promise<HandlerResult>;
}
export declare const OnPostApproveServiceName = "devvit.actor.automation.v1alpha.OnPostApprove";
export declare class OnPostApproveClientImpl implements OnPostApprove {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    OnPostApprove(request: PostApprove, metadata?: Metadata): Promise<HandlerResult>;
}
export type OnPostApproveDefinition = typeof OnPostApproveDefinition;
export declare const OnPostApproveDefinition: {
    readonly name: "OnPostApprove";
    readonly fullName: "devvit.actor.automation.v1alpha.OnPostApprove";
    readonly methods: {
        readonly onPostApprove: {
            readonly name: "OnPostApprove";
            readonly requestType: {
                $type: "devvit.events.v1alpha.PostApprove";
                encode(message: PostApprove, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PostApprove;
                fromJSON(object: any): PostApprove;
                toJSON(message: PostApprove): unknown;
                create(base?: {
                    post?: {
                        id?: string;
                        title?: string;
                        selftext?: string;
                        nsfw?: boolean;
                        authorId?: string;
                        crowdControlLevel?: import("../../../reddit/v2alpha/postv2.js").CrowdControlLevel;
                        numReports?: number;
                        isGallery?: boolean;
                        isMeta?: boolean;
                        createdAt?: number;
                        isApproved?: boolean;
                        isArchived?: boolean;
                        distinguished?: import("../../../reddit/v2alpha/postv2.js").DistinguishType;
                        ignoreReports?: boolean;
                        isSelf?: boolean;
                        isVideo?: boolean;
                        isLocked?: boolean;
                        isSpoiler?: boolean;
                        subredditId?: string;
                        upvotes?: number;
                        downvotes?: number;
                        url?: string;
                        isSticky?: boolean;
                        linkFlair?: {
                            text?: string;
                            cssClass?: string;
                            backgroundColor?: string;
                            templateId?: string;
                            textColor?: string;
                        } | undefined;
                        authorFlair?: {
                            userId?: string;
                            subredditId?: string;
                            text?: string;
                            cssClass?: string;
                            templateId?: string;
                            textColor?: string;
                            backgroundColor?: string;
                            enabled?: boolean;
                        } | undefined;
                        spam?: boolean;
                        deleted?: boolean;
                        languageCode?: string;
                        updatedAt?: number;
                        gildings?: number;
                        score?: number;
                        numComments?: number;
                        thumbnail?: string;
                        media?: {
                            type?: string;
                            oembed?: {
                                type?: string;
                                version?: string;
                                title?: string;
                                description?: string;
                                authorName?: string;
                                authorUrl?: string;
                                providerName?: string;
                                providerUrl?: string;
                                thumbnailUrl?: string;
                                thumbnailWidth?: number;
                                thumbnailHeight?: number;
                                html?: string;
                                width?: number;
                                height?: number;
                            } | undefined;
                            redditVideo?: {
                                bitrateKbps?: number;
                                fallbackUrl?: string;
                                height?: number;
                                width?: number;
                                scrubberMediaUrl?: string;
                                dashUrl?: string;
                                duration?: number;
                                hlsUrl?: string;
                                isGif?: boolean;
                                transcodingStatus?: string;
                            } | undefined;
                        } | undefined;
                        crosspostParentId?: string;
                        permalink?: string;
                        isPoll?: boolean;
                        isPromoted?: boolean;
                        isMultiMedia?: boolean;
                        type?: string;
                        unlisted?: boolean;
                        galleryImages?: string[];
                        isImage?: boolean;
                    } | undefined;
                    approvedAt?: Date | undefined;
                    author?: {
                        id?: string;
                        name?: string;
                        isGold?: boolean;
                        snoovatarImage?: string;
                        url?: string;
                        spam?: boolean;
                        banned?: boolean;
                        flair?: {
                            userId?: string;
                            subredditId?: string;
                            text?: string;
                            cssClass?: string;
                            templateId?: string;
                            textColor?: string;
                            backgroundColor?: string;
                            enabled?: boolean;
                        } | undefined;
                        karma?: number;
                        iconImage?: string;
                        description?: string;
                        suspended?: boolean;
                    } | undefined;
                    source?: import("../../../events/v1alpha/events.js").EventSource;
                    subreddit?: {
                        id?: string;
                        name?: string;
                        nsfw?: boolean;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType;
                        spam?: boolean;
                        quarantined?: boolean;
                        topics?: string[];
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating;
                        subscribersCount?: number;
                        permalink?: string;
                    } | undefined;
                } | undefined): PostApprove;
                fromPartial(object: {
                    post?: {
                        id?: string;
                        title?: string;
                        selftext?: string;
                        nsfw?: boolean;
                        authorId?: string;
                        crowdControlLevel?: import("../../../reddit/v2alpha/postv2.js").CrowdControlLevel;
                        numReports?: number;
                        isGallery?: boolean;
                        isMeta?: boolean;
                        createdAt?: number;
                        isApproved?: boolean;
                        isArchived?: boolean;
                        distinguished?: import("../../../reddit/v2alpha/postv2.js").DistinguishType;
                        ignoreReports?: boolean;
                        isSelf?: boolean;
                        isVideo?: boolean;
                        isLocked?: boolean;
                        isSpoiler?: boolean;
                        subredditId?: string;
                        upvotes?: number;
                        downvotes?: number;
                        url?: string;
                        isSticky?: boolean;
                        linkFlair?: {
                            text?: string;
                            cssClass?: string;
                            backgroundColor?: string;
                            templateId?: string;
                            textColor?: string;
                        } | undefined;
                        authorFlair?: {
                            userId?: string;
                            subredditId?: string;
                            text?: string;
                            cssClass?: string;
                            templateId?: string;
                            textColor?: string;
                            backgroundColor?: string;
                            enabled?: boolean;
                        } | undefined;
                        spam?: boolean;
                        deleted?: boolean;
                        languageCode?: string;
                        updatedAt?: number;
                        gildings?: number;
                        score?: number;
                        numComments?: number;
                        thumbnail?: string;
                        media?: {
                            type?: string;
                            oembed?: {
                                type?: string;
                                version?: string;
                                title?: string;
                                description?: string;
                                authorName?: string;
                                authorUrl?: string;
                                providerName?: string;
                                providerUrl?: string;
                                thumbnailUrl?: string;
                                thumbnailWidth?: number;
                                thumbnailHeight?: number;
                                html?: string;
                                width?: number;
                                height?: number;
                            } | undefined;
                            redditVideo?: {
                                bitrateKbps?: number;
                                fallbackUrl?: string;
                                height?: number;
                                width?: number;
                                scrubberMediaUrl?: string;
                                dashUrl?: string;
                                duration?: number;
                                hlsUrl?: string;
                                isGif?: boolean;
                                transcodingStatus?: string;
                            } | undefined;
                        } | undefined;
                        crosspostParentId?: string;
                        permalink?: string;
                        isPoll?: boolean;
                        isPromoted?: boolean;
                        isMultiMedia?: boolean;
                        type?: string;
                        unlisted?: boolean;
                        galleryImages?: string[];
                        isImage?: boolean;
                    } | undefined;
                    approvedAt?: Date | undefined;
                    author?: {
                        id?: string;
                        name?: string;
                        isGold?: boolean;
                        snoovatarImage?: string;
                        url?: string;
                        spam?: boolean;
                        banned?: boolean;
                        flair?: {
                            userId?: string;
                            subredditId?: string;
                            text?: string;
                            cssClass?: string;
                            templateId?: string;
                            textColor?: string;
                            backgroundColor?: string;
                            enabled?: boolean;
                        } | undefined;
                        karma?: number;
                        iconImage?: string;
                        description?: string;
                        suspended?: boolean;
                    } | undefined;
                    source?: import("../../../events/v1alpha/events.js").EventSource;
                    subreddit?: {
                        id?: string;
                        name?: string;
                        nsfw?: boolean;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType;
                        spam?: boolean;
                        quarantined?: boolean;
                        topics?: string[];
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating;
                        subscribersCount?: number;
                        permalink?: string;
                    } | undefined;
                }): PostApprove;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.automation.v1alpha.HandlerResult";
                encode(_: HandlerResult, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): HandlerResult;
                fromJSON(_: any): HandlerResult;
                toJSON(_: HandlerResult): unknown;
                create(base?: DeepPartial<HandlerResult>): HandlerResult;
                fromPartial(_: DeepPartial<HandlerResult>): HandlerResult;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
export interface OnCommentSubmit {
    OnCommentSubmit(request: CommentSubmit, metadata?: Metadata): Promise<HandlerResult>;
}
export declare const OnCommentSubmitServiceName = "devvit.actor.automation.v1alpha.OnCommentSubmit";
export declare class OnCommentSubmitClientImpl implements OnCommentSubmit {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    OnCommentSubmit(request: CommentSubmit, metadata?: Metadata): Promise<HandlerResult>;
}
export type OnCommentSubmitDefinition = typeof OnCommentSubmitDefinition;
export declare const OnCommentSubmitDefinition: {
    readonly name: "OnCommentSubmit";
    readonly fullName: "devvit.actor.automation.v1alpha.OnCommentSubmit";
    readonly methods: {
        readonly onCommentSubmit: {
            readonly name: "OnCommentSubmit";
            readonly requestType: {
                $type: "devvit.events.v1alpha.CommentSubmit";
                encode(message: CommentSubmit, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): CommentSubmit;
                fromJSON(object: any): CommentSubmit;
                toJSON(message: CommentSubmit): unknown;
                create(base?: {
                    comment?: {
                        id?: string;
                        parentId?: string;
                        body?: string;
                        author?: string;
                        numReports?: number;
                        collapsedBecauseCrowdControl?: boolean;
                        spam?: boolean;
                        deleted?: boolean;
                        createdAt?: number;
                        upvotes?: number;
                        downvotes?: number;
                        languageCode?: string;
                        lastModifiedAt?: number;
                        gilded?: boolean;
                        score?: number;
                        permalink?: string;
                        hasMedia?: boolean;
                        postId?: string;
                        subredditId?: string;
                        elementTypes?: string[];
                    } | undefined;
                    author?: {
                        id?: string;
                        name?: string;
                        isGold?: boolean;
                        snoovatarImage?: string;
                        url?: string;
                        spam?: boolean;
                        banned?: boolean;
                        flair?: {
                            userId?: string;
                            subredditId?: string;
                            text?: string;
                            cssClass?: string;
                            templateId?: string;
                            textColor?: string;
                            backgroundColor?: string;
                            enabled?: boolean;
                        } | undefined;
                        karma?: number;
                        iconImage?: string;
                        description?: string;
                        suspended?: boolean;
                    } | undefined;
                    post?: {
                        id?: string;
                        title?: string;
                        selftext?: string;
                        nsfw?: boolean;
                        authorId?: string;
                        crowdControlLevel?: import("../../../reddit/v2alpha/postv2.js").CrowdControlLevel;
                        numReports?: number;
                        isGallery?: boolean;
                        isMeta?: boolean;
                        createdAt?: number;
                        isApproved?: boolean;
                        isArchived?: boolean;
                        distinguished?: import("../../../reddit/v2alpha/postv2.js").DistinguishType;
                        ignoreReports?: boolean;
                        isSelf?: boolean;
                        isVideo?: boolean;
                        isLocked?: boolean;
                        isSpoiler?: boolean;
                        subredditId?: string;
                        upvotes?: number;
                        downvotes?: number;
                        url?: string;
                        isSticky?: boolean;
                        linkFlair?: {
                            text?: string;
                            cssClass?: string;
                            backgroundColor?: string;
                            templateId?: string;
                            textColor?: string;
                        } | undefined;
                        authorFlair?: {
                            userId?: string;
                            subredditId?: string;
                            text?: string;
                            cssClass?: string;
                            templateId?: string;
                            textColor?: string;
                            backgroundColor?: string;
                            enabled?: boolean;
                        } | undefined;
                        spam?: boolean;
                        deleted?: boolean;
                        languageCode?: string;
                        updatedAt?: number;
                        gildings?: number;
                        score?: number;
                        numComments?: number;
                        thumbnail?: string;
                        media?: {
                            type?: string;
                            oembed?: {
                                type?: string;
                                version?: string;
                                title?: string;
                                description?: string;
                                authorName?: string;
                                authorUrl?: string;
                                providerName?: string;
                                providerUrl?: string;
                                thumbnailUrl?: string;
                                thumbnailWidth?: number;
                                thumbnailHeight?: number;
                                html?: string;
                                width?: number;
                                height?: number;
                            } | undefined;
                            redditVideo?: {
                                bitrateKbps?: number;
                                fallbackUrl?: string;
                                height?: number;
                                width?: number;
                                scrubberMediaUrl?: string;
                                dashUrl?: string;
                                duration?: number;
                                hlsUrl?: string;
                                isGif?: boolean;
                                transcodingStatus?: string;
                            } | undefined;
                        } | undefined;
                        crosspostParentId?: string;
                        permalink?: string;
                        isPoll?: boolean;
                        isPromoted?: boolean;
                        isMultiMedia?: boolean;
                        type?: string;
                        unlisted?: boolean;
                        galleryImages?: string[];
                        isImage?: boolean;
                    } | undefined;
                    subreddit?: {
                        id?: string;
                        name?: string;
                        nsfw?: boolean;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType;
                        spam?: boolean;
                        quarantined?: boolean;
                        topics?: string[];
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating;
                        subscribersCount?: number;
                        permalink?: string;
                    } | undefined;
                } | undefined): CommentSubmit;
                fromPartial(object: {
                    comment?: {
                        id?: string;
                        parentId?: string;
                        body?: string;
                        author?: string;
                        numReports?: number;
                        collapsedBecauseCrowdControl?: boolean;
                        spam?: boolean;
                        deleted?: boolean;
                        createdAt?: number;
                        upvotes?: number;
                        downvotes?: number;
                        languageCode?: string;
                        lastModifiedAt?: number;
                        gilded?: boolean;
                        score?: number;
                        permalink?: string;
                        hasMedia?: boolean;
                        postId?: string;
                        subredditId?: string;
                        elementTypes?: string[];
                    } | undefined;
                    author?: {
                        id?: string;
                        name?: string;
                        isGold?: boolean;
                        snoovatarImage?: string;
                        url?: string;
                        spam?: boolean;
                        banned?: boolean;
                        flair?: {
                            userId?: string;
                            subredditId?: string;
                            text?: string;
                            cssClass?: string;
                            templateId?: string;
                            textColor?: string;
                            backgroundColor?: string;
                            enabled?: boolean;
                        } | undefined;
                        karma?: number;
                        iconImage?: string;
                        description?: string;
                        suspended?: boolean;
                    } | undefined;
                    post?: {
                        id?: string;
                        title?: string;
                        selftext?: string;
                        nsfw?: boolean;
                        authorId?: string;
                        crowdControlLevel?: import("../../../reddit/v2alpha/postv2.js").CrowdControlLevel;
                        numReports?: number;
                        isGallery?: boolean;
                        isMeta?: boolean;
                        createdAt?: number;
                        isApproved?: boolean;
                        isArchived?: boolean;
                        distinguished?: import("../../../reddit/v2alpha/postv2.js").DistinguishType;
                        ignoreReports?: boolean;
                        isSelf?: boolean;
                        isVideo?: boolean;
                        isLocked?: boolean;
                        isSpoiler?: boolean;
                        subredditId?: string;
                        upvotes?: number;
                        downvotes?: number;
                        url?: string;
                        isSticky?: boolean;
                        linkFlair?: {
                            text?: string;
                            cssClass?: string;
                            backgroundColor?: string;
                            templateId?: string;
                            textColor?: string;
                        } | undefined;
                        authorFlair?: {
                            userId?: string;
                            subredditId?: string;
                            text?: string;
                            cssClass?: string;
                            templateId?: string;
                            textColor?: string;
                            backgroundColor?: string;
                            enabled?: boolean;
                        } | undefined;
                        spam?: boolean;
                        deleted?: boolean;
                        languageCode?: string;
                        updatedAt?: number;
                        gildings?: number;
                        score?: number;
                        numComments?: number;
                        thumbnail?: string;
                        media?: {
                            type?: string;
                            oembed?: {
                                type?: string;
                                version?: string;
                                title?: string;
                                description?: string;
                                authorName?: string;
                                authorUrl?: string;
                                providerName?: string;
                                providerUrl?: string;
                                thumbnailUrl?: string;
                                thumbnailWidth?: number;
                                thumbnailHeight?: number;
                                html?: string;
                                width?: number;
                                height?: number;
                            } | undefined;
                            redditVideo?: {
                                bitrateKbps?: number;
                                fallbackUrl?: string;
                                height?: number;
                                width?: number;
                                scrubberMediaUrl?: string;
                                dashUrl?: string;
                                duration?: number;
                                hlsUrl?: string;
                                isGif?: boolean;
                                transcodingStatus?: string;
                            } | undefined;
                        } | undefined;
                        crosspostParentId?: string;
                        permalink?: string;
                        isPoll?: boolean;
                        isPromoted?: boolean;
                        isMultiMedia?: boolean;
                        type?: string;
                        unlisted?: boolean;
                        galleryImages?: string[];
                        isImage?: boolean;
                    } | undefined;
                    subreddit?: {
                        id?: string;
                        name?: string;
                        nsfw?: boolean;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType;
                        spam?: boolean;
                        quarantined?: boolean;
                        topics?: string[];
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating;
                        subscribersCount?: number;
                        permalink?: string;
                    } | undefined;
                }): CommentSubmit;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.automation.v1alpha.HandlerResult";
                encode(_: HandlerResult, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): HandlerResult;
                fromJSON(_: any): HandlerResult;
                toJSON(_: HandlerResult): unknown;
                create(base?: DeepPartial<HandlerResult>): HandlerResult;
                fromPartial(_: DeepPartial<HandlerResult>): HandlerResult;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
export interface OnCommentCreate {
    OnCommentCreate(request: CommentCreate, metadata?: Metadata): Promise<HandlerResult>;
}
export declare const OnCommentCreateServiceName = "devvit.actor.automation.v1alpha.OnCommentCreate";
export declare class OnCommentCreateClientImpl implements OnCommentCreate {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    OnCommentCreate(request: CommentCreate, metadata?: Metadata): Promise<HandlerResult>;
}
export type OnCommentCreateDefinition = typeof OnCommentCreateDefinition;
export declare const OnCommentCreateDefinition: {
    readonly name: "OnCommentCreate";
    readonly fullName: "devvit.actor.automation.v1alpha.OnCommentCreate";
    readonly methods: {
        readonly onCommentCreate: {
            readonly name: "OnCommentCreate";
            readonly requestType: {
                $type: "devvit.events.v1alpha.CommentCreate";
                encode(message: CommentCreate, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): CommentCreate;
                fromJSON(object: any): CommentCreate;
                toJSON(message: CommentCreate): unknown;
                create(base?: {
                    comment?: {
                        id?: string;
                        parentId?: string;
                        body?: string;
                        author?: string;
                        numReports?: number;
                        collapsedBecauseCrowdControl?: boolean;
                        spam?: boolean;
                        deleted?: boolean;
                        createdAt?: number;
                        upvotes?: number;
                        downvotes?: number;
                        languageCode?: string;
                        lastModifiedAt?: number;
                        gilded?: boolean;
                        score?: number;
                        permalink?: string;
                        hasMedia?: boolean;
                        postId?: string;
                        subredditId?: string;
                        elementTypes?: string[];
                    } | undefined;
                    author?: {
                        id?: string;
                        name?: string;
                        isGold?: boolean;
                        snoovatarImage?: string;
                        url?: string;
                        spam?: boolean;
                        banned?: boolean;
                        flair?: {
                            userId?: string;
                            subredditId?: string;
                            text?: string;
                            cssClass?: string;
                            templateId?: string;
                            textColor?: string;
                            backgroundColor?: string;
                            enabled?: boolean;
                        } | undefined;
                        karma?: number;
                        iconImage?: string;
                        description?: string;
                        suspended?: boolean;
                    } | undefined;
                    post?: {
                        id?: string;
                        title?: string;
                        selftext?: string;
                        nsfw?: boolean;
                        authorId?: string;
                        crowdControlLevel?: import("../../../reddit/v2alpha/postv2.js").CrowdControlLevel;
                        numReports?: number;
                        isGallery?: boolean;
                        isMeta?: boolean;
                        createdAt?: number;
                        isApproved?: boolean;
                        isArchived?: boolean;
                        distinguished?: import("../../../reddit/v2alpha/postv2.js").DistinguishType;
                        ignoreReports?: boolean;
                        isSelf?: boolean;
                        isVideo?: boolean;
                        isLocked?: boolean;
                        isSpoiler?: boolean;
                        subredditId?: string;
                        upvotes?: number;
                        downvotes?: number;
                        url?: string;
                        isSticky?: boolean;
                        linkFlair?: {
                            text?: string;
                            cssClass?: string;
                            backgroundColor?: string;
                            templateId?: string;
                            textColor?: string;
                        } | undefined;
                        authorFlair?: {
                            userId?: string;
                            subredditId?: string;
                            text?: string;
                            cssClass?: string;
                            templateId?: string;
                            textColor?: string;
                            backgroundColor?: string;
                            enabled?: boolean;
                        } | undefined;
                        spam?: boolean;
                        deleted?: boolean;
                        languageCode?: string;
                        updatedAt?: number;
                        gildings?: number;
                        score?: number;
                        numComments?: number;
                        thumbnail?: string;
                        media?: {
                            type?: string;
                            oembed?: {
                                type?: string;
                                version?: string;
                                title?: string;
                                description?: string;
                                authorName?: string;
                                authorUrl?: string;
                                providerName?: string;
                                providerUrl?: string;
                                thumbnailUrl?: string;
                                thumbnailWidth?: number;
                                thumbnailHeight?: number;
                                html?: string;
                                width?: number;
                                height?: number;
                            } | undefined;
                            redditVideo?: {
                                bitrateKbps?: number;
                                fallbackUrl?: string;
                                height?: number;
                                width?: number;
                                scrubberMediaUrl?: string;
                                dashUrl?: string;
                                duration?: number;
                                hlsUrl?: string;
                                isGif?: boolean;
                                transcodingStatus?: string;
                            } | undefined;
                        } | undefined;
                        crosspostParentId?: string;
                        permalink?: string;
                        isPoll?: boolean;
                        isPromoted?: boolean;
                        isMultiMedia?: boolean;
                        type?: string;
                        unlisted?: boolean;
                        galleryImages?: string[];
                        isImage?: boolean;
                    } | undefined;
                    subreddit?: {
                        id?: string;
                        name?: string;
                        nsfw?: boolean;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType;
                        spam?: boolean;
                        quarantined?: boolean;
                        topics?: string[];
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating;
                        subscribersCount?: number;
                        permalink?: string;
                    } | undefined;
                } | undefined): CommentCreate;
                fromPartial(object: {
                    comment?: {
                        id?: string;
                        parentId?: string;
                        body?: string;
                        author?: string;
                        numReports?: number;
                        collapsedBecauseCrowdControl?: boolean;
                        spam?: boolean;
                        deleted?: boolean;
                        createdAt?: number;
                        upvotes?: number;
                        downvotes?: number;
                        languageCode?: string;
                        lastModifiedAt?: number;
                        gilded?: boolean;
                        score?: number;
                        permalink?: string;
                        hasMedia?: boolean;
                        postId?: string;
                        subredditId?: string;
                        elementTypes?: string[];
                    } | undefined;
                    author?: {
                        id?: string;
                        name?: string;
                        isGold?: boolean;
                        snoovatarImage?: string;
                        url?: string;
                        spam?: boolean;
                        banned?: boolean;
                        flair?: {
                            userId?: string;
                            subredditId?: string;
                            text?: string;
                            cssClass?: string;
                            templateId?: string;
                            textColor?: string;
                            backgroundColor?: string;
                            enabled?: boolean;
                        } | undefined;
                        karma?: number;
                        iconImage?: string;
                        description?: string;
                        suspended?: boolean;
                    } | undefined;
                    post?: {
                        id?: string;
                        title?: string;
                        selftext?: string;
                        nsfw?: boolean;
                        authorId?: string;
                        crowdControlLevel?: import("../../../reddit/v2alpha/postv2.js").CrowdControlLevel;
                        numReports?: number;
                        isGallery?: boolean;
                        isMeta?: boolean;
                        createdAt?: number;
                        isApproved?: boolean;
                        isArchived?: boolean;
                        distinguished?: import("../../../reddit/v2alpha/postv2.js").DistinguishType;
                        ignoreReports?: boolean;
                        isSelf?: boolean;
                        isVideo?: boolean;
                        isLocked?: boolean;
                        isSpoiler?: boolean;
                        subredditId?: string;
                        upvotes?: number;
                        downvotes?: number;
                        url?: string;
                        isSticky?: boolean;
                        linkFlair?: {
                            text?: string;
                            cssClass?: string;
                            backgroundColor?: string;
                            templateId?: string;
                            textColor?: string;
                        } | undefined;
                        authorFlair?: {
                            userId?: string;
                            subredditId?: string;
                            text?: string;
                            cssClass?: string;
                            templateId?: string;
                            textColor?: string;
                            backgroundColor?: string;
                            enabled?: boolean;
                        } | undefined;
                        spam?: boolean;
                        deleted?: boolean;
                        languageCode?: string;
                        updatedAt?: number;
                        gildings?: number;
                        score?: number;
                        numComments?: number;
                        thumbnail?: string;
                        media?: {
                            type?: string;
                            oembed?: {
                                type?: string;
                                version?: string;
                                title?: string;
                                description?: string;
                                authorName?: string;
                                authorUrl?: string;
                                providerName?: string;
                                providerUrl?: string;
                                thumbnailUrl?: string;
                                thumbnailWidth?: number;
                                thumbnailHeight?: number;
                                html?: string;
                                width?: number;
                                height?: number;
                            } | undefined;
                            redditVideo?: {
                                bitrateKbps?: number;
                                fallbackUrl?: string;
                                height?: number;
                                width?: number;
                                scrubberMediaUrl?: string;
                                dashUrl?: string;
                                duration?: number;
                                hlsUrl?: string;
                                isGif?: boolean;
                                transcodingStatus?: string;
                            } | undefined;
                        } | undefined;
                        crosspostParentId?: string;
                        permalink?: string;
                        isPoll?: boolean;
                        isPromoted?: boolean;
                        isMultiMedia?: boolean;
                        type?: string;
                        unlisted?: boolean;
                        galleryImages?: string[];
                        isImage?: boolean;
                    } | undefined;
                    subreddit?: {
                        id?: string;
                        name?: string;
                        nsfw?: boolean;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType;
                        spam?: boolean;
                        quarantined?: boolean;
                        topics?: string[];
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating;
                        subscribersCount?: number;
                        permalink?: string;
                    } | undefined;
                }): CommentCreate;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.automation.v1alpha.HandlerResult";
                encode(_: HandlerResult, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): HandlerResult;
                fromJSON(_: any): HandlerResult;
                toJSON(_: HandlerResult): unknown;
                create(base?: DeepPartial<HandlerResult>): HandlerResult;
                fromPartial(_: DeepPartial<HandlerResult>): HandlerResult;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
export interface OnCommentUpdate {
    OnCommentUpdate(request: CommentUpdate, metadata?: Metadata): Promise<HandlerResult>;
}
export declare const OnCommentUpdateServiceName = "devvit.actor.automation.v1alpha.OnCommentUpdate";
export declare class OnCommentUpdateClientImpl implements OnCommentUpdate {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    OnCommentUpdate(request: CommentUpdate, metadata?: Metadata): Promise<HandlerResult>;
}
export type OnCommentUpdateDefinition = typeof OnCommentUpdateDefinition;
export declare const OnCommentUpdateDefinition: {
    readonly name: "OnCommentUpdate";
    readonly fullName: "devvit.actor.automation.v1alpha.OnCommentUpdate";
    readonly methods: {
        readonly onCommentUpdate: {
            readonly name: "OnCommentUpdate";
            readonly requestType: {
                $type: "devvit.events.v1alpha.CommentUpdate";
                encode(message: CommentUpdate, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): CommentUpdate;
                fromJSON(object: any): CommentUpdate;
                toJSON(message: CommentUpdate): unknown;
                create(base?: {
                    comment?: {
                        id?: string;
                        parentId?: string;
                        body?: string;
                        author?: string;
                        numReports?: number;
                        collapsedBecauseCrowdControl?: boolean;
                        spam?: boolean;
                        deleted?: boolean;
                        createdAt?: number;
                        upvotes?: number;
                        downvotes?: number;
                        languageCode?: string;
                        lastModifiedAt?: number;
                        gilded?: boolean;
                        score?: number;
                        permalink?: string;
                        hasMedia?: boolean;
                        postId?: string;
                        subredditId?: string;
                        elementTypes?: string[];
                    } | undefined;
                    author?: {
                        id?: string;
                        name?: string;
                        isGold?: boolean;
                        snoovatarImage?: string;
                        url?: string;
                        spam?: boolean;
                        banned?: boolean;
                        flair?: {
                            userId?: string;
                            subredditId?: string;
                            text?: string;
                            cssClass?: string;
                            templateId?: string;
                            textColor?: string;
                            backgroundColor?: string;
                            enabled?: boolean;
                        } | undefined;
                        karma?: number;
                        iconImage?: string;
                        description?: string;
                        suspended?: boolean;
                    } | undefined;
                    post?: {
                        id?: string;
                        title?: string;
                        selftext?: string;
                        nsfw?: boolean;
                        authorId?: string;
                        crowdControlLevel?: import("../../../reddit/v2alpha/postv2.js").CrowdControlLevel;
                        numReports?: number;
                        isGallery?: boolean;
                        isMeta?: boolean;
                        createdAt?: number;
                        isApproved?: boolean;
                        isArchived?: boolean;
                        distinguished?: import("../../../reddit/v2alpha/postv2.js").DistinguishType;
                        ignoreReports?: boolean;
                        isSelf?: boolean;
                        isVideo?: boolean;
                        isLocked?: boolean;
                        isSpoiler?: boolean;
                        subredditId?: string;
                        upvotes?: number;
                        downvotes?: number;
                        url?: string;
                        isSticky?: boolean;
                        linkFlair?: {
                            text?: string;
                            cssClass?: string;
                            backgroundColor?: string;
                            templateId?: string;
                            textColor?: string;
                        } | undefined;
                        authorFlair?: {
                            userId?: string;
                            subredditId?: string;
                            text?: string;
                            cssClass?: string;
                            templateId?: string;
                            textColor?: string;
                            backgroundColor?: string;
                            enabled?: boolean;
                        } | undefined;
                        spam?: boolean;
                        deleted?: boolean;
                        languageCode?: string;
                        updatedAt?: number;
                        gildings?: number;
                        score?: number;
                        numComments?: number;
                        thumbnail?: string;
                        media?: {
                            type?: string;
                            oembed?: {
                                type?: string;
                                version?: string;
                                title?: string;
                                description?: string;
                                authorName?: string;
                                authorUrl?: string;
                                providerName?: string;
                                providerUrl?: string;
                                thumbnailUrl?: string;
                                thumbnailWidth?: number;
                                thumbnailHeight?: number;
                                html?: string;
                                width?: number;
                                height?: number;
                            } | undefined;
                            redditVideo?: {
                                bitrateKbps?: number;
                                fallbackUrl?: string;
                                height?: number;
                                width?: number;
                                scrubberMediaUrl?: string;
                                dashUrl?: string;
                                duration?: number;
                                hlsUrl?: string;
                                isGif?: boolean;
                                transcodingStatus?: string;
                            } | undefined;
                        } | undefined;
                        crosspostParentId?: string;
                        permalink?: string;
                        isPoll?: boolean;
                        isPromoted?: boolean;
                        isMultiMedia?: boolean;
                        type?: string;
                        unlisted?: boolean;
                        galleryImages?: string[];
                        isImage?: boolean;
                    } | undefined;
                    previousBody?: string;
                    subreddit?: {
                        id?: string;
                        name?: string;
                        nsfw?: boolean;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType;
                        spam?: boolean;
                        quarantined?: boolean;
                        topics?: string[];
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating;
                        subscribersCount?: number;
                        permalink?: string;
                    } | undefined;
                } | undefined): CommentUpdate;
                fromPartial(object: {
                    comment?: {
                        id?: string;
                        parentId?: string;
                        body?: string;
                        author?: string;
                        numReports?: number;
                        collapsedBecauseCrowdControl?: boolean;
                        spam?: boolean;
                        deleted?: boolean;
                        createdAt?: number;
                        upvotes?: number;
                        downvotes?: number;
                        languageCode?: string;
                        lastModifiedAt?: number;
                        gilded?: boolean;
                        score?: number;
                        permalink?: string;
                        hasMedia?: boolean;
                        postId?: string;
                        subredditId?: string;
                        elementTypes?: string[];
                    } | undefined;
                    author?: {
                        id?: string;
                        name?: string;
                        isGold?: boolean;
                        snoovatarImage?: string;
                        url?: string;
                        spam?: boolean;
                        banned?: boolean;
                        flair?: {
                            userId?: string;
                            subredditId?: string;
                            text?: string;
                            cssClass?: string;
                            templateId?: string;
                            textColor?: string;
                            backgroundColor?: string;
                            enabled?: boolean;
                        } | undefined;
                        karma?: number;
                        iconImage?: string;
                        description?: string;
                        suspended?: boolean;
                    } | undefined;
                    post?: {
                        id?: string;
                        title?: string;
                        selftext?: string;
                        nsfw?: boolean;
                        authorId?: string;
                        crowdControlLevel?: import("../../../reddit/v2alpha/postv2.js").CrowdControlLevel;
                        numReports?: number;
                        isGallery?: boolean;
                        isMeta?: boolean;
                        createdAt?: number;
                        isApproved?: boolean;
                        isArchived?: boolean;
                        distinguished?: import("../../../reddit/v2alpha/postv2.js").DistinguishType;
                        ignoreReports?: boolean;
                        isSelf?: boolean;
                        isVideo?: boolean;
                        isLocked?: boolean;
                        isSpoiler?: boolean;
                        subredditId?: string;
                        upvotes?: number;
                        downvotes?: number;
                        url?: string;
                        isSticky?: boolean;
                        linkFlair?: {
                            text?: string;
                            cssClass?: string;
                            backgroundColor?: string;
                            templateId?: string;
                            textColor?: string;
                        } | undefined;
                        authorFlair?: {
                            userId?: string;
                            subredditId?: string;
                            text?: string;
                            cssClass?: string;
                            templateId?: string;
                            textColor?: string;
                            backgroundColor?: string;
                            enabled?: boolean;
                        } | undefined;
                        spam?: boolean;
                        deleted?: boolean;
                        languageCode?: string;
                        updatedAt?: number;
                        gildings?: number;
                        score?: number;
                        numComments?: number;
                        thumbnail?: string;
                        media?: {
                            type?: string;
                            oembed?: {
                                type?: string;
                                version?: string;
                                title?: string;
                                description?: string;
                                authorName?: string;
                                authorUrl?: string;
                                providerName?: string;
                                providerUrl?: string;
                                thumbnailUrl?: string;
                                thumbnailWidth?: number;
                                thumbnailHeight?: number;
                                html?: string;
                                width?: number;
                                height?: number;
                            } | undefined;
                            redditVideo?: {
                                bitrateKbps?: number;
                                fallbackUrl?: string;
                                height?: number;
                                width?: number;
                                scrubberMediaUrl?: string;
                                dashUrl?: string;
                                duration?: number;
                                hlsUrl?: string;
                                isGif?: boolean;
                                transcodingStatus?: string;
                            } | undefined;
                        } | undefined;
                        crosspostParentId?: string;
                        permalink?: string;
                        isPoll?: boolean;
                        isPromoted?: boolean;
                        isMultiMedia?: boolean;
                        type?: string;
                        unlisted?: boolean;
                        galleryImages?: string[];
                        isImage?: boolean;
                    } | undefined;
                    previousBody?: string;
                    subreddit?: {
                        id?: string;
                        name?: string;
                        nsfw?: boolean;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType;
                        spam?: boolean;
                        quarantined?: boolean;
                        topics?: string[];
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating;
                        subscribersCount?: number;
                        permalink?: string;
                    } | undefined;
                }): CommentUpdate;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.automation.v1alpha.HandlerResult";
                encode(_: HandlerResult, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): HandlerResult;
                fromJSON(_: any): HandlerResult;
                toJSON(_: HandlerResult): unknown;
                create(base?: DeepPartial<HandlerResult>): HandlerResult;
                fromPartial(_: DeepPartial<HandlerResult>): HandlerResult;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
export interface OnCommentReport {
    OnCommentReport(request: CommentReport, metadata?: Metadata): Promise<HandlerResult>;
}
export declare const OnCommentReportServiceName = "devvit.actor.automation.v1alpha.OnCommentReport";
export declare class OnCommentReportClientImpl implements OnCommentReport {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    OnCommentReport(request: CommentReport, metadata?: Metadata): Promise<HandlerResult>;
}
export type OnCommentReportDefinition = typeof OnCommentReportDefinition;
export declare const OnCommentReportDefinition: {
    readonly name: "OnCommentReport";
    readonly fullName: "devvit.actor.automation.v1alpha.OnCommentReport";
    readonly methods: {
        readonly onCommentReport: {
            readonly name: "OnCommentReport";
            readonly requestType: {
                $type: "devvit.events.v1alpha.CommentReport";
                encode(message: CommentReport, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): CommentReport;
                fromJSON(object: any): CommentReport;
                toJSON(message: CommentReport): unknown;
                create(base?: {
                    comment?: {
                        id?: string;
                        parentId?: string;
                        body?: string;
                        author?: string;
                        numReports?: number;
                        collapsedBecauseCrowdControl?: boolean;
                        spam?: boolean;
                        deleted?: boolean;
                        createdAt?: number;
                        upvotes?: number;
                        downvotes?: number;
                        languageCode?: string;
                        lastModifiedAt?: number;
                        gilded?: boolean;
                        score?: number;
                        permalink?: string;
                        hasMedia?: boolean;
                        postId?: string;
                        subredditId?: string;
                        elementTypes?: string[];
                    } | undefined;
                    subreddit?: {
                        id?: string;
                        name?: string;
                        nsfw?: boolean;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType;
                        spam?: boolean;
                        quarantined?: boolean;
                        topics?: string[];
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating;
                        subscribersCount?: number;
                        permalink?: string;
                    } | undefined;
                    reason?: string;
                } | undefined): CommentReport;
                fromPartial(object: {
                    comment?: {
                        id?: string;
                        parentId?: string;
                        body?: string;
                        author?: string;
                        numReports?: number;
                        collapsedBecauseCrowdControl?: boolean;
                        spam?: boolean;
                        deleted?: boolean;
                        createdAt?: number;
                        upvotes?: number;
                        downvotes?: number;
                        languageCode?: string;
                        lastModifiedAt?: number;
                        gilded?: boolean;
                        score?: number;
                        permalink?: string;
                        hasMedia?: boolean;
                        postId?: string;
                        subredditId?: string;
                        elementTypes?: string[];
                    } | undefined;
                    subreddit?: {
                        id?: string;
                        name?: string;
                        nsfw?: boolean;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType;
                        spam?: boolean;
                        quarantined?: boolean;
                        topics?: string[];
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating;
                        subscribersCount?: number;
                        permalink?: string;
                    } | undefined;
                    reason?: string;
                }): CommentReport;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.automation.v1alpha.HandlerResult";
                encode(_: HandlerResult, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): HandlerResult;
                fromJSON(_: any): HandlerResult;
                toJSON(_: HandlerResult): unknown;
                create(base?: DeepPartial<HandlerResult>): HandlerResult;
                fromPartial(_: DeepPartial<HandlerResult>): HandlerResult;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
export interface OnCommentDelete {
    OnCommentDelete(request: CommentDelete, metadata?: Metadata): Promise<HandlerResult>;
}
export declare const OnCommentDeleteServiceName = "devvit.actor.automation.v1alpha.OnCommentDelete";
export declare class OnCommentDeleteClientImpl implements OnCommentDelete {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    OnCommentDelete(request: CommentDelete, metadata?: Metadata): Promise<HandlerResult>;
}
export type OnCommentDeleteDefinition = typeof OnCommentDeleteDefinition;
export declare const OnCommentDeleteDefinition: {
    readonly name: "OnCommentDelete";
    readonly fullName: "devvit.actor.automation.v1alpha.OnCommentDelete";
    readonly methods: {
        readonly onCommentDelete: {
            readonly name: "OnCommentDelete";
            readonly requestType: {
                $type: "devvit.events.v1alpha.CommentDelete";
                encode(message: CommentDelete, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): CommentDelete;
                fromJSON(object: any): CommentDelete;
                toJSON(message: CommentDelete): unknown;
                create(base?: {
                    commentId?: string;
                    postId?: string;
                    parentId?: string;
                    deletedAt?: Date | undefined;
                    author?: {
                        id?: string;
                        name?: string;
                        isGold?: boolean;
                        snoovatarImage?: string;
                        url?: string;
                        spam?: boolean;
                        banned?: boolean;
                        flair?: {
                            userId?: string;
                            subredditId?: string;
                            text?: string;
                            cssClass?: string;
                            templateId?: string;
                            textColor?: string;
                            backgroundColor?: string;
                            enabled?: boolean;
                        } | undefined;
                        karma?: number;
                        iconImage?: string;
                        description?: string;
                        suspended?: boolean;
                    } | undefined;
                    createdAt?: Date | undefined;
                    source?: import("../../../events/v1alpha/events.js").EventSource;
                    reason?: import("../../../events/v1alpha/events.js").DeletionReason;
                    subreddit?: {
                        id?: string;
                        name?: string;
                        nsfw?: boolean;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType;
                        spam?: boolean;
                        quarantined?: boolean;
                        topics?: string[];
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating;
                        subscribersCount?: number;
                        permalink?: string;
                    } | undefined;
                } | undefined): CommentDelete;
                fromPartial(object: {
                    commentId?: string;
                    postId?: string;
                    parentId?: string;
                    deletedAt?: Date | undefined;
                    author?: {
                        id?: string;
                        name?: string;
                        isGold?: boolean;
                        snoovatarImage?: string;
                        url?: string;
                        spam?: boolean;
                        banned?: boolean;
                        flair?: {
                            userId?: string;
                            subredditId?: string;
                            text?: string;
                            cssClass?: string;
                            templateId?: string;
                            textColor?: string;
                            backgroundColor?: string;
                            enabled?: boolean;
                        } | undefined;
                        karma?: number;
                        iconImage?: string;
                        description?: string;
                        suspended?: boolean;
                    } | undefined;
                    createdAt?: Date | undefined;
                    source?: import("../../../events/v1alpha/events.js").EventSource;
                    reason?: import("../../../events/v1alpha/events.js").DeletionReason;
                    subreddit?: {
                        id?: string;
                        name?: string;
                        nsfw?: boolean;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType;
                        spam?: boolean;
                        quarantined?: boolean;
                        topics?: string[];
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating;
                        subscribersCount?: number;
                        permalink?: string;
                    } | undefined;
                }): CommentDelete;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.automation.v1alpha.HandlerResult";
                encode(_: HandlerResult, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): HandlerResult;
                fromJSON(_: any): HandlerResult;
                toJSON(_: HandlerResult): unknown;
                create(base?: DeepPartial<HandlerResult>): HandlerResult;
                fromPartial(_: DeepPartial<HandlerResult>): HandlerResult;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
export interface OnCommentApprove {
    OnCommentApprove(request: CommentApprove, metadata?: Metadata): Promise<HandlerResult>;
}
export declare const OnCommentApproveServiceName = "devvit.actor.automation.v1alpha.OnCommentApprove";
export declare class OnCommentApproveClientImpl implements OnCommentApprove {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    OnCommentApprove(request: CommentApprove, metadata?: Metadata): Promise<HandlerResult>;
}
export type OnCommentApproveDefinition = typeof OnCommentApproveDefinition;
export declare const OnCommentApproveDefinition: {
    readonly name: "OnCommentApprove";
    readonly fullName: "devvit.actor.automation.v1alpha.OnCommentApprove";
    readonly methods: {
        readonly onCommentApprove: {
            readonly name: "OnCommentApprove";
            readonly requestType: {
                $type: "devvit.events.v1alpha.CommentApprove";
                encode(message: CommentApprove, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): CommentApprove;
                fromJSON(object: any): CommentApprove;
                toJSON(message: CommentApprove): unknown;
                create(base?: {
                    comment?: {
                        id?: string;
                        parentId?: string;
                        body?: string;
                        author?: string;
                        numReports?: number;
                        collapsedBecauseCrowdControl?: boolean;
                        spam?: boolean;
                        deleted?: boolean;
                        createdAt?: number;
                        upvotes?: number;
                        downvotes?: number;
                        languageCode?: string;
                        lastModifiedAt?: number;
                        gilded?: boolean;
                        score?: number;
                        permalink?: string;
                        hasMedia?: boolean;
                        postId?: string;
                        subredditId?: string;
                        elementTypes?: string[];
                    } | undefined;
                    post?: {
                        id?: string;
                        title?: string;
                        selftext?: string;
                        nsfw?: boolean;
                        authorId?: string;
                        crowdControlLevel?: import("../../../reddit/v2alpha/postv2.js").CrowdControlLevel;
                        numReports?: number;
                        isGallery?: boolean;
                        isMeta?: boolean;
                        createdAt?: number;
                        isApproved?: boolean;
                        isArchived?: boolean;
                        distinguished?: import("../../../reddit/v2alpha/postv2.js").DistinguishType;
                        ignoreReports?: boolean;
                        isSelf?: boolean;
                        isVideo?: boolean;
                        isLocked?: boolean;
                        isSpoiler?: boolean;
                        subredditId?: string;
                        upvotes?: number;
                        downvotes?: number;
                        url?: string;
                        isSticky?: boolean;
                        linkFlair?: {
                            text?: string;
                            cssClass?: string;
                            backgroundColor?: string;
                            templateId?: string;
                            textColor?: string;
                        } | undefined;
                        authorFlair?: {
                            userId?: string;
                            subredditId?: string;
                            text?: string;
                            cssClass?: string;
                            templateId?: string;
                            textColor?: string;
                            backgroundColor?: string;
                            enabled?: boolean;
                        } | undefined;
                        spam?: boolean;
                        deleted?: boolean;
                        languageCode?: string;
                        updatedAt?: number;
                        gildings?: number;
                        score?: number;
                        numComments?: number;
                        thumbnail?: string;
                        media?: {
                            type?: string;
                            oembed?: {
                                type?: string;
                                version?: string;
                                title?: string;
                                description?: string;
                                authorName?: string;
                                authorUrl?: string;
                                providerName?: string;
                                providerUrl?: string;
                                thumbnailUrl?: string;
                                thumbnailWidth?: number;
                                thumbnailHeight?: number;
                                html?: string;
                                width?: number;
                                height?: number;
                            } | undefined;
                            redditVideo?: {
                                bitrateKbps?: number;
                                fallbackUrl?: string;
                                height?: number;
                                width?: number;
                                scrubberMediaUrl?: string;
                                dashUrl?: string;
                                duration?: number;
                                hlsUrl?: string;
                                isGif?: boolean;
                                transcodingStatus?: string;
                            } | undefined;
                        } | undefined;
                        crosspostParentId?: string;
                        permalink?: string;
                        isPoll?: boolean;
                        isPromoted?: boolean;
                        isMultiMedia?: boolean;
                        type?: string;
                        unlisted?: boolean;
                        galleryImages?: string[];
                        isImage?: boolean;
                    } | undefined;
                    approvedAt?: Date | undefined;
                    author?: {
                        id?: string;
                        name?: string;
                        isGold?: boolean;
                        snoovatarImage?: string;
                        url?: string;
                        spam?: boolean;
                        banned?: boolean;
                        flair?: {
                            userId?: string;
                            subredditId?: string;
                            text?: string;
                            cssClass?: string;
                            templateId?: string;
                            textColor?: string;
                            backgroundColor?: string;
                            enabled?: boolean;
                        } | undefined;
                        karma?: number;
                        iconImage?: string;
                        description?: string;
                        suspended?: boolean;
                    } | undefined;
                    source?: import("../../../events/v1alpha/events.js").EventSource;
                    subreddit?: {
                        id?: string;
                        name?: string;
                        nsfw?: boolean;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType;
                        spam?: boolean;
                        quarantined?: boolean;
                        topics?: string[];
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating;
                        subscribersCount?: number;
                        permalink?: string;
                    } | undefined;
                } | undefined): CommentApprove;
                fromPartial(object: {
                    comment?: {
                        id?: string;
                        parentId?: string;
                        body?: string;
                        author?: string;
                        numReports?: number;
                        collapsedBecauseCrowdControl?: boolean;
                        spam?: boolean;
                        deleted?: boolean;
                        createdAt?: number;
                        upvotes?: number;
                        downvotes?: number;
                        languageCode?: string;
                        lastModifiedAt?: number;
                        gilded?: boolean;
                        score?: number;
                        permalink?: string;
                        hasMedia?: boolean;
                        postId?: string;
                        subredditId?: string;
                        elementTypes?: string[];
                    } | undefined;
                    post?: {
                        id?: string;
                        title?: string;
                        selftext?: string;
                        nsfw?: boolean;
                        authorId?: string;
                        crowdControlLevel?: import("../../../reddit/v2alpha/postv2.js").CrowdControlLevel;
                        numReports?: number;
                        isGallery?: boolean;
                        isMeta?: boolean;
                        createdAt?: number;
                        isApproved?: boolean;
                        isArchived?: boolean;
                        distinguished?: import("../../../reddit/v2alpha/postv2.js").DistinguishType;
                        ignoreReports?: boolean;
                        isSelf?: boolean;
                        isVideo?: boolean;
                        isLocked?: boolean;
                        isSpoiler?: boolean;
                        subredditId?: string;
                        upvotes?: number;
                        downvotes?: number;
                        url?: string;
                        isSticky?: boolean;
                        linkFlair?: {
                            text?: string;
                            cssClass?: string;
                            backgroundColor?: string;
                            templateId?: string;
                            textColor?: string;
                        } | undefined;
                        authorFlair?: {
                            userId?: string;
                            subredditId?: string;
                            text?: string;
                            cssClass?: string;
                            templateId?: string;
                            textColor?: string;
                            backgroundColor?: string;
                            enabled?: boolean;
                        } | undefined;
                        spam?: boolean;
                        deleted?: boolean;
                        languageCode?: string;
                        updatedAt?: number;
                        gildings?: number;
                        score?: number;
                        numComments?: number;
                        thumbnail?: string;
                        media?: {
                            type?: string;
                            oembed?: {
                                type?: string;
                                version?: string;
                                title?: string;
                                description?: string;
                                authorName?: string;
                                authorUrl?: string;
                                providerName?: string;
                                providerUrl?: string;
                                thumbnailUrl?: string;
                                thumbnailWidth?: number;
                                thumbnailHeight?: number;
                                html?: string;
                                width?: number;
                                height?: number;
                            } | undefined;
                            redditVideo?: {
                                bitrateKbps?: number;
                                fallbackUrl?: string;
                                height?: number;
                                width?: number;
                                scrubberMediaUrl?: string;
                                dashUrl?: string;
                                duration?: number;
                                hlsUrl?: string;
                                isGif?: boolean;
                                transcodingStatus?: string;
                            } | undefined;
                        } | undefined;
                        crosspostParentId?: string;
                        permalink?: string;
                        isPoll?: boolean;
                        isPromoted?: boolean;
                        isMultiMedia?: boolean;
                        type?: string;
                        unlisted?: boolean;
                        galleryImages?: string[];
                        isImage?: boolean;
                    } | undefined;
                    approvedAt?: Date | undefined;
                    author?: {
                        id?: string;
                        name?: string;
                        isGold?: boolean;
                        snoovatarImage?: string;
                        url?: string;
                        spam?: boolean;
                        banned?: boolean;
                        flair?: {
                            userId?: string;
                            subredditId?: string;
                            text?: string;
                            cssClass?: string;
                            templateId?: string;
                            textColor?: string;
                            backgroundColor?: string;
                            enabled?: boolean;
                        } | undefined;
                        karma?: number;
                        iconImage?: string;
                        description?: string;
                        suspended?: boolean;
                    } | undefined;
                    source?: import("../../../events/v1alpha/events.js").EventSource;
                    subreddit?: {
                        id?: string;
                        name?: string;
                        nsfw?: boolean;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType;
                        spam?: boolean;
                        quarantined?: boolean;
                        topics?: string[];
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating;
                        subscribersCount?: number;
                        permalink?: string;
                    } | undefined;
                }): CommentApprove;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.automation.v1alpha.HandlerResult";
                encode(_: HandlerResult, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): HandlerResult;
                fromJSON(_: any): HandlerResult;
                toJSON(_: HandlerResult): unknown;
                create(base?: DeepPartial<HandlerResult>): HandlerResult;
                fromPartial(_: DeepPartial<HandlerResult>): HandlerResult;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
export interface OnSubredditSubscribe {
    OnSubredditSubscribe(request: SubredditSubscribe, metadata?: Metadata): Promise<HandlerResult>;
}
export declare const OnSubredditSubscribeServiceName = "devvit.actor.automation.v1alpha.OnSubredditSubscribe";
export declare class OnSubredditSubscribeClientImpl implements OnSubredditSubscribe {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    OnSubredditSubscribe(request: SubredditSubscribe, metadata?: Metadata): Promise<HandlerResult>;
}
export type OnSubredditSubscribeDefinition = typeof OnSubredditSubscribeDefinition;
export declare const OnSubredditSubscribeDefinition: {
    readonly name: "OnSubredditSubscribe";
    readonly fullName: "devvit.actor.automation.v1alpha.OnSubredditSubscribe";
    readonly methods: {
        readonly onSubredditSubscribe: {
            readonly name: "OnSubredditSubscribe";
            readonly requestType: {
                $type: "devvit.events.v1alpha.SubredditSubscribe";
                encode(message: SubredditSubscribe, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): SubredditSubscribe;
                fromJSON(object: any): SubredditSubscribe;
                toJSON(message: SubredditSubscribe): unknown;
                create(base?: {
                    subreddit?: {
                        id?: string;
                        name?: string;
                        nsfw?: boolean;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType;
                        spam?: boolean;
                        quarantined?: boolean;
                        topics?: string[];
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating;
                        subscribersCount?: number;
                        permalink?: string;
                    } | undefined;
                    subscriber?: {
                        id?: string;
                        name?: string;
                        isGold?: boolean;
                        snoovatarImage?: string;
                        url?: string;
                        spam?: boolean;
                        banned?: boolean;
                        flair?: {
                            userId?: string;
                            subredditId?: string;
                            text?: string;
                            cssClass?: string;
                            templateId?: string;
                            textColor?: string;
                            backgroundColor?: string;
                            enabled?: boolean;
                        } | undefined;
                        karma?: number;
                        iconImage?: string;
                        description?: string;
                        suspended?: boolean;
                    } | undefined;
                } | undefined): SubredditSubscribe;
                fromPartial(object: {
                    subreddit?: {
                        id?: string;
                        name?: string;
                        nsfw?: boolean;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType;
                        spam?: boolean;
                        quarantined?: boolean;
                        topics?: string[];
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating;
                        subscribersCount?: number;
                        permalink?: string;
                    } | undefined;
                    subscriber?: {
                        id?: string;
                        name?: string;
                        isGold?: boolean;
                        snoovatarImage?: string;
                        url?: string;
                        spam?: boolean;
                        banned?: boolean;
                        flair?: {
                            userId?: string;
                            subredditId?: string;
                            text?: string;
                            cssClass?: string;
                            templateId?: string;
                            textColor?: string;
                            backgroundColor?: string;
                            enabled?: boolean;
                        } | undefined;
                        karma?: number;
                        iconImage?: string;
                        description?: string;
                        suspended?: boolean;
                    } | undefined;
                }): SubredditSubscribe;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.automation.v1alpha.HandlerResult";
                encode(_: HandlerResult, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): HandlerResult;
                fromJSON(_: any): HandlerResult;
                toJSON(_: HandlerResult): unknown;
                create(base?: DeepPartial<HandlerResult>): HandlerResult;
                fromPartial(_: DeepPartial<HandlerResult>): HandlerResult;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
export interface OnAppInstall {
    OnAppInstall(request: AppInstall, metadata?: Metadata): Promise<HandlerResult>;
}
export declare const OnAppInstallServiceName = "devvit.actor.automation.v1alpha.OnAppInstall";
export declare class OnAppInstallClientImpl implements OnAppInstall {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    OnAppInstall(request: AppInstall, metadata?: Metadata): Promise<HandlerResult>;
}
export type OnAppInstallDefinition = typeof OnAppInstallDefinition;
export declare const OnAppInstallDefinition: {
    readonly name: "OnAppInstall";
    readonly fullName: "devvit.actor.automation.v1alpha.OnAppInstall";
    readonly methods: {
        readonly onAppInstall: {
            readonly name: "OnAppInstall";
            readonly requestType: {
                $type: "devvit.events.v1alpha.AppInstall";
                encode(message: AppInstall, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): AppInstall;
                fromJSON(object: any): AppInstall;
                toJSON(message: AppInstall): unknown;
                create(base?: {
                    subreddit?: {
                        id?: string;
                        name?: string;
                        nsfw?: boolean;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType;
                        spam?: boolean;
                        quarantined?: boolean;
                        topics?: string[];
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating;
                        subscribersCount?: number;
                        permalink?: string;
                    } | undefined;
                    installer?: {
                        id?: string;
                        name?: string;
                        isGold?: boolean;
                        snoovatarImage?: string;
                        url?: string;
                        spam?: boolean;
                        banned?: boolean;
                        flair?: {
                            userId?: string;
                            subredditId?: string;
                            text?: string;
                            cssClass?: string;
                            templateId?: string;
                            textColor?: string;
                            backgroundColor?: string;
                            enabled?: boolean;
                        } | undefined;
                        karma?: number;
                        iconImage?: string;
                        description?: string;
                        suspended?: boolean;
                    } | undefined;
                } | undefined): AppInstall;
                fromPartial(object: {
                    subreddit?: {
                        id?: string;
                        name?: string;
                        nsfw?: boolean;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType;
                        spam?: boolean;
                        quarantined?: boolean;
                        topics?: string[];
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating;
                        subscribersCount?: number;
                        permalink?: string;
                    } | undefined;
                    installer?: {
                        id?: string;
                        name?: string;
                        isGold?: boolean;
                        snoovatarImage?: string;
                        url?: string;
                        spam?: boolean;
                        banned?: boolean;
                        flair?: {
                            userId?: string;
                            subredditId?: string;
                            text?: string;
                            cssClass?: string;
                            templateId?: string;
                            textColor?: string;
                            backgroundColor?: string;
                            enabled?: boolean;
                        } | undefined;
                        karma?: number;
                        iconImage?: string;
                        description?: string;
                        suspended?: boolean;
                    } | undefined;
                }): AppInstall;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.automation.v1alpha.HandlerResult";
                encode(_: HandlerResult, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): HandlerResult;
                fromJSON(_: any): HandlerResult;
                toJSON(_: HandlerResult): unknown;
                create(base?: DeepPartial<HandlerResult>): HandlerResult;
                fromPartial(_: DeepPartial<HandlerResult>): HandlerResult;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
export interface OnAppUpgrade {
    OnAppUpgrade(request: AppUpgrade, metadata?: Metadata): Promise<HandlerResult>;
}
export declare const OnAppUpgradeServiceName = "devvit.actor.automation.v1alpha.OnAppUpgrade";
export declare class OnAppUpgradeClientImpl implements OnAppUpgrade {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    OnAppUpgrade(request: AppUpgrade, metadata?: Metadata): Promise<HandlerResult>;
}
export type OnAppUpgradeDefinition = typeof OnAppUpgradeDefinition;
export declare const OnAppUpgradeDefinition: {
    readonly name: "OnAppUpgrade";
    readonly fullName: "devvit.actor.automation.v1alpha.OnAppUpgrade";
    readonly methods: {
        readonly onAppUpgrade: {
            readonly name: "OnAppUpgrade";
            readonly requestType: {
                $type: "devvit.events.v1alpha.AppUpgrade";
                encode(message: AppUpgrade, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): AppUpgrade;
                fromJSON(object: any): AppUpgrade;
                toJSON(message: AppUpgrade): unknown;
                create(base?: {
                    subreddit?: {
                        id?: string;
                        name?: string;
                        nsfw?: boolean;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType;
                        spam?: boolean;
                        quarantined?: boolean;
                        topics?: string[];
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating;
                        subscribersCount?: number;
                        permalink?: string;
                    } | undefined;
                    installer?: {
                        id?: string;
                        name?: string;
                        isGold?: boolean;
                        snoovatarImage?: string;
                        url?: string;
                        spam?: boolean;
                        banned?: boolean;
                        flair?: {
                            userId?: string;
                            subredditId?: string;
                            text?: string;
                            cssClass?: string;
                            templateId?: string;
                            textColor?: string;
                            backgroundColor?: string;
                            enabled?: boolean;
                        } | undefined;
                        karma?: number;
                        iconImage?: string;
                        description?: string;
                        suspended?: boolean;
                    } | undefined;
                } | undefined): AppUpgrade;
                fromPartial(object: {
                    subreddit?: {
                        id?: string;
                        name?: string;
                        nsfw?: boolean;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType;
                        spam?: boolean;
                        quarantined?: boolean;
                        topics?: string[];
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating;
                        subscribersCount?: number;
                        permalink?: string;
                    } | undefined;
                    installer?: {
                        id?: string;
                        name?: string;
                        isGold?: boolean;
                        snoovatarImage?: string;
                        url?: string;
                        spam?: boolean;
                        banned?: boolean;
                        flair?: {
                            userId?: string;
                            subredditId?: string;
                            text?: string;
                            cssClass?: string;
                            templateId?: string;
                            textColor?: string;
                            backgroundColor?: string;
                            enabled?: boolean;
                        } | undefined;
                        karma?: number;
                        iconImage?: string;
                        description?: string;
                        suspended?: boolean;
                    } | undefined;
                }): AppUpgrade;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.automation.v1alpha.HandlerResult";
                encode(_: HandlerResult, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): HandlerResult;
                fromJSON(_: any): HandlerResult;
                toJSON(_: HandlerResult): unknown;
                create(base?: DeepPartial<HandlerResult>): HandlerResult;
                fromPartial(_: DeepPartial<HandlerResult>): HandlerResult;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
export interface OnModAction {
    OnModAction(request: ModAction, metadata?: Metadata): Promise<HandlerResult>;
}
export declare const OnModActionServiceName = "devvit.actor.automation.v1alpha.OnModAction";
export declare class OnModActionClientImpl implements OnModAction {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    OnModAction(request: ModAction, metadata?: Metadata): Promise<HandlerResult>;
}
export type OnModActionDefinition = typeof OnModActionDefinition;
export declare const OnModActionDefinition: {
    readonly name: "OnModAction";
    readonly fullName: "devvit.actor.automation.v1alpha.OnModAction";
    readonly methods: {
        readonly onModAction: {
            readonly name: "OnModAction";
            readonly requestType: {
                $type: "devvit.reddit.v2alpha.ModAction";
                encode(message: ModAction, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ModAction;
                fromJSON(object: any): ModAction;
                toJSON(message: ModAction): unknown;
                create(base?: {
                    action?: string | undefined;
                    actionedAt?: Date | undefined;
                    subreddit?: {
                        id?: string;
                        name?: string;
                        nsfw?: boolean;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType;
                        spam?: boolean;
                        quarantined?: boolean;
                        topics?: string[];
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating;
                        subscribersCount?: number;
                        permalink?: string;
                    } | undefined;
                    moderator?: {
                        id?: string;
                        name?: string;
                        isGold?: boolean;
                        snoovatarImage?: string;
                        url?: string;
                        spam?: boolean;
                        banned?: boolean;
                        flair?: {
                            userId?: string;
                            subredditId?: string;
                            text?: string;
                            cssClass?: string;
                            templateId?: string;
                            textColor?: string;
                            backgroundColor?: string;
                            enabled?: boolean;
                        } | undefined;
                        karma?: number;
                        iconImage?: string;
                        description?: string;
                        suspended?: boolean;
                    } | undefined;
                    targetUser?: {
                        id?: string;
                        name?: string;
                        isGold?: boolean;
                        snoovatarImage?: string;
                        url?: string;
                        spam?: boolean;
                        banned?: boolean;
                        flair?: {
                            userId?: string;
                            subredditId?: string;
                            text?: string;
                            cssClass?: string;
                            templateId?: string;
                            textColor?: string;
                            backgroundColor?: string;
                            enabled?: boolean;
                        } | undefined;
                        karma?: number;
                        iconImage?: string;
                        description?: string;
                        suspended?: boolean;
                    } | undefined;
                    targetComment?: {
                        id?: string;
                        parentId?: string;
                        body?: string;
                        author?: string;
                        numReports?: number;
                        collapsedBecauseCrowdControl?: boolean;
                        spam?: boolean;
                        deleted?: boolean;
                        createdAt?: number;
                        upvotes?: number;
                        downvotes?: number;
                        languageCode?: string;
                        lastModifiedAt?: number;
                        gilded?: boolean;
                        score?: number;
                        permalink?: string;
                        hasMedia?: boolean;
                        postId?: string;
                        subredditId?: string;
                        elementTypes?: string[];
                    } | undefined;
                    targetPost?: {
                        id?: string;
                        title?: string;
                        selftext?: string;
                        nsfw?: boolean;
                        authorId?: string;
                        crowdControlLevel?: import("../../../reddit/v2alpha/postv2.js").CrowdControlLevel;
                        numReports?: number;
                        isGallery?: boolean;
                        isMeta?: boolean;
                        createdAt?: number;
                        isApproved?: boolean;
                        isArchived?: boolean;
                        distinguished?: import("../../../reddit/v2alpha/postv2.js").DistinguishType;
                        ignoreReports?: boolean;
                        isSelf?: boolean;
                        isVideo?: boolean;
                        isLocked?: boolean;
                        isSpoiler?: boolean;
                        subredditId?: string;
                        upvotes?: number;
                        downvotes?: number;
                        url?: string;
                        isSticky?: boolean;
                        linkFlair?: {
                            text?: string;
                            cssClass?: string;
                            backgroundColor?: string;
                            templateId?: string;
                            textColor?: string;
                        } | undefined;
                        authorFlair?: {
                            userId?: string;
                            subredditId?: string;
                            text?: string;
                            cssClass?: string;
                            templateId?: string;
                            textColor?: string;
                            backgroundColor?: string;
                            enabled?: boolean;
                        } | undefined;
                        spam?: boolean;
                        deleted?: boolean;
                        languageCode?: string;
                        updatedAt?: number;
                        gildings?: number;
                        score?: number;
                        numComments?: number;
                        thumbnail?: string;
                        media?: {
                            type?: string;
                            oembed?: {
                                type?: string;
                                version?: string;
                                title?: string;
                                description?: string;
                                authorName?: string;
                                authorUrl?: string;
                                providerName?: string;
                                providerUrl?: string;
                                thumbnailUrl?: string;
                                thumbnailWidth?: number;
                                thumbnailHeight?: number;
                                html?: string;
                                width?: number;
                                height?: number;
                            } | undefined;
                            redditVideo?: {
                                bitrateKbps?: number;
                                fallbackUrl?: string;
                                height?: number;
                                width?: number;
                                scrubberMediaUrl?: string;
                                dashUrl?: string;
                                duration?: number;
                                hlsUrl?: string;
                                isGif?: boolean;
                                transcodingStatus?: string;
                            } | undefined;
                        } | undefined;
                        crosspostParentId?: string;
                        permalink?: string;
                        isPoll?: boolean;
                        isPromoted?: boolean;
                        isMultiMedia?: boolean;
                        type?: string;
                        unlisted?: boolean;
                        galleryImages?: string[];
                        isImage?: boolean;
                    } | undefined;
                } | undefined): ModAction;
                fromPartial(object: {
                    action?: string | undefined;
                    actionedAt?: Date | undefined;
                    subreddit?: {
                        id?: string;
                        name?: string;
                        nsfw?: boolean;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType;
                        spam?: boolean;
                        quarantined?: boolean;
                        topics?: string[];
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating;
                        subscribersCount?: number;
                        permalink?: string;
                    } | undefined;
                    moderator?: {
                        id?: string;
                        name?: string;
                        isGold?: boolean;
                        snoovatarImage?: string;
                        url?: string;
                        spam?: boolean;
                        banned?: boolean;
                        flair?: {
                            userId?: string;
                            subredditId?: string;
                            text?: string;
                            cssClass?: string;
                            templateId?: string;
                            textColor?: string;
                            backgroundColor?: string;
                            enabled?: boolean;
                        } | undefined;
                        karma?: number;
                        iconImage?: string;
                        description?: string;
                        suspended?: boolean;
                    } | undefined;
                    targetUser?: {
                        id?: string;
                        name?: string;
                        isGold?: boolean;
                        snoovatarImage?: string;
                        url?: string;
                        spam?: boolean;
                        banned?: boolean;
                        flair?: {
                            userId?: string;
                            subredditId?: string;
                            text?: string;
                            cssClass?: string;
                            templateId?: string;
                            textColor?: string;
                            backgroundColor?: string;
                            enabled?: boolean;
                        } | undefined;
                        karma?: number;
                        iconImage?: string;
                        description?: string;
                        suspended?: boolean;
                    } | undefined;
                    targetComment?: {
                        id?: string;
                        parentId?: string;
                        body?: string;
                        author?: string;
                        numReports?: number;
                        collapsedBecauseCrowdControl?: boolean;
                        spam?: boolean;
                        deleted?: boolean;
                        createdAt?: number;
                        upvotes?: number;
                        downvotes?: number;
                        languageCode?: string;
                        lastModifiedAt?: number;
                        gilded?: boolean;
                        score?: number;
                        permalink?: string;
                        hasMedia?: boolean;
                        postId?: string;
                        subredditId?: string;
                        elementTypes?: string[];
                    } | undefined;
                    targetPost?: {
                        id?: string;
                        title?: string;
                        selftext?: string;
                        nsfw?: boolean;
                        authorId?: string;
                        crowdControlLevel?: import("../../../reddit/v2alpha/postv2.js").CrowdControlLevel;
                        numReports?: number;
                        isGallery?: boolean;
                        isMeta?: boolean;
                        createdAt?: number;
                        isApproved?: boolean;
                        isArchived?: boolean;
                        distinguished?: import("../../../reddit/v2alpha/postv2.js").DistinguishType;
                        ignoreReports?: boolean;
                        isSelf?: boolean;
                        isVideo?: boolean;
                        isLocked?: boolean;
                        isSpoiler?: boolean;
                        subredditId?: string;
                        upvotes?: number;
                        downvotes?: number;
                        url?: string;
                        isSticky?: boolean;
                        linkFlair?: {
                            text?: string;
                            cssClass?: string;
                            backgroundColor?: string;
                            templateId?: string;
                            textColor?: string;
                        } | undefined;
                        authorFlair?: {
                            userId?: string;
                            subredditId?: string;
                            text?: string;
                            cssClass?: string;
                            templateId?: string;
                            textColor?: string;
                            backgroundColor?: string;
                            enabled?: boolean;
                        } | undefined;
                        spam?: boolean;
                        deleted?: boolean;
                        languageCode?: string;
                        updatedAt?: number;
                        gildings?: number;
                        score?: number;
                        numComments?: number;
                        thumbnail?: string;
                        media?: {
                            type?: string;
                            oembed?: {
                                type?: string;
                                version?: string;
                                title?: string;
                                description?: string;
                                authorName?: string;
                                authorUrl?: string;
                                providerName?: string;
                                providerUrl?: string;
                                thumbnailUrl?: string;
                                thumbnailWidth?: number;
                                thumbnailHeight?: number;
                                html?: string;
                                width?: number;
                                height?: number;
                            } | undefined;
                            redditVideo?: {
                                bitrateKbps?: number;
                                fallbackUrl?: string;
                                height?: number;
                                width?: number;
                                scrubberMediaUrl?: string;
                                dashUrl?: string;
                                duration?: number;
                                hlsUrl?: string;
                                isGif?: boolean;
                                transcodingStatus?: string;
                            } | undefined;
                        } | undefined;
                        crosspostParentId?: string;
                        permalink?: string;
                        isPoll?: boolean;
                        isPromoted?: boolean;
                        isMultiMedia?: boolean;
                        type?: string;
                        unlisted?: boolean;
                        galleryImages?: string[];
                        isImage?: boolean;
                    } | undefined;
                }): ModAction;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.automation.v1alpha.HandlerResult";
                encode(_: HandlerResult, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): HandlerResult;
                fromJSON(_: any): HandlerResult;
                toJSON(_: HandlerResult): unknown;
                create(base?: DeepPartial<HandlerResult>): HandlerResult;
                fromPartial(_: DeepPartial<HandlerResult>): HandlerResult;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
export interface OnModMail {
    OnModMail(request: ModMail, metadata?: Metadata): Promise<HandlerResult>;
}
export declare const OnModMailServiceName = "devvit.actor.automation.v1alpha.OnModMail";
export declare class OnModMailClientImpl implements OnModMail {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    OnModMail(request: ModMail, metadata?: Metadata): Promise<HandlerResult>;
}
export type OnModMailDefinition = typeof OnModMailDefinition;
export declare const OnModMailDefinition: {
    readonly name: "OnModMail";
    readonly fullName: "devvit.actor.automation.v1alpha.OnModMail";
    readonly methods: {
        readonly onModMail: {
            readonly name: "OnModMail";
            readonly requestType: {
                $type: "devvit.reddit.v2alpha.ModMail";
                encode(message: ModMail, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ModMail;
                fromJSON(object: any): ModMail;
                toJSON(message: ModMail): unknown;
                create(base?: {
                    messageAuthor?: {
                        id?: string;
                        name?: string;
                        isGold?: boolean;
                        snoovatarImage?: string;
                        url?: string;
                        spam?: boolean;
                        banned?: boolean;
                        flair?: {
                            userId?: string;
                            subredditId?: string;
                            text?: string;
                            cssClass?: string;
                            templateId?: string;
                            textColor?: string;
                            backgroundColor?: string;
                            enabled?: boolean;
                        } | undefined;
                        karma?: number;
                        iconImage?: string;
                        description?: string;
                        suspended?: boolean;
                    } | undefined;
                    createdAt?: Date | undefined;
                    messageAuthorType?: string;
                    conversationState?: string;
                    conversationType?: string;
                    isAutoGenerated?: boolean;
                    conversationSubreddit?: {
                        id?: string;
                        name?: string;
                        nsfw?: boolean;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType;
                        spam?: boolean;
                        quarantined?: boolean;
                        topics?: string[];
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating;
                        subscribersCount?: number;
                        permalink?: string;
                    } | undefined;
                    destinationSubreddit?: {
                        id?: string;
                        name?: string;
                        nsfw?: boolean;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType;
                        spam?: boolean;
                        quarantined?: boolean;
                        topics?: string[];
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating;
                        subscribersCount?: number;
                        permalink?: string;
                    } | undefined;
                    conversationId?: string;
                    messageId?: string;
                } | undefined): ModMail;
                fromPartial(object: {
                    messageAuthor?: {
                        id?: string;
                        name?: string;
                        isGold?: boolean;
                        snoovatarImage?: string;
                        url?: string;
                        spam?: boolean;
                        banned?: boolean;
                        flair?: {
                            userId?: string;
                            subredditId?: string;
                            text?: string;
                            cssClass?: string;
                            templateId?: string;
                            textColor?: string;
                            backgroundColor?: string;
                            enabled?: boolean;
                        } | undefined;
                        karma?: number;
                        iconImage?: string;
                        description?: string;
                        suspended?: boolean;
                    } | undefined;
                    createdAt?: Date | undefined;
                    messageAuthorType?: string;
                    conversationState?: string;
                    conversationType?: string;
                    isAutoGenerated?: boolean;
                    conversationSubreddit?: {
                        id?: string;
                        name?: string;
                        nsfw?: boolean;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType;
                        spam?: boolean;
                        quarantined?: boolean;
                        topics?: string[];
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating;
                        subscribersCount?: number;
                        permalink?: string;
                    } | undefined;
                    destinationSubreddit?: {
                        id?: string;
                        name?: string;
                        nsfw?: boolean;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType;
                        spam?: boolean;
                        quarantined?: boolean;
                        topics?: string[];
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating;
                        subscribersCount?: number;
                        permalink?: string;
                    } | undefined;
                    conversationId?: string;
                    messageId?: string;
                }): ModMail;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.automation.v1alpha.HandlerResult";
                encode(_: HandlerResult, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): HandlerResult;
                fromJSON(_: any): HandlerResult;
                toJSON(_: HandlerResult): unknown;
                create(base?: DeepPartial<HandlerResult>): HandlerResult;
                fromPartial(_: DeepPartial<HandlerResult>): HandlerResult;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
export interface OnAccountDelete {
    OnAccountDelete(request: AccountDelete, metadata?: Metadata): Promise<HandlerResult>;
}
export declare const OnAccountDeleteServiceName = "devvit.actor.automation.v1alpha.OnAccountDelete";
export declare class OnAccountDeleteClientImpl implements OnAccountDelete {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    OnAccountDelete(request: AccountDelete, metadata?: Metadata): Promise<HandlerResult>;
}
export type OnAccountDeleteDefinition = typeof OnAccountDeleteDefinition;
export declare const OnAccountDeleteDefinition: {
    readonly name: "OnAccountDelete";
    readonly fullName: "devvit.actor.automation.v1alpha.OnAccountDelete";
    readonly methods: {
        readonly onAccountDelete: {
            readonly name: "OnAccountDelete";
            readonly requestType: {
                $type: "devvit.events.v1alpha.AccountDelete";
                encode(message: AccountDelete, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): AccountDelete;
                fromJSON(object: any): AccountDelete;
                toJSON(message: AccountDelete): unknown;
                create(base?: {
                    userId?: string;
                    deletedAt?: Date | undefined;
                    user?: {
                        id?: string;
                        name?: string;
                        isGold?: boolean;
                        snoovatarImage?: string;
                        url?: string;
                        spam?: boolean;
                        banned?: boolean;
                        flair?: {
                            userId?: string;
                            subredditId?: string;
                            text?: string;
                            cssClass?: string;
                            templateId?: string;
                            textColor?: string;
                            backgroundColor?: string;
                            enabled?: boolean;
                        } | undefined;
                        karma?: number;
                        iconImage?: string;
                        description?: string;
                        suspended?: boolean;
                    } | undefined;
                } | undefined): AccountDelete;
                fromPartial(object: {
                    userId?: string;
                    deletedAt?: Date | undefined;
                    user?: {
                        id?: string;
                        name?: string;
                        isGold?: boolean;
                        snoovatarImage?: string;
                        url?: string;
                        spam?: boolean;
                        banned?: boolean;
                        flair?: {
                            userId?: string;
                            subredditId?: string;
                            text?: string;
                            cssClass?: string;
                            templateId?: string;
                            textColor?: string;
                            backgroundColor?: string;
                            enabled?: boolean;
                        } | undefined;
                        karma?: number;
                        iconImage?: string;
                        description?: string;
                        suspended?: boolean;
                    } | undefined;
                }): AccountDelete;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.automation.v1alpha.HandlerResult";
                encode(_: HandlerResult, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): HandlerResult;
                fromJSON(_: any): HandlerResult;
                toJSON(_: HandlerResult): unknown;
                create(base?: DeepPartial<HandlerResult>): HandlerResult;
                fromPartial(_: DeepPartial<HandlerResult>): HandlerResult;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
export interface OnPostNsfwUpdate {
    OnPostNsfwUpdate(request: PostNsfwUpdate, metadata?: Metadata): Promise<HandlerResult>;
}
export declare const OnPostNsfwUpdateServiceName = "devvit.actor.automation.v1alpha.OnPostNsfwUpdate";
export declare class OnPostNsfwUpdateClientImpl implements OnPostNsfwUpdate {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    OnPostNsfwUpdate(request: PostNsfwUpdate, metadata?: Metadata): Promise<HandlerResult>;
}
export type OnPostNsfwUpdateDefinition = typeof OnPostNsfwUpdateDefinition;
export declare const OnPostNsfwUpdateDefinition: {
    readonly name: "OnPostNsfwUpdate";
    readonly fullName: "devvit.actor.automation.v1alpha.OnPostNsfwUpdate";
    readonly methods: {
        readonly onPostNsfwUpdate: {
            readonly name: "OnPostNsfwUpdate";
            readonly requestType: {
                $type: "devvit.events.v1alpha.PostNsfwUpdate";
                encode(message: PostNsfwUpdate, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PostNsfwUpdate;
                fromJSON(object: any): PostNsfwUpdate;
                toJSON(message: PostNsfwUpdate): unknown;
                create(base?: {
                    post?: {
                        id?: string;
                        title?: string;
                        selftext?: string;
                        nsfw?: boolean;
                        authorId?: string;
                        crowdControlLevel?: import("../../../reddit/v2alpha/postv2.js").CrowdControlLevel;
                        numReports?: number;
                        isGallery?: boolean;
                        isMeta?: boolean;
                        createdAt?: number;
                        isApproved?: boolean;
                        isArchived?: boolean;
                        distinguished?: import("../../../reddit/v2alpha/postv2.js").DistinguishType;
                        ignoreReports?: boolean;
                        isSelf?: boolean;
                        isVideo?: boolean;
                        isLocked?: boolean;
                        isSpoiler?: boolean;
                        subredditId?: string;
                        upvotes?: number;
                        downvotes?: number;
                        url?: string;
                        isSticky?: boolean;
                        linkFlair?: {
                            text?: string;
                            cssClass?: string;
                            backgroundColor?: string;
                            templateId?: string;
                            textColor?: string;
                        } | undefined;
                        authorFlair?: {
                            userId?: string;
                            subredditId?: string;
                            text?: string;
                            cssClass?: string;
                            templateId?: string;
                            textColor?: string;
                            backgroundColor?: string;
                            enabled?: boolean;
                        } | undefined;
                        spam?: boolean;
                        deleted?: boolean;
                        languageCode?: string;
                        updatedAt?: number;
                        gildings?: number;
                        score?: number;
                        numComments?: number;
                        thumbnail?: string;
                        media?: {
                            type?: string;
                            oembed?: {
                                type?: string;
                                version?: string;
                                title?: string;
                                description?: string;
                                authorName?: string;
                                authorUrl?: string;
                                providerName?: string;
                                providerUrl?: string;
                                thumbnailUrl?: string;
                                thumbnailWidth?: number;
                                thumbnailHeight?: number;
                                html?: string;
                                width?: number;
                                height?: number;
                            } | undefined;
                            redditVideo?: {
                                bitrateKbps?: number;
                                fallbackUrl?: string;
                                height?: number;
                                width?: number;
                                scrubberMediaUrl?: string;
                                dashUrl?: string;
                                duration?: number;
                                hlsUrl?: string;
                                isGif?: boolean;
                                transcodingStatus?: string;
                            } | undefined;
                        } | undefined;
                        crosspostParentId?: string;
                        permalink?: string;
                        isPoll?: boolean;
                        isPromoted?: boolean;
                        isMultiMedia?: boolean;
                        type?: string;
                        unlisted?: boolean;
                        galleryImages?: string[];
                        isImage?: boolean;
                    } | undefined;
                    author?: {
                        id?: string;
                        name?: string;
                        isGold?: boolean;
                        snoovatarImage?: string;
                        url?: string;
                        spam?: boolean;
                        banned?: boolean;
                        flair?: {
                            userId?: string;
                            subredditId?: string;
                            text?: string;
                            cssClass?: string;
                            templateId?: string;
                            textColor?: string;
                            backgroundColor?: string;
                            enabled?: boolean;
                        } | undefined;
                        karma?: number;
                        iconImage?: string;
                        description?: string;
                        suspended?: boolean;
                    } | undefined;
                    isNsfw?: boolean;
                    subreddit?: {
                        id?: string;
                        name?: string;
                        nsfw?: boolean;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType;
                        spam?: boolean;
                        quarantined?: boolean;
                        topics?: string[];
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating;
                        subscribersCount?: number;
                        permalink?: string;
                    } | undefined;
                } | undefined): PostNsfwUpdate;
                fromPartial(object: {
                    post?: {
                        id?: string;
                        title?: string;
                        selftext?: string;
                        nsfw?: boolean;
                        authorId?: string;
                        crowdControlLevel?: import("../../../reddit/v2alpha/postv2.js").CrowdControlLevel;
                        numReports?: number;
                        isGallery?: boolean;
                        isMeta?: boolean;
                        createdAt?: number;
                        isApproved?: boolean;
                        isArchived?: boolean;
                        distinguished?: import("../../../reddit/v2alpha/postv2.js").DistinguishType;
                        ignoreReports?: boolean;
                        isSelf?: boolean;
                        isVideo?: boolean;
                        isLocked?: boolean;
                        isSpoiler?: boolean;
                        subredditId?: string;
                        upvotes?: number;
                        downvotes?: number;
                        url?: string;
                        isSticky?: boolean;
                        linkFlair?: {
                            text?: string;
                            cssClass?: string;
                            backgroundColor?: string;
                            templateId?: string;
                            textColor?: string;
                        } | undefined;
                        authorFlair?: {
                            userId?: string;
                            subredditId?: string;
                            text?: string;
                            cssClass?: string;
                            templateId?: string;
                            textColor?: string;
                            backgroundColor?: string;
                            enabled?: boolean;
                        } | undefined;
                        spam?: boolean;
                        deleted?: boolean;
                        languageCode?: string;
                        updatedAt?: number;
                        gildings?: number;
                        score?: number;
                        numComments?: number;
                        thumbnail?: string;
                        media?: {
                            type?: string;
                            oembed?: {
                                type?: string;
                                version?: string;
                                title?: string;
                                description?: string;
                                authorName?: string;
                                authorUrl?: string;
                                providerName?: string;
                                providerUrl?: string;
                                thumbnailUrl?: string;
                                thumbnailWidth?: number;
                                thumbnailHeight?: number;
                                html?: string;
                                width?: number;
                                height?: number;
                            } | undefined;
                            redditVideo?: {
                                bitrateKbps?: number;
                                fallbackUrl?: string;
                                height?: number;
                                width?: number;
                                scrubberMediaUrl?: string;
                                dashUrl?: string;
                                duration?: number;
                                hlsUrl?: string;
                                isGif?: boolean;
                                transcodingStatus?: string;
                            } | undefined;
                        } | undefined;
                        crosspostParentId?: string;
                        permalink?: string;
                        isPoll?: boolean;
                        isPromoted?: boolean;
                        isMultiMedia?: boolean;
                        type?: string;
                        unlisted?: boolean;
                        galleryImages?: string[];
                        isImage?: boolean;
                    } | undefined;
                    author?: {
                        id?: string;
                        name?: string;
                        isGold?: boolean;
                        snoovatarImage?: string;
                        url?: string;
                        spam?: boolean;
                        banned?: boolean;
                        flair?: {
                            userId?: string;
                            subredditId?: string;
                            text?: string;
                            cssClass?: string;
                            templateId?: string;
                            textColor?: string;
                            backgroundColor?: string;
                            enabled?: boolean;
                        } | undefined;
                        karma?: number;
                        iconImage?: string;
                        description?: string;
                        suspended?: boolean;
                    } | undefined;
                    isNsfw?: boolean;
                    subreddit?: {
                        id?: string;
                        name?: string;
                        nsfw?: boolean;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType;
                        spam?: boolean;
                        quarantined?: boolean;
                        topics?: string[];
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating;
                        subscribersCount?: number;
                        permalink?: string;
                    } | undefined;
                }): PostNsfwUpdate;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.automation.v1alpha.HandlerResult";
                encode(_: HandlerResult, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): HandlerResult;
                fromJSON(_: any): HandlerResult;
                toJSON(_: HandlerResult): unknown;
                create(base?: DeepPartial<HandlerResult>): HandlerResult;
                fromPartial(_: DeepPartial<HandlerResult>): HandlerResult;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
export interface OnPostSpoilerUpdate {
    OnPostSpoilerUpdate(request: PostSpoilerUpdate, metadata?: Metadata): Promise<HandlerResult>;
}
export declare const OnPostSpoilerUpdateServiceName = "devvit.actor.automation.v1alpha.OnPostSpoilerUpdate";
export declare class OnPostSpoilerUpdateClientImpl implements OnPostSpoilerUpdate {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    OnPostSpoilerUpdate(request: PostSpoilerUpdate, metadata?: Metadata): Promise<HandlerResult>;
}
export type OnPostSpoilerUpdateDefinition = typeof OnPostSpoilerUpdateDefinition;
export declare const OnPostSpoilerUpdateDefinition: {
    readonly name: "OnPostSpoilerUpdate";
    readonly fullName: "devvit.actor.automation.v1alpha.OnPostSpoilerUpdate";
    readonly methods: {
        readonly onPostSpoilerUpdate: {
            readonly name: "OnPostSpoilerUpdate";
            readonly requestType: {
                $type: "devvit.events.v1alpha.PostSpoilerUpdate";
                encode(message: PostSpoilerUpdate, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PostSpoilerUpdate;
                fromJSON(object: any): PostSpoilerUpdate;
                toJSON(message: PostSpoilerUpdate): unknown;
                create(base?: {
                    post?: {
                        id?: string;
                        title?: string;
                        selftext?: string;
                        nsfw?: boolean;
                        authorId?: string;
                        crowdControlLevel?: import("../../../reddit/v2alpha/postv2.js").CrowdControlLevel;
                        numReports?: number;
                        isGallery?: boolean;
                        isMeta?: boolean;
                        createdAt?: number;
                        isApproved?: boolean;
                        isArchived?: boolean;
                        distinguished?: import("../../../reddit/v2alpha/postv2.js").DistinguishType;
                        ignoreReports?: boolean;
                        isSelf?: boolean;
                        isVideo?: boolean;
                        isLocked?: boolean;
                        isSpoiler?: boolean;
                        subredditId?: string;
                        upvotes?: number;
                        downvotes?: number;
                        url?: string;
                        isSticky?: boolean;
                        linkFlair?: {
                            text?: string;
                            cssClass?: string;
                            backgroundColor?: string;
                            templateId?: string;
                            textColor?: string;
                        } | undefined;
                        authorFlair?: {
                            userId?: string;
                            subredditId?: string;
                            text?: string;
                            cssClass?: string;
                            templateId?: string;
                            textColor?: string;
                            backgroundColor?: string;
                            enabled?: boolean;
                        } | undefined;
                        spam?: boolean;
                        deleted?: boolean;
                        languageCode?: string;
                        updatedAt?: number;
                        gildings?: number;
                        score?: number;
                        numComments?: number;
                        thumbnail?: string;
                        media?: {
                            type?: string;
                            oembed?: {
                                type?: string;
                                version?: string;
                                title?: string;
                                description?: string;
                                authorName?: string;
                                authorUrl?: string;
                                providerName?: string;
                                providerUrl?: string;
                                thumbnailUrl?: string;
                                thumbnailWidth?: number;
                                thumbnailHeight?: number;
                                html?: string;
                                width?: number;
                                height?: number;
                            } | undefined;
                            redditVideo?: {
                                bitrateKbps?: number;
                                fallbackUrl?: string;
                                height?: number;
                                width?: number;
                                scrubberMediaUrl?: string;
                                dashUrl?: string;
                                duration?: number;
                                hlsUrl?: string;
                                isGif?: boolean;
                                transcodingStatus?: string;
                            } | undefined;
                        } | undefined;
                        crosspostParentId?: string;
                        permalink?: string;
                        isPoll?: boolean;
                        isPromoted?: boolean;
                        isMultiMedia?: boolean;
                        type?: string;
                        unlisted?: boolean;
                        galleryImages?: string[];
                        isImage?: boolean;
                    } | undefined;
                    author?: {
                        id?: string;
                        name?: string;
                        isGold?: boolean;
                        snoovatarImage?: string;
                        url?: string;
                        spam?: boolean;
                        banned?: boolean;
                        flair?: {
                            userId?: string;
                            subredditId?: string;
                            text?: string;
                            cssClass?: string;
                            templateId?: string;
                            textColor?: string;
                            backgroundColor?: string;
                            enabled?: boolean;
                        } | undefined;
                        karma?: number;
                        iconImage?: string;
                        description?: string;
                        suspended?: boolean;
                    } | undefined;
                    isSpoiler?: boolean;
                    subreddit?: {
                        id?: string;
                        name?: string;
                        nsfw?: boolean;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType;
                        spam?: boolean;
                        quarantined?: boolean;
                        topics?: string[];
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating;
                        subscribersCount?: number;
                        permalink?: string;
                    } | undefined;
                } | undefined): PostSpoilerUpdate;
                fromPartial(object: {
                    post?: {
                        id?: string;
                        title?: string;
                        selftext?: string;
                        nsfw?: boolean;
                        authorId?: string;
                        crowdControlLevel?: import("../../../reddit/v2alpha/postv2.js").CrowdControlLevel;
                        numReports?: number;
                        isGallery?: boolean;
                        isMeta?: boolean;
                        createdAt?: number;
                        isApproved?: boolean;
                        isArchived?: boolean;
                        distinguished?: import("../../../reddit/v2alpha/postv2.js").DistinguishType;
                        ignoreReports?: boolean;
                        isSelf?: boolean;
                        isVideo?: boolean;
                        isLocked?: boolean;
                        isSpoiler?: boolean;
                        subredditId?: string;
                        upvotes?: number;
                        downvotes?: number;
                        url?: string;
                        isSticky?: boolean;
                        linkFlair?: {
                            text?: string;
                            cssClass?: string;
                            backgroundColor?: string;
                            templateId?: string;
                            textColor?: string;
                        } | undefined;
                        authorFlair?: {
                            userId?: string;
                            subredditId?: string;
                            text?: string;
                            cssClass?: string;
                            templateId?: string;
                            textColor?: string;
                            backgroundColor?: string;
                            enabled?: boolean;
                        } | undefined;
                        spam?: boolean;
                        deleted?: boolean;
                        languageCode?: string;
                        updatedAt?: number;
                        gildings?: number;
                        score?: number;
                        numComments?: number;
                        thumbnail?: string;
                        media?: {
                            type?: string;
                            oembed?: {
                                type?: string;
                                version?: string;
                                title?: string;
                                description?: string;
                                authorName?: string;
                                authorUrl?: string;
                                providerName?: string;
                                providerUrl?: string;
                                thumbnailUrl?: string;
                                thumbnailWidth?: number;
                                thumbnailHeight?: number;
                                html?: string;
                                width?: number;
                                height?: number;
                            } | undefined;
                            redditVideo?: {
                                bitrateKbps?: number;
                                fallbackUrl?: string;
                                height?: number;
                                width?: number;
                                scrubberMediaUrl?: string;
                                dashUrl?: string;
                                duration?: number;
                                hlsUrl?: string;
                                isGif?: boolean;
                                transcodingStatus?: string;
                            } | undefined;
                        } | undefined;
                        crosspostParentId?: string;
                        permalink?: string;
                        isPoll?: boolean;
                        isPromoted?: boolean;
                        isMultiMedia?: boolean;
                        type?: string;
                        unlisted?: boolean;
                        galleryImages?: string[];
                        isImage?: boolean;
                    } | undefined;
                    author?: {
                        id?: string;
                        name?: string;
                        isGold?: boolean;
                        snoovatarImage?: string;
                        url?: string;
                        spam?: boolean;
                        banned?: boolean;
                        flair?: {
                            userId?: string;
                            subredditId?: string;
                            text?: string;
                            cssClass?: string;
                            templateId?: string;
                            textColor?: string;
                            backgroundColor?: string;
                            enabled?: boolean;
                        } | undefined;
                        karma?: number;
                        iconImage?: string;
                        description?: string;
                        suspended?: boolean;
                    } | undefined;
                    isSpoiler?: boolean;
                    subreddit?: {
                        id?: string;
                        name?: string;
                        nsfw?: boolean;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType;
                        spam?: boolean;
                        quarantined?: boolean;
                        topics?: string[];
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating;
                        subscribersCount?: number;
                        permalink?: string;
                    } | undefined;
                }): PostSpoilerUpdate;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.automation.v1alpha.HandlerResult";
                encode(_: HandlerResult, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): HandlerResult;
                fromJSON(_: any): HandlerResult;
                toJSON(_: HandlerResult): unknown;
                create(base?: DeepPartial<HandlerResult>): HandlerResult;
                fromPartial(_: DeepPartial<HandlerResult>): HandlerResult;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
export interface OnAutomoderatorFilterPost {
    OnAutomoderatorFilterPost(request: AutomoderatorFilterPost, metadata?: Metadata): Promise<HandlerResult>;
}
export declare const OnAutomoderatorFilterPostServiceName = "devvit.actor.automation.v1alpha.OnAutomoderatorFilterPost";
export declare class OnAutomoderatorFilterPostClientImpl implements OnAutomoderatorFilterPost {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    OnAutomoderatorFilterPost(request: AutomoderatorFilterPost, metadata?: Metadata): Promise<HandlerResult>;
}
export type OnAutomoderatorFilterPostDefinition = typeof OnAutomoderatorFilterPostDefinition;
export declare const OnAutomoderatorFilterPostDefinition: {
    readonly name: "OnAutomoderatorFilterPost";
    readonly fullName: "devvit.actor.automation.v1alpha.OnAutomoderatorFilterPost";
    readonly methods: {
        readonly onAutomoderatorFilterPost: {
            readonly name: "OnAutomoderatorFilterPost";
            readonly requestType: {
                $type: "devvit.events.v1alpha.AutomoderatorFilterPost";
                encode(message: AutomoderatorFilterPost, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): AutomoderatorFilterPost;
                fromJSON(object: any): AutomoderatorFilterPost;
                toJSON(message: AutomoderatorFilterPost): unknown;
                create(base?: {
                    post?: {
                        id?: string;
                        title?: string;
                        selftext?: string;
                        nsfw?: boolean;
                        authorId?: string;
                        crowdControlLevel?: import("../../../reddit/v2alpha/postv2.js").CrowdControlLevel;
                        numReports?: number;
                        isGallery?: boolean;
                        isMeta?: boolean;
                        createdAt?: number;
                        isApproved?: boolean;
                        isArchived?: boolean;
                        distinguished?: import("../../../reddit/v2alpha/postv2.js").DistinguishType;
                        ignoreReports?: boolean;
                        isSelf?: boolean;
                        isVideo?: boolean;
                        isLocked?: boolean;
                        isSpoiler?: boolean;
                        subredditId?: string;
                        upvotes?: number;
                        downvotes?: number;
                        url?: string;
                        isSticky?: boolean;
                        linkFlair?: {
                            text?: string;
                            cssClass?: string;
                            backgroundColor?: string;
                            templateId?: string;
                            textColor?: string;
                        } | undefined;
                        authorFlair?: {
                            userId?: string;
                            subredditId?: string;
                            text?: string;
                            cssClass?: string;
                            templateId?: string;
                            textColor?: string;
                            backgroundColor?: string;
                            enabled?: boolean;
                        } | undefined;
                        spam?: boolean;
                        deleted?: boolean;
                        languageCode?: string;
                        updatedAt?: number;
                        gildings?: number;
                        score?: number;
                        numComments?: number;
                        thumbnail?: string;
                        media?: {
                            type?: string;
                            oembed?: {
                                type?: string;
                                version?: string;
                                title?: string;
                                description?: string;
                                authorName?: string;
                                authorUrl?: string;
                                providerName?: string;
                                providerUrl?: string;
                                thumbnailUrl?: string;
                                thumbnailWidth?: number;
                                thumbnailHeight?: number;
                                html?: string;
                                width?: number;
                                height?: number;
                            } | undefined;
                            redditVideo?: {
                                bitrateKbps?: number;
                                fallbackUrl?: string;
                                height?: number;
                                width?: number;
                                scrubberMediaUrl?: string;
                                dashUrl?: string;
                                duration?: number;
                                hlsUrl?: string;
                                isGif?: boolean;
                                transcodingStatus?: string;
                            } | undefined;
                        } | undefined;
                        crosspostParentId?: string;
                        permalink?: string;
                        isPoll?: boolean;
                        isPromoted?: boolean;
                        isMultiMedia?: boolean;
                        type?: string;
                        unlisted?: boolean;
                        galleryImages?: string[];
                        isImage?: boolean;
                    } | undefined;
                    removedAt?: Date | undefined;
                    reason?: string;
                    author?: string;
                    subreddit?: {
                        id?: string;
                        name?: string;
                        nsfw?: boolean;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType;
                        spam?: boolean;
                        quarantined?: boolean;
                        topics?: string[];
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating;
                        subscribersCount?: number;
                        permalink?: string;
                    } | undefined;
                } | undefined): AutomoderatorFilterPost;
                fromPartial(object: {
                    post?: {
                        id?: string;
                        title?: string;
                        selftext?: string;
                        nsfw?: boolean;
                        authorId?: string;
                        crowdControlLevel?: import("../../../reddit/v2alpha/postv2.js").CrowdControlLevel;
                        numReports?: number;
                        isGallery?: boolean;
                        isMeta?: boolean;
                        createdAt?: number;
                        isApproved?: boolean;
                        isArchived?: boolean;
                        distinguished?: import("../../../reddit/v2alpha/postv2.js").DistinguishType;
                        ignoreReports?: boolean;
                        isSelf?: boolean;
                        isVideo?: boolean;
                        isLocked?: boolean;
                        isSpoiler?: boolean;
                        subredditId?: string;
                        upvotes?: number;
                        downvotes?: number;
                        url?: string;
                        isSticky?: boolean;
                        linkFlair?: {
                            text?: string;
                            cssClass?: string;
                            backgroundColor?: string;
                            templateId?: string;
                            textColor?: string;
                        } | undefined;
                        authorFlair?: {
                            userId?: string;
                            subredditId?: string;
                            text?: string;
                            cssClass?: string;
                            templateId?: string;
                            textColor?: string;
                            backgroundColor?: string;
                            enabled?: boolean;
                        } | undefined;
                        spam?: boolean;
                        deleted?: boolean;
                        languageCode?: string;
                        updatedAt?: number;
                        gildings?: number;
                        score?: number;
                        numComments?: number;
                        thumbnail?: string;
                        media?: {
                            type?: string;
                            oembed?: {
                                type?: string;
                                version?: string;
                                title?: string;
                                description?: string;
                                authorName?: string;
                                authorUrl?: string;
                                providerName?: string;
                                providerUrl?: string;
                                thumbnailUrl?: string;
                                thumbnailWidth?: number;
                                thumbnailHeight?: number;
                                html?: string;
                                width?: number;
                                height?: number;
                            } | undefined;
                            redditVideo?: {
                                bitrateKbps?: number;
                                fallbackUrl?: string;
                                height?: number;
                                width?: number;
                                scrubberMediaUrl?: string;
                                dashUrl?: string;
                                duration?: number;
                                hlsUrl?: string;
                                isGif?: boolean;
                                transcodingStatus?: string;
                            } | undefined;
                        } | undefined;
                        crosspostParentId?: string;
                        permalink?: string;
                        isPoll?: boolean;
                        isPromoted?: boolean;
                        isMultiMedia?: boolean;
                        type?: string;
                        unlisted?: boolean;
                        galleryImages?: string[];
                        isImage?: boolean;
                    } | undefined;
                    removedAt?: Date | undefined;
                    reason?: string;
                    author?: string;
                    subreddit?: {
                        id?: string;
                        name?: string;
                        nsfw?: boolean;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType;
                        spam?: boolean;
                        quarantined?: boolean;
                        topics?: string[];
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating;
                        subscribersCount?: number;
                        permalink?: string;
                    } | undefined;
                }): AutomoderatorFilterPost;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.automation.v1alpha.HandlerResult";
                encode(_: HandlerResult, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): HandlerResult;
                fromJSON(_: any): HandlerResult;
                toJSON(_: HandlerResult): unknown;
                create(base?: DeepPartial<HandlerResult>): HandlerResult;
                fromPartial(_: DeepPartial<HandlerResult>): HandlerResult;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
export interface OnAutomoderatorFilterComment {
    OnAutomoderatorFilterComment(request: AutomoderatorFilterComment, metadata?: Metadata): Promise<HandlerResult>;
}
export declare const OnAutomoderatorFilterCommentServiceName = "devvit.actor.automation.v1alpha.OnAutomoderatorFilterComment";
export declare class OnAutomoderatorFilterCommentClientImpl implements OnAutomoderatorFilterComment {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    OnAutomoderatorFilterComment(request: AutomoderatorFilterComment, metadata?: Metadata): Promise<HandlerResult>;
}
export type OnAutomoderatorFilterCommentDefinition = typeof OnAutomoderatorFilterCommentDefinition;
export declare const OnAutomoderatorFilterCommentDefinition: {
    readonly name: "OnAutomoderatorFilterComment";
    readonly fullName: "devvit.actor.automation.v1alpha.OnAutomoderatorFilterComment";
    readonly methods: {
        readonly onAutomoderatorFilterComment: {
            readonly name: "OnAutomoderatorFilterComment";
            readonly requestType: {
                $type: "devvit.events.v1alpha.AutomoderatorFilterComment";
                encode(message: AutomoderatorFilterComment, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): AutomoderatorFilterComment;
                fromJSON(object: any): AutomoderatorFilterComment;
                toJSON(message: AutomoderatorFilterComment): unknown;
                create(base?: {
                    comment?: {
                        id?: string;
                        parentId?: string;
                        body?: string;
                        author?: string;
                        numReports?: number;
                        collapsedBecauseCrowdControl?: boolean;
                        spam?: boolean;
                        deleted?: boolean;
                        createdAt?: number;
                        upvotes?: number;
                        downvotes?: number;
                        languageCode?: string;
                        lastModifiedAt?: number;
                        gilded?: boolean;
                        score?: number;
                        permalink?: string;
                        hasMedia?: boolean;
                        postId?: string;
                        subredditId?: string;
                        elementTypes?: string[];
                    } | undefined;
                    removedAt?: Date | undefined;
                    reason?: string;
                    author?: string;
                    subreddit?: {
                        id?: string;
                        name?: string;
                        nsfw?: boolean;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType;
                        spam?: boolean;
                        quarantined?: boolean;
                        topics?: string[];
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating;
                        subscribersCount?: number;
                        permalink?: string;
                    } | undefined;
                } | undefined): AutomoderatorFilterComment;
                fromPartial(object: {
                    comment?: {
                        id?: string;
                        parentId?: string;
                        body?: string;
                        author?: string;
                        numReports?: number;
                        collapsedBecauseCrowdControl?: boolean;
                        spam?: boolean;
                        deleted?: boolean;
                        createdAt?: number;
                        upvotes?: number;
                        downvotes?: number;
                        languageCode?: string;
                        lastModifiedAt?: number;
                        gilded?: boolean;
                        score?: number;
                        permalink?: string;
                        hasMedia?: boolean;
                        postId?: string;
                        subredditId?: string;
                        elementTypes?: string[];
                    } | undefined;
                    removedAt?: Date | undefined;
                    reason?: string;
                    author?: string;
                    subreddit?: {
                        id?: string;
                        name?: string;
                        nsfw?: boolean;
                        type?: import("../../../reddit/v2alpha/subredditv2.js").SubredditType;
                        spam?: boolean;
                        quarantined?: boolean;
                        topics?: string[];
                        rating?: import("../../../reddit/v2alpha/subredditv2.js").SubredditRating;
                        subscribersCount?: number;
                        permalink?: string;
                    } | undefined;
                }): AutomoderatorFilterComment;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.automation.v1alpha.HandlerResult";
                encode(_: HandlerResult, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): HandlerResult;
                fromJSON(_: any): HandlerResult;
                toJSON(_: HandlerResult): unknown;
                create(base?: DeepPartial<HandlerResult>): HandlerResult;
                fromPartial(_: DeepPartial<HandlerResult>): HandlerResult;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array, metadata?: Metadata): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=event_handlers.d.ts.map