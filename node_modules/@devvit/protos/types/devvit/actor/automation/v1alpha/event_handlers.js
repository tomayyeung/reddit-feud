/**
 * #event_handlers.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { messageTypeRegistry } from "../../../../typeRegistry.js";
import { AccountDelete, AppInstall, AppUpgrade, AutomoderatorFilterComment, AutomoderatorFilterPost, CommentApprove, CommentCreate, CommentDelete, CommentReport, CommentSubmit, CommentUpdate, PostApprove, PostCreate, PostDelete, PostFlairUpdate, PostNsfwUpdate, PostReport, PostSpoilerUpdate, PostSubmit, PostUpdate, SubredditSubscribe, } from "../../../events/v1alpha/events.js";
import { ModAction } from "../../../reddit/v2alpha/modaction.js";
import { ModMail } from "../../../reddit/v2alpha/modmail.js";
function createBaseHandlerResult() {
    return {};
}
export const HandlerResult = {
    $type: "devvit.actor.automation.v1alpha.HandlerResult",
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHandlerResult();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return HandlerResult.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseHandlerResult();
        return message;
    },
};
messageTypeRegistry.set(HandlerResult.$type, HandlerResult);
export const OnPostSubmitServiceName = "devvit.actor.automation.v1alpha.OnPostSubmit";
export class OnPostSubmitClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || OnPostSubmitServiceName;
        this.rpc = rpc;
        this.OnPostSubmit = this.OnPostSubmit.bind(this);
    }
    OnPostSubmit(request, metadata) {
        const data = PostSubmit.encode(request).finish();
        const promise = this.rpc.request(this.service, "OnPostSubmit", data, metadata);
        return promise.then((data) => HandlerResult.decode(_m0.Reader.create(data)));
    }
}
export const OnPostSubmitDefinition = {
    name: "OnPostSubmit",
    fullName: "devvit.actor.automation.v1alpha.OnPostSubmit",
    methods: {
        onPostSubmit: {
            name: "OnPostSubmit",
            requestType: PostSubmit,
            requestStream: false,
            responseType: HandlerResult,
            responseStream: false,
            options: {},
        },
    },
};
export const OnPostCreateServiceName = "devvit.actor.automation.v1alpha.OnPostCreate";
export class OnPostCreateClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || OnPostCreateServiceName;
        this.rpc = rpc;
        this.OnPostCreate = this.OnPostCreate.bind(this);
    }
    OnPostCreate(request, metadata) {
        const data = PostCreate.encode(request).finish();
        const promise = this.rpc.request(this.service, "OnPostCreate", data, metadata);
        return promise.then((data) => HandlerResult.decode(_m0.Reader.create(data)));
    }
}
export const OnPostCreateDefinition = {
    name: "OnPostCreate",
    fullName: "devvit.actor.automation.v1alpha.OnPostCreate",
    methods: {
        onPostCreate: {
            name: "OnPostCreate",
            requestType: PostCreate,
            requestStream: false,
            responseType: HandlerResult,
            responseStream: false,
            options: {},
        },
    },
};
export const OnPostUpdateServiceName = "devvit.actor.automation.v1alpha.OnPostUpdate";
export class OnPostUpdateClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || OnPostUpdateServiceName;
        this.rpc = rpc;
        this.OnPostUpdate = this.OnPostUpdate.bind(this);
    }
    OnPostUpdate(request, metadata) {
        const data = PostUpdate.encode(request).finish();
        const promise = this.rpc.request(this.service, "OnPostUpdate", data, metadata);
        return promise.then((data) => HandlerResult.decode(_m0.Reader.create(data)));
    }
}
export const OnPostUpdateDefinition = {
    name: "OnPostUpdate",
    fullName: "devvit.actor.automation.v1alpha.OnPostUpdate",
    methods: {
        onPostUpdate: {
            name: "OnPostUpdate",
            requestType: PostUpdate,
            requestStream: false,
            responseType: HandlerResult,
            responseStream: false,
            options: {},
        },
    },
};
export const OnPostReportServiceName = "devvit.actor.automation.v1alpha.OnPostReport";
export class OnPostReportClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || OnPostReportServiceName;
        this.rpc = rpc;
        this.OnPostReport = this.OnPostReport.bind(this);
    }
    OnPostReport(request, metadata) {
        const data = PostReport.encode(request).finish();
        const promise = this.rpc.request(this.service, "OnPostReport", data, metadata);
        return promise.then((data) => HandlerResult.decode(_m0.Reader.create(data)));
    }
}
export const OnPostReportDefinition = {
    name: "OnPostReport",
    fullName: "devvit.actor.automation.v1alpha.OnPostReport",
    methods: {
        onPostReport: {
            name: "OnPostReport",
            requestType: PostReport,
            requestStream: false,
            responseType: HandlerResult,
            responseStream: false,
            options: {},
        },
    },
};
export const OnPostFlairUpdateServiceName = "devvit.actor.automation.v1alpha.OnPostFlairUpdate";
export class OnPostFlairUpdateClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || OnPostFlairUpdateServiceName;
        this.rpc = rpc;
        this.OnPostFlairUpdate = this.OnPostFlairUpdate.bind(this);
    }
    OnPostFlairUpdate(request, metadata) {
        const data = PostFlairUpdate.encode(request).finish();
        const promise = this.rpc.request(this.service, "OnPostFlairUpdate", data, metadata);
        return promise.then((data) => HandlerResult.decode(_m0.Reader.create(data)));
    }
}
export const OnPostFlairUpdateDefinition = {
    name: "OnPostFlairUpdate",
    fullName: "devvit.actor.automation.v1alpha.OnPostFlairUpdate",
    methods: {
        onPostFlairUpdate: {
            name: "OnPostFlairUpdate",
            requestType: PostFlairUpdate,
            requestStream: false,
            responseType: HandlerResult,
            responseStream: false,
            options: {},
        },
    },
};
export const OnPostDeleteServiceName = "devvit.actor.automation.v1alpha.OnPostDelete";
export class OnPostDeleteClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || OnPostDeleteServiceName;
        this.rpc = rpc;
        this.OnPostDelete = this.OnPostDelete.bind(this);
    }
    OnPostDelete(request, metadata) {
        const data = PostDelete.encode(request).finish();
        const promise = this.rpc.request(this.service, "OnPostDelete", data, metadata);
        return promise.then((data) => HandlerResult.decode(_m0.Reader.create(data)));
    }
}
export const OnPostDeleteDefinition = {
    name: "OnPostDelete",
    fullName: "devvit.actor.automation.v1alpha.OnPostDelete",
    methods: {
        onPostDelete: {
            name: "OnPostDelete",
            requestType: PostDelete,
            requestStream: false,
            responseType: HandlerResult,
            responseStream: false,
            options: {},
        },
    },
};
export const OnPostApproveServiceName = "devvit.actor.automation.v1alpha.OnPostApprove";
export class OnPostApproveClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || OnPostApproveServiceName;
        this.rpc = rpc;
        this.OnPostApprove = this.OnPostApprove.bind(this);
    }
    OnPostApprove(request, metadata) {
        const data = PostApprove.encode(request).finish();
        const promise = this.rpc.request(this.service, "OnPostApprove", data, metadata);
        return promise.then((data) => HandlerResult.decode(_m0.Reader.create(data)));
    }
}
export const OnPostApproveDefinition = {
    name: "OnPostApprove",
    fullName: "devvit.actor.automation.v1alpha.OnPostApprove",
    methods: {
        onPostApprove: {
            name: "OnPostApprove",
            requestType: PostApprove,
            requestStream: false,
            responseType: HandlerResult,
            responseStream: false,
            options: {},
        },
    },
};
export const OnCommentSubmitServiceName = "devvit.actor.automation.v1alpha.OnCommentSubmit";
export class OnCommentSubmitClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || OnCommentSubmitServiceName;
        this.rpc = rpc;
        this.OnCommentSubmit = this.OnCommentSubmit.bind(this);
    }
    OnCommentSubmit(request, metadata) {
        const data = CommentSubmit.encode(request).finish();
        const promise = this.rpc.request(this.service, "OnCommentSubmit", data, metadata);
        return promise.then((data) => HandlerResult.decode(_m0.Reader.create(data)));
    }
}
export const OnCommentSubmitDefinition = {
    name: "OnCommentSubmit",
    fullName: "devvit.actor.automation.v1alpha.OnCommentSubmit",
    methods: {
        onCommentSubmit: {
            name: "OnCommentSubmit",
            requestType: CommentSubmit,
            requestStream: false,
            responseType: HandlerResult,
            responseStream: false,
            options: {},
        },
    },
};
export const OnCommentCreateServiceName = "devvit.actor.automation.v1alpha.OnCommentCreate";
export class OnCommentCreateClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || OnCommentCreateServiceName;
        this.rpc = rpc;
        this.OnCommentCreate = this.OnCommentCreate.bind(this);
    }
    OnCommentCreate(request, metadata) {
        const data = CommentCreate.encode(request).finish();
        const promise = this.rpc.request(this.service, "OnCommentCreate", data, metadata);
        return promise.then((data) => HandlerResult.decode(_m0.Reader.create(data)));
    }
}
export const OnCommentCreateDefinition = {
    name: "OnCommentCreate",
    fullName: "devvit.actor.automation.v1alpha.OnCommentCreate",
    methods: {
        onCommentCreate: {
            name: "OnCommentCreate",
            requestType: CommentCreate,
            requestStream: false,
            responseType: HandlerResult,
            responseStream: false,
            options: {},
        },
    },
};
export const OnCommentUpdateServiceName = "devvit.actor.automation.v1alpha.OnCommentUpdate";
export class OnCommentUpdateClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || OnCommentUpdateServiceName;
        this.rpc = rpc;
        this.OnCommentUpdate = this.OnCommentUpdate.bind(this);
    }
    OnCommentUpdate(request, metadata) {
        const data = CommentUpdate.encode(request).finish();
        const promise = this.rpc.request(this.service, "OnCommentUpdate", data, metadata);
        return promise.then((data) => HandlerResult.decode(_m0.Reader.create(data)));
    }
}
export const OnCommentUpdateDefinition = {
    name: "OnCommentUpdate",
    fullName: "devvit.actor.automation.v1alpha.OnCommentUpdate",
    methods: {
        onCommentUpdate: {
            name: "OnCommentUpdate",
            requestType: CommentUpdate,
            requestStream: false,
            responseType: HandlerResult,
            responseStream: false,
            options: {},
        },
    },
};
export const OnCommentReportServiceName = "devvit.actor.automation.v1alpha.OnCommentReport";
export class OnCommentReportClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || OnCommentReportServiceName;
        this.rpc = rpc;
        this.OnCommentReport = this.OnCommentReport.bind(this);
    }
    OnCommentReport(request, metadata) {
        const data = CommentReport.encode(request).finish();
        const promise = this.rpc.request(this.service, "OnCommentReport", data, metadata);
        return promise.then((data) => HandlerResult.decode(_m0.Reader.create(data)));
    }
}
export const OnCommentReportDefinition = {
    name: "OnCommentReport",
    fullName: "devvit.actor.automation.v1alpha.OnCommentReport",
    methods: {
        onCommentReport: {
            name: "OnCommentReport",
            requestType: CommentReport,
            requestStream: false,
            responseType: HandlerResult,
            responseStream: false,
            options: {},
        },
    },
};
export const OnCommentDeleteServiceName = "devvit.actor.automation.v1alpha.OnCommentDelete";
export class OnCommentDeleteClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || OnCommentDeleteServiceName;
        this.rpc = rpc;
        this.OnCommentDelete = this.OnCommentDelete.bind(this);
    }
    OnCommentDelete(request, metadata) {
        const data = CommentDelete.encode(request).finish();
        const promise = this.rpc.request(this.service, "OnCommentDelete", data, metadata);
        return promise.then((data) => HandlerResult.decode(_m0.Reader.create(data)));
    }
}
export const OnCommentDeleteDefinition = {
    name: "OnCommentDelete",
    fullName: "devvit.actor.automation.v1alpha.OnCommentDelete",
    methods: {
        onCommentDelete: {
            name: "OnCommentDelete",
            requestType: CommentDelete,
            requestStream: false,
            responseType: HandlerResult,
            responseStream: false,
            options: {},
        },
    },
};
export const OnCommentApproveServiceName = "devvit.actor.automation.v1alpha.OnCommentApprove";
export class OnCommentApproveClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || OnCommentApproveServiceName;
        this.rpc = rpc;
        this.OnCommentApprove = this.OnCommentApprove.bind(this);
    }
    OnCommentApprove(request, metadata) {
        const data = CommentApprove.encode(request).finish();
        const promise = this.rpc.request(this.service, "OnCommentApprove", data, metadata);
        return promise.then((data) => HandlerResult.decode(_m0.Reader.create(data)));
    }
}
export const OnCommentApproveDefinition = {
    name: "OnCommentApprove",
    fullName: "devvit.actor.automation.v1alpha.OnCommentApprove",
    methods: {
        onCommentApprove: {
            name: "OnCommentApprove",
            requestType: CommentApprove,
            requestStream: false,
            responseType: HandlerResult,
            responseStream: false,
            options: {},
        },
    },
};
export const OnSubredditSubscribeServiceName = "devvit.actor.automation.v1alpha.OnSubredditSubscribe";
export class OnSubredditSubscribeClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || OnSubredditSubscribeServiceName;
        this.rpc = rpc;
        this.OnSubredditSubscribe = this.OnSubredditSubscribe.bind(this);
    }
    OnSubredditSubscribe(request, metadata) {
        const data = SubredditSubscribe.encode(request).finish();
        const promise = this.rpc.request(this.service, "OnSubredditSubscribe", data, metadata);
        return promise.then((data) => HandlerResult.decode(_m0.Reader.create(data)));
    }
}
export const OnSubredditSubscribeDefinition = {
    name: "OnSubredditSubscribe",
    fullName: "devvit.actor.automation.v1alpha.OnSubredditSubscribe",
    methods: {
        onSubredditSubscribe: {
            name: "OnSubredditSubscribe",
            requestType: SubredditSubscribe,
            requestStream: false,
            responseType: HandlerResult,
            responseStream: false,
            options: {},
        },
    },
};
export const OnAppInstallServiceName = "devvit.actor.automation.v1alpha.OnAppInstall";
export class OnAppInstallClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || OnAppInstallServiceName;
        this.rpc = rpc;
        this.OnAppInstall = this.OnAppInstall.bind(this);
    }
    OnAppInstall(request, metadata) {
        const data = AppInstall.encode(request).finish();
        const promise = this.rpc.request(this.service, "OnAppInstall", data, metadata);
        return promise.then((data) => HandlerResult.decode(_m0.Reader.create(data)));
    }
}
export const OnAppInstallDefinition = {
    name: "OnAppInstall",
    fullName: "devvit.actor.automation.v1alpha.OnAppInstall",
    methods: {
        onAppInstall: {
            name: "OnAppInstall",
            requestType: AppInstall,
            requestStream: false,
            responseType: HandlerResult,
            responseStream: false,
            options: {},
        },
    },
};
export const OnAppUpgradeServiceName = "devvit.actor.automation.v1alpha.OnAppUpgrade";
export class OnAppUpgradeClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || OnAppUpgradeServiceName;
        this.rpc = rpc;
        this.OnAppUpgrade = this.OnAppUpgrade.bind(this);
    }
    OnAppUpgrade(request, metadata) {
        const data = AppUpgrade.encode(request).finish();
        const promise = this.rpc.request(this.service, "OnAppUpgrade", data, metadata);
        return promise.then((data) => HandlerResult.decode(_m0.Reader.create(data)));
    }
}
export const OnAppUpgradeDefinition = {
    name: "OnAppUpgrade",
    fullName: "devvit.actor.automation.v1alpha.OnAppUpgrade",
    methods: {
        onAppUpgrade: {
            name: "OnAppUpgrade",
            requestType: AppUpgrade,
            requestStream: false,
            responseType: HandlerResult,
            responseStream: false,
            options: {},
        },
    },
};
export const OnModActionServiceName = "devvit.actor.automation.v1alpha.OnModAction";
export class OnModActionClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || OnModActionServiceName;
        this.rpc = rpc;
        this.OnModAction = this.OnModAction.bind(this);
    }
    OnModAction(request, metadata) {
        const data = ModAction.encode(request).finish();
        const promise = this.rpc.request(this.service, "OnModAction", data, metadata);
        return promise.then((data) => HandlerResult.decode(_m0.Reader.create(data)));
    }
}
export const OnModActionDefinition = {
    name: "OnModAction",
    fullName: "devvit.actor.automation.v1alpha.OnModAction",
    methods: {
        onModAction: {
            name: "OnModAction",
            requestType: ModAction,
            requestStream: false,
            responseType: HandlerResult,
            responseStream: false,
            options: {},
        },
    },
};
export const OnModMailServiceName = "devvit.actor.automation.v1alpha.OnModMail";
export class OnModMailClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || OnModMailServiceName;
        this.rpc = rpc;
        this.OnModMail = this.OnModMail.bind(this);
    }
    OnModMail(request, metadata) {
        const data = ModMail.encode(request).finish();
        const promise = this.rpc.request(this.service, "OnModMail", data, metadata);
        return promise.then((data) => HandlerResult.decode(_m0.Reader.create(data)));
    }
}
export const OnModMailDefinition = {
    name: "OnModMail",
    fullName: "devvit.actor.automation.v1alpha.OnModMail",
    methods: {
        onModMail: {
            name: "OnModMail",
            requestType: ModMail,
            requestStream: false,
            responseType: HandlerResult,
            responseStream: false,
            options: {},
        },
    },
};
export const OnAccountDeleteServiceName = "devvit.actor.automation.v1alpha.OnAccountDelete";
export class OnAccountDeleteClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || OnAccountDeleteServiceName;
        this.rpc = rpc;
        this.OnAccountDelete = this.OnAccountDelete.bind(this);
    }
    OnAccountDelete(request, metadata) {
        const data = AccountDelete.encode(request).finish();
        const promise = this.rpc.request(this.service, "OnAccountDelete", data, metadata);
        return promise.then((data) => HandlerResult.decode(_m0.Reader.create(data)));
    }
}
export const OnAccountDeleteDefinition = {
    name: "OnAccountDelete",
    fullName: "devvit.actor.automation.v1alpha.OnAccountDelete",
    methods: {
        onAccountDelete: {
            name: "OnAccountDelete",
            requestType: AccountDelete,
            requestStream: false,
            responseType: HandlerResult,
            responseStream: false,
            options: {},
        },
    },
};
export const OnPostNsfwUpdateServiceName = "devvit.actor.automation.v1alpha.OnPostNsfwUpdate";
export class OnPostNsfwUpdateClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || OnPostNsfwUpdateServiceName;
        this.rpc = rpc;
        this.OnPostNsfwUpdate = this.OnPostNsfwUpdate.bind(this);
    }
    OnPostNsfwUpdate(request, metadata) {
        const data = PostNsfwUpdate.encode(request).finish();
        const promise = this.rpc.request(this.service, "OnPostNsfwUpdate", data, metadata);
        return promise.then((data) => HandlerResult.decode(_m0.Reader.create(data)));
    }
}
export const OnPostNsfwUpdateDefinition = {
    name: "OnPostNsfwUpdate",
    fullName: "devvit.actor.automation.v1alpha.OnPostNsfwUpdate",
    methods: {
        onPostNsfwUpdate: {
            name: "OnPostNsfwUpdate",
            requestType: PostNsfwUpdate,
            requestStream: false,
            responseType: HandlerResult,
            responseStream: false,
            options: {},
        },
    },
};
export const OnPostSpoilerUpdateServiceName = "devvit.actor.automation.v1alpha.OnPostSpoilerUpdate";
export class OnPostSpoilerUpdateClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || OnPostSpoilerUpdateServiceName;
        this.rpc = rpc;
        this.OnPostSpoilerUpdate = this.OnPostSpoilerUpdate.bind(this);
    }
    OnPostSpoilerUpdate(request, metadata) {
        const data = PostSpoilerUpdate.encode(request).finish();
        const promise = this.rpc.request(this.service, "OnPostSpoilerUpdate", data, metadata);
        return promise.then((data) => HandlerResult.decode(_m0.Reader.create(data)));
    }
}
export const OnPostSpoilerUpdateDefinition = {
    name: "OnPostSpoilerUpdate",
    fullName: "devvit.actor.automation.v1alpha.OnPostSpoilerUpdate",
    methods: {
        onPostSpoilerUpdate: {
            name: "OnPostSpoilerUpdate",
            requestType: PostSpoilerUpdate,
            requestStream: false,
            responseType: HandlerResult,
            responseStream: false,
            options: {},
        },
    },
};
export const OnAutomoderatorFilterPostServiceName = "devvit.actor.automation.v1alpha.OnAutomoderatorFilterPost";
export class OnAutomoderatorFilterPostClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || OnAutomoderatorFilterPostServiceName;
        this.rpc = rpc;
        this.OnAutomoderatorFilterPost = this.OnAutomoderatorFilterPost.bind(this);
    }
    OnAutomoderatorFilterPost(request, metadata) {
        const data = AutomoderatorFilterPost.encode(request).finish();
        const promise = this.rpc.request(this.service, "OnAutomoderatorFilterPost", data, metadata);
        return promise.then((data) => HandlerResult.decode(_m0.Reader.create(data)));
    }
}
export const OnAutomoderatorFilterPostDefinition = {
    name: "OnAutomoderatorFilterPost",
    fullName: "devvit.actor.automation.v1alpha.OnAutomoderatorFilterPost",
    methods: {
        onAutomoderatorFilterPost: {
            name: "OnAutomoderatorFilterPost",
            requestType: AutomoderatorFilterPost,
            requestStream: false,
            responseType: HandlerResult,
            responseStream: false,
            options: {},
        },
    },
};
export const OnAutomoderatorFilterCommentServiceName = "devvit.actor.automation.v1alpha.OnAutomoderatorFilterComment";
export class OnAutomoderatorFilterCommentClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || OnAutomoderatorFilterCommentServiceName;
        this.rpc = rpc;
        this.OnAutomoderatorFilterComment = this.OnAutomoderatorFilterComment.bind(this);
    }
    OnAutomoderatorFilterComment(request, metadata) {
        const data = AutomoderatorFilterComment.encode(request).finish();
        const promise = this.rpc.request(this.service, "OnAutomoderatorFilterComment", data, metadata);
        return promise.then((data) => HandlerResult.decode(_m0.Reader.create(data)));
    }
}
export const OnAutomoderatorFilterCommentDefinition = {
    name: "OnAutomoderatorFilterComment",
    fullName: "devvit.actor.automation.v1alpha.OnAutomoderatorFilterComment",
    methods: {
        onAutomoderatorFilterComment: {
            name: "OnAutomoderatorFilterComment",
            requestType: AutomoderatorFilterComment,
            requestStream: false,
            responseType: HandlerResult,
            responseStream: false,
            options: {},
        },
    },
};
