import { PostSubmit, PostCreate, PostUpdate, PostReport, PostFlairUpdate, PostDelete, PostApprove, CommentSubmit, CommentCreate, CommentUpdate, CommentReport, CommentDelete, CommentApprove, SubredditSubscribe, AppInstall, AppUpgrade, AccountDelete, PostNsfwUpdate, PostSpoilerUpdate, AutomoderatorFilterPost, AutomoderatorFilterComment } from '../../../events/v1alpha/events.js';
import { HandlerResult } from './event_handlers.js';
import { ModAction } from '../../../reddit/v2alpha/modaction.js';
import { ModMail } from '../../../reddit/v2alpha/modmail.js';
interface Rpc {
    request(service: string, method: string, contentType: 'application/json' | 'application/protobuf', data: object | Uint8Array): Promise<object | Uint8Array>;
}
export interface OnPostSubmitClient {
    OnPostSubmit(request: PostSubmit): Promise<HandlerResult>;
}
export declare class OnPostSubmitClientJSON implements OnPostSubmitClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    OnPostSubmit(request: PostSubmit): Promise<HandlerResult>;
}
export declare class OnPostSubmitClientProtobuf implements OnPostSubmitClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    OnPostSubmit(request: PostSubmit): Promise<HandlerResult>;
}
interface Rpc {
    request(service: string, method: string, contentType: 'application/json' | 'application/protobuf', data: object | Uint8Array): Promise<object | Uint8Array>;
}
export interface OnPostCreateClient {
    OnPostCreate(request: PostCreate): Promise<HandlerResult>;
}
export declare class OnPostCreateClientJSON implements OnPostCreateClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    OnPostCreate(request: PostCreate): Promise<HandlerResult>;
}
export declare class OnPostCreateClientProtobuf implements OnPostCreateClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    OnPostCreate(request: PostCreate): Promise<HandlerResult>;
}
interface Rpc {
    request(service: string, method: string, contentType: 'application/json' | 'application/protobuf', data: object | Uint8Array): Promise<object | Uint8Array>;
}
export interface OnPostUpdateClient {
    OnPostUpdate(request: PostUpdate): Promise<HandlerResult>;
}
export declare class OnPostUpdateClientJSON implements OnPostUpdateClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    OnPostUpdate(request: PostUpdate): Promise<HandlerResult>;
}
export declare class OnPostUpdateClientProtobuf implements OnPostUpdateClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    OnPostUpdate(request: PostUpdate): Promise<HandlerResult>;
}
interface Rpc {
    request(service: string, method: string, contentType: 'application/json' | 'application/protobuf', data: object | Uint8Array): Promise<object | Uint8Array>;
}
export interface OnPostReportClient {
    OnPostReport(request: PostReport): Promise<HandlerResult>;
}
export declare class OnPostReportClientJSON implements OnPostReportClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    OnPostReport(request: PostReport): Promise<HandlerResult>;
}
export declare class OnPostReportClientProtobuf implements OnPostReportClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    OnPostReport(request: PostReport): Promise<HandlerResult>;
}
interface Rpc {
    request(service: string, method: string, contentType: 'application/json' | 'application/protobuf', data: object | Uint8Array): Promise<object | Uint8Array>;
}
export interface OnPostFlairUpdateClient {
    OnPostFlairUpdate(request: PostFlairUpdate): Promise<HandlerResult>;
}
export declare class OnPostFlairUpdateClientJSON implements OnPostFlairUpdateClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    OnPostFlairUpdate(request: PostFlairUpdate): Promise<HandlerResult>;
}
export declare class OnPostFlairUpdateClientProtobuf implements OnPostFlairUpdateClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    OnPostFlairUpdate(request: PostFlairUpdate): Promise<HandlerResult>;
}
interface Rpc {
    request(service: string, method: string, contentType: 'application/json' | 'application/protobuf', data: object | Uint8Array): Promise<object | Uint8Array>;
}
export interface OnPostDeleteClient {
    OnPostDelete(request: PostDelete): Promise<HandlerResult>;
}
export declare class OnPostDeleteClientJSON implements OnPostDeleteClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    OnPostDelete(request: PostDelete): Promise<HandlerResult>;
}
export declare class OnPostDeleteClientProtobuf implements OnPostDeleteClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    OnPostDelete(request: PostDelete): Promise<HandlerResult>;
}
interface Rpc {
    request(service: string, method: string, contentType: 'application/json' | 'application/protobuf', data: object | Uint8Array): Promise<object | Uint8Array>;
}
export interface OnPostApproveClient {
    OnPostApprove(request: PostApprove): Promise<HandlerResult>;
}
export declare class OnPostApproveClientJSON implements OnPostApproveClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    OnPostApprove(request: PostApprove): Promise<HandlerResult>;
}
export declare class OnPostApproveClientProtobuf implements OnPostApproveClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    OnPostApprove(request: PostApprove): Promise<HandlerResult>;
}
interface Rpc {
    request(service: string, method: string, contentType: 'application/json' | 'application/protobuf', data: object | Uint8Array): Promise<object | Uint8Array>;
}
export interface OnCommentSubmitClient {
    OnCommentSubmit(request: CommentSubmit): Promise<HandlerResult>;
}
export declare class OnCommentSubmitClientJSON implements OnCommentSubmitClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    OnCommentSubmit(request: CommentSubmit): Promise<HandlerResult>;
}
export declare class OnCommentSubmitClientProtobuf implements OnCommentSubmitClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    OnCommentSubmit(request: CommentSubmit): Promise<HandlerResult>;
}
interface Rpc {
    request(service: string, method: string, contentType: 'application/json' | 'application/protobuf', data: object | Uint8Array): Promise<object | Uint8Array>;
}
export interface OnCommentCreateClient {
    OnCommentCreate(request: CommentCreate): Promise<HandlerResult>;
}
export declare class OnCommentCreateClientJSON implements OnCommentCreateClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    OnCommentCreate(request: CommentCreate): Promise<HandlerResult>;
}
export declare class OnCommentCreateClientProtobuf implements OnCommentCreateClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    OnCommentCreate(request: CommentCreate): Promise<HandlerResult>;
}
interface Rpc {
    request(service: string, method: string, contentType: 'application/json' | 'application/protobuf', data: object | Uint8Array): Promise<object | Uint8Array>;
}
export interface OnCommentUpdateClient {
    OnCommentUpdate(request: CommentUpdate): Promise<HandlerResult>;
}
export declare class OnCommentUpdateClientJSON implements OnCommentUpdateClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    OnCommentUpdate(request: CommentUpdate): Promise<HandlerResult>;
}
export declare class OnCommentUpdateClientProtobuf implements OnCommentUpdateClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    OnCommentUpdate(request: CommentUpdate): Promise<HandlerResult>;
}
interface Rpc {
    request(service: string, method: string, contentType: 'application/json' | 'application/protobuf', data: object | Uint8Array): Promise<object | Uint8Array>;
}
export interface OnCommentReportClient {
    OnCommentReport(request: CommentReport): Promise<HandlerResult>;
}
export declare class OnCommentReportClientJSON implements OnCommentReportClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    OnCommentReport(request: CommentReport): Promise<HandlerResult>;
}
export declare class OnCommentReportClientProtobuf implements OnCommentReportClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    OnCommentReport(request: CommentReport): Promise<HandlerResult>;
}
interface Rpc {
    request(service: string, method: string, contentType: 'application/json' | 'application/protobuf', data: object | Uint8Array): Promise<object | Uint8Array>;
}
export interface OnCommentDeleteClient {
    OnCommentDelete(request: CommentDelete): Promise<HandlerResult>;
}
export declare class OnCommentDeleteClientJSON implements OnCommentDeleteClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    OnCommentDelete(request: CommentDelete): Promise<HandlerResult>;
}
export declare class OnCommentDeleteClientProtobuf implements OnCommentDeleteClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    OnCommentDelete(request: CommentDelete): Promise<HandlerResult>;
}
interface Rpc {
    request(service: string, method: string, contentType: 'application/json' | 'application/protobuf', data: object | Uint8Array): Promise<object | Uint8Array>;
}
export interface OnCommentApproveClient {
    OnCommentApprove(request: CommentApprove): Promise<HandlerResult>;
}
export declare class OnCommentApproveClientJSON implements OnCommentApproveClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    OnCommentApprove(request: CommentApprove): Promise<HandlerResult>;
}
export declare class OnCommentApproveClientProtobuf implements OnCommentApproveClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    OnCommentApprove(request: CommentApprove): Promise<HandlerResult>;
}
interface Rpc {
    request(service: string, method: string, contentType: 'application/json' | 'application/protobuf', data: object | Uint8Array): Promise<object | Uint8Array>;
}
export interface OnSubredditSubscribeClient {
    OnSubredditSubscribe(request: SubredditSubscribe): Promise<HandlerResult>;
}
export declare class OnSubredditSubscribeClientJSON implements OnSubredditSubscribeClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    OnSubredditSubscribe(request: SubredditSubscribe): Promise<HandlerResult>;
}
export declare class OnSubredditSubscribeClientProtobuf implements OnSubredditSubscribeClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    OnSubredditSubscribe(request: SubredditSubscribe): Promise<HandlerResult>;
}
interface Rpc {
    request(service: string, method: string, contentType: 'application/json' | 'application/protobuf', data: object | Uint8Array): Promise<object | Uint8Array>;
}
export interface OnAppInstallClient {
    OnAppInstall(request: AppInstall): Promise<HandlerResult>;
}
export declare class OnAppInstallClientJSON implements OnAppInstallClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    OnAppInstall(request: AppInstall): Promise<HandlerResult>;
}
export declare class OnAppInstallClientProtobuf implements OnAppInstallClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    OnAppInstall(request: AppInstall): Promise<HandlerResult>;
}
interface Rpc {
    request(service: string, method: string, contentType: 'application/json' | 'application/protobuf', data: object | Uint8Array): Promise<object | Uint8Array>;
}
export interface OnAppUpgradeClient {
    OnAppUpgrade(request: AppUpgrade): Promise<HandlerResult>;
}
export declare class OnAppUpgradeClientJSON implements OnAppUpgradeClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    OnAppUpgrade(request: AppUpgrade): Promise<HandlerResult>;
}
export declare class OnAppUpgradeClientProtobuf implements OnAppUpgradeClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    OnAppUpgrade(request: AppUpgrade): Promise<HandlerResult>;
}
interface Rpc {
    request(service: string, method: string, contentType: 'application/json' | 'application/protobuf', data: object | Uint8Array): Promise<object | Uint8Array>;
}
export interface OnModActionClient {
    OnModAction(request: ModAction): Promise<HandlerResult>;
}
export declare class OnModActionClientJSON implements OnModActionClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    OnModAction(request: ModAction): Promise<HandlerResult>;
}
export declare class OnModActionClientProtobuf implements OnModActionClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    OnModAction(request: ModAction): Promise<HandlerResult>;
}
interface Rpc {
    request(service: string, method: string, contentType: 'application/json' | 'application/protobuf', data: object | Uint8Array): Promise<object | Uint8Array>;
}
export interface OnModMailClient {
    OnModMail(request: ModMail): Promise<HandlerResult>;
}
export declare class OnModMailClientJSON implements OnModMailClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    OnModMail(request: ModMail): Promise<HandlerResult>;
}
export declare class OnModMailClientProtobuf implements OnModMailClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    OnModMail(request: ModMail): Promise<HandlerResult>;
}
interface Rpc {
    request(service: string, method: string, contentType: 'application/json' | 'application/protobuf', data: object | Uint8Array): Promise<object | Uint8Array>;
}
export interface OnAccountDeleteClient {
    OnAccountDelete(request: AccountDelete): Promise<HandlerResult>;
}
export declare class OnAccountDeleteClientJSON implements OnAccountDeleteClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    OnAccountDelete(request: AccountDelete): Promise<HandlerResult>;
}
export declare class OnAccountDeleteClientProtobuf implements OnAccountDeleteClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    OnAccountDelete(request: AccountDelete): Promise<HandlerResult>;
}
interface Rpc {
    request(service: string, method: string, contentType: 'application/json' | 'application/protobuf', data: object | Uint8Array): Promise<object | Uint8Array>;
}
export interface OnPostNsfwUpdateClient {
    OnPostNsfwUpdate(request: PostNsfwUpdate): Promise<HandlerResult>;
}
export declare class OnPostNsfwUpdateClientJSON implements OnPostNsfwUpdateClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    OnPostNsfwUpdate(request: PostNsfwUpdate): Promise<HandlerResult>;
}
export declare class OnPostNsfwUpdateClientProtobuf implements OnPostNsfwUpdateClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    OnPostNsfwUpdate(request: PostNsfwUpdate): Promise<HandlerResult>;
}
interface Rpc {
    request(service: string, method: string, contentType: 'application/json' | 'application/protobuf', data: object | Uint8Array): Promise<object | Uint8Array>;
}
export interface OnPostSpoilerUpdateClient {
    OnPostSpoilerUpdate(request: PostSpoilerUpdate): Promise<HandlerResult>;
}
export declare class OnPostSpoilerUpdateClientJSON implements OnPostSpoilerUpdateClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    OnPostSpoilerUpdate(request: PostSpoilerUpdate): Promise<HandlerResult>;
}
export declare class OnPostSpoilerUpdateClientProtobuf implements OnPostSpoilerUpdateClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    OnPostSpoilerUpdate(request: PostSpoilerUpdate): Promise<HandlerResult>;
}
interface Rpc {
    request(service: string, method: string, contentType: 'application/json' | 'application/protobuf', data: object | Uint8Array): Promise<object | Uint8Array>;
}
export interface OnAutomoderatorFilterPostClient {
    OnAutomoderatorFilterPost(request: AutomoderatorFilterPost): Promise<HandlerResult>;
}
export declare class OnAutomoderatorFilterPostClientJSON implements OnAutomoderatorFilterPostClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    OnAutomoderatorFilterPost(request: AutomoderatorFilterPost): Promise<HandlerResult>;
}
export declare class OnAutomoderatorFilterPostClientProtobuf implements OnAutomoderatorFilterPostClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    OnAutomoderatorFilterPost(request: AutomoderatorFilterPost): Promise<HandlerResult>;
}
interface Rpc {
    request(service: string, method: string, contentType: 'application/json' | 'application/protobuf', data: object | Uint8Array): Promise<object | Uint8Array>;
}
export interface OnAutomoderatorFilterCommentClient {
    OnAutomoderatorFilterComment(request: AutomoderatorFilterComment): Promise<HandlerResult>;
}
export declare class OnAutomoderatorFilterCommentClientJSON implements OnAutomoderatorFilterCommentClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    OnAutomoderatorFilterComment(request: AutomoderatorFilterComment): Promise<HandlerResult>;
}
export declare class OnAutomoderatorFilterCommentClientProtobuf implements OnAutomoderatorFilterCommentClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    OnAutomoderatorFilterComment(request: AutomoderatorFilterComment): Promise<HandlerResult>;
}
export {};
//# sourceMappingURL=event_handlers.twirp-client.d.ts.map