import { PostSubmit, PostCreate, PostUpdate, PostReport, PostFlairUpdate, PostDelete, PostApprove, CommentSubmit, CommentCreate, CommentUpdate, CommentReport, CommentDelete, CommentApprove, SubredditSubscribe, AppInstall, AppUpgrade, AccountDelete, PostNsfwUpdate, PostSpoilerUpdate, AutomoderatorFilterPost, AutomoderatorFilterComment, } from '../../../events/v1alpha/events.js';
import { HandlerResult } from './event_handlers.js';
import { ModAction } from '../../../reddit/v2alpha/modaction.js';
import { ModMail } from '../../../reddit/v2alpha/modmail.js';
export class OnPostSubmitClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.OnPostSubmit.bind(this);
    }
    OnPostSubmit(request) {
        const data = PostSubmit.toJSON(request);
        const promise = this.rpc.request('devvit.actor.automation.v1alpha.OnPostSubmit', 'OnPostSubmit', 'application/json', data);
        return promise.then((data) => HandlerResult.fromJSON(data));
    }
}
export class OnPostSubmitClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.OnPostSubmit.bind(this);
    }
    OnPostSubmit(request) {
        const data = PostSubmit.encode(request).finish();
        const promise = this.rpc.request('devvit.actor.automation.v1alpha.OnPostSubmit', 'OnPostSubmit', 'application/protobuf', data);
        return promise.then((data) => HandlerResult.decode(data));
    }
}
export class OnPostCreateClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.OnPostCreate.bind(this);
    }
    OnPostCreate(request) {
        const data = PostCreate.toJSON(request);
        const promise = this.rpc.request('devvit.actor.automation.v1alpha.OnPostCreate', 'OnPostCreate', 'application/json', data);
        return promise.then((data) => HandlerResult.fromJSON(data));
    }
}
export class OnPostCreateClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.OnPostCreate.bind(this);
    }
    OnPostCreate(request) {
        const data = PostCreate.encode(request).finish();
        const promise = this.rpc.request('devvit.actor.automation.v1alpha.OnPostCreate', 'OnPostCreate', 'application/protobuf', data);
        return promise.then((data) => HandlerResult.decode(data));
    }
}
export class OnPostUpdateClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.OnPostUpdate.bind(this);
    }
    OnPostUpdate(request) {
        const data = PostUpdate.toJSON(request);
        const promise = this.rpc.request('devvit.actor.automation.v1alpha.OnPostUpdate', 'OnPostUpdate', 'application/json', data);
        return promise.then((data) => HandlerResult.fromJSON(data));
    }
}
export class OnPostUpdateClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.OnPostUpdate.bind(this);
    }
    OnPostUpdate(request) {
        const data = PostUpdate.encode(request).finish();
        const promise = this.rpc.request('devvit.actor.automation.v1alpha.OnPostUpdate', 'OnPostUpdate', 'application/protobuf', data);
        return promise.then((data) => HandlerResult.decode(data));
    }
}
export class OnPostReportClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.OnPostReport.bind(this);
    }
    OnPostReport(request) {
        const data = PostReport.toJSON(request);
        const promise = this.rpc.request('devvit.actor.automation.v1alpha.OnPostReport', 'OnPostReport', 'application/json', data);
        return promise.then((data) => HandlerResult.fromJSON(data));
    }
}
export class OnPostReportClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.OnPostReport.bind(this);
    }
    OnPostReport(request) {
        const data = PostReport.encode(request).finish();
        const promise = this.rpc.request('devvit.actor.automation.v1alpha.OnPostReport', 'OnPostReport', 'application/protobuf', data);
        return promise.then((data) => HandlerResult.decode(data));
    }
}
export class OnPostFlairUpdateClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.OnPostFlairUpdate.bind(this);
    }
    OnPostFlairUpdate(request) {
        const data = PostFlairUpdate.toJSON(request);
        const promise = this.rpc.request('devvit.actor.automation.v1alpha.OnPostFlairUpdate', 'OnPostFlairUpdate', 'application/json', data);
        return promise.then((data) => HandlerResult.fromJSON(data));
    }
}
export class OnPostFlairUpdateClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.OnPostFlairUpdate.bind(this);
    }
    OnPostFlairUpdate(request) {
        const data = PostFlairUpdate.encode(request).finish();
        const promise = this.rpc.request('devvit.actor.automation.v1alpha.OnPostFlairUpdate', 'OnPostFlairUpdate', 'application/protobuf', data);
        return promise.then((data) => HandlerResult.decode(data));
    }
}
export class OnPostDeleteClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.OnPostDelete.bind(this);
    }
    OnPostDelete(request) {
        const data = PostDelete.toJSON(request);
        const promise = this.rpc.request('devvit.actor.automation.v1alpha.OnPostDelete', 'OnPostDelete', 'application/json', data);
        return promise.then((data) => HandlerResult.fromJSON(data));
    }
}
export class OnPostDeleteClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.OnPostDelete.bind(this);
    }
    OnPostDelete(request) {
        const data = PostDelete.encode(request).finish();
        const promise = this.rpc.request('devvit.actor.automation.v1alpha.OnPostDelete', 'OnPostDelete', 'application/protobuf', data);
        return promise.then((data) => HandlerResult.decode(data));
    }
}
export class OnPostApproveClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.OnPostApprove.bind(this);
    }
    OnPostApprove(request) {
        const data = PostApprove.toJSON(request);
        const promise = this.rpc.request('devvit.actor.automation.v1alpha.OnPostApprove', 'OnPostApprove', 'application/json', data);
        return promise.then((data) => HandlerResult.fromJSON(data));
    }
}
export class OnPostApproveClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.OnPostApprove.bind(this);
    }
    OnPostApprove(request) {
        const data = PostApprove.encode(request).finish();
        const promise = this.rpc.request('devvit.actor.automation.v1alpha.OnPostApprove', 'OnPostApprove', 'application/protobuf', data);
        return promise.then((data) => HandlerResult.decode(data));
    }
}
export class OnCommentSubmitClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.OnCommentSubmit.bind(this);
    }
    OnCommentSubmit(request) {
        const data = CommentSubmit.toJSON(request);
        const promise = this.rpc.request('devvit.actor.automation.v1alpha.OnCommentSubmit', 'OnCommentSubmit', 'application/json', data);
        return promise.then((data) => HandlerResult.fromJSON(data));
    }
}
export class OnCommentSubmitClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.OnCommentSubmit.bind(this);
    }
    OnCommentSubmit(request) {
        const data = CommentSubmit.encode(request).finish();
        const promise = this.rpc.request('devvit.actor.automation.v1alpha.OnCommentSubmit', 'OnCommentSubmit', 'application/protobuf', data);
        return promise.then((data) => HandlerResult.decode(data));
    }
}
export class OnCommentCreateClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.OnCommentCreate.bind(this);
    }
    OnCommentCreate(request) {
        const data = CommentCreate.toJSON(request);
        const promise = this.rpc.request('devvit.actor.automation.v1alpha.OnCommentCreate', 'OnCommentCreate', 'application/json', data);
        return promise.then((data) => HandlerResult.fromJSON(data));
    }
}
export class OnCommentCreateClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.OnCommentCreate.bind(this);
    }
    OnCommentCreate(request) {
        const data = CommentCreate.encode(request).finish();
        const promise = this.rpc.request('devvit.actor.automation.v1alpha.OnCommentCreate', 'OnCommentCreate', 'application/protobuf', data);
        return promise.then((data) => HandlerResult.decode(data));
    }
}
export class OnCommentUpdateClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.OnCommentUpdate.bind(this);
    }
    OnCommentUpdate(request) {
        const data = CommentUpdate.toJSON(request);
        const promise = this.rpc.request('devvit.actor.automation.v1alpha.OnCommentUpdate', 'OnCommentUpdate', 'application/json', data);
        return promise.then((data) => HandlerResult.fromJSON(data));
    }
}
export class OnCommentUpdateClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.OnCommentUpdate.bind(this);
    }
    OnCommentUpdate(request) {
        const data = CommentUpdate.encode(request).finish();
        const promise = this.rpc.request('devvit.actor.automation.v1alpha.OnCommentUpdate', 'OnCommentUpdate', 'application/protobuf', data);
        return promise.then((data) => HandlerResult.decode(data));
    }
}
export class OnCommentReportClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.OnCommentReport.bind(this);
    }
    OnCommentReport(request) {
        const data = CommentReport.toJSON(request);
        const promise = this.rpc.request('devvit.actor.automation.v1alpha.OnCommentReport', 'OnCommentReport', 'application/json', data);
        return promise.then((data) => HandlerResult.fromJSON(data));
    }
}
export class OnCommentReportClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.OnCommentReport.bind(this);
    }
    OnCommentReport(request) {
        const data = CommentReport.encode(request).finish();
        const promise = this.rpc.request('devvit.actor.automation.v1alpha.OnCommentReport', 'OnCommentReport', 'application/protobuf', data);
        return promise.then((data) => HandlerResult.decode(data));
    }
}
export class OnCommentDeleteClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.OnCommentDelete.bind(this);
    }
    OnCommentDelete(request) {
        const data = CommentDelete.toJSON(request);
        const promise = this.rpc.request('devvit.actor.automation.v1alpha.OnCommentDelete', 'OnCommentDelete', 'application/json', data);
        return promise.then((data) => HandlerResult.fromJSON(data));
    }
}
export class OnCommentDeleteClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.OnCommentDelete.bind(this);
    }
    OnCommentDelete(request) {
        const data = CommentDelete.encode(request).finish();
        const promise = this.rpc.request('devvit.actor.automation.v1alpha.OnCommentDelete', 'OnCommentDelete', 'application/protobuf', data);
        return promise.then((data) => HandlerResult.decode(data));
    }
}
export class OnCommentApproveClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.OnCommentApprove.bind(this);
    }
    OnCommentApprove(request) {
        const data = CommentApprove.toJSON(request);
        const promise = this.rpc.request('devvit.actor.automation.v1alpha.OnCommentApprove', 'OnCommentApprove', 'application/json', data);
        return promise.then((data) => HandlerResult.fromJSON(data));
    }
}
export class OnCommentApproveClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.OnCommentApprove.bind(this);
    }
    OnCommentApprove(request) {
        const data = CommentApprove.encode(request).finish();
        const promise = this.rpc.request('devvit.actor.automation.v1alpha.OnCommentApprove', 'OnCommentApprove', 'application/protobuf', data);
        return promise.then((data) => HandlerResult.decode(data));
    }
}
export class OnSubredditSubscribeClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.OnSubredditSubscribe.bind(this);
    }
    OnSubredditSubscribe(request) {
        const data = SubredditSubscribe.toJSON(request);
        const promise = this.rpc.request('devvit.actor.automation.v1alpha.OnSubredditSubscribe', 'OnSubredditSubscribe', 'application/json', data);
        return promise.then((data) => HandlerResult.fromJSON(data));
    }
}
export class OnSubredditSubscribeClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.OnSubredditSubscribe.bind(this);
    }
    OnSubredditSubscribe(request) {
        const data = SubredditSubscribe.encode(request).finish();
        const promise = this.rpc.request('devvit.actor.automation.v1alpha.OnSubredditSubscribe', 'OnSubredditSubscribe', 'application/protobuf', data);
        return promise.then((data) => HandlerResult.decode(data));
    }
}
export class OnAppInstallClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.OnAppInstall.bind(this);
    }
    OnAppInstall(request) {
        const data = AppInstall.toJSON(request);
        const promise = this.rpc.request('devvit.actor.automation.v1alpha.OnAppInstall', 'OnAppInstall', 'application/json', data);
        return promise.then((data) => HandlerResult.fromJSON(data));
    }
}
export class OnAppInstallClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.OnAppInstall.bind(this);
    }
    OnAppInstall(request) {
        const data = AppInstall.encode(request).finish();
        const promise = this.rpc.request('devvit.actor.automation.v1alpha.OnAppInstall', 'OnAppInstall', 'application/protobuf', data);
        return promise.then((data) => HandlerResult.decode(data));
    }
}
export class OnAppUpgradeClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.OnAppUpgrade.bind(this);
    }
    OnAppUpgrade(request) {
        const data = AppUpgrade.toJSON(request);
        const promise = this.rpc.request('devvit.actor.automation.v1alpha.OnAppUpgrade', 'OnAppUpgrade', 'application/json', data);
        return promise.then((data) => HandlerResult.fromJSON(data));
    }
}
export class OnAppUpgradeClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.OnAppUpgrade.bind(this);
    }
    OnAppUpgrade(request) {
        const data = AppUpgrade.encode(request).finish();
        const promise = this.rpc.request('devvit.actor.automation.v1alpha.OnAppUpgrade', 'OnAppUpgrade', 'application/protobuf', data);
        return promise.then((data) => HandlerResult.decode(data));
    }
}
export class OnModActionClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.OnModAction.bind(this);
    }
    OnModAction(request) {
        const data = ModAction.toJSON(request);
        const promise = this.rpc.request('devvit.actor.automation.v1alpha.OnModAction', 'OnModAction', 'application/json', data);
        return promise.then((data) => HandlerResult.fromJSON(data));
    }
}
export class OnModActionClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.OnModAction.bind(this);
    }
    OnModAction(request) {
        const data = ModAction.encode(request).finish();
        const promise = this.rpc.request('devvit.actor.automation.v1alpha.OnModAction', 'OnModAction', 'application/protobuf', data);
        return promise.then((data) => HandlerResult.decode(data));
    }
}
export class OnModMailClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.OnModMail.bind(this);
    }
    OnModMail(request) {
        const data = ModMail.toJSON(request);
        const promise = this.rpc.request('devvit.actor.automation.v1alpha.OnModMail', 'OnModMail', 'application/json', data);
        return promise.then((data) => HandlerResult.fromJSON(data));
    }
}
export class OnModMailClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.OnModMail.bind(this);
    }
    OnModMail(request) {
        const data = ModMail.encode(request).finish();
        const promise = this.rpc.request('devvit.actor.automation.v1alpha.OnModMail', 'OnModMail', 'application/protobuf', data);
        return promise.then((data) => HandlerResult.decode(data));
    }
}
export class OnAccountDeleteClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.OnAccountDelete.bind(this);
    }
    OnAccountDelete(request) {
        const data = AccountDelete.toJSON(request);
        const promise = this.rpc.request('devvit.actor.automation.v1alpha.OnAccountDelete', 'OnAccountDelete', 'application/json', data);
        return promise.then((data) => HandlerResult.fromJSON(data));
    }
}
export class OnAccountDeleteClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.OnAccountDelete.bind(this);
    }
    OnAccountDelete(request) {
        const data = AccountDelete.encode(request).finish();
        const promise = this.rpc.request('devvit.actor.automation.v1alpha.OnAccountDelete', 'OnAccountDelete', 'application/protobuf', data);
        return promise.then((data) => HandlerResult.decode(data));
    }
}
export class OnPostNsfwUpdateClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.OnPostNsfwUpdate.bind(this);
    }
    OnPostNsfwUpdate(request) {
        const data = PostNsfwUpdate.toJSON(request);
        const promise = this.rpc.request('devvit.actor.automation.v1alpha.OnPostNsfwUpdate', 'OnPostNsfwUpdate', 'application/json', data);
        return promise.then((data) => HandlerResult.fromJSON(data));
    }
}
export class OnPostNsfwUpdateClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.OnPostNsfwUpdate.bind(this);
    }
    OnPostNsfwUpdate(request) {
        const data = PostNsfwUpdate.encode(request).finish();
        const promise = this.rpc.request('devvit.actor.automation.v1alpha.OnPostNsfwUpdate', 'OnPostNsfwUpdate', 'application/protobuf', data);
        return promise.then((data) => HandlerResult.decode(data));
    }
}
export class OnPostSpoilerUpdateClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.OnPostSpoilerUpdate.bind(this);
    }
    OnPostSpoilerUpdate(request) {
        const data = PostSpoilerUpdate.toJSON(request);
        const promise = this.rpc.request('devvit.actor.automation.v1alpha.OnPostSpoilerUpdate', 'OnPostSpoilerUpdate', 'application/json', data);
        return promise.then((data) => HandlerResult.fromJSON(data));
    }
}
export class OnPostSpoilerUpdateClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.OnPostSpoilerUpdate.bind(this);
    }
    OnPostSpoilerUpdate(request) {
        const data = PostSpoilerUpdate.encode(request).finish();
        const promise = this.rpc.request('devvit.actor.automation.v1alpha.OnPostSpoilerUpdate', 'OnPostSpoilerUpdate', 'application/protobuf', data);
        return promise.then((data) => HandlerResult.decode(data));
    }
}
export class OnAutomoderatorFilterPostClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.OnAutomoderatorFilterPost.bind(this);
    }
    OnAutomoderatorFilterPost(request) {
        const data = AutomoderatorFilterPost.toJSON(request);
        const promise = this.rpc.request('devvit.actor.automation.v1alpha.OnAutomoderatorFilterPost', 'OnAutomoderatorFilterPost', 'application/json', data);
        return promise.then((data) => HandlerResult.fromJSON(data));
    }
}
export class OnAutomoderatorFilterPostClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.OnAutomoderatorFilterPost.bind(this);
    }
    OnAutomoderatorFilterPost(request) {
        const data = AutomoderatorFilterPost.encode(request).finish();
        const promise = this.rpc.request('devvit.actor.automation.v1alpha.OnAutomoderatorFilterPost', 'OnAutomoderatorFilterPost', 'application/protobuf', data);
        return promise.then((data) => HandlerResult.decode(data));
    }
}
export class OnAutomoderatorFilterCommentClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.OnAutomoderatorFilterComment.bind(this);
    }
    OnAutomoderatorFilterComment(request) {
        const data = AutomoderatorFilterComment.toJSON(request);
        const promise = this.rpc.request('devvit.actor.automation.v1alpha.OnAutomoderatorFilterComment', 'OnAutomoderatorFilterComment', 'application/json', data);
        return promise.then((data) => HandlerResult.fromJSON(data));
    }
}
export class OnAutomoderatorFilterCommentClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.OnAutomoderatorFilterComment.bind(this);
    }
    OnAutomoderatorFilterComment(request) {
        const data = AutomoderatorFilterComment.encode(request).finish();
        const promise = this.rpc.request('devvit.actor.automation.v1alpha.OnAutomoderatorFilterComment', 'OnAutomoderatorFilterComment', 'application/protobuf', data);
        return promise.then((data) => HandlerResult.decode(data));
    }
}
