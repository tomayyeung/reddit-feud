/// <reference types="node" resolution-mode="require"/>
import { TwirpContext, TwirpServer } from 'twirp-ts';
import { PostSubmit, PostCreate, PostUpdate, PostReport, PostFlairUpdate, PostDelete, PostApprove, CommentSubmit, CommentCreate, CommentUpdate, CommentReport, CommentDelete, CommentApprove, SubredditSubscribe, AppInstall, AppUpgrade, AccountDelete, PostNsfwUpdate, PostSpoilerUpdate, AutomoderatorFilterPost, AutomoderatorFilterComment } from '../../../events/v1alpha/events.js';
import { HandlerResult } from './event_handlers.js';
import { ModAction } from '../../../reddit/v2alpha/modaction.js';
import { ModMail } from '../../../reddit/v2alpha/modmail.js';
export interface OnPostSubmitTwirp<T extends TwirpContext = TwirpContext> {
    OnPostSubmit(ctx: T, request: PostSubmit): Promise<HandlerResult>;
}
export declare enum OnPostSubmitMethod {
    OnPostSubmit = "OnPostSubmit"
}
export declare const OnPostSubmitMethodList: OnPostSubmitMethod[];
export declare function createOnPostSubmitServer<T extends TwirpContext = TwirpContext>(service: OnPostSubmitTwirp<T>): TwirpServer<OnPostSubmitTwirp<TwirpContext<import("http").IncomingMessage, import("http").ServerResponse<import("http").IncomingMessage>>>, T>;
export interface OnPostCreateTwirp<T extends TwirpContext = TwirpContext> {
    OnPostCreate(ctx: T, request: PostCreate): Promise<HandlerResult>;
}
export declare enum OnPostCreateMethod {
    OnPostCreate = "OnPostCreate"
}
export declare const OnPostCreateMethodList: OnPostCreateMethod[];
export declare function createOnPostCreateServer<T extends TwirpContext = TwirpContext>(service: OnPostCreateTwirp<T>): TwirpServer<OnPostCreateTwirp<TwirpContext<import("http").IncomingMessage, import("http").ServerResponse<import("http").IncomingMessage>>>, T>;
export interface OnPostUpdateTwirp<T extends TwirpContext = TwirpContext> {
    OnPostUpdate(ctx: T, request: PostUpdate): Promise<HandlerResult>;
}
export declare enum OnPostUpdateMethod {
    OnPostUpdate = "OnPostUpdate"
}
export declare const OnPostUpdateMethodList: OnPostUpdateMethod[];
export declare function createOnPostUpdateServer<T extends TwirpContext = TwirpContext>(service: OnPostUpdateTwirp<T>): TwirpServer<OnPostUpdateTwirp<TwirpContext<import("http").IncomingMessage, import("http").ServerResponse<import("http").IncomingMessage>>>, T>;
export interface OnPostReportTwirp<T extends TwirpContext = TwirpContext> {
    OnPostReport(ctx: T, request: PostReport): Promise<HandlerResult>;
}
export declare enum OnPostReportMethod {
    OnPostReport = "OnPostReport"
}
export declare const OnPostReportMethodList: OnPostReportMethod[];
export declare function createOnPostReportServer<T extends TwirpContext = TwirpContext>(service: OnPostReportTwirp<T>): TwirpServer<OnPostReportTwirp<TwirpContext<import("http").IncomingMessage, import("http").ServerResponse<import("http").IncomingMessage>>>, T>;
export interface OnPostFlairUpdateTwirp<T extends TwirpContext = TwirpContext> {
    OnPostFlairUpdate(ctx: T, request: PostFlairUpdate): Promise<HandlerResult>;
}
export declare enum OnPostFlairUpdateMethod {
    OnPostFlairUpdate = "OnPostFlairUpdate"
}
export declare const OnPostFlairUpdateMethodList: OnPostFlairUpdateMethod[];
export declare function createOnPostFlairUpdateServer<T extends TwirpContext = TwirpContext>(service: OnPostFlairUpdateTwirp<T>): TwirpServer<OnPostFlairUpdateTwirp<TwirpContext<import("http").IncomingMessage, import("http").ServerResponse<import("http").IncomingMessage>>>, T>;
export interface OnPostDeleteTwirp<T extends TwirpContext = TwirpContext> {
    OnPostDelete(ctx: T, request: PostDelete): Promise<HandlerResult>;
}
export declare enum OnPostDeleteMethod {
    OnPostDelete = "OnPostDelete"
}
export declare const OnPostDeleteMethodList: OnPostDeleteMethod[];
export declare function createOnPostDeleteServer<T extends TwirpContext = TwirpContext>(service: OnPostDeleteTwirp<T>): TwirpServer<OnPostDeleteTwirp<TwirpContext<import("http").IncomingMessage, import("http").ServerResponse<import("http").IncomingMessage>>>, T>;
export interface OnPostApproveTwirp<T extends TwirpContext = TwirpContext> {
    OnPostApprove(ctx: T, request: PostApprove): Promise<HandlerResult>;
}
export declare enum OnPostApproveMethod {
    OnPostApprove = "OnPostApprove"
}
export declare const OnPostApproveMethodList: OnPostApproveMethod[];
export declare function createOnPostApproveServer<T extends TwirpContext = TwirpContext>(service: OnPostApproveTwirp<T>): TwirpServer<OnPostApproveTwirp<TwirpContext<import("http").IncomingMessage, import("http").ServerResponse<import("http").IncomingMessage>>>, T>;
export interface OnCommentSubmitTwirp<T extends TwirpContext = TwirpContext> {
    OnCommentSubmit(ctx: T, request: CommentSubmit): Promise<HandlerResult>;
}
export declare enum OnCommentSubmitMethod {
    OnCommentSubmit = "OnCommentSubmit"
}
export declare const OnCommentSubmitMethodList: OnCommentSubmitMethod[];
export declare function createOnCommentSubmitServer<T extends TwirpContext = TwirpContext>(service: OnCommentSubmitTwirp<T>): TwirpServer<OnCommentSubmitTwirp<TwirpContext<import("http").IncomingMessage, import("http").ServerResponse<import("http").IncomingMessage>>>, T>;
export interface OnCommentCreateTwirp<T extends TwirpContext = TwirpContext> {
    OnCommentCreate(ctx: T, request: CommentCreate): Promise<HandlerResult>;
}
export declare enum OnCommentCreateMethod {
    OnCommentCreate = "OnCommentCreate"
}
export declare const OnCommentCreateMethodList: OnCommentCreateMethod[];
export declare function createOnCommentCreateServer<T extends TwirpContext = TwirpContext>(service: OnCommentCreateTwirp<T>): TwirpServer<OnCommentCreateTwirp<TwirpContext<import("http").IncomingMessage, import("http").ServerResponse<import("http").IncomingMessage>>>, T>;
export interface OnCommentUpdateTwirp<T extends TwirpContext = TwirpContext> {
    OnCommentUpdate(ctx: T, request: CommentUpdate): Promise<HandlerResult>;
}
export declare enum OnCommentUpdateMethod {
    OnCommentUpdate = "OnCommentUpdate"
}
export declare const OnCommentUpdateMethodList: OnCommentUpdateMethod[];
export declare function createOnCommentUpdateServer<T extends TwirpContext = TwirpContext>(service: OnCommentUpdateTwirp<T>): TwirpServer<OnCommentUpdateTwirp<TwirpContext<import("http").IncomingMessage, import("http").ServerResponse<import("http").IncomingMessage>>>, T>;
export interface OnCommentReportTwirp<T extends TwirpContext = TwirpContext> {
    OnCommentReport(ctx: T, request: CommentReport): Promise<HandlerResult>;
}
export declare enum OnCommentReportMethod {
    OnCommentReport = "OnCommentReport"
}
export declare const OnCommentReportMethodList: OnCommentReportMethod[];
export declare function createOnCommentReportServer<T extends TwirpContext = TwirpContext>(service: OnCommentReportTwirp<T>): TwirpServer<OnCommentReportTwirp<TwirpContext<import("http").IncomingMessage, import("http").ServerResponse<import("http").IncomingMessage>>>, T>;
export interface OnCommentDeleteTwirp<T extends TwirpContext = TwirpContext> {
    OnCommentDelete(ctx: T, request: CommentDelete): Promise<HandlerResult>;
}
export declare enum OnCommentDeleteMethod {
    OnCommentDelete = "OnCommentDelete"
}
export declare const OnCommentDeleteMethodList: OnCommentDeleteMethod[];
export declare function createOnCommentDeleteServer<T extends TwirpContext = TwirpContext>(service: OnCommentDeleteTwirp<T>): TwirpServer<OnCommentDeleteTwirp<TwirpContext<import("http").IncomingMessage, import("http").ServerResponse<import("http").IncomingMessage>>>, T>;
export interface OnCommentApproveTwirp<T extends TwirpContext = TwirpContext> {
    OnCommentApprove(ctx: T, request: CommentApprove): Promise<HandlerResult>;
}
export declare enum OnCommentApproveMethod {
    OnCommentApprove = "OnCommentApprove"
}
export declare const OnCommentApproveMethodList: OnCommentApproveMethod[];
export declare function createOnCommentApproveServer<T extends TwirpContext = TwirpContext>(service: OnCommentApproveTwirp<T>): TwirpServer<OnCommentApproveTwirp<TwirpContext<import("http").IncomingMessage, import("http").ServerResponse<import("http").IncomingMessage>>>, T>;
export interface OnSubredditSubscribeTwirp<T extends TwirpContext = TwirpContext> {
    OnSubredditSubscribe(ctx: T, request: SubredditSubscribe): Promise<HandlerResult>;
}
export declare enum OnSubredditSubscribeMethod {
    OnSubredditSubscribe = "OnSubredditSubscribe"
}
export declare const OnSubredditSubscribeMethodList: OnSubredditSubscribeMethod[];
export declare function createOnSubredditSubscribeServer<T extends TwirpContext = TwirpContext>(service: OnSubredditSubscribeTwirp<T>): TwirpServer<OnSubredditSubscribeTwirp<TwirpContext<import("http").IncomingMessage, import("http").ServerResponse<import("http").IncomingMessage>>>, T>;
export interface OnAppInstallTwirp<T extends TwirpContext = TwirpContext> {
    OnAppInstall(ctx: T, request: AppInstall): Promise<HandlerResult>;
}
export declare enum OnAppInstallMethod {
    OnAppInstall = "OnAppInstall"
}
export declare const OnAppInstallMethodList: OnAppInstallMethod[];
export declare function createOnAppInstallServer<T extends TwirpContext = TwirpContext>(service: OnAppInstallTwirp<T>): TwirpServer<OnAppInstallTwirp<TwirpContext<import("http").IncomingMessage, import("http").ServerResponse<import("http").IncomingMessage>>>, T>;
export interface OnAppUpgradeTwirp<T extends TwirpContext = TwirpContext> {
    OnAppUpgrade(ctx: T, request: AppUpgrade): Promise<HandlerResult>;
}
export declare enum OnAppUpgradeMethod {
    OnAppUpgrade = "OnAppUpgrade"
}
export declare const OnAppUpgradeMethodList: OnAppUpgradeMethod[];
export declare function createOnAppUpgradeServer<T extends TwirpContext = TwirpContext>(service: OnAppUpgradeTwirp<T>): TwirpServer<OnAppUpgradeTwirp<TwirpContext<import("http").IncomingMessage, import("http").ServerResponse<import("http").IncomingMessage>>>, T>;
export interface OnModActionTwirp<T extends TwirpContext = TwirpContext> {
    OnModAction(ctx: T, request: ModAction): Promise<HandlerResult>;
}
export declare enum OnModActionMethod {
    OnModAction = "OnModAction"
}
export declare const OnModActionMethodList: OnModActionMethod[];
export declare function createOnModActionServer<T extends TwirpContext = TwirpContext>(service: OnModActionTwirp<T>): TwirpServer<OnModActionTwirp<TwirpContext<import("http").IncomingMessage, import("http").ServerResponse<import("http").IncomingMessage>>>, T>;
export interface OnModMailTwirp<T extends TwirpContext = TwirpContext> {
    OnModMail(ctx: T, request: ModMail): Promise<HandlerResult>;
}
export declare enum OnModMailMethod {
    OnModMail = "OnModMail"
}
export declare const OnModMailMethodList: OnModMailMethod[];
export declare function createOnModMailServer<T extends TwirpContext = TwirpContext>(service: OnModMailTwirp<T>): TwirpServer<OnModMailTwirp<TwirpContext<import("http").IncomingMessage, import("http").ServerResponse<import("http").IncomingMessage>>>, T>;
export interface OnAccountDeleteTwirp<T extends TwirpContext = TwirpContext> {
    OnAccountDelete(ctx: T, request: AccountDelete): Promise<HandlerResult>;
}
export declare enum OnAccountDeleteMethod {
    OnAccountDelete = "OnAccountDelete"
}
export declare const OnAccountDeleteMethodList: OnAccountDeleteMethod[];
export declare function createOnAccountDeleteServer<T extends TwirpContext = TwirpContext>(service: OnAccountDeleteTwirp<T>): TwirpServer<OnAccountDeleteTwirp<TwirpContext<import("http").IncomingMessage, import("http").ServerResponse<import("http").IncomingMessage>>>, T>;
export interface OnPostNsfwUpdateTwirp<T extends TwirpContext = TwirpContext> {
    OnPostNsfwUpdate(ctx: T, request: PostNsfwUpdate): Promise<HandlerResult>;
}
export declare enum OnPostNsfwUpdateMethod {
    OnPostNsfwUpdate = "OnPostNsfwUpdate"
}
export declare const OnPostNsfwUpdateMethodList: OnPostNsfwUpdateMethod[];
export declare function createOnPostNsfwUpdateServer<T extends TwirpContext = TwirpContext>(service: OnPostNsfwUpdateTwirp<T>): TwirpServer<OnPostNsfwUpdateTwirp<TwirpContext<import("http").IncomingMessage, import("http").ServerResponse<import("http").IncomingMessage>>>, T>;
export interface OnPostSpoilerUpdateTwirp<T extends TwirpContext = TwirpContext> {
    OnPostSpoilerUpdate(ctx: T, request: PostSpoilerUpdate): Promise<HandlerResult>;
}
export declare enum OnPostSpoilerUpdateMethod {
    OnPostSpoilerUpdate = "OnPostSpoilerUpdate"
}
export declare const OnPostSpoilerUpdateMethodList: OnPostSpoilerUpdateMethod[];
export declare function createOnPostSpoilerUpdateServer<T extends TwirpContext = TwirpContext>(service: OnPostSpoilerUpdateTwirp<T>): TwirpServer<OnPostSpoilerUpdateTwirp<TwirpContext<import("http").IncomingMessage, import("http").ServerResponse<import("http").IncomingMessage>>>, T>;
export interface OnAutomoderatorFilterPostTwirp<T extends TwirpContext = TwirpContext> {
    OnAutomoderatorFilterPost(ctx: T, request: AutomoderatorFilterPost): Promise<HandlerResult>;
}
export declare enum OnAutomoderatorFilterPostMethod {
    OnAutomoderatorFilterPost = "OnAutomoderatorFilterPost"
}
export declare const OnAutomoderatorFilterPostMethodList: OnAutomoderatorFilterPostMethod[];
export declare function createOnAutomoderatorFilterPostServer<T extends TwirpContext = TwirpContext>(service: OnAutomoderatorFilterPostTwirp<T>): TwirpServer<OnAutomoderatorFilterPostTwirp<TwirpContext<import("http").IncomingMessage, import("http").ServerResponse<import("http").IncomingMessage>>>, T>;
export interface OnAutomoderatorFilterCommentTwirp<T extends TwirpContext = TwirpContext> {
    OnAutomoderatorFilterComment(ctx: T, request: AutomoderatorFilterComment): Promise<HandlerResult>;
}
export declare enum OnAutomoderatorFilterCommentMethod {
    OnAutomoderatorFilterComment = "OnAutomoderatorFilterComment"
}
export declare const OnAutomoderatorFilterCommentMethodList: OnAutomoderatorFilterCommentMethod[];
export declare function createOnAutomoderatorFilterCommentServer<T extends TwirpContext = TwirpContext>(service: OnAutomoderatorFilterCommentTwirp<T>): TwirpServer<OnAutomoderatorFilterCommentTwirp<TwirpContext<import("http").IncomingMessage, import("http").ServerResponse<import("http").IncomingMessage>>>, T>;
//# sourceMappingURL=event_handlers.twirp.d.ts.map