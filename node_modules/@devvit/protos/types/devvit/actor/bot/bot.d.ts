/**
 * #bot.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { Metadata } from "../../../../lib/Types.js";
import { Empty } from "../../../google/protobuf/empty.js";
export interface CommandDescription {
    name: string;
    command: string;
    description: string;
    usage: string;
}
export interface CommandsList {
    commands: CommandDescription[];
}
export interface CommandContext {
    user: string;
    subreddit: string;
    post: string;
    comment: string;
}
export interface CommandRequest {
    context?: CommandContext | undefined;
    command: string;
    args: string;
}
export declare const CommandDescription: {
    $type: "devvit.actor.bot.CommandDescription";
    encode(message: CommandDescription, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CommandDescription;
    fromJSON(object: any): CommandDescription;
    toJSON(message: CommandDescription): unknown;
    create(base?: DeepPartial<CommandDescription>): CommandDescription;
    fromPartial(object: DeepPartial<CommandDescription>): CommandDescription;
};
export declare const CommandsList: {
    $type: "devvit.actor.bot.CommandsList";
    encode(message: CommandsList, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CommandsList;
    fromJSON(object: any): CommandsList;
    toJSON(message: CommandsList): unknown;
    create(base?: DeepPartial<CommandsList>): CommandsList;
    fromPartial(object: DeepPartial<CommandsList>): CommandsList;
};
export declare const CommandContext: {
    $type: "devvit.actor.bot.CommandContext";
    encode(message: CommandContext, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CommandContext;
    fromJSON(object: any): CommandContext;
    toJSON(message: CommandContext): unknown;
    create(base?: DeepPartial<CommandContext>): CommandContext;
    fromPartial(object: DeepPartial<CommandContext>): CommandContext;
};
export declare const CommandRequest: {
    $type: "devvit.actor.bot.CommandRequest";
    encode(message: CommandRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CommandRequest;
    fromJSON(object: any): CommandRequest;
    toJSON(message: CommandRequest): unknown;
    create(base?: DeepPartial<CommandRequest>): CommandRequest;
    fromPartial(object: DeepPartial<CommandRequest>): CommandRequest;
};
export interface Bot {
    GetCommands(request: Empty, metadata?: Metadata): Promise<CommandsList>;
    OnCommand(request: CommandRequest, metadata?: Metadata): Promise<Empty>;
}
export declare const BotServiceName = "devvit.actor.bot.Bot";
export declare class BotClientImpl implements Bot {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    GetCommands(request: Empty, metadata?: Metadata): Promise<CommandsList>;
    OnCommand(request: CommandRequest, metadata?: Metadata): Promise<Empty>;
}
export type BotDefinition = typeof BotDefinition;
export declare const BotDefinition: {
    readonly name: "Bot";
    readonly fullName: "devvit.actor.bot.Bot";
    readonly methods: {
        readonly getCommands: {
            readonly name: "GetCommands";
            readonly requestType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {} | undefined): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.bot.CommandsList";
                encode(message: CommandsList, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): CommandsList;
                fromJSON(object: any): CommandsList;
                toJSON(message: CommandsList): unknown;
                create(base?: DeepPartial<CommandsList>): CommandsList;
                fromPartial(object: DeepPartial<CommandsList>): CommandsList;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly onCommand: {
            readonly name: "OnCommand";
            readonly requestType: {
                $type: "devvit.actor.bot.CommandRequest";
                encode(message: CommandRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): CommandRequest;
                fromJSON(object: any): CommandRequest;
                toJSON(message: CommandRequest): unknown;
                create(base?: DeepPartial<CommandRequest>): CommandRequest;
                fromPartial(object: DeepPartial<CommandRequest>): CommandRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {} | undefined): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array, metadata?: Metadata): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=bot.d.ts.map