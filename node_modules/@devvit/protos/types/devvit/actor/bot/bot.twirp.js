import { TwirpServer, TwirpError, TwirpErrorCode, TwirpContentType, chainInterceptors, } from 'twirp-ts';
import { Empty } from '../../../google/protobuf/empty.js';
import { CommandsList, CommandRequest } from './bot.js';
export var BotMethod;
(function (BotMethod) {
    BotMethod["GetCommands"] = "GetCommands";
    BotMethod["OnCommand"] = "OnCommand";
})(BotMethod || (BotMethod = {}));
export const BotMethodList = [BotMethod.GetCommands, BotMethod.OnCommand];
export function createBotServer(service) {
    return new TwirpServer({
        service,
        packageName: 'devvit.actor.bot',
        serviceName: 'Bot',
        methodList: BotMethodList,
        matchRoute: matchBotRoute,
    });
}
function matchBotRoute(method, events) {
    switch (method) {
        case 'GetCommands':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'GetCommands' };
                await events.onMatch(ctx);
                return handleBotGetCommandsRequest(ctx, service, data, interceptors);
            };
        case 'OnCommand':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'OnCommand' };
                await events.onMatch(ctx);
                return handleBotOnCommandRequest(ctx, service, data, interceptors);
            };
        default:
            events.onNotFound();
            const msg = `no handler found`;
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleBotGetCommandsRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleBotGetCommandsJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleBotGetCommandsProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleBotOnCommandRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleBotOnCommandJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleBotOnCommandProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
async function handleBotGetCommandsJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = Empty.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.GetCommands(ctx, inputReq);
        });
    }
    else {
        response = await service.GetCommands(ctx, request);
    }
    return JSON.stringify(CommandsList.toJSON(response));
}
async function handleBotOnCommandJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = CommandRequest.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.OnCommand(ctx, inputReq);
        });
    }
    else {
        response = await service.OnCommand(ctx, request);
    }
    return JSON.stringify(Empty.toJSON(response));
}
async function handleBotGetCommandsProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = Empty.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.GetCommands(ctx, inputReq);
        });
    }
    else {
        response = await service.GetCommands(ctx, request);
    }
    return Buffer.from(CommandsList.encode(response).finish());
}
async function handleBotOnCommandProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = CommandRequest.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.OnCommand(ctx, inputReq);
        });
    }
    else {
        response = await service.OnCommand(ctx, request);
    }
    return Buffer.from(Empty.encode(response).finish());
}
