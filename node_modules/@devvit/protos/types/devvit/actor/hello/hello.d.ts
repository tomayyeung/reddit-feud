/**
 * #hello.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { Metadata } from "../../../../lib/Types.js";
export interface PingMessage {
    message: string;
    delayMillis: number;
    successProbability: number;
}
export declare const PingMessage: {
    $type: "devvit.actor.hello.PingMessage";
    encode(message: PingMessage, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PingMessage;
    fromJSON(object: any): PingMessage;
    toJSON(message: PingMessage): unknown;
    create(base?: DeepPartial<PingMessage>): PingMessage;
    fromPartial(object: DeepPartial<PingMessage>): PingMessage;
};
/**
 * hello is a ping service, with various conditions applied to how it succeeds
 * and fails
 */
export interface Hello {
    Ping(request: PingMessage, metadata?: Metadata): Promise<PingMessage>;
}
export declare const HelloServiceName = "devvit.actor.hello.Hello";
export declare class HelloClientImpl implements Hello {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Ping(request: PingMessage, metadata?: Metadata): Promise<PingMessage>;
}
/**
 * hello is a ping service, with various conditions applied to how it succeeds
 * and fails
 */
export type HelloDefinition = typeof HelloDefinition;
export declare const HelloDefinition: {
    readonly name: "Hello";
    readonly fullName: "devvit.actor.hello.Hello";
    readonly methods: {
        readonly ping: {
            readonly name: "Ping";
            readonly requestType: {
                $type: "devvit.actor.hello.PingMessage";
                encode(message: PingMessage, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): PingMessage;
                fromJSON(object: any): PingMessage;
                toJSON(message: PingMessage): unknown;
                create(base?: DeepPartial<PingMessage>): PingMessage;
                fromPartial(object: DeepPartial<PingMessage>): PingMessage;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.hello.PingMessage";
                encode(message: PingMessage, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): PingMessage;
                fromJSON(object: any): PingMessage;
                toJSON(message: PingMessage): unknown;
                create(base?: DeepPartial<PingMessage>): PingMessage;
                fromPartial(object: DeepPartial<PingMessage>): PingMessage;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array, metadata?: Metadata): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=hello.d.ts.map