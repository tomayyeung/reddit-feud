/**
 * #hello.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { messageTypeRegistry } from "../../../typeRegistry.js";
function createBasePingMessage() {
    return { message: "", delayMillis: 0, successProbability: 0 };
}
export const PingMessage = {
    $type: "devvit.actor.hello.PingMessage",
    encode(message, writer = _m0.Writer.create()) {
        if (message.message !== "") {
            writer.uint32(10).string(message.message);
        }
        if (message.delayMillis !== 0) {
            writer.uint32(16).int32(message.delayMillis);
        }
        if (message.successProbability !== 0) {
            writer.uint32(29).float(message.successProbability);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePingMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.delayMillis = reader.int32();
                    continue;
                case 3:
                    if (tag !== 29) {
                        break;
                    }
                    message.successProbability = reader.float();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            message: isSet(object.message) ? globalThis.String(object.message) : "",
            delayMillis: isSet(object.delayMillis) ? globalThis.Number(object.delayMillis) : 0,
            successProbability: isSet(object.successProbability) ? globalThis.Number(object.successProbability) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.message !== "") {
            obj.message = message.message;
        }
        if (message.delayMillis !== 0) {
            obj.delayMillis = Math.round(message.delayMillis);
        }
        if (message.successProbability !== 0) {
            obj.successProbability = message.successProbability;
        }
        return obj;
    },
    create(base) {
        return PingMessage.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePingMessage();
        message.message = object.message ?? "";
        message.delayMillis = object.delayMillis ?? 0;
        message.successProbability = object.successProbability ?? 0;
        return message;
    },
};
messageTypeRegistry.set(PingMessage.$type, PingMessage);
export const HelloServiceName = "devvit.actor.hello.Hello";
export class HelloClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || HelloServiceName;
        this.rpc = rpc;
        this.Ping = this.Ping.bind(this);
    }
    Ping(request, metadata) {
        const data = PingMessage.encode(request).finish();
        const promise = this.rpc.request(this.service, "Ping", data, metadata);
        return promise.then((data) => PingMessage.decode(_m0.Reader.create(data)));
    }
}
export const HelloDefinition = {
    name: "Hello",
    fullName: "devvit.actor.hello.Hello",
    methods: {
        ping: {
            name: "Ping",
            requestType: PingMessage,
            requestStream: false,
            responseType: PingMessage,
            responseStream: false,
            options: {},
        },
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
