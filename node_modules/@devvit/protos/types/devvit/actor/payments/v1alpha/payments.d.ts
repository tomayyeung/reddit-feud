/**
 * #payments.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { Metadata } from "../../../../../lib/Types.js";
import { Order } from "../../../payments/v1alpha/order.js";
export interface FulfillOrderRequest {
    order?: Order | undefined;
}
export interface RefundOrderRequest {
    order?: Order | undefined;
}
export interface FulfillOrderResponse {
    /** the product has been acknowledged and delivered */
    acknowledged?: boolean | undefined;
    /** the reason for rejecting product delivery */
    rejectionReason?: string | undefined;
}
/** RefundHandlerResult is empty. Placeholder for future functionality */
export interface RefundOrderResponse {
}
export declare const FulfillOrderRequest: {
    $type: "devvit.actor.payments.v1alpha.FulfillOrderRequest";
    encode(message: FulfillOrderRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FulfillOrderRequest;
    fromJSON(object: any): FulfillOrderRequest;
    toJSON(message: FulfillOrderRequest): unknown;
    create(base?: DeepPartial<FulfillOrderRequest>): FulfillOrderRequest;
    fromPartial(object: DeepPartial<FulfillOrderRequest>): FulfillOrderRequest;
};
export declare const RefundOrderRequest: {
    $type: "devvit.actor.payments.v1alpha.RefundOrderRequest";
    encode(message: RefundOrderRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RefundOrderRequest;
    fromJSON(object: any): RefundOrderRequest;
    toJSON(message: RefundOrderRequest): unknown;
    create(base?: DeepPartial<RefundOrderRequest>): RefundOrderRequest;
    fromPartial(object: DeepPartial<RefundOrderRequest>): RefundOrderRequest;
};
export declare const FulfillOrderResponse: {
    $type: "devvit.actor.payments.v1alpha.FulfillOrderResponse";
    encode(message: FulfillOrderResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FulfillOrderResponse;
    fromJSON(object: any): FulfillOrderResponse;
    toJSON(message: FulfillOrderResponse): unknown;
    create(base?: DeepPartial<FulfillOrderResponse>): FulfillOrderResponse;
    fromPartial(object: DeepPartial<FulfillOrderResponse>): FulfillOrderResponse;
};
export declare const RefundOrderResponse: {
    $type: "devvit.actor.payments.v1alpha.RefundOrderResponse";
    encode(_: RefundOrderResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RefundOrderResponse;
    fromJSON(_: any): RefundOrderResponse;
    toJSON(_: RefundOrderResponse): unknown;
    create(base?: DeepPartial<RefundOrderResponse>): RefundOrderResponse;
    fromPartial(_: DeepPartial<RefundOrderResponse>): RefundOrderResponse;
};
/**
 * PaymentProcessor is an actor type for exposing hooks that are triggered
 * as part of product order flow.
 */
export interface PaymentProcessor {
    /**
     * FulfillOrder is called while the order is in-flight by the Payments platform.
     * This give the opportunity for a developer to acknowlege and order has been
     * fulfilled or reject it
     */
    FulfillOrder(request: FulfillOrderRequest, metadata?: Metadata): Promise<FulfillOrderResponse>;
    /**
     * RefundOrder is called when an order is refunded. This happens asynchnously
     * outside the main order flow
     */
    RefundOrder(request: RefundOrderRequest, metadata?: Metadata): Promise<RefundOrderResponse>;
}
export declare const PaymentProcessorServiceName = "devvit.actor.payments.v1alpha.PaymentProcessor";
export declare class PaymentProcessorClientImpl implements PaymentProcessor {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    FulfillOrder(request: FulfillOrderRequest, metadata?: Metadata): Promise<FulfillOrderResponse>;
    RefundOrder(request: RefundOrderRequest, metadata?: Metadata): Promise<RefundOrderResponse>;
}
/**
 * PaymentProcessor is an actor type for exposing hooks that are triggered
 * as part of product order flow.
 */
export type PaymentProcessorDefinition = typeof PaymentProcessorDefinition;
export declare const PaymentProcessorDefinition: {
    readonly name: "PaymentProcessor";
    readonly fullName: "devvit.actor.payments.v1alpha.PaymentProcessor";
    readonly methods: {
        /**
         * FulfillOrder is called while the order is in-flight by the Payments platform.
         * This give the opportunity for a developer to acknowlege and order has been
         * fulfilled or reject it
         */
        readonly fulfillOrder: {
            readonly name: "FulfillOrder";
            readonly requestType: {
                $type: "devvit.actor.payments.v1alpha.FulfillOrderRequest";
                encode(message: FulfillOrderRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): FulfillOrderRequest;
                fromJSON(object: any): FulfillOrderRequest;
                toJSON(message: FulfillOrderRequest): unknown;
                create(base?: DeepPartial<FulfillOrderRequest>): FulfillOrderRequest;
                fromPartial(object: DeepPartial<FulfillOrderRequest>): FulfillOrderRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.payments.v1alpha.FulfillOrderResponse";
                encode(message: FulfillOrderResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): FulfillOrderResponse;
                fromJSON(object: any): FulfillOrderResponse;
                toJSON(message: FulfillOrderResponse): unknown;
                create(base?: DeepPartial<FulfillOrderResponse>): FulfillOrderResponse;
                fromPartial(object: DeepPartial<FulfillOrderResponse>): FulfillOrderResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /**
         * RefundOrder is called when an order is refunded. This happens asynchnously
         * outside the main order flow
         */
        readonly refundOrder: {
            readonly name: "RefundOrder";
            readonly requestType: {
                $type: "devvit.actor.payments.v1alpha.RefundOrderRequest";
                encode(message: RefundOrderRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): RefundOrderRequest;
                fromJSON(object: any): RefundOrderRequest;
                toJSON(message: RefundOrderRequest): unknown;
                create(base?: DeepPartial<RefundOrderRequest>): RefundOrderRequest;
                fromPartial(object: DeepPartial<RefundOrderRequest>): RefundOrderRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.payments.v1alpha.RefundOrderResponse";
                encode(_: RefundOrderResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): RefundOrderResponse;
                fromJSON(_: any): RefundOrderResponse;
                toJSON(_: RefundOrderResponse): unknown;
                create(base?: DeepPartial<RefundOrderResponse>): RefundOrderResponse;
                fromPartial(_: DeepPartial<RefundOrderResponse>): RefundOrderResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array, metadata?: Metadata): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=payments.d.ts.map