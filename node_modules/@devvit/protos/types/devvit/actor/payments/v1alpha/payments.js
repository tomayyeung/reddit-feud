/**
 * #payments.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { messageTypeRegistry } from "../../../../typeRegistry.js";
import { Order } from "../../../payments/v1alpha/order.js";
function createBaseFulfillOrderRequest() {
    return { order: undefined };
}
export const FulfillOrderRequest = {
    $type: "devvit.actor.payments.v1alpha.FulfillOrderRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.order !== undefined) {
            Order.encode(message.order, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFulfillOrderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.order = Order.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { order: isSet(object.order) ? Order.fromJSON(object.order) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.order !== undefined) {
            obj.order = Order.toJSON(message.order);
        }
        return obj;
    },
    create(base) {
        return FulfillOrderRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFulfillOrderRequest();
        message.order = (object.order !== undefined && object.order !== null) ? Order.fromPartial(object.order) : undefined;
        return message;
    },
};
messageTypeRegistry.set(FulfillOrderRequest.$type, FulfillOrderRequest);
function createBaseRefundOrderRequest() {
    return { order: undefined };
}
export const RefundOrderRequest = {
    $type: "devvit.actor.payments.v1alpha.RefundOrderRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.order !== undefined) {
            Order.encode(message.order, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRefundOrderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.order = Order.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { order: isSet(object.order) ? Order.fromJSON(object.order) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.order !== undefined) {
            obj.order = Order.toJSON(message.order);
        }
        return obj;
    },
    create(base) {
        return RefundOrderRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRefundOrderRequest();
        message.order = (object.order !== undefined && object.order !== null) ? Order.fromPartial(object.order) : undefined;
        return message;
    },
};
messageTypeRegistry.set(RefundOrderRequest.$type, RefundOrderRequest);
function createBaseFulfillOrderResponse() {
    return { acknowledged: undefined, rejectionReason: undefined };
}
export const FulfillOrderResponse = {
    $type: "devvit.actor.payments.v1alpha.FulfillOrderResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.acknowledged !== undefined) {
            writer.uint32(8).bool(message.acknowledged);
        }
        if (message.rejectionReason !== undefined) {
            writer.uint32(18).string(message.rejectionReason);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFulfillOrderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.acknowledged = reader.bool();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.rejectionReason = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            acknowledged: isSet(object.acknowledged) ? globalThis.Boolean(object.acknowledged) : undefined,
            rejectionReason: isSet(object.rejectionReason) ? globalThis.String(object.rejectionReason) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.acknowledged !== undefined) {
            obj.acknowledged = message.acknowledged;
        }
        if (message.rejectionReason !== undefined) {
            obj.rejectionReason = message.rejectionReason;
        }
        return obj;
    },
    create(base) {
        return FulfillOrderResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFulfillOrderResponse();
        message.acknowledged = object.acknowledged ?? undefined;
        message.rejectionReason = object.rejectionReason ?? undefined;
        return message;
    },
};
messageTypeRegistry.set(FulfillOrderResponse.$type, FulfillOrderResponse);
function createBaseRefundOrderResponse() {
    return {};
}
export const RefundOrderResponse = {
    $type: "devvit.actor.payments.v1alpha.RefundOrderResponse",
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRefundOrderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return RefundOrderResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseRefundOrderResponse();
        return message;
    },
};
messageTypeRegistry.set(RefundOrderResponse.$type, RefundOrderResponse);
export const PaymentProcessorServiceName = "devvit.actor.payments.v1alpha.PaymentProcessor";
export class PaymentProcessorClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || PaymentProcessorServiceName;
        this.rpc = rpc;
        this.FulfillOrder = this.FulfillOrder.bind(this);
        this.RefundOrder = this.RefundOrder.bind(this);
    }
    FulfillOrder(request, metadata) {
        const data = FulfillOrderRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "FulfillOrder", data, metadata);
        return promise.then((data) => FulfillOrderResponse.decode(_m0.Reader.create(data)));
    }
    RefundOrder(request, metadata) {
        const data = RefundOrderRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "RefundOrder", data, metadata);
        return promise.then((data) => RefundOrderResponse.decode(_m0.Reader.create(data)));
    }
}
export const PaymentProcessorDefinition = {
    name: "PaymentProcessor",
    fullName: "devvit.actor.payments.v1alpha.PaymentProcessor",
    methods: {
        /**
         * FulfillOrder is called while the order is in-flight by the Payments platform.
         * This give the opportunity for a developer to acknowlege and order has been
         * fulfilled or reject it
         */
        fulfillOrder: {
            name: "FulfillOrder",
            requestType: FulfillOrderRequest,
            requestStream: false,
            responseType: FulfillOrderResponse,
            responseStream: false,
            options: {},
        },
        /**
         * RefundOrder is called when an order is refunded. This happens asynchnously
         * outside the main order flow
         */
        refundOrder: {
            name: "RefundOrder",
            requestType: RefundOrderRequest,
            requestStream: false,
            responseType: RefundOrderResponse,
            responseStream: false,
            options: {},
        },
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
