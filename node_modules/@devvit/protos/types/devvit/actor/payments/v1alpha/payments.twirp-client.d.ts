import { FulfillOrderRequest, FulfillOrderResponse, RefundOrderRequest, RefundOrderResponse } from './payments.js';
interface Rpc {
    request(service: string, method: string, contentType: 'application/json' | 'application/protobuf', data: object | Uint8Array): Promise<object | Uint8Array>;
}
export interface PaymentProcessorClient {
    FulfillOrder(request: FulfillOrderRequest): Promise<FulfillOrderResponse>;
    RefundOrder(request: RefundOrderRequest): Promise<RefundOrderResponse>;
}
export declare class PaymentProcessorClientJSON implements PaymentProcessorClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    FulfillOrder(request: FulfillOrderRequest): Promise<FulfillOrderResponse>;
    RefundOrder(request: RefundOrderRequest): Promise<RefundOrderResponse>;
}
export declare class PaymentProcessorClientProtobuf implements PaymentProcessorClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    FulfillOrder(request: FulfillOrderRequest): Promise<FulfillOrderResponse>;
    RefundOrder(request: RefundOrderRequest): Promise<RefundOrderResponse>;
}
export {};
//# sourceMappingURL=payments.twirp-client.d.ts.map