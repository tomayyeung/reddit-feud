import { FulfillOrderRequest, FulfillOrderResponse, RefundOrderRequest, RefundOrderResponse, } from './payments.js';
export class PaymentProcessorClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.FulfillOrder.bind(this);
        this.RefundOrder.bind(this);
    }
    FulfillOrder(request) {
        const data = FulfillOrderRequest.toJSON(request);
        const promise = this.rpc.request('devvit.actor.payments.v1alpha.PaymentProcessor', 'FulfillOrder', 'application/json', data);
        return promise.then((data) => FulfillOrderResponse.fromJSON(data));
    }
    RefundOrder(request) {
        const data = RefundOrderRequest.toJSON(request);
        const promise = this.rpc.request('devvit.actor.payments.v1alpha.PaymentProcessor', 'RefundOrder', 'application/json', data);
        return promise.then((data) => RefundOrderResponse.fromJSON(data));
    }
}
export class PaymentProcessorClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.FulfillOrder.bind(this);
        this.RefundOrder.bind(this);
    }
    FulfillOrder(request) {
        const data = FulfillOrderRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.actor.payments.v1alpha.PaymentProcessor', 'FulfillOrder', 'application/protobuf', data);
        return promise.then((data) => FulfillOrderResponse.decode(data));
    }
    RefundOrder(request) {
        const data = RefundOrderRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.actor.payments.v1alpha.PaymentProcessor', 'RefundOrder', 'application/protobuf', data);
        return promise.then((data) => RefundOrderResponse.decode(data));
    }
}
