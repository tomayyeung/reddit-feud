import { TwirpServer, TwirpError, TwirpErrorCode, TwirpContentType, chainInterceptors, } from 'twirp-ts';
import { FulfillOrderRequest, FulfillOrderResponse, RefundOrderRequest, RefundOrderResponse, } from './payments.js';
export var PaymentProcessorMethod;
(function (PaymentProcessorMethod) {
    PaymentProcessorMethod["FulfillOrder"] = "FulfillOrder";
    PaymentProcessorMethod["RefundOrder"] = "RefundOrder";
})(PaymentProcessorMethod || (PaymentProcessorMethod = {}));
export const PaymentProcessorMethodList = [
    PaymentProcessorMethod.FulfillOrder,
    PaymentProcessorMethod.RefundOrder,
];
export function createPaymentProcessorServer(service) {
    return new TwirpServer({
        service,
        packageName: 'devvit.actor.payments.v1alpha',
        serviceName: 'PaymentProcessor',
        methodList: PaymentProcessorMethodList,
        matchRoute: matchPaymentProcessorRoute,
    });
}
function matchPaymentProcessorRoute(method, events) {
    switch (method) {
        case 'FulfillOrder':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'FulfillOrder' };
                await events.onMatch(ctx);
                return handlePaymentProcessorFulfillOrderRequest(ctx, service, data, interceptors);
            };
        case 'RefundOrder':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'RefundOrder' };
                await events.onMatch(ctx);
                return handlePaymentProcessorRefundOrderRequest(ctx, service, data, interceptors);
            };
        default:
            events.onNotFound();
            const msg = `no handler found`;
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handlePaymentProcessorFulfillOrderRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handlePaymentProcessorFulfillOrderJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handlePaymentProcessorFulfillOrderProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handlePaymentProcessorRefundOrderRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handlePaymentProcessorRefundOrderJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handlePaymentProcessorRefundOrderProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
async function handlePaymentProcessorFulfillOrderJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = FulfillOrderRequest.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.FulfillOrder(ctx, inputReq);
        });
    }
    else {
        response = await service.FulfillOrder(ctx, request);
    }
    return JSON.stringify(FulfillOrderResponse.toJSON(response));
}
async function handlePaymentProcessorRefundOrderJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = RefundOrderRequest.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.RefundOrder(ctx, inputReq);
        });
    }
    else {
        response = await service.RefundOrder(ctx, request);
    }
    return JSON.stringify(RefundOrderResponse.toJSON(response));
}
async function handlePaymentProcessorFulfillOrderProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = FulfillOrderRequest.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.FulfillOrder(ctx, inputReq);
        });
    }
    else {
        response = await service.FulfillOrder(ctx, request);
    }
    return Buffer.from(FulfillOrderResponse.encode(response).finish());
}
async function handlePaymentProcessorRefundOrderProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = RefundOrderRequest.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.RefundOrder(ctx, inputReq);
        });
    }
    else {
        response = await service.RefundOrder(ctx, request);
    }
    return Buffer.from(RefundOrderResponse.encode(response).finish());
}
