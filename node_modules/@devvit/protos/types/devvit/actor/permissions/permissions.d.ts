/**
 * #permissions.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
export declare enum Permission {
    SYSTEM = 0,
    HTTP = 1,
    UNRECOGNIZED = -1
}
export declare function permissionFromJSON(object: any): Permission;
export declare function permissionToJSON(object: Permission): number;
export interface NestedRule {
    requires: PermissionOrRule[];
}
export interface PermissionOrRule {
    permission?: Permission | undefined;
    and?: NestedRule | undefined;
    or?: NestedRule | undefined;
}
export interface PermissionConfig {
    actor: string;
    has: Permission[];
    requires: PermissionOrRule[];
}
export interface PermissionList {
    permissions: PermissionConfig[];
}
export declare const NestedRule: {
    $type: "devvit.actor.permissions.NestedRule";
    encode(message: NestedRule, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): NestedRule;
    fromJSON(object: any): NestedRule;
    toJSON(message: NestedRule): unknown;
    create(base?: DeepPartial<NestedRule>): NestedRule;
    fromPartial(object: DeepPartial<NestedRule>): NestedRule;
};
export declare const PermissionOrRule: {
    $type: "devvit.actor.permissions.PermissionOrRule";
    encode(message: PermissionOrRule, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PermissionOrRule;
    fromJSON(object: any): PermissionOrRule;
    toJSON(message: PermissionOrRule): unknown;
    create(base?: DeepPartial<PermissionOrRule>): PermissionOrRule;
    fromPartial(object: DeepPartial<PermissionOrRule>): PermissionOrRule;
};
export declare const PermissionConfig: {
    $type: "devvit.actor.permissions.PermissionConfig";
    encode(message: PermissionConfig, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PermissionConfig;
    fromJSON(object: any): PermissionConfig;
    toJSON(message: PermissionConfig): unknown;
    create(base?: DeepPartial<PermissionConfig>): PermissionConfig;
    fromPartial(object: DeepPartial<PermissionConfig>): PermissionConfig;
};
export declare const PermissionList: {
    $type: "devvit.actor.permissions.PermissionList";
    encode(message: PermissionList, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PermissionList;
    fromJSON(object: any): PermissionList;
    toJSON(message: PermissionList): unknown;
    create(base?: DeepPartial<PermissionList>): PermissionList;
    fromPartial(object: DeepPartial<PermissionList>): PermissionList;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=permissions.d.ts.map