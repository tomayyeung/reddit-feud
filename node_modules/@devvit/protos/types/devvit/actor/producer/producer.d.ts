/**
 * #producer.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { Observable } from "rxjs";
import { Metadata } from "../../../../lib/Types.js";
export interface Arg {
    str?: string | undefined;
    i32?: number | undefined;
    i64?: number | undefined;
}
export interface Args {
    elements: Arg[];
}
export declare const Arg: {
    $type: "devvit.actor.producer.Arg";
    encode(message: Arg, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Arg;
    fromJSON(object: any): Arg;
    toJSON(message: Arg): unknown;
    create(base?: DeepPartial<Arg>): Arg;
    fromPartial(object: DeepPartial<Arg>): Arg;
};
export declare const Args: {
    $type: "devvit.actor.producer.Args";
    encode(message: Args, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Args;
    fromJSON(object: any): Args;
    toJSON(message: Args): unknown;
    create(base?: DeepPartial<Args>): Args;
    fromPartial(object: DeepPartial<Args>): Args;
};
export interface Producer {
    Produce(request: Args, metadata?: Metadata): Observable<Arg>;
}
export declare const ProducerServiceName = "devvit.actor.producer.Producer";
export declare class ProducerClientImpl implements Producer {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Produce(request: Args, metadata?: Metadata): Observable<Arg>;
}
export type ProducerDefinition = typeof ProducerDefinition;
export declare const ProducerDefinition: {
    readonly name: "Producer";
    readonly fullName: "devvit.actor.producer.Producer";
    readonly methods: {
        readonly produce: {
            readonly name: "Produce";
            readonly requestType: {
                $type: "devvit.actor.producer.Args";
                encode(message: Args, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): Args;
                fromJSON(object: any): Args;
                toJSON(message: Args): unknown;
                create(base?: DeepPartial<Args>): Args;
                fromPartial(object: DeepPartial<Args>): Args;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.producer.Arg";
                encode(message: Arg, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): Arg;
                fromJSON(object: any): Arg;
                toJSON(message: Arg): unknown;
                create(base?: DeepPartial<Arg>): Arg;
                fromPartial(object: DeepPartial<Arg>): Arg;
            };
            readonly responseStream: true;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array, metadata?: Metadata): Promise<Uint8Array>;
    clientStreamingRequest(service: string, method: string, data: Observable<Uint8Array>, metadata?: Metadata): Promise<Uint8Array>;
    serverStreamingRequest(service: string, method: string, data: Uint8Array, metadata?: Metadata): Observable<Uint8Array>;
    bidirectionalStreamingRequest(service: string, method: string, data: Observable<Uint8Array>, metadata?: Metadata): Observable<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=producer.d.ts.map