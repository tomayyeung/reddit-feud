/**
 * #producer.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal.js";
import { map } from "rxjs/operators";
import { messageTypeRegistry } from "../../../typeRegistry.js";
function createBaseArg() {
    return { str: undefined, i32: undefined, i64: undefined };
}
export const Arg = {
    $type: "devvit.actor.producer.Arg",
    encode(message, writer = _m0.Writer.create()) {
        if (message.str !== undefined) {
            writer.uint32(10).string(message.str);
        }
        if (message.i32 !== undefined) {
            writer.uint32(16).int32(message.i32);
        }
        if (message.i64 !== undefined) {
            writer.uint32(24).int64(message.i64);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseArg();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.str = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.i32 = reader.int32();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.i64 = longToNumber(reader.int64());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            str: isSet(object.str) ? globalThis.String(object.str) : undefined,
            i32: isSet(object.i32) ? globalThis.Number(object.i32) : undefined,
            i64: isSet(object.i64) ? globalThis.Number(object.i64) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.str !== undefined) {
            obj.str = message.str;
        }
        if (message.i32 !== undefined) {
            obj.i32 = Math.round(message.i32);
        }
        if (message.i64 !== undefined) {
            obj.i64 = Math.round(message.i64);
        }
        return obj;
    },
    create(base) {
        return Arg.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseArg();
        message.str = object.str ?? undefined;
        message.i32 = object.i32 ?? undefined;
        message.i64 = object.i64 ?? undefined;
        return message;
    },
};
messageTypeRegistry.set(Arg.$type, Arg);
function createBaseArgs() {
    return { elements: [] };
}
export const Args = {
    $type: "devvit.actor.producer.Args",
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.elements) {
            Arg.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseArgs();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.elements.push(Arg.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            elements: globalThis.Array.isArray(object?.elements) ? object.elements.map((e) => Arg.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.elements?.length) {
            obj.elements = message.elements.map((e) => Arg.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return Args.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseArgs();
        message.elements = object.elements?.map((e) => Arg.fromPartial(e)) || [];
        return message;
    },
};
messageTypeRegistry.set(Args.$type, Args);
export const ProducerServiceName = "devvit.actor.producer.Producer";
export class ProducerClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || ProducerServiceName;
        this.rpc = rpc;
        this.Produce = this.Produce.bind(this);
    }
    Produce(request, metadata) {
        const data = Args.encode(request).finish();
        const result = this.rpc.serverStreamingRequest(this.service, "Produce", data, metadata);
        return result.pipe(map((data) => Arg.decode(_m0.Reader.create(data))));
    }
}
export const ProducerDefinition = {
    name: "Producer",
    fullName: "devvit.actor.producer.Producer",
    methods: {
        produce: {
            name: "Produce",
            requestType: Args,
            requestStream: false,
            responseType: Arg,
            responseStream: true,
            options: {},
        },
    },
};
function longToNumber(long) {
    if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    return long.toNumber();
}
if (_m0.util.Long !== Long) {
    _m0.util.Long = Long;
    _m0.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
