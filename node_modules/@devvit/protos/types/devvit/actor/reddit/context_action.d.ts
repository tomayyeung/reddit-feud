/**
 * #context_action.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { Metadata } from "../../../../lib/Types.js";
import { Empty } from "../../../google/protobuf/empty.js";
import { RedditObject, SubredditObject } from "../../plugin/redditapi/common/common_msg.js";
import { Effect } from "../../ui/effects/v1alpha/effect.js";
import { ConfigForm } from "../user_configurable/user_configurable.js";
import { ContextType } from "./context_type.js";
/** Which contexts an action should be applied to */
export interface ContextActionAllowedContexts {
    post: boolean;
    comment: boolean;
    subreddit: boolean;
}
/** Restrict access to specific user groups */
export interface ContextActionAllowedUsers {
    /** Moderator only */
    moderator: boolean;
    /**
     * Member of the subreddit where the Actor is installed
     *
     * @deprecated
     */
    member: boolean;
    /** Logged out users can perform this action */
    loggedOut: boolean;
}
/** Filters for post actions */
export interface ContextActionPostFilters {
    /** If true, only display action for posts created by the app itself, otherwise for all posts */
    currentApp?: boolean | undefined;
}
/** Describes a single action provided by an Actor */
export interface ContextActionDescription {
    /** Dev-specified ID for this action to determine which one was called in OnAction */
    actionId: string;
    /** User-facing name for this action (i.e.: text in the overflow menu) */
    name: string;
    /** Short, user-facing secondary text to describe what this action is going to do */
    description: string;
    /** Flags to determine in which contexts this action should be displayed */
    contexts?: ContextActionAllowedContexts | undefined;
    /** Flags to determine what kind of user can see this action */
    users?: ContextActionAllowedUsers | undefined;
    /** Optional field to request user input when the action is clicked */
    userInput?: ConfigForm | undefined;
    /** Filters to apply to actions in post context */
    postFilters?: ContextActionPostFilters | undefined;
}
export interface ContextActionList {
    actions: ContextActionDescription[];
}
export interface ContextActionRequest {
    /** The action ID defined in ContextActionDescription */
    actionId: string;
    /** Which context this request is coming from */
    context: ContextType;
    /** TODO: Replace with Post/Comment/Subreddit types when it's safe */
    post?: RedditObject | undefined;
    comment?: RedditObject | undefined;
    subreddit?: SubredditObject | undefined;
    /** If user_input is defined in ContextActionDescription, the result will be provided here */
    userInput?: ConfigForm | undefined;
}
export interface ContextActionResponse {
    /**
     * Whether or not the action was successful.
     * @deprecated Use effects instead
     */
    success: boolean;
    /**
     * If set, display as a popup toast to the user
     * @deprecated Use effects instead
     */
    message: string;
    effects: Effect[];
}
export declare const ContextActionAllowedContexts: {
    $type: "devvit.actor.reddit.ContextActionAllowedContexts";
    encode(message: ContextActionAllowedContexts, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ContextActionAllowedContexts;
    fromJSON(object: any): ContextActionAllowedContexts;
    toJSON(message: ContextActionAllowedContexts): unknown;
    create(base?: DeepPartial<ContextActionAllowedContexts>): ContextActionAllowedContexts;
    fromPartial(object: DeepPartial<ContextActionAllowedContexts>): ContextActionAllowedContexts;
};
export declare const ContextActionAllowedUsers: {
    $type: "devvit.actor.reddit.ContextActionAllowedUsers";
    encode(message: ContextActionAllowedUsers, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ContextActionAllowedUsers;
    fromJSON(object: any): ContextActionAllowedUsers;
    toJSON(message: ContextActionAllowedUsers): unknown;
    create(base?: DeepPartial<ContextActionAllowedUsers>): ContextActionAllowedUsers;
    fromPartial(object: DeepPartial<ContextActionAllowedUsers>): ContextActionAllowedUsers;
};
export declare const ContextActionPostFilters: {
    $type: "devvit.actor.reddit.ContextActionPostFilters";
    encode(message: ContextActionPostFilters, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ContextActionPostFilters;
    fromJSON(object: any): ContextActionPostFilters;
    toJSON(message: ContextActionPostFilters): unknown;
    create(base?: DeepPartial<ContextActionPostFilters>): ContextActionPostFilters;
    fromPartial(object: DeepPartial<ContextActionPostFilters>): ContextActionPostFilters;
};
export declare const ContextActionDescription: {
    $type: "devvit.actor.reddit.ContextActionDescription";
    encode(message: ContextActionDescription, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ContextActionDescription;
    fromJSON(object: any): ContextActionDescription;
    toJSON(message: ContextActionDescription): unknown;
    create(base?: DeepPartial<ContextActionDescription>): ContextActionDescription;
    fromPartial(object: DeepPartial<ContextActionDescription>): ContextActionDescription;
};
export declare const ContextActionList: {
    $type: "devvit.actor.reddit.ContextActionList";
    encode(message: ContextActionList, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ContextActionList;
    fromJSON(object: any): ContextActionList;
    toJSON(message: ContextActionList): unknown;
    create(base?: DeepPartial<ContextActionList>): ContextActionList;
    fromPartial(object: DeepPartial<ContextActionList>): ContextActionList;
};
export declare const ContextActionRequest: {
    $type: "devvit.actor.reddit.ContextActionRequest";
    encode(message: ContextActionRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ContextActionRequest;
    fromJSON(object: any): ContextActionRequest;
    toJSON(message: ContextActionRequest): unknown;
    create(base?: DeepPartial<ContextActionRequest>): ContextActionRequest;
    fromPartial(object: DeepPartial<ContextActionRequest>): ContextActionRequest;
};
export declare const ContextActionResponse: {
    $type: "devvit.actor.reddit.ContextActionResponse";
    encode(message: ContextActionResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ContextActionResponse;
    fromJSON(object: any): ContextActionResponse;
    toJSON(message: ContextActionResponse): unknown;
    create(base?: DeepPartial<ContextActionResponse>): ContextActionResponse;
    fromPartial(object: DeepPartial<ContextActionResponse>): ContextActionResponse;
};
/**
 * Context actions are clickable entry points from various parts of Reddit,
 * such as a Post or Comment, in order to trigger additional actions
 * (perform actions on behalf of the user, display additional UI, etc.)
 */
export interface ContextAction {
    GetActions(request: Empty, metadata?: Metadata): Promise<ContextActionList>;
    OnAction(request: ContextActionRequest, metadata?: Metadata): Promise<ContextActionResponse>;
}
export declare const ContextActionServiceName = "devvit.actor.reddit.ContextAction";
export declare class ContextActionClientImpl implements ContextAction {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    GetActions(request: Empty, metadata?: Metadata): Promise<ContextActionList>;
    OnAction(request: ContextActionRequest, metadata?: Metadata): Promise<ContextActionResponse>;
}
/**
 * Context actions are clickable entry points from various parts of Reddit,
 * such as a Post or Comment, in order to trigger additional actions
 * (perform actions on behalf of the user, display additional UI, etc.)
 */
export type ContextActionDefinition = typeof ContextActionDefinition;
export declare const ContextActionDefinition: {
    readonly name: "ContextAction";
    readonly fullName: "devvit.actor.reddit.ContextAction";
    readonly methods: {
        readonly getActions: {
            readonly name: "GetActions";
            readonly requestType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {} | undefined): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.reddit.ContextActionList";
                encode(message: ContextActionList, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ContextActionList;
                fromJSON(object: any): ContextActionList;
                toJSON(message: ContextActionList): unknown;
                create(base?: DeepPartial<ContextActionList>): ContextActionList;
                fromPartial(object: DeepPartial<ContextActionList>): ContextActionList;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly onAction: {
            readonly name: "OnAction";
            readonly requestType: {
                $type: "devvit.actor.reddit.ContextActionRequest";
                encode(message: ContextActionRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ContextActionRequest;
                fromJSON(object: any): ContextActionRequest;
                toJSON(message: ContextActionRequest): unknown;
                create(base?: DeepPartial<ContextActionRequest>): ContextActionRequest;
                fromPartial(object: DeepPartial<ContextActionRequest>): ContextActionRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.reddit.ContextActionResponse";
                encode(message: ContextActionResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ContextActionResponse;
                fromJSON(object: any): ContextActionResponse;
                toJSON(message: ContextActionResponse): unknown;
                create(base?: DeepPartial<ContextActionResponse>): ContextActionResponse;
                fromPartial(object: DeepPartial<ContextActionResponse>): ContextActionResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array, metadata?: Metadata): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=context_action.d.ts.map