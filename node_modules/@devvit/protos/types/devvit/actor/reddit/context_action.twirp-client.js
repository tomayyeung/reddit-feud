import { Empty } from '../../../google/protobuf/empty.js';
import { ContextActionList, ContextActionRequest, ContextActionResponse, } from './context_action.js';
export class ContextActionClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.GetActions.bind(this);
        this.OnAction.bind(this);
    }
    GetActions(request) {
        const data = Empty.toJSON(request);
        const promise = this.rpc.request('devvit.actor.reddit.ContextAction', 'GetActions', 'application/json', data);
        return promise.then((data) => ContextActionList.fromJSON(data));
    }
    OnAction(request) {
        const data = ContextActionRequest.toJSON(request);
        const promise = this.rpc.request('devvit.actor.reddit.ContextAction', 'OnAction', 'application/json', data);
        return promise.then((data) => ContextActionResponse.fromJSON(data));
    }
}
export class ContextActionClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.GetActions.bind(this);
        this.OnAction.bind(this);
    }
    GetActions(request) {
        const data = Empty.encode(request).finish();
        const promise = this.rpc.request('devvit.actor.reddit.ContextAction', 'GetActions', 'application/protobuf', data);
        return promise.then((data) => ContextActionList.decode(data));
    }
    OnAction(request) {
        const data = ContextActionRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.actor.reddit.ContextAction', 'OnAction', 'application/protobuf', data);
        return promise.then((data) => ContextActionResponse.decode(data));
    }
}
