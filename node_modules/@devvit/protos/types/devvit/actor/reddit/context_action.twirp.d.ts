/// <reference types="node" resolution-mode="require"/>
import { TwirpContext, TwirpServer } from 'twirp-ts';
import { Empty } from '../../../google/protobuf/empty.js';
import { ContextActionList, ContextActionRequest, ContextActionResponse } from './context_action.js';
export interface ContextActionTwirp<T extends TwirpContext = TwirpContext> {
    GetActions(ctx: T, request: Empty): Promise<ContextActionList>;
    OnAction(ctx: T, request: ContextActionRequest): Promise<ContextActionResponse>;
}
export declare enum ContextActionMethod {
    GetActions = "GetActions",
    OnAction = "OnAction"
}
export declare const ContextActionMethodList: ContextActionMethod[];
export declare function createContextActionServer<T extends TwirpContext = TwirpContext>(service: ContextActionTwirp<T>): TwirpServer<ContextActionTwirp<TwirpContext<import("http").IncomingMessage, import("http").ServerResponse<import("http").IncomingMessage>>>, T>;
//# sourceMappingURL=context_action.twirp.d.ts.map