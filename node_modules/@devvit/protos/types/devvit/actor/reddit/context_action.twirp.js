import { TwirpServer, TwirpError, TwirpErrorCode, TwirpContentType, chainInterceptors, } from 'twirp-ts';
import { Empty } from '../../../google/protobuf/empty.js';
import { ContextActionList, ContextActionRequest, ContextActionResponse, } from './context_action.js';
export var ContextActionMethod;
(function (ContextActionMethod) {
    ContextActionMethod["GetActions"] = "GetActions";
    ContextActionMethod["OnAction"] = "OnAction";
})(ContextActionMethod || (ContextActionMethod = {}));
export const ContextActionMethodList = [
    ContextActionMethod.GetActions,
    ContextActionMethod.OnAction,
];
export function createContextActionServer(service) {
    return new TwirpServer({
        service,
        packageName: 'devvit.actor.reddit',
        serviceName: 'ContextAction',
        methodList: ContextActionMethodList,
        matchRoute: matchContextActionRoute,
    });
}
function matchContextActionRoute(method, events) {
    switch (method) {
        case 'GetActions':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'GetActions' };
                await events.onMatch(ctx);
                return handleContextActionGetActionsRequest(ctx, service, data, interceptors);
            };
        case 'OnAction':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'OnAction' };
                await events.onMatch(ctx);
                return handleContextActionOnActionRequest(ctx, service, data, interceptors);
            };
        default:
            events.onNotFound();
            const msg = `no handler found`;
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleContextActionGetActionsRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleContextActionGetActionsJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleContextActionGetActionsProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleContextActionOnActionRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleContextActionOnActionJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleContextActionOnActionProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
async function handleContextActionGetActionsJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = Empty.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.GetActions(ctx, inputReq);
        });
    }
    else {
        response = await service.GetActions(ctx, request);
    }
    return JSON.stringify(ContextActionList.toJSON(response));
}
async function handleContextActionOnActionJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = ContextActionRequest.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.OnAction(ctx, inputReq);
        });
    }
    else {
        response = await service.OnAction(ctx, request);
    }
    return JSON.stringify(ContextActionResponse.toJSON(response));
}
async function handleContextActionGetActionsProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = Empty.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.GetActions(ctx, inputReq);
        });
    }
    else {
        response = await service.GetActions(ctx, request);
    }
    return Buffer.from(ContextActionList.encode(response).finish());
}
async function handleContextActionOnActionProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = ContextActionRequest.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.OnAction(ctx, inputReq);
        });
    }
    else {
        response = await service.OnAction(ctx, request);
    }
    return Buffer.from(ContextActionResponse.encode(response).finish());
}
