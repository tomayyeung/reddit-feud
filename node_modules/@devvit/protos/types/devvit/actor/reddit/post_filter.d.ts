/**
 * #post_filter.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { Metadata } from "../../../../lib/Types.js";
import { Post } from "../../reddit/post.js";
export interface PostFilterRequest {
    post?: Post | undefined;
}
export interface Response {
    accepted: boolean;
}
export declare const PostFilterRequest: {
    $type: "devvit.actor.reddit.PostFilterRequest";
    encode(message: PostFilterRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PostFilterRequest;
    fromJSON(object: any): PostFilterRequest;
    toJSON(message: PostFilterRequest): unknown;
    create(base?: DeepPartial<PostFilterRequest>): PostFilterRequest;
    fromPartial(object: DeepPartial<PostFilterRequest>): PostFilterRequest;
};
export declare const Response: {
    $type: "devvit.actor.reddit.Response";
    encode(message: Response, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Response;
    fromJSON(object: any): Response;
    toJSON(message: Response): unknown;
    create(base?: DeepPartial<Response>): Response;
    fromPartial(object: DeepPartial<Response>): Response;
};
export interface PostFilter {
    Filter(request: PostFilterRequest, metadata?: Metadata): Promise<Response>;
}
export declare const PostFilterServiceName = "devvit.actor.reddit.PostFilter";
export declare class PostFilterClientImpl implements PostFilter {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Filter(request: PostFilterRequest, metadata?: Metadata): Promise<Response>;
}
export type PostFilterDefinition = typeof PostFilterDefinition;
export declare const PostFilterDefinition: {
    readonly name: "PostFilter";
    readonly fullName: "devvit.actor.reddit.PostFilter";
    readonly methods: {
        readonly filter: {
            readonly name: "Filter";
            readonly requestType: {
                $type: "devvit.actor.reddit.PostFilterRequest";
                encode(message: PostFilterRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): PostFilterRequest;
                fromJSON(object: any): PostFilterRequest;
                toJSON(message: PostFilterRequest): unknown;
                create(base?: DeepPartial<PostFilterRequest>): PostFilterRequest;
                fromPartial(object: DeepPartial<PostFilterRequest>): PostFilterRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.reddit.Response";
                encode(message: Response, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): Response;
                fromJSON(object: any): Response;
                toJSON(message: Response): unknown;
                create(base?: DeepPartial<Response>): Response;
                fromPartial(object: DeepPartial<Response>): Response;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array, metadata?: Metadata): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=post_filter.d.ts.map