/**
 * #post_filter.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { messageTypeRegistry } from "../../../typeRegistry.js";
import { Post } from "../../reddit/post.js";
function createBasePostFilterRequest() {
    return { post: undefined };
}
export const PostFilterRequest = {
    $type: "devvit.actor.reddit.PostFilterRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.post !== undefined) {
            Post.encode(message.post, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePostFilterRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.post = Post.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { post: isSet(object.post) ? Post.fromJSON(object.post) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.post !== undefined) {
            obj.post = Post.toJSON(message.post);
        }
        return obj;
    },
    create(base) {
        return PostFilterRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePostFilterRequest();
        message.post = (object.post !== undefined && object.post !== null) ? Post.fromPartial(object.post) : undefined;
        return message;
    },
};
messageTypeRegistry.set(PostFilterRequest.$type, PostFilterRequest);
function createBaseResponse() {
    return { accepted: false };
}
export const Response = {
    $type: "devvit.actor.reddit.Response",
    encode(message, writer = _m0.Writer.create()) {
        if (message.accepted !== false) {
            writer.uint32(8).bool(message.accepted);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.accepted = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { accepted: isSet(object.accepted) ? globalThis.Boolean(object.accepted) : false };
    },
    toJSON(message) {
        const obj = {};
        if (message.accepted !== false) {
            obj.accepted = message.accepted;
        }
        return obj;
    },
    create(base) {
        return Response.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseResponse();
        message.accepted = object.accepted ?? false;
        return message;
    },
};
messageTypeRegistry.set(Response.$type, Response);
export const PostFilterServiceName = "devvit.actor.reddit.PostFilter";
export class PostFilterClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || PostFilterServiceName;
        this.rpc = rpc;
        this.Filter = this.Filter.bind(this);
    }
    Filter(request, metadata) {
        const data = PostFilterRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Filter", data, metadata);
        return promise.then((data) => Response.decode(_m0.Reader.create(data)));
    }
}
export const PostFilterDefinition = {
    name: "PostFilter",
    fullName: "devvit.actor.reddit.PostFilter",
    methods: {
        filter: {
            name: "Filter",
            requestType: PostFilterRequest,
            requestStream: false,
            responseType: Response,
            responseStream: false,
            options: {},
        },
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
