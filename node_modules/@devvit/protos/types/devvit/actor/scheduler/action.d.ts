/**
 * #action.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
export interface ScheduledAction {
    /** Arbitrary string for an Actor's internal use */
    type: string;
    /** Arbitrary string for an Actor's internal use (i.e.: JSON serialized data) */
    data?: {
        [key: string]: any;
    } | undefined;
}
export declare const ScheduledAction: {
    $type: "devvit.actor.scheduler.ScheduledAction";
    encode(message: ScheduledAction, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ScheduledAction;
    fromJSON(object: any): ScheduledAction;
    toJSON(message: ScheduledAction): unknown;
    create(base?: DeepPartial<ScheduledAction>): ScheduledAction;
    fromPartial(object: DeepPartial<ScheduledAction>): ScheduledAction;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=action.d.ts.map