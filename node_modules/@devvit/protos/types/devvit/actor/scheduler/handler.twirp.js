import { TwirpServer, TwirpError, TwirpErrorCode, TwirpContentType, chainInterceptors, } from 'twirp-ts';
import { ScheduledAction } from './action.js';
import { Empty } from '../../../google/protobuf/empty.js';
export var SchedulerHandlerMethod;
(function (SchedulerHandlerMethod) {
    SchedulerHandlerMethod["HandleScheduledAction"] = "HandleScheduledAction";
})(SchedulerHandlerMethod || (SchedulerHandlerMethod = {}));
export const SchedulerHandlerMethodList = [
    SchedulerHandlerMethod.HandleScheduledAction,
];
export function createSchedulerHandlerServer(service) {
    return new TwirpServer({
        service,
        packageName: 'devvit.actor.scheduler',
        serviceName: 'SchedulerHandler',
        methodList: SchedulerHandlerMethodList,
        matchRoute: matchSchedulerHandlerRoute,
    });
}
function matchSchedulerHandlerRoute(method, events) {
    switch (method) {
        case 'HandleScheduledAction':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'HandleScheduledAction' };
                await events.onMatch(ctx);
                return handleSchedulerHandlerHandleScheduledActionRequest(ctx, service, data, interceptors);
            };
        default:
            events.onNotFound();
            const msg = `no handler found`;
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleSchedulerHandlerHandleScheduledActionRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleSchedulerHandlerHandleScheduledActionJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleSchedulerHandlerHandleScheduledActionProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
async function handleSchedulerHandlerHandleScheduledActionJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = ScheduledAction.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.HandleScheduledAction(ctx, inputReq);
        });
    }
    else {
        response = await service.HandleScheduledAction(ctx, request);
    }
    return JSON.stringify(Empty.toJSON(response));
}
async function handleSchedulerHandlerHandleScheduledActionProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = ScheduledAction.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.HandleScheduledAction(ctx, inputReq);
        });
    }
    else {
        response = await service.HandleScheduledAction(ctx, request);
    }
    return Buffer.from(Empty.encode(response).finish());
}
