import { GetFieldsRequest, GetFieldsResponse, ValidateFormRequest, ValidateFormResponse, } from './shared.js';
export class AppSettingsClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.GetAppSettingsFields.bind(this);
        this.ValidateAppForm.bind(this);
    }
    GetAppSettingsFields(request) {
        const data = GetFieldsRequest.toJSON(request);
        const promise = this.rpc.request('devvit.actor.settings.v1alpha.AppSettings', 'GetAppSettingsFields', 'application/json', data);
        return promise.then((data) => GetFieldsResponse.fromJSON(data));
    }
    ValidateAppForm(request) {
        const data = ValidateFormRequest.toJSON(request);
        const promise = this.rpc.request('devvit.actor.settings.v1alpha.AppSettings', 'ValidateAppForm', 'application/json', data);
        return promise.then((data) => ValidateFormResponse.fromJSON(data));
    }
}
export class AppSettingsClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.GetAppSettingsFields.bind(this);
        this.ValidateAppForm.bind(this);
    }
    GetAppSettingsFields(request) {
        const data = GetFieldsRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.actor.settings.v1alpha.AppSettings', 'GetAppSettingsFields', 'application/protobuf', data);
        return promise.then((data) => GetFieldsResponse.decode(data));
    }
    ValidateAppForm(request) {
        const data = ValidateFormRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.actor.settings.v1alpha.AppSettings', 'ValidateAppForm', 'application/protobuf', data);
        return promise.then((data) => ValidateFormResponse.decode(data));
    }
}
