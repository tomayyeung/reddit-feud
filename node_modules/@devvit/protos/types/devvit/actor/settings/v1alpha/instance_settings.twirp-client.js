import { GetFieldsRequest, GetFieldsResponse, ValidateFormRequest, ValidateFormResponse, } from './shared.js';
export class InstanceSettingsClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.GetSettingsFields.bind(this);
        this.ValidateForm.bind(this);
    }
    GetSettingsFields(request) {
        const data = GetFieldsRequest.toJSON(request);
        const promise = this.rpc.request('devvit.actor.settings.v1alpha.InstanceSettings', 'GetSettingsFields', 'application/json', data);
        return promise.then((data) => GetFieldsResponse.fromJSON(data));
    }
    ValidateForm(request) {
        const data = ValidateFormRequest.toJSON(request);
        const promise = this.rpc.request('devvit.actor.settings.v1alpha.InstanceSettings', 'ValidateForm', 'application/json', data);
        return promise.then((data) => ValidateFormResponse.fromJSON(data));
    }
}
export class InstanceSettingsClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.GetSettingsFields.bind(this);
        this.ValidateForm.bind(this);
    }
    GetSettingsFields(request) {
        const data = GetFieldsRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.actor.settings.v1alpha.InstanceSettings', 'GetSettingsFields', 'application/protobuf', data);
        return promise.then((data) => GetFieldsResponse.decode(data));
    }
    ValidateForm(request) {
        const data = ValidateFormRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.actor.settings.v1alpha.InstanceSettings', 'ValidateForm', 'application/protobuf', data);
        return promise.then((data) => ValidateFormResponse.decode(data));
    }
}
