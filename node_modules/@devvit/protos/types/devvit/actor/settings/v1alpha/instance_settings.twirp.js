import { TwirpServer, TwirpError, TwirpErrorCode, TwirpContentType, chainInterceptors, } from 'twirp-ts';
import { GetFieldsRequest, GetFieldsResponse, ValidateFormRequest, ValidateFormResponse, } from './shared.js';
export var InstanceSettingsMethod;
(function (InstanceSettingsMethod) {
    InstanceSettingsMethod["GetSettingsFields"] = "GetSettingsFields";
    InstanceSettingsMethod["ValidateForm"] = "ValidateForm";
})(InstanceSettingsMethod || (InstanceSettingsMethod = {}));
export const InstanceSettingsMethodList = [
    InstanceSettingsMethod.GetSettingsFields,
    InstanceSettingsMethod.ValidateForm,
];
export function createInstanceSettingsServer(service) {
    return new TwirpServer({
        service,
        packageName: 'devvit.actor.settings.v1alpha',
        serviceName: 'InstanceSettings',
        methodList: InstanceSettingsMethodList,
        matchRoute: matchInstanceSettingsRoute,
    });
}
function matchInstanceSettingsRoute(method, events) {
    switch (method) {
        case 'GetSettingsFields':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'GetSettingsFields' };
                await events.onMatch(ctx);
                return handleInstanceSettingsGetSettingsFieldsRequest(ctx, service, data, interceptors);
            };
        case 'ValidateForm':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'ValidateForm' };
                await events.onMatch(ctx);
                return handleInstanceSettingsValidateFormRequest(ctx, service, data, interceptors);
            };
        default:
            events.onNotFound();
            const msg = `no handler found`;
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleInstanceSettingsGetSettingsFieldsRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleInstanceSettingsGetSettingsFieldsJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleInstanceSettingsGetSettingsFieldsProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleInstanceSettingsValidateFormRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleInstanceSettingsValidateFormJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleInstanceSettingsValidateFormProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
async function handleInstanceSettingsGetSettingsFieldsJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = GetFieldsRequest.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.GetSettingsFields(ctx, inputReq);
        });
    }
    else {
        response = await service.GetSettingsFields(ctx, request);
    }
    return JSON.stringify(GetFieldsResponse.toJSON(response));
}
async function handleInstanceSettingsValidateFormJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = ValidateFormRequest.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.ValidateForm(ctx, inputReq);
        });
    }
    else {
        response = await service.ValidateForm(ctx, request);
    }
    return JSON.stringify(ValidateFormResponse.toJSON(response));
}
async function handleInstanceSettingsGetSettingsFieldsProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = GetFieldsRequest.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.GetSettingsFields(ctx, inputReq);
        });
    }
    else {
        response = await service.GetSettingsFields(ctx, request);
    }
    return Buffer.from(GetFieldsResponse.encode(response).finish());
}
async function handleInstanceSettingsValidateFormProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = ValidateFormRequest.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.ValidateForm(ctx, inputReq);
        });
    }
    else {
        response = await service.ValidateForm(ctx, request);
    }
    return Buffer.from(ValidateFormResponse.encode(response).finish());
}
