/**
 * #shared.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { Form } from "../../../ui/form_builder/v1alpha/form.js";
import { FormFieldValue } from "../../../ui/form_builder/v1alpha/value.js";
export interface GetFieldsRequest {
    /** If true, the form is editing existing settings */
    editing: boolean;
}
export interface GetFieldsResponse {
    fields?: Form | undefined;
}
export interface ValidateFormRequest {
    /** If true, the form is editing existing settings */
    editing: boolean;
    /** Map of id:value pairs to validate */
    fieldValues: {
        [key: string]: FormFieldValue;
    };
}
export interface ValidateFormRequest_FieldValuesEntry {
    key: string;
    value?: FormFieldValue | undefined;
}
export interface ValidateFormResponse {
    /** If false, prevent submission and display errors on the form */
    success: boolean;
    /** Map of id:error pairs to display on the form */
    errors: {
        [key: string]: string;
    };
}
export interface ValidateFormResponse_ErrorsEntry {
    key: string;
    value: string;
}
export declare const GetFieldsRequest: {
    $type: "devvit.actor.settings.v1alpha.GetFieldsRequest";
    encode(message: GetFieldsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetFieldsRequest;
    fromJSON(object: any): GetFieldsRequest;
    toJSON(message: GetFieldsRequest): unknown;
    create(base?: DeepPartial<GetFieldsRequest>): GetFieldsRequest;
    fromPartial(object: DeepPartial<GetFieldsRequest>): GetFieldsRequest;
};
export declare const GetFieldsResponse: {
    $type: "devvit.actor.settings.v1alpha.GetFieldsResponse";
    encode(message: GetFieldsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetFieldsResponse;
    fromJSON(object: any): GetFieldsResponse;
    toJSON(message: GetFieldsResponse): unknown;
    create(base?: DeepPartial<GetFieldsResponse>): GetFieldsResponse;
    fromPartial(object: DeepPartial<GetFieldsResponse>): GetFieldsResponse;
};
export declare const ValidateFormRequest: {
    $type: "devvit.actor.settings.v1alpha.ValidateFormRequest";
    encode(message: ValidateFormRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ValidateFormRequest;
    fromJSON(object: any): ValidateFormRequest;
    toJSON(message: ValidateFormRequest): unknown;
    create(base?: DeepPartial<ValidateFormRequest>): ValidateFormRequest;
    fromPartial(object: DeepPartial<ValidateFormRequest>): ValidateFormRequest;
};
export declare const ValidateFormRequest_FieldValuesEntry: {
    $type: "devvit.actor.settings.v1alpha.ValidateFormRequest.FieldValuesEntry";
    encode(message: ValidateFormRequest_FieldValuesEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ValidateFormRequest_FieldValuesEntry;
    fromJSON(object: any): ValidateFormRequest_FieldValuesEntry;
    toJSON(message: ValidateFormRequest_FieldValuesEntry): unknown;
    create(base?: DeepPartial<ValidateFormRequest_FieldValuesEntry>): ValidateFormRequest_FieldValuesEntry;
    fromPartial(object: DeepPartial<ValidateFormRequest_FieldValuesEntry>): ValidateFormRequest_FieldValuesEntry;
};
export declare const ValidateFormResponse: {
    $type: "devvit.actor.settings.v1alpha.ValidateFormResponse";
    encode(message: ValidateFormResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ValidateFormResponse;
    fromJSON(object: any): ValidateFormResponse;
    toJSON(message: ValidateFormResponse): unknown;
    create(base?: DeepPartial<ValidateFormResponse>): ValidateFormResponse;
    fromPartial(object: DeepPartial<ValidateFormResponse>): ValidateFormResponse;
};
export declare const ValidateFormResponse_ErrorsEntry: {
    $type: "devvit.actor.settings.v1alpha.ValidateFormResponse.ErrorsEntry";
    encode(message: ValidateFormResponse_ErrorsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ValidateFormResponse_ErrorsEntry;
    fromJSON(object: any): ValidateFormResponse_ErrorsEntry;
    toJSON(message: ValidateFormResponse_ErrorsEntry): unknown;
    create(base?: DeepPartial<ValidateFormResponse_ErrorsEntry>): ValidateFormResponse_ErrorsEntry;
    fromPartial(object: DeepPartial<ValidateFormResponse_ErrorsEntry>): ValidateFormResponse_ErrorsEntry;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=shared.d.ts.map