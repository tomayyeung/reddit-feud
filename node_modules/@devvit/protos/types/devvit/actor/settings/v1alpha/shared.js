/**
 * #shared.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { messageTypeRegistry } from "../../../../typeRegistry.js";
import { Form } from "../../../ui/form_builder/v1alpha/form.js";
import { FormFieldValue } from "../../../ui/form_builder/v1alpha/value.js";
function createBaseGetFieldsRequest() {
    return { editing: false };
}
export const GetFieldsRequest = {
    $type: "devvit.actor.settings.v1alpha.GetFieldsRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.editing !== false) {
            writer.uint32(8).bool(message.editing);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetFieldsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.editing = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { editing: isSet(object.editing) ? globalThis.Boolean(object.editing) : false };
    },
    toJSON(message) {
        const obj = {};
        if (message.editing !== false) {
            obj.editing = message.editing;
        }
        return obj;
    },
    create(base) {
        return GetFieldsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetFieldsRequest();
        message.editing = object.editing ?? false;
        return message;
    },
};
messageTypeRegistry.set(GetFieldsRequest.$type, GetFieldsRequest);
function createBaseGetFieldsResponse() {
    return { fields: undefined };
}
export const GetFieldsResponse = {
    $type: "devvit.actor.settings.v1alpha.GetFieldsResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.fields !== undefined) {
            Form.encode(message.fields, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetFieldsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.fields = Form.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { fields: isSet(object.fields) ? Form.fromJSON(object.fields) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.fields !== undefined) {
            obj.fields = Form.toJSON(message.fields);
        }
        return obj;
    },
    create(base) {
        return GetFieldsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetFieldsResponse();
        message.fields = (object.fields !== undefined && object.fields !== null)
            ? Form.fromPartial(object.fields)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set(GetFieldsResponse.$type, GetFieldsResponse);
function createBaseValidateFormRequest() {
    return { editing: false, fieldValues: {} };
}
export const ValidateFormRequest = {
    $type: "devvit.actor.settings.v1alpha.ValidateFormRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.editing !== false) {
            writer.uint32(8).bool(message.editing);
        }
        Object.entries(message.fieldValues).forEach(([key, value]) => {
            ValidateFormRequest_FieldValuesEntry.encode({ key: key, value }, writer.uint32(18).fork()).ldelim();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseValidateFormRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.editing = reader.bool();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    const entry2 = ValidateFormRequest_FieldValuesEntry.decode(reader, reader.uint32());
                    if (entry2.value !== undefined) {
                        message.fieldValues[entry2.key] = entry2.value;
                    }
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            editing: isSet(object.editing) ? globalThis.Boolean(object.editing) : false,
            fieldValues: isObject(object.fieldValues)
                ? Object.entries(object.fieldValues).reduce((acc, [key, value]) => {
                    acc[key] = FormFieldValue.fromJSON(value);
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.editing !== false) {
            obj.editing = message.editing;
        }
        if (message.fieldValues) {
            const entries = Object.entries(message.fieldValues);
            if (entries.length > 0) {
                obj.fieldValues = {};
                entries.forEach(([k, v]) => {
                    obj.fieldValues[k] = FormFieldValue.toJSON(v);
                });
            }
        }
        return obj;
    },
    create(base) {
        return ValidateFormRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseValidateFormRequest();
        message.editing = object.editing ?? false;
        message.fieldValues = Object.entries(object.fieldValues ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = FormFieldValue.fromPartial(value);
            }
            return acc;
        }, {});
        return message;
    },
};
messageTypeRegistry.set(ValidateFormRequest.$type, ValidateFormRequest);
function createBaseValidateFormRequest_FieldValuesEntry() {
    return { key: "", value: undefined };
}
export const ValidateFormRequest_FieldValuesEntry = {
    $type: "devvit.actor.settings.v1alpha.ValidateFormRequest.FieldValuesEntry",
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            FormFieldValue.encode(message.value, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseValidateFormRequest_FieldValuesEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = FormFieldValue.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? FormFieldValue.fromJSON(object.value) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== undefined) {
            obj.value = FormFieldValue.toJSON(message.value);
        }
        return obj;
    },
    create(base) {
        return ValidateFormRequest_FieldValuesEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseValidateFormRequest_FieldValuesEntry();
        message.key = object.key ?? "";
        message.value = (object.value !== undefined && object.value !== null)
            ? FormFieldValue.fromPartial(object.value)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set(ValidateFormRequest_FieldValuesEntry.$type, ValidateFormRequest_FieldValuesEntry);
function createBaseValidateFormResponse() {
    return { success: false, errors: {} };
}
export const ValidateFormResponse = {
    $type: "devvit.actor.settings.v1alpha.ValidateFormResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.success !== false) {
            writer.uint32(8).bool(message.success);
        }
        Object.entries(message.errors).forEach(([key, value]) => {
            ValidateFormResponse_ErrorsEntry.encode({ key: key, value }, writer.uint32(18).fork()).ldelim();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseValidateFormResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.success = reader.bool();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    const entry2 = ValidateFormResponse_ErrorsEntry.decode(reader, reader.uint32());
                    if (entry2.value !== undefined) {
                        message.errors[entry2.key] = entry2.value;
                    }
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
            errors: isObject(object.errors)
                ? Object.entries(object.errors).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.success !== false) {
            obj.success = message.success;
        }
        if (message.errors) {
            const entries = Object.entries(message.errors);
            if (entries.length > 0) {
                obj.errors = {};
                entries.forEach(([k, v]) => {
                    obj.errors[k] = v;
                });
            }
        }
        return obj;
    },
    create(base) {
        return ValidateFormResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseValidateFormResponse();
        message.success = object.success ?? false;
        message.errors = Object.entries(object.errors ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = globalThis.String(value);
            }
            return acc;
        }, {});
        return message;
    },
};
messageTypeRegistry.set(ValidateFormResponse.$type, ValidateFormResponse);
function createBaseValidateFormResponse_ErrorsEntry() {
    return { key: "", value: "" };
}
export const ValidateFormResponse_ErrorsEntry = {
    $type: "devvit.actor.settings.v1alpha.ValidateFormResponse.ErrorsEntry",
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseValidateFormResponse_ErrorsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? globalThis.String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return ValidateFormResponse_ErrorsEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseValidateFormResponse_ErrorsEntry();
        message.key = object.key ?? "";
        message.value = object.value ?? "";
        return message;
    },
};
messageTypeRegistry.set(ValidateFormResponse_ErrorsEntry.$type, ValidateFormResponse_ErrorsEntry);
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
