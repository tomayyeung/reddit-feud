/**
 * #streams.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { Observable } from "rxjs";
import { Metadata } from "../../../../lib/Types.js";
export interface TestMessage {
    number: number;
}
export declare const TestMessage: {
    $type: "devvit.actor.test.TestMessage";
    encode(message: TestMessage, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TestMessage;
    fromJSON(object: any): TestMessage;
    toJSON(message: TestMessage): unknown;
    create(base?: DeepPartial<TestMessage>): TestMessage;
    fromPartial(object: DeepPartial<TestMessage>): TestMessage;
};
/** This is a test definition useful to figure out that streams are working well. */
export interface Streams {
    /**
     * this copies messages from the request stream to the response stream.
     * It could also represent a filtering process (i.e. every odd number)
     */
    Transform(request: Observable<TestMessage>, metadata?: Metadata): Observable<TestMessage>;
    /**
     * This takes a stream of messages and returns a single response.
     * A canonical implementation would be a sum() function.
     */
    Aggregate(request: Observable<TestMessage>, metadata?: Metadata): Promise<TestMessage>;
    /**
     * This takes a single message and returns a stream of messages.  Think
     * range()
     */
    Enumerate(request: TestMessage, metadata?: Metadata): Observable<TestMessage>;
}
export declare const StreamsServiceName = "devvit.actor.test.Streams";
export declare class StreamsClientImpl implements Streams {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Transform(request: Observable<TestMessage>, metadata?: Metadata): Observable<TestMessage>;
    Aggregate(request: Observable<TestMessage>, metadata?: Metadata): Promise<TestMessage>;
    Enumerate(request: TestMessage, metadata?: Metadata): Observable<TestMessage>;
}
/** This is a test definition useful to figure out that streams are working well. */
export type StreamsDefinition = typeof StreamsDefinition;
export declare const StreamsDefinition: {
    readonly name: "Streams";
    readonly fullName: "devvit.actor.test.Streams";
    readonly methods: {
        /**
         * this copies messages from the request stream to the response stream.
         * It could also represent a filtering process (i.e. every odd number)
         */
        readonly transform: {
            readonly name: "Transform";
            readonly requestType: {
                $type: "devvit.actor.test.TestMessage";
                encode(message: TestMessage, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): TestMessage;
                fromJSON(object: any): TestMessage;
                toJSON(message: TestMessage): unknown;
                create(base?: DeepPartial<TestMessage>): TestMessage;
                fromPartial(object: DeepPartial<TestMessage>): TestMessage;
            };
            readonly requestStream: true;
            readonly responseType: {
                $type: "devvit.actor.test.TestMessage";
                encode(message: TestMessage, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): TestMessage;
                fromJSON(object: any): TestMessage;
                toJSON(message: TestMessage): unknown;
                create(base?: DeepPartial<TestMessage>): TestMessage;
                fromPartial(object: DeepPartial<TestMessage>): TestMessage;
            };
            readonly responseStream: true;
            readonly options: {};
        };
        /**
         * This takes a stream of messages and returns a single response.
         * A canonical implementation would be a sum() function.
         */
        readonly aggregate: {
            readonly name: "Aggregate";
            readonly requestType: {
                $type: "devvit.actor.test.TestMessage";
                encode(message: TestMessage, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): TestMessage;
                fromJSON(object: any): TestMessage;
                toJSON(message: TestMessage): unknown;
                create(base?: DeepPartial<TestMessage>): TestMessage;
                fromPartial(object: DeepPartial<TestMessage>): TestMessage;
            };
            readonly requestStream: true;
            readonly responseType: {
                $type: "devvit.actor.test.TestMessage";
                encode(message: TestMessage, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): TestMessage;
                fromJSON(object: any): TestMessage;
                toJSON(message: TestMessage): unknown;
                create(base?: DeepPartial<TestMessage>): TestMessage;
                fromPartial(object: DeepPartial<TestMessage>): TestMessage;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /**
         * This takes a single message and returns a stream of messages.  Think
         * range()
         */
        readonly enumerate: {
            readonly name: "Enumerate";
            readonly requestType: {
                $type: "devvit.actor.test.TestMessage";
                encode(message: TestMessage, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): TestMessage;
                fromJSON(object: any): TestMessage;
                toJSON(message: TestMessage): unknown;
                create(base?: DeepPartial<TestMessage>): TestMessage;
                fromPartial(object: DeepPartial<TestMessage>): TestMessage;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.test.TestMessage";
                encode(message: TestMessage, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): TestMessage;
                fromJSON(object: any): TestMessage;
                toJSON(message: TestMessage): unknown;
                create(base?: DeepPartial<TestMessage>): TestMessage;
                fromPartial(object: DeepPartial<TestMessage>): TestMessage;
            };
            readonly responseStream: true;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array, metadata?: Metadata): Promise<Uint8Array>;
    clientStreamingRequest(service: string, method: string, data: Observable<Uint8Array>, metadata?: Metadata): Promise<Uint8Array>;
    serverStreamingRequest(service: string, method: string, data: Uint8Array, metadata?: Metadata): Observable<Uint8Array>;
    bidirectionalStreamingRequest(service: string, method: string, data: Observable<Uint8Array>, metadata?: Metadata): Observable<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=streams.d.ts.map