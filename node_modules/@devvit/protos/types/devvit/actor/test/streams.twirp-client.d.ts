import { TestMessage } from './streams.js';
interface Rpc {
    request(service: string, method: string, contentType: 'application/json' | 'application/protobuf', data: object | Uint8Array): Promise<object | Uint8Array>;
}
export interface StreamsClient {
    Transform(request: TestMessage): Promise<TestMessage>;
    Aggregate(request: TestMessage): Promise<TestMessage>;
    Enumerate(request: TestMessage): Promise<TestMessage>;
}
export declare class StreamsClientJSON implements StreamsClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    Transform(request: TestMessage): Promise<TestMessage>;
    Aggregate(request: TestMessage): Promise<TestMessage>;
    Enumerate(request: TestMessage): Promise<TestMessage>;
}
export declare class StreamsClientProtobuf implements StreamsClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    Transform(request: TestMessage): Promise<TestMessage>;
    Aggregate(request: TestMessage): Promise<TestMessage>;
    Enumerate(request: TestMessage): Promise<TestMessage>;
}
export {};
//# sourceMappingURL=streams.twirp-client.d.ts.map