import { TestMessage } from './streams.js';
export class StreamsClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.Transform.bind(this);
        this.Aggregate.bind(this);
        this.Enumerate.bind(this);
    }
    Transform(request) {
        const data = TestMessage.toJSON(request);
        const promise = this.rpc.request('devvit.actor.test.Streams', 'Transform', 'application/json', data);
        return promise.then((data) => TestMessage.fromJSON(data));
    }
    Aggregate(request) {
        const data = TestMessage.toJSON(request);
        const promise = this.rpc.request('devvit.actor.test.Streams', 'Aggregate', 'application/json', data);
        return promise.then((data) => TestMessage.fromJSON(data));
    }
    Enumerate(request) {
        const data = TestMessage.toJSON(request);
        const promise = this.rpc.request('devvit.actor.test.Streams', 'Enumerate', 'application/json', data);
        return promise.then((data) => TestMessage.fromJSON(data));
    }
}
export class StreamsClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.Transform.bind(this);
        this.Aggregate.bind(this);
        this.Enumerate.bind(this);
    }
    Transform(request) {
        const data = TestMessage.encode(request).finish();
        const promise = this.rpc.request('devvit.actor.test.Streams', 'Transform', 'application/protobuf', data);
        return promise.then((data) => TestMessage.decode(data));
    }
    Aggregate(request) {
        const data = TestMessage.encode(request).finish();
        const promise = this.rpc.request('devvit.actor.test.Streams', 'Aggregate', 'application/protobuf', data);
        return promise.then((data) => TestMessage.decode(data));
    }
    Enumerate(request) {
        const data = TestMessage.encode(request).finish();
        const promise = this.rpc.request('devvit.actor.test.Streams', 'Enumerate', 'application/protobuf', data);
        return promise.then((data) => TestMessage.decode(data));
    }
}
