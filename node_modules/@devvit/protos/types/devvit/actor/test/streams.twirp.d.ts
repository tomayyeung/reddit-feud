/// <reference types="node" resolution-mode="require"/>
import { TwirpContext, TwirpServer } from 'twirp-ts';
import { TestMessage } from './streams.js';
export interface StreamsTwirp<T extends TwirpContext = TwirpContext> {
    Transform(ctx: T, request: TestMessage): Promise<TestMessage>;
    Aggregate(ctx: T, request: TestMessage): Promise<TestMessage>;
    Enumerate(ctx: T, request: TestMessage): Promise<TestMessage>;
}
export declare enum StreamsMethod {
    Transform = "Transform",
    Aggregate = "Aggregate",
    Enumerate = "Enumerate"
}
export declare const StreamsMethodList: StreamsMethod[];
export declare function createStreamsServer<T extends TwirpContext = TwirpContext>(service: StreamsTwirp<T>): TwirpServer<StreamsTwirp<TwirpContext<import("http").IncomingMessage, import("http").ServerResponse<import("http").IncomingMessage>>>, T>;
//# sourceMappingURL=streams.twirp.d.ts.map