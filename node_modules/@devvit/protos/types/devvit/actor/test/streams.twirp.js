import { TwirpServer, TwirpError, TwirpErrorCode, TwirpContentType, chainInterceptors, } from 'twirp-ts';
import { TestMessage } from './streams.js';
export var StreamsMethod;
(function (StreamsMethod) {
    StreamsMethod["Transform"] = "Transform";
    StreamsMethod["Aggregate"] = "Aggregate";
    StreamsMethod["Enumerate"] = "Enumerate";
})(StreamsMethod || (StreamsMethod = {}));
export const StreamsMethodList = [
    StreamsMethod.Transform,
    StreamsMethod.Aggregate,
    StreamsMethod.Enumerate,
];
export function createStreamsServer(service) {
    return new TwirpServer({
        service,
        packageName: 'devvit.actor.test',
        serviceName: 'Streams',
        methodList: StreamsMethodList,
        matchRoute: matchStreamsRoute,
    });
}
function matchStreamsRoute(method, events) {
    switch (method) {
        case 'Transform':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'Transform' };
                await events.onMatch(ctx);
                return handleStreamsTransformRequest(ctx, service, data, interceptors);
            };
        case 'Aggregate':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'Aggregate' };
                await events.onMatch(ctx);
                return handleStreamsAggregateRequest(ctx, service, data, interceptors);
            };
        case 'Enumerate':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'Enumerate' };
                await events.onMatch(ctx);
                return handleStreamsEnumerateRequest(ctx, service, data, interceptors);
            };
        default:
            events.onNotFound();
            const msg = `no handler found`;
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleStreamsTransformRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleStreamsTransformJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleStreamsTransformProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleStreamsAggregateRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleStreamsAggregateJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleStreamsAggregateProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleStreamsEnumerateRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleStreamsEnumerateJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleStreamsEnumerateProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
async function handleStreamsTransformJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = TestMessage.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.Transform(ctx, inputReq);
        });
    }
    else {
        response = await service.Transform(ctx, request);
    }
    return JSON.stringify(TestMessage.toJSON(response));
}
async function handleStreamsAggregateJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = TestMessage.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.Aggregate(ctx, inputReq);
        });
    }
    else {
        response = await service.Aggregate(ctx, request);
    }
    return JSON.stringify(TestMessage.toJSON(response));
}
async function handleStreamsEnumerateJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = TestMessage.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.Enumerate(ctx, inputReq);
        });
    }
    else {
        response = await service.Enumerate(ctx, request);
    }
    return JSON.stringify(TestMessage.toJSON(response));
}
async function handleStreamsTransformProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = TestMessage.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.Transform(ctx, inputReq);
        });
    }
    else {
        response = await service.Transform(ctx, request);
    }
    return Buffer.from(TestMessage.encode(response).finish());
}
async function handleStreamsAggregateProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = TestMessage.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.Aggregate(ctx, inputReq);
        });
    }
    else {
        response = await service.Aggregate(ctx, request);
    }
    return Buffer.from(TestMessage.encode(response).finish());
}
async function handleStreamsEnumerateProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = TestMessage.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.Enumerate(ctx, inputReq);
        });
    }
    else {
        response = await service.Enumerate(ctx, request);
    }
    return Buffer.from(TestMessage.encode(response).finish());
}
