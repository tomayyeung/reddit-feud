import { StringValue, BoolValue, Int32Value, UInt32Value, Int64Value, UInt64Value, FloatValue, DoubleValue, } from '../../../google/protobuf/wrappers.js';
export class WrapperTypesClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.StringRequest.bind(this);
        this.BoolRequest.bind(this);
        this.Int32Request.bind(this);
        this.UInt32Request.bind(this);
        this.Int64Request.bind(this);
        this.UInt64Request.bind(this);
        this.FloatRequest.bind(this);
        this.DoubleRequest.bind(this);
    }
    StringRequest(request) {
        const data = StringValue.toJSON(request);
        const promise = this.rpc.request('devvit.actor.test.WrapperTypes', 'StringRequest', 'application/json', data);
        return promise.then((data) => StringValue.fromJSON(data));
    }
    BoolRequest(request) {
        const data = BoolValue.toJSON(request);
        const promise = this.rpc.request('devvit.actor.test.WrapperTypes', 'BoolRequest', 'application/json', data);
        return promise.then((data) => BoolValue.fromJSON(data));
    }
    Int32Request(request) {
        const data = Int32Value.toJSON(request);
        const promise = this.rpc.request('devvit.actor.test.WrapperTypes', 'Int32Request', 'application/json', data);
        return promise.then((data) => Int32Value.fromJSON(data));
    }
    UInt32Request(request) {
        const data = UInt32Value.toJSON(request);
        const promise = this.rpc.request('devvit.actor.test.WrapperTypes', 'UInt32Request', 'application/json', data);
        return promise.then((data) => UInt32Value.fromJSON(data));
    }
    Int64Request(request) {
        const data = Int64Value.toJSON(request);
        const promise = this.rpc.request('devvit.actor.test.WrapperTypes', 'Int64Request', 'application/json', data);
        return promise.then((data) => Int64Value.fromJSON(data));
    }
    UInt64Request(request) {
        const data = UInt64Value.toJSON(request);
        const promise = this.rpc.request('devvit.actor.test.WrapperTypes', 'UInt64Request', 'application/json', data);
        return promise.then((data) => UInt64Value.fromJSON(data));
    }
    FloatRequest(request) {
        const data = FloatValue.toJSON(request);
        const promise = this.rpc.request('devvit.actor.test.WrapperTypes', 'FloatRequest', 'application/json', data);
        return promise.then((data) => FloatValue.fromJSON(data));
    }
    DoubleRequest(request) {
        const data = DoubleValue.toJSON(request);
        const promise = this.rpc.request('devvit.actor.test.WrapperTypes', 'DoubleRequest', 'application/json', data);
        return promise.then((data) => DoubleValue.fromJSON(data));
    }
}
export class WrapperTypesClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.StringRequest.bind(this);
        this.BoolRequest.bind(this);
        this.Int32Request.bind(this);
        this.UInt32Request.bind(this);
        this.Int64Request.bind(this);
        this.UInt64Request.bind(this);
        this.FloatRequest.bind(this);
        this.DoubleRequest.bind(this);
    }
    StringRequest(request) {
        const data = StringValue.encode(request).finish();
        const promise = this.rpc.request('devvit.actor.test.WrapperTypes', 'StringRequest', 'application/protobuf', data);
        return promise.then((data) => StringValue.decode(data));
    }
    BoolRequest(request) {
        const data = BoolValue.encode(request).finish();
        const promise = this.rpc.request('devvit.actor.test.WrapperTypes', 'BoolRequest', 'application/protobuf', data);
        return promise.then((data) => BoolValue.decode(data));
    }
    Int32Request(request) {
        const data = Int32Value.encode(request).finish();
        const promise = this.rpc.request('devvit.actor.test.WrapperTypes', 'Int32Request', 'application/protobuf', data);
        return promise.then((data) => Int32Value.decode(data));
    }
    UInt32Request(request) {
        const data = UInt32Value.encode(request).finish();
        const promise = this.rpc.request('devvit.actor.test.WrapperTypes', 'UInt32Request', 'application/protobuf', data);
        return promise.then((data) => UInt32Value.decode(data));
    }
    Int64Request(request) {
        const data = Int64Value.encode(request).finish();
        const promise = this.rpc.request('devvit.actor.test.WrapperTypes', 'Int64Request', 'application/protobuf', data);
        return promise.then((data) => Int64Value.decode(data));
    }
    UInt64Request(request) {
        const data = UInt64Value.encode(request).finish();
        const promise = this.rpc.request('devvit.actor.test.WrapperTypes', 'UInt64Request', 'application/protobuf', data);
        return promise.then((data) => UInt64Value.decode(data));
    }
    FloatRequest(request) {
        const data = FloatValue.encode(request).finish();
        const promise = this.rpc.request('devvit.actor.test.WrapperTypes', 'FloatRequest', 'application/protobuf', data);
        return promise.then((data) => FloatValue.decode(data));
    }
    DoubleRequest(request) {
        const data = DoubleValue.encode(request).finish();
        const promise = this.rpc.request('devvit.actor.test.WrapperTypes', 'DoubleRequest', 'application/protobuf', data);
        return promise.then((data) => DoubleValue.decode(data));
    }
}
