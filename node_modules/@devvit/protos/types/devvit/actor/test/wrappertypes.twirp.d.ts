/// <reference types="node" resolution-mode="require"/>
import { TwirpContext, TwirpServer } from 'twirp-ts';
import { StringValue, BoolValue, Int32Value, UInt32Value, Int64Value, UInt64Value, FloatValue, DoubleValue } from '../../../google/protobuf/wrappers.js';
export interface WrapperTypesTwirp<T extends TwirpContext = TwirpContext> {
    StringRequest(ctx: T, request: StringValue): Promise<StringValue>;
    BoolRequest(ctx: T, request: BoolValue): Promise<BoolValue>;
    Int32Request(ctx: T, request: Int32Value): Promise<Int32Value>;
    UInt32Request(ctx: T, request: UInt32Value): Promise<UInt32Value>;
    Int64Request(ctx: T, request: Int64Value): Promise<Int64Value>;
    UInt64Request(ctx: T, request: UInt64Value): Promise<UInt64Value>;
    FloatRequest(ctx: T, request: FloatValue): Promise<FloatValue>;
    DoubleRequest(ctx: T, request: DoubleValue): Promise<DoubleValue>;
}
export declare enum WrapperTypesMethod {
    StringRequest = "StringRequest",
    BoolRequest = "BoolRequest",
    Int32Request = "Int32Request",
    UInt32Request = "UInt32Request",
    Int64Request = "Int64Request",
    UInt64Request = "UInt64Request",
    FloatRequest = "FloatRequest",
    DoubleRequest = "DoubleRequest"
}
export declare const WrapperTypesMethodList: WrapperTypesMethod[];
export declare function createWrapperTypesServer<T extends TwirpContext = TwirpContext>(service: WrapperTypesTwirp<T>): TwirpServer<WrapperTypesTwirp<TwirpContext<import("http").IncomingMessage, import("http").ServerResponse<import("http").IncomingMessage>>>, T>;
//# sourceMappingURL=wrappertypes.twirp.d.ts.map