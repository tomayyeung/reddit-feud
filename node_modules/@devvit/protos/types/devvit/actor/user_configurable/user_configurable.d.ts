/**
 * #user_configurable.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { Metadata } from "../../../../lib/Types.js";
import { Empty } from "../../../google/protobuf/empty.js";
export declare enum ConfigFieldType {
    /** STRING - Single-line string */
    STRING = 0,
    /** PARAGRAPH - Multi-line string */
    PARAGRAPH = 1,
    /** NUMBER - Number input (i.e.: spinner) */
    NUMBER = 2,
    /** BOOLEAN - Checkbox, switch */
    BOOLEAN = 3,
    /** IMAGE - Image upload - value is a URL for the uploaded image */
    IMAGE = 7,
    UNRECOGNIZED = -1
}
export declare function configFieldTypeFromJSON(object: any): ConfigFieldType;
export declare function configFieldTypeToJSON(object: ConfigFieldType): number;
export interface ConfigForm {
    fields: ConfigField[];
}
/** Defines a configuration field with a specific type */
export interface ConfigField {
    /** Determines what kind of user input to generate for this field */
    fieldType: ConfigFieldType;
    /** Unique identifier for the setting */
    key: string;
    /** Message to display to the user for this setting */
    prompt: string;
    /**
     * The value of the field.
     * When calling RenderForm provide the existing value of the field
     * When calling HandleFormResponse read this property to get the user's response
     */
    response: string;
}
export interface FormResponse {
    success: boolean;
    messages: string[];
}
export declare const ConfigForm: {
    $type: "devvit.actor.user_configurable.ConfigForm";
    encode(message: ConfigForm, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ConfigForm;
    fromJSON(object: any): ConfigForm;
    toJSON(message: ConfigForm): unknown;
    create(base?: DeepPartial<ConfigForm>): ConfigForm;
    fromPartial(object: DeepPartial<ConfigForm>): ConfigForm;
};
export declare const ConfigField: {
    $type: "devvit.actor.user_configurable.ConfigField";
    encode(message: ConfigField, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ConfigField;
    fromJSON(object: any): ConfigField;
    toJSON(message: ConfigField): unknown;
    create(base?: DeepPartial<ConfigField>): ConfigField;
    fromPartial(object: DeepPartial<ConfigField>): ConfigField;
};
export declare const FormResponse: {
    $type: "devvit.actor.user_configurable.FormResponse";
    encode(message: FormResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FormResponse;
    fromJSON(object: any): FormResponse;
    toJSON(message: FormResponse): unknown;
    create(base?: DeepPartial<FormResponse>): FormResponse;
    fromPartial(object: DeepPartial<FormResponse>): FormResponse;
};
/** Enables an actor to be configurable after installation */
export interface UserConfigurable {
    /** Get a list of inputs to present to the user */
    RenderForm(request: Empty, metadata?: Metadata): Promise<ConfigForm>;
    /**
     * Parse the user input.
     * The original ConfigForm is provided with the response fields updated from the user's input.
     */
    HandleFormResponse(request: ConfigForm, metadata?: Metadata): Promise<FormResponse>;
}
export declare const UserConfigurableServiceName = "devvit.actor.user_configurable.UserConfigurable";
export declare class UserConfigurableClientImpl implements UserConfigurable {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    RenderForm(request: Empty, metadata?: Metadata): Promise<ConfigForm>;
    HandleFormResponse(request: ConfigForm, metadata?: Metadata): Promise<FormResponse>;
}
/** Enables an actor to be configurable after installation */
export type UserConfigurableDefinition = typeof UserConfigurableDefinition;
export declare const UserConfigurableDefinition: {
    readonly name: "UserConfigurable";
    readonly fullName: "devvit.actor.user_configurable.UserConfigurable";
    readonly methods: {
        /** Get a list of inputs to present to the user */
        readonly renderForm: {
            readonly name: "RenderForm";
            readonly requestType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {} | undefined): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.user_configurable.ConfigForm";
                encode(message: ConfigForm, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ConfigForm;
                fromJSON(object: any): ConfigForm;
                toJSON(message: ConfigForm): unknown;
                create(base?: DeepPartial<ConfigForm>): ConfigForm;
                fromPartial(object: DeepPartial<ConfigForm>): ConfigForm;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /**
         * Parse the user input.
         * The original ConfigForm is provided with the response fields updated from the user's input.
         */
        readonly handleFormResponse: {
            readonly name: "HandleFormResponse";
            readonly requestType: {
                $type: "devvit.actor.user_configurable.ConfigForm";
                encode(message: ConfigForm, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ConfigForm;
                fromJSON(object: any): ConfigForm;
                toJSON(message: ConfigForm): unknown;
                create(base?: DeepPartial<ConfigForm>): ConfigForm;
                fromPartial(object: DeepPartial<ConfigForm>): ConfigForm;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.actor.user_configurable.FormResponse";
                encode(message: FormResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): FormResponse;
                fromJSON(object: any): FormResponse;
                toJSON(message: FormResponse): unknown;
                create(base?: DeepPartial<FormResponse>): FormResponse;
                fromPartial(object: DeepPartial<FormResponse>): FormResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array, metadata?: Metadata): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=user_configurable.d.ts.map