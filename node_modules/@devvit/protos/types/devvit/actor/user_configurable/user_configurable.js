/**
 * #user_configurable.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { Empty } from "../../../google/protobuf/empty.js";
import { messageTypeRegistry } from "../../../typeRegistry.js";
export var ConfigFieldType;
(function (ConfigFieldType) {
    /** STRING - Single-line string */
    ConfigFieldType[ConfigFieldType["STRING"] = 0] = "STRING";
    /** PARAGRAPH - Multi-line string */
    ConfigFieldType[ConfigFieldType["PARAGRAPH"] = 1] = "PARAGRAPH";
    /** NUMBER - Number input (i.e.: spinner) */
    ConfigFieldType[ConfigFieldType["NUMBER"] = 2] = "NUMBER";
    /** BOOLEAN - Checkbox, switch */
    ConfigFieldType[ConfigFieldType["BOOLEAN"] = 3] = "BOOLEAN";
    /** IMAGE - Image upload - value is a URL for the uploaded image */
    ConfigFieldType[ConfigFieldType["IMAGE"] = 7] = "IMAGE";
    ConfigFieldType[ConfigFieldType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ConfigFieldType || (ConfigFieldType = {}));
export function configFieldTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "STRING":
            return ConfigFieldType.STRING;
        case 1:
        case "PARAGRAPH":
            return ConfigFieldType.PARAGRAPH;
        case 2:
        case "NUMBER":
            return ConfigFieldType.NUMBER;
        case 3:
        case "BOOLEAN":
            return ConfigFieldType.BOOLEAN;
        case 7:
        case "IMAGE":
            return ConfigFieldType.IMAGE;
        case -1:
        case "UNRECOGNIZED":
        default:
            return ConfigFieldType.UNRECOGNIZED;
    }
}
export function configFieldTypeToJSON(object) {
    switch (object) {
        case ConfigFieldType.STRING:
            return 0;
        case ConfigFieldType.PARAGRAPH:
            return 1;
        case ConfigFieldType.NUMBER:
            return 2;
        case ConfigFieldType.BOOLEAN:
            return 3;
        case ConfigFieldType.IMAGE:
            return 7;
        case ConfigFieldType.UNRECOGNIZED:
        default:
            return -1;
    }
}
function createBaseConfigForm() {
    return { fields: [] };
}
export const ConfigForm = {
    $type: "devvit.actor.user_configurable.ConfigForm",
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.fields) {
            ConfigField.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseConfigForm();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.fields.push(ConfigField.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            fields: globalThis.Array.isArray(object?.fields) ? object.fields.map((e) => ConfigField.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.fields?.length) {
            obj.fields = message.fields.map((e) => ConfigField.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return ConfigForm.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseConfigForm();
        message.fields = object.fields?.map((e) => ConfigField.fromPartial(e)) || [];
        return message;
    },
};
messageTypeRegistry.set(ConfigForm.$type, ConfigForm);
function createBaseConfigField() {
    return { fieldType: 0, key: "", prompt: "", response: "" };
}
export const ConfigField = {
    $type: "devvit.actor.user_configurable.ConfigField",
    encode(message, writer = _m0.Writer.create()) {
        if (message.fieldType !== 0) {
            writer.uint32(8).int32(message.fieldType);
        }
        if (message.key !== "") {
            writer.uint32(18).string(message.key);
        }
        if (message.prompt !== "") {
            writer.uint32(26).string(message.prompt);
        }
        if (message.response !== "") {
            writer.uint32(34).string(message.response);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseConfigField();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.fieldType = reader.int32();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.prompt = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.response = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            fieldType: isSet(object.fieldType) ? configFieldTypeFromJSON(object.fieldType) : 0,
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            prompt: isSet(object.prompt) ? globalThis.String(object.prompt) : "",
            response: isSet(object.response) ? globalThis.String(object.response) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.fieldType !== 0) {
            obj.fieldType = configFieldTypeToJSON(message.fieldType);
        }
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.prompt !== "") {
            obj.prompt = message.prompt;
        }
        if (message.response !== "") {
            obj.response = message.response;
        }
        return obj;
    },
    create(base) {
        return ConfigField.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseConfigField();
        message.fieldType = object.fieldType ?? 0;
        message.key = object.key ?? "";
        message.prompt = object.prompt ?? "";
        message.response = object.response ?? "";
        return message;
    },
};
messageTypeRegistry.set(ConfigField.$type, ConfigField);
function createBaseFormResponse() {
    return { success: false, messages: [] };
}
export const FormResponse = {
    $type: "devvit.actor.user_configurable.FormResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.success !== false) {
            writer.uint32(8).bool(message.success);
        }
        for (const v of message.messages) {
            writer.uint32(18).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFormResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.success = reader.bool();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.messages.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
            messages: globalThis.Array.isArray(object?.messages) ? object.messages.map((e) => globalThis.String(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.success !== false) {
            obj.success = message.success;
        }
        if (message.messages?.length) {
            obj.messages = message.messages;
        }
        return obj;
    },
    create(base) {
        return FormResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFormResponse();
        message.success = object.success ?? false;
        message.messages = object.messages?.map((e) => e) || [];
        return message;
    },
};
messageTypeRegistry.set(FormResponse.$type, FormResponse);
export const UserConfigurableServiceName = "devvit.actor.user_configurable.UserConfigurable";
export class UserConfigurableClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || UserConfigurableServiceName;
        this.rpc = rpc;
        this.RenderForm = this.RenderForm.bind(this);
        this.HandleFormResponse = this.HandleFormResponse.bind(this);
    }
    RenderForm(request, metadata) {
        const data = Empty.encode(request).finish();
        const promise = this.rpc.request(this.service, "RenderForm", data, metadata);
        return promise.then((data) => ConfigForm.decode(_m0.Reader.create(data)));
    }
    HandleFormResponse(request, metadata) {
        const data = ConfigForm.encode(request).finish();
        const promise = this.rpc.request(this.service, "HandleFormResponse", data, metadata);
        return promise.then((data) => FormResponse.decode(_m0.Reader.create(data)));
    }
}
export const UserConfigurableDefinition = {
    name: "UserConfigurable",
    fullName: "devvit.actor.user_configurable.UserConfigurable",
    methods: {
        /** Get a list of inputs to present to the user */
        renderForm: {
            name: "RenderForm",
            requestType: Empty,
            requestStream: false,
            responseType: ConfigForm,
            responseStream: false,
            options: {},
        },
        /**
         * Parse the user input.
         * The original ConfigForm is provided with the response fields updated from the user's input.
         */
        handleFormResponse: {
            name: "HandleFormResponse",
            requestType: ConfigForm,
            requestStream: false,
            responseType: FormResponse,
            responseStream: false,
            options: {},
        },
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
