import { Empty } from '../../../google/protobuf/empty.js';
import { ConfigForm, FormResponse } from './user_configurable.js';
export class UserConfigurableClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.RenderForm.bind(this);
        this.HandleFormResponse.bind(this);
    }
    RenderForm(request) {
        const data = Empty.toJSON(request);
        const promise = this.rpc.request('devvit.actor.user_configurable.UserConfigurable', 'RenderForm', 'application/json', data);
        return promise.then((data) => ConfigForm.fromJSON(data));
    }
    HandleFormResponse(request) {
        const data = ConfigForm.toJSON(request);
        const promise = this.rpc.request('devvit.actor.user_configurable.UserConfigurable', 'HandleFormResponse', 'application/json', data);
        return promise.then((data) => FormResponse.fromJSON(data));
    }
}
export class UserConfigurableClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.RenderForm.bind(this);
        this.HandleFormResponse.bind(this);
    }
    RenderForm(request) {
        const data = Empty.encode(request).finish();
        const promise = this.rpc.request('devvit.actor.user_configurable.UserConfigurable', 'RenderForm', 'application/protobuf', data);
        return promise.then((data) => ConfigForm.decode(data));
    }
    HandleFormResponse(request) {
        const data = ConfigForm.encode(request).finish();
        const promise = this.rpc.request('devvit.actor.user_configurable.UserConfigurable', 'HandleFormResponse', 'application/protobuf', data);
        return promise.then((data) => FormResponse.decode(data));
    }
}
