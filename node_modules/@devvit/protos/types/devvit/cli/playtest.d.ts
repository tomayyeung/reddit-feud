/**
 * #playtest.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { LogMessage } from "../plugin/logger/logger.js";
/** A message from a client (usually embedded in shreddit) to a server. */
export interface PlaytestProviderMessage {
    callState?: PlaytestCallState | undefined;
    connect?: PlaytestConnect | undefined;
}
/** A message from a server (usually the Devvit CLI) to a client. */
export interface PlaytestSubscriberMessage {
    appInstalled?: PlaytestAppInstalled | undefined;
}
/** Playtest app install notification. */
export interface PlaytestAppInstalled {
}
/** Runtime.getCallState() reported by BrowserLiteClient. */
export interface PlaytestCallState {
    logs: LogMessage[];
}
/**
 * Connection details from BrowserLiteClient sent immediately after opening
 * socket.
 */
export interface PlaytestConnect {
    /**
     * The full web address of the client. Eg,
     * https://www.reddit.com/r/pixelary?playtest=pixelary-game and
     * https://www.reddit.com/r/Pixelary/comments/1agoaja/what_is_this/?playtest&foo=bar.
     */
    url: string;
}
export declare const PlaytestProviderMessage: {
    $type: "devvit.cli.PlaytestProviderMessage";
    encode(message: PlaytestProviderMessage, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PlaytestProviderMessage;
    fromJSON(object: any): PlaytestProviderMessage;
    toJSON(message: PlaytestProviderMessage): unknown;
    create(base?: DeepPartial<PlaytestProviderMessage>): PlaytestProviderMessage;
    fromPartial(object: DeepPartial<PlaytestProviderMessage>): PlaytestProviderMessage;
};
export declare const PlaytestSubscriberMessage: {
    $type: "devvit.cli.PlaytestSubscriberMessage";
    encode(message: PlaytestSubscriberMessage, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PlaytestSubscriberMessage;
    fromJSON(object: any): PlaytestSubscriberMessage;
    toJSON(message: PlaytestSubscriberMessage): unknown;
    create(base?: DeepPartial<PlaytestSubscriberMessage>): PlaytestSubscriberMessage;
    fromPartial(object: DeepPartial<PlaytestSubscriberMessage>): PlaytestSubscriberMessage;
};
export declare const PlaytestAppInstalled: {
    $type: "devvit.cli.PlaytestAppInstalled";
    encode(_: PlaytestAppInstalled, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PlaytestAppInstalled;
    fromJSON(_: any): PlaytestAppInstalled;
    toJSON(_: PlaytestAppInstalled): unknown;
    create(base?: DeepPartial<PlaytestAppInstalled>): PlaytestAppInstalled;
    fromPartial(_: DeepPartial<PlaytestAppInstalled>): PlaytestAppInstalled;
};
export declare const PlaytestCallState: {
    $type: "devvit.cli.PlaytestCallState";
    encode(message: PlaytestCallState, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PlaytestCallState;
    fromJSON(object: any): PlaytestCallState;
    toJSON(message: PlaytestCallState): unknown;
    create(base?: DeepPartial<PlaytestCallState>): PlaytestCallState;
    fromPartial(object: DeepPartial<PlaytestCallState>): PlaytestCallState;
};
export declare const PlaytestConnect: {
    $type: "devvit.cli.PlaytestConnect";
    encode(message: PlaytestConnect, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PlaytestConnect;
    fromJSON(object: any): PlaytestConnect;
    toJSON(message: PlaytestConnect): unknown;
    create(base?: DeepPartial<PlaytestConnect>): PlaytestConnect;
    fromPartial(object: DeepPartial<PlaytestConnect>): PlaytestConnect;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=playtest.d.ts.map