/**
 * #playtest.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { messageTypeRegistry } from "../../typeRegistry.js";
import { LogMessage } from "../plugin/logger/logger.js";
function createBasePlaytestProviderMessage() {
    return { callState: undefined, connect: undefined };
}
export const PlaytestProviderMessage = {
    $type: "devvit.cli.PlaytestProviderMessage",
    encode(message, writer = _m0.Writer.create()) {
        if (message.callState !== undefined) {
            PlaytestCallState.encode(message.callState, writer.uint32(10).fork()).ldelim();
        }
        if (message.connect !== undefined) {
            PlaytestConnect.encode(message.connect, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePlaytestProviderMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.callState = PlaytestCallState.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.connect = PlaytestConnect.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            callState: isSet(object.callState) ? PlaytestCallState.fromJSON(object.callState) : undefined,
            connect: isSet(object.connect) ? PlaytestConnect.fromJSON(object.connect) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.callState !== undefined) {
            obj.callState = PlaytestCallState.toJSON(message.callState);
        }
        if (message.connect !== undefined) {
            obj.connect = PlaytestConnect.toJSON(message.connect);
        }
        return obj;
    },
    create(base) {
        return PlaytestProviderMessage.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePlaytestProviderMessage();
        message.callState = (object.callState !== undefined && object.callState !== null)
            ? PlaytestCallState.fromPartial(object.callState)
            : undefined;
        message.connect = (object.connect !== undefined && object.connect !== null)
            ? PlaytestConnect.fromPartial(object.connect)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set(PlaytestProviderMessage.$type, PlaytestProviderMessage);
function createBasePlaytestSubscriberMessage() {
    return { appInstalled: undefined };
}
export const PlaytestSubscriberMessage = {
    $type: "devvit.cli.PlaytestSubscriberMessage",
    encode(message, writer = _m0.Writer.create()) {
        if (message.appInstalled !== undefined) {
            PlaytestAppInstalled.encode(message.appInstalled, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePlaytestSubscriberMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.appInstalled = PlaytestAppInstalled.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            appInstalled: isSet(object.appInstalled) ? PlaytestAppInstalled.fromJSON(object.appInstalled) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.appInstalled !== undefined) {
            obj.appInstalled = PlaytestAppInstalled.toJSON(message.appInstalled);
        }
        return obj;
    },
    create(base) {
        return PlaytestSubscriberMessage.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePlaytestSubscriberMessage();
        message.appInstalled = (object.appInstalled !== undefined && object.appInstalled !== null)
            ? PlaytestAppInstalled.fromPartial(object.appInstalled)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set(PlaytestSubscriberMessage.$type, PlaytestSubscriberMessage);
function createBasePlaytestAppInstalled() {
    return {};
}
export const PlaytestAppInstalled = {
    $type: "devvit.cli.PlaytestAppInstalled",
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePlaytestAppInstalled();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return PlaytestAppInstalled.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBasePlaytestAppInstalled();
        return message;
    },
};
messageTypeRegistry.set(PlaytestAppInstalled.$type, PlaytestAppInstalled);
function createBasePlaytestCallState() {
    return { logs: [] };
}
export const PlaytestCallState = {
    $type: "devvit.cli.PlaytestCallState",
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.logs) {
            LogMessage.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePlaytestCallState();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.logs.push(LogMessage.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { logs: globalThis.Array.isArray(object?.logs) ? object.logs.map((e) => LogMessage.fromJSON(e)) : [] };
    },
    toJSON(message) {
        const obj = {};
        if (message.logs?.length) {
            obj.logs = message.logs.map((e) => LogMessage.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return PlaytestCallState.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePlaytestCallState();
        message.logs = object.logs?.map((e) => LogMessage.fromPartial(e)) || [];
        return message;
    },
};
messageTypeRegistry.set(PlaytestCallState.$type, PlaytestCallState);
function createBasePlaytestConnect() {
    return { url: "" };
}
export const PlaytestConnect = {
    $type: "devvit.cli.PlaytestConnect",
    encode(message, writer = _m0.Writer.create()) {
        if (message.url !== "") {
            writer.uint32(10).string(message.url);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePlaytestConnect();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.url = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { url: isSet(object.url) ? globalThis.String(object.url) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.url !== "") {
            obj.url = message.url;
        }
        return obj;
    },
    create(base) {
        return PlaytestConnect.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePlaytestConnect();
        message.url = object.url ?? "";
        return message;
    },
};
messageTypeRegistry.set(PlaytestConnect.$type, PlaytestConnect);
function isSet(value) {
    return value !== null && value !== undefined;
}
