/**
 * #admin.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { Metadata } from "../../../../../lib/Types.js";
import { Duration } from "../../../../google/protobuf/duration.js";
import { DataTier, FirehoseEvent } from "../../../options/options.js";
import { SubredditRating } from "../../../reddit/v2alpha/subredditv2.js";
export interface DataToken {
    id: string;
    organizationId: string;
    createdAt?: Date | undefined;
    expiresAt?: Date | undefined;
    isRevoked: boolean;
}
export interface DataSubscription {
    id: string;
    tier: DataTier;
    events: FirehoseEvent[];
    subreddits: string[];
    subredditRatings: SubredditRating[];
    organizationId: string;
    name: string;
    description?: string | undefined;
}
export interface Organization {
    id: string;
    name: string;
    subscriptions: DataSubscription[];
    tokens: DataToken[];
    contractEndDate?: Date | undefined;
}
export interface DataApiAuthTokenRequest {
    customer: string;
    expiresIn?: Duration | undefined;
}
export interface DataApiAuthTokenResponse {
    id: string;
    token: string;
    expiresAt?: Date | undefined;
}
export declare const DataToken: {
    $type: "devvit.data.api.v1alpha.DataToken";
    encode(message: DataToken, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DataToken;
    fromJSON(object: any): DataToken;
    toJSON(message: DataToken): unknown;
    create(base?: DeepPartial<DataToken>): DataToken;
    fromPartial(object: DeepPartial<DataToken>): DataToken;
};
export declare const DataSubscription: {
    $type: "devvit.data.api.v1alpha.DataSubscription";
    encode(message: DataSubscription, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DataSubscription;
    fromJSON(object: any): DataSubscription;
    toJSON(message: DataSubscription): unknown;
    create(base?: DeepPartial<DataSubscription>): DataSubscription;
    fromPartial(object: DeepPartial<DataSubscription>): DataSubscription;
};
export declare const Organization: {
    $type: "devvit.data.api.v1alpha.Organization";
    encode(message: Organization, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Organization;
    fromJSON(object: any): Organization;
    toJSON(message: Organization): unknown;
    create(base?: DeepPartial<Organization>): Organization;
    fromPartial(object: DeepPartial<Organization>): Organization;
};
export declare const DataApiAuthTokenRequest: {
    $type: "devvit.data.api.v1alpha.DataApiAuthTokenRequest";
    encode(message: DataApiAuthTokenRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DataApiAuthTokenRequest;
    fromJSON(object: any): DataApiAuthTokenRequest;
    toJSON(message: DataApiAuthTokenRequest): unknown;
    create(base?: DeepPartial<DataApiAuthTokenRequest>): DataApiAuthTokenRequest;
    fromPartial(object: DeepPartial<DataApiAuthTokenRequest>): DataApiAuthTokenRequest;
};
export declare const DataApiAuthTokenResponse: {
    $type: "devvit.data.api.v1alpha.DataApiAuthTokenResponse";
    encode(message: DataApiAuthTokenResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DataApiAuthTokenResponse;
    fromJSON(object: any): DataApiAuthTokenResponse;
    toJSON(message: DataApiAuthTokenResponse): unknown;
    create(base?: DeepPartial<DataApiAuthTokenResponse>): DataApiAuthTokenResponse;
    fromPartial(object: DeepPartial<DataApiAuthTokenResponse>): DataApiAuthTokenResponse;
};
/** DataApiAuthTokenIssuer is the service that issues auth tokens for the data api */
export interface DataApiAuthTokenIssuer {
    GenerateAuthToken(request: DataApiAuthTokenRequest, metadata?: Metadata): Promise<DataApiAuthTokenResponse>;
}
export declare const DataApiAuthTokenIssuerServiceName = "devvit.data.api.v1alpha.DataApiAuthTokenIssuer";
export declare class DataApiAuthTokenIssuerClientImpl implements DataApiAuthTokenIssuer {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    GenerateAuthToken(request: DataApiAuthTokenRequest, metadata?: Metadata): Promise<DataApiAuthTokenResponse>;
}
/** DataApiAuthTokenIssuer is the service that issues auth tokens for the data api */
export type DataApiAuthTokenIssuerDefinition = typeof DataApiAuthTokenIssuerDefinition;
export declare const DataApiAuthTokenIssuerDefinition: {
    readonly name: "DataApiAuthTokenIssuer";
    readonly fullName: "devvit.data.api.v1alpha.DataApiAuthTokenIssuer";
    readonly methods: {
        readonly generateAuthToken: {
            readonly name: "GenerateAuthToken";
            readonly requestType: {
                $type: "devvit.data.api.v1alpha.DataApiAuthTokenRequest";
                encode(message: DataApiAuthTokenRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): DataApiAuthTokenRequest;
                fromJSON(object: any): DataApiAuthTokenRequest;
                toJSON(message: DataApiAuthTokenRequest): unknown;
                create(base?: DeepPartial<DataApiAuthTokenRequest>): DataApiAuthTokenRequest;
                fromPartial(object: DeepPartial<DataApiAuthTokenRequest>): DataApiAuthTokenRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.data.api.v1alpha.DataApiAuthTokenResponse";
                encode(message: DataApiAuthTokenResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): DataApiAuthTokenResponse;
                fromJSON(object: any): DataApiAuthTokenResponse;
                toJSON(message: DataApiAuthTokenResponse): unknown;
                create(base?: DeepPartial<DataApiAuthTokenResponse>): DataApiAuthTokenResponse;
                fromPartial(object: DeepPartial<DataApiAuthTokenResponse>): DataApiAuthTokenResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array, metadata?: Metadata): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=admin.d.ts.map