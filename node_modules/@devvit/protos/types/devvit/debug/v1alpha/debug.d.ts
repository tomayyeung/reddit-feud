/**
 * #debug.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { Metadata } from "../../../../lib/Types.js";
export interface GetProfileRequest {
    profileId: string;
}
export interface GetProfileResponse {
    profileId: string;
    profile: Uint8Array;
}
export declare const GetProfileRequest: {
    $type: "devvit.debug.v1alpha.GetProfileRequest";
    encode(message: GetProfileRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetProfileRequest;
    fromJSON(object: any): GetProfileRequest;
    toJSON(message: GetProfileRequest): unknown;
    create(base?: DeepPartial<GetProfileRequest>): GetProfileRequest;
    fromPartial(object: DeepPartial<GetProfileRequest>): GetProfileRequest;
};
export declare const GetProfileResponse: {
    $type: "devvit.debug.v1alpha.GetProfileResponse";
    encode(message: GetProfileResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetProfileResponse;
    fromJSON(object: any): GetProfileResponse;
    toJSON(message: GetProfileResponse): unknown;
    create(base?: DeepPartial<GetProfileResponse>): GetProfileResponse;
    fromPartial(object: DeepPartial<GetProfileResponse>): GetProfileResponse;
};
export interface DevvitProfiler {
    GetProfile(request: GetProfileRequest, metadata?: Metadata): Promise<GetProfileResponse>;
}
export declare const DevvitProfilerServiceName = "devvit.debug.v1alpha.DevvitProfiler";
export declare class DevvitProfilerClientImpl implements DevvitProfiler {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    GetProfile(request: GetProfileRequest, metadata?: Metadata): Promise<GetProfileResponse>;
}
export type DevvitProfilerDefinition = typeof DevvitProfilerDefinition;
export declare const DevvitProfilerDefinition: {
    readonly name: "DevvitProfiler";
    readonly fullName: "devvit.debug.v1alpha.DevvitProfiler";
    readonly methods: {
        readonly getProfile: {
            readonly name: "GetProfile";
            readonly requestType: {
                $type: "devvit.debug.v1alpha.GetProfileRequest";
                encode(message: GetProfileRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): GetProfileRequest;
                fromJSON(object: any): GetProfileRequest;
                toJSON(message: GetProfileRequest): unknown;
                create(base?: DeepPartial<GetProfileRequest>): GetProfileRequest;
                fromPartial(object: DeepPartial<GetProfileRequest>): GetProfileRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.debug.v1alpha.GetProfileResponse";
                encode(message: GetProfileResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): GetProfileResponse;
                fromJSON(object: any): GetProfileResponse;
                toJSON(message: GetProfileResponse): unknown;
                create(base?: DeepPartial<GetProfileResponse>): GetProfileResponse;
                fromPartial(object: DeepPartial<GetProfileResponse>): GetProfileResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array, metadata?: Metadata): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=debug.d.ts.map