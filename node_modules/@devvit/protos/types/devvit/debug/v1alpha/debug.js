/**
 * #debug.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { messageTypeRegistry } from "../../../typeRegistry.js";
function createBaseGetProfileRequest() {
    return { profileId: "" };
}
export const GetProfileRequest = {
    $type: "devvit.debug.v1alpha.GetProfileRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.profileId !== "") {
            writer.uint32(10).string(message.profileId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetProfileRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.profileId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { profileId: isSet(object.profileId) ? globalThis.String(object.profileId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.profileId !== "") {
            obj.profileId = message.profileId;
        }
        return obj;
    },
    create(base) {
        return GetProfileRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetProfileRequest();
        message.profileId = object.profileId ?? "";
        return message;
    },
};
messageTypeRegistry.set(GetProfileRequest.$type, GetProfileRequest);
function createBaseGetProfileResponse() {
    return { profileId: "", profile: new Uint8Array(0) };
}
export const GetProfileResponse = {
    $type: "devvit.debug.v1alpha.GetProfileResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.profileId !== "") {
            writer.uint32(10).string(message.profileId);
        }
        if (message.profile.length !== 0) {
            writer.uint32(18).bytes(message.profile);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetProfileResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.profileId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.profile = reader.bytes();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            profileId: isSet(object.profileId) ? globalThis.String(object.profileId) : "",
            profile: isSet(object.profile) ? bytesFromBase64(object.profile) : new Uint8Array(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.profileId !== "") {
            obj.profileId = message.profileId;
        }
        if (message.profile.length !== 0) {
            obj.profile = base64FromBytes(message.profile);
        }
        return obj;
    },
    create(base) {
        return GetProfileResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetProfileResponse();
        message.profileId = object.profileId ?? "";
        message.profile = object.profile ?? new Uint8Array(0);
        return message;
    },
};
messageTypeRegistry.set(GetProfileResponse.$type, GetProfileResponse);
export const DevvitProfilerServiceName = "devvit.debug.v1alpha.DevvitProfiler";
export class DevvitProfilerClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || DevvitProfilerServiceName;
        this.rpc = rpc;
        this.GetProfile = this.GetProfile.bind(this);
    }
    GetProfile(request, metadata) {
        const data = GetProfileRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetProfile", data, metadata);
        return promise.then((data) => GetProfileResponse.decode(_m0.Reader.create(data)));
    }
}
export const DevvitProfilerDefinition = {
    name: "DevvitProfiler",
    fullName: "devvit.debug.v1alpha.DevvitProfiler",
    methods: {
        getProfile: {
            name: "GetProfile",
            requestType: GetProfileRequest,
            requestStream: false,
            responseType: GetProfileResponse,
            responseStream: false,
            options: {},
        },
    },
};
function bytesFromBase64(b64) {
    if (globalThis.Buffer) {
        return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = globalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (globalThis.Buffer) {
        return globalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(globalThis.String.fromCharCode(byte));
        });
        return globalThis.btoa(bin.join(""));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
