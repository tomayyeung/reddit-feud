/**
 * #actor_type.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { messageTypeRegistry } from "../../../typeRegistry.js";
function createBaseActorTypeInfo() {
    return { id: "", name: "", isEnabled: false };
}
export const ActorTypeInfo = {
    $type: "devvit.dev_portal.actor.ActorTypeInfo",
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.isEnabled !== false) {
            writer.uint32(24).bool(message.isEnabled);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseActorTypeInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.isEnabled = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            isEnabled: isSet(object.isEnabled) ? globalThis.Boolean(object.isEnabled) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.isEnabled !== false) {
            obj.isEnabled = message.isEnabled;
        }
        return obj;
    },
    create(base) {
        return ActorTypeInfo.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseActorTypeInfo();
        message.id = object.id ?? "";
        message.name = object.name ?? "";
        message.isEnabled = object.isEnabled ?? false;
        return message;
    },
};
messageTypeRegistry.set(ActorTypeInfo.$type, ActorTypeInfo);
function isSet(value) {
    return value !== null && value !== undefined;
}
