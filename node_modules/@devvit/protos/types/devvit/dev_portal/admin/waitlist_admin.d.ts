/**
 * #waitlist_admin.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { Metadata } from "../../../../lib/Types.js";
import { Empty } from "../../../google/protobuf/empty.js";
import { StringValue } from "../../../google/protobuf/wrappers.js";
export declare enum WaitlistStatus {
    PENDING = 0,
    ACCEPTED = 1,
    REJECTED = 2,
    REVOKED = 3,
    UNRECOGNIZED = -1
}
export declare function waitlistStatusFromJSON(object: any): WaitlistStatus;
export declare function waitlistStatusToJSON(object: WaitlistStatus): number;
export interface Submission {
    id: string;
    userId: string;
    userName: string;
    whatToBuild: string;
    botsBuilt: string;
    createdAt?: Date | undefined;
    updatedAt?: Date | undefined;
    status: WaitlistStatus;
    acceptedTermsVersion: number;
}
export interface SubmissionsRequest {
    limit: number;
    after?: Date | undefined;
    before?: Date | undefined;
    username?: string | undefined;
}
export interface SubmissionsResponse {
    submissions: Submission[];
    totalSubmissions: number;
    count: number;
    first?: Date | undefined;
    last?: Date | undefined;
}
export interface SubmissionUpdateRequest {
    id: string;
    status: WaitlistStatus;
}
export interface SubmissionUpdateResponse {
    success: boolean;
    message?: string | undefined;
}
export interface SubmissionAddRequest {
    /** Thing ID */
    userId?: string | undefined;
    /** Username */
    userName?: string | undefined;
}
export interface SubmissionAddResponse {
    success: boolean;
    message?: string | undefined;
}
export declare const Submission: {
    $type: "devvit.dev_portal.admin.Submission";
    encode(message: Submission, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Submission;
    fromJSON(object: any): Submission;
    toJSON(message: Submission): unknown;
    create(base?: DeepPartial<Submission>): Submission;
    fromPartial(object: DeepPartial<Submission>): Submission;
};
export declare const SubmissionsRequest: {
    $type: "devvit.dev_portal.admin.SubmissionsRequest";
    encode(message: SubmissionsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SubmissionsRequest;
    fromJSON(object: any): SubmissionsRequest;
    toJSON(message: SubmissionsRequest): unknown;
    create(base?: DeepPartial<SubmissionsRequest>): SubmissionsRequest;
    fromPartial(object: DeepPartial<SubmissionsRequest>): SubmissionsRequest;
};
export declare const SubmissionsResponse: {
    $type: "devvit.dev_portal.admin.SubmissionsResponse";
    encode(message: SubmissionsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SubmissionsResponse;
    fromJSON(object: any): SubmissionsResponse;
    toJSON(message: SubmissionsResponse): unknown;
    create(base?: DeepPartial<SubmissionsResponse>): SubmissionsResponse;
    fromPartial(object: DeepPartial<SubmissionsResponse>): SubmissionsResponse;
};
export declare const SubmissionUpdateRequest: {
    $type: "devvit.dev_portal.admin.SubmissionUpdateRequest";
    encode(message: SubmissionUpdateRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SubmissionUpdateRequest;
    fromJSON(object: any): SubmissionUpdateRequest;
    toJSON(message: SubmissionUpdateRequest): unknown;
    create(base?: DeepPartial<SubmissionUpdateRequest>): SubmissionUpdateRequest;
    fromPartial(object: DeepPartial<SubmissionUpdateRequest>): SubmissionUpdateRequest;
};
export declare const SubmissionUpdateResponse: {
    $type: "devvit.dev_portal.admin.SubmissionUpdateResponse";
    encode(message: SubmissionUpdateResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SubmissionUpdateResponse;
    fromJSON(object: any): SubmissionUpdateResponse;
    toJSON(message: SubmissionUpdateResponse): unknown;
    create(base?: DeepPartial<SubmissionUpdateResponse>): SubmissionUpdateResponse;
    fromPartial(object: DeepPartial<SubmissionUpdateResponse>): SubmissionUpdateResponse;
};
export declare const SubmissionAddRequest: {
    $type: "devvit.dev_portal.admin.SubmissionAddRequest";
    encode(message: SubmissionAddRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SubmissionAddRequest;
    fromJSON(object: any): SubmissionAddRequest;
    toJSON(message: SubmissionAddRequest): unknown;
    create(base?: DeepPartial<SubmissionAddRequest>): SubmissionAddRequest;
    fromPartial(object: DeepPartial<SubmissionAddRequest>): SubmissionAddRequest;
};
export declare const SubmissionAddResponse: {
    $type: "devvit.dev_portal.admin.SubmissionAddResponse";
    encode(message: SubmissionAddResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SubmissionAddResponse;
    fromJSON(object: any): SubmissionAddResponse;
    toJSON(message: SubmissionAddResponse): unknown;
    create(base?: DeepPartial<SubmissionAddResponse>): SubmissionAddResponse;
    fromPartial(object: DeepPartial<SubmissionAddResponse>): SubmissionAddResponse;
};
export interface WaitlistAdmin {
    GetSubmissions(request: SubmissionsRequest, metadata?: Metadata): Promise<SubmissionsResponse>;
    UpdateSubmission(request: SubmissionUpdateRequest, metadata?: Metadata): Promise<SubmissionUpdateResponse>;
    AddSubmission(request: SubmissionAddRequest, metadata?: Metadata): Promise<SubmissionAddResponse>;
    ExportAsCSV(request: Empty, metadata?: Metadata): Promise<StringValue>;
}
export declare const WaitlistAdminServiceName = "devvit.dev_portal.admin.WaitlistAdmin";
export declare class WaitlistAdminClientImpl implements WaitlistAdmin {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    GetSubmissions(request: SubmissionsRequest, metadata?: Metadata): Promise<SubmissionsResponse>;
    UpdateSubmission(request: SubmissionUpdateRequest, metadata?: Metadata): Promise<SubmissionUpdateResponse>;
    AddSubmission(request: SubmissionAddRequest, metadata?: Metadata): Promise<SubmissionAddResponse>;
    ExportAsCSV(request: Empty, metadata?: Metadata): Promise<StringValue>;
}
export type WaitlistAdminDefinition = typeof WaitlistAdminDefinition;
export declare const WaitlistAdminDefinition: {
    readonly name: "WaitlistAdmin";
    readonly fullName: "devvit.dev_portal.admin.WaitlistAdmin";
    readonly methods: {
        readonly getSubmissions: {
            readonly name: "GetSubmissions";
            readonly requestType: {
                $type: "devvit.dev_portal.admin.SubmissionsRequest";
                encode(message: SubmissionsRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): SubmissionsRequest;
                fromJSON(object: any): SubmissionsRequest;
                toJSON(message: SubmissionsRequest): unknown;
                create(base?: DeepPartial<SubmissionsRequest>): SubmissionsRequest;
                fromPartial(object: DeepPartial<SubmissionsRequest>): SubmissionsRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.admin.SubmissionsResponse";
                encode(message: SubmissionsResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): SubmissionsResponse;
                fromJSON(object: any): SubmissionsResponse;
                toJSON(message: SubmissionsResponse): unknown;
                create(base?: DeepPartial<SubmissionsResponse>): SubmissionsResponse;
                fromPartial(object: DeepPartial<SubmissionsResponse>): SubmissionsResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly updateSubmission: {
            readonly name: "UpdateSubmission";
            readonly requestType: {
                $type: "devvit.dev_portal.admin.SubmissionUpdateRequest";
                encode(message: SubmissionUpdateRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): SubmissionUpdateRequest;
                fromJSON(object: any): SubmissionUpdateRequest;
                toJSON(message: SubmissionUpdateRequest): unknown;
                create(base?: DeepPartial<SubmissionUpdateRequest>): SubmissionUpdateRequest;
                fromPartial(object: DeepPartial<SubmissionUpdateRequest>): SubmissionUpdateRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.admin.SubmissionUpdateResponse";
                encode(message: SubmissionUpdateResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): SubmissionUpdateResponse;
                fromJSON(object: any): SubmissionUpdateResponse;
                toJSON(message: SubmissionUpdateResponse): unknown;
                create(base?: DeepPartial<SubmissionUpdateResponse>): SubmissionUpdateResponse;
                fromPartial(object: DeepPartial<SubmissionUpdateResponse>): SubmissionUpdateResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly addSubmission: {
            readonly name: "AddSubmission";
            readonly requestType: {
                $type: "devvit.dev_portal.admin.SubmissionAddRequest";
                encode(message: SubmissionAddRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): SubmissionAddRequest;
                fromJSON(object: any): SubmissionAddRequest;
                toJSON(message: SubmissionAddRequest): unknown;
                create(base?: DeepPartial<SubmissionAddRequest>): SubmissionAddRequest;
                fromPartial(object: DeepPartial<SubmissionAddRequest>): SubmissionAddRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.admin.SubmissionAddResponse";
                encode(message: SubmissionAddResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): SubmissionAddResponse;
                fromJSON(object: any): SubmissionAddResponse;
                toJSON(message: SubmissionAddResponse): unknown;
                create(base?: DeepPartial<SubmissionAddResponse>): SubmissionAddResponse;
                fromPartial(object: DeepPartial<SubmissionAddResponse>): SubmissionAddResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly exportAsCSV: {
            readonly name: "ExportAsCSV";
            readonly requestType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {} | undefined): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.StringValue";
                encode(message: StringValue, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): StringValue;
                fromJSON(object: any): StringValue;
                toJSON(message: StringValue): unknown;
                create(base?: {
                    value?: string;
                } | undefined): StringValue;
                fromPartial(object: {
                    value?: string;
                }): StringValue;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array, metadata?: Metadata): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=waitlist_admin.d.ts.map