/**
 * #app.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { BoolValue, Int32Value, StringValue } from "../../../google/protobuf/wrappers.js";
import { messageTypeRegistry } from "../../../typeRegistry.js";
import { AppVersionInfo, computePoolFromJSON, computePoolToJSON, } from "../app_version/info/app_version_info.js";
import { categoriesFromJSON, categoriesToJSON } from "./categories/categories.js";
import { appCapabilityFromJSON, appCapabilityToJSON, AppInfo } from "./info/app_info.js";
export var OrderBy;
(function (OrderBy) {
    OrderBy[OrderBy["DATE_CREATED"] = 0] = "DATE_CREATED";
    OrderBy[OrderBy["NAME"] = 1] = "NAME";
    OrderBy[OrderBy["POPULARITY"] = 2] = "POPULARITY";
    OrderBy[OrderBy["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(OrderBy || (OrderBy = {}));
export function orderByFromJSON(object) {
    switch (object) {
        case 0:
        case "DATE_CREATED":
            return OrderBy.DATE_CREATED;
        case 1:
        case "NAME":
            return OrderBy.NAME;
        case 2:
        case "POPULARITY":
            return OrderBy.POPULARITY;
        case -1:
        case "UNRECOGNIZED":
        default:
            return OrderBy.UNRECOGNIZED;
    }
}
export function orderByToJSON(object) {
    switch (object) {
        case OrderBy.DATE_CREATED:
            return 0;
        case OrderBy.NAME:
            return 1;
        case OrderBy.POPULARITY:
            return 2;
        case OrderBy.UNRECOGNIZED:
        default:
            return -1;
    }
}
function createBaseAppSearchRequest() {
    return {
        searchTerm: undefined,
        categories: [],
        page: undefined,
        pageSize: undefined,
        orderBy: 0,
        isAscending: undefined,
    };
}
export const AppSearchRequest = {
    $type: "devvit.dev_portal.app.AppSearchRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.searchTerm !== undefined) {
            StringValue.encode({ value: message.searchTerm }, writer.uint32(10).fork()).ldelim();
        }
        writer.uint32(18).fork();
        for (const v of message.categories) {
            writer.int32(v);
        }
        writer.ldelim();
        if (message.page !== undefined) {
            Int32Value.encode({ value: message.page }, writer.uint32(26).fork()).ldelim();
        }
        if (message.pageSize !== undefined) {
            Int32Value.encode({ value: message.pageSize }, writer.uint32(34).fork()).ldelim();
        }
        if (message.orderBy !== 0) {
            writer.uint32(40).int32(message.orderBy);
        }
        if (message.isAscending !== undefined) {
            BoolValue.encode({ value: message.isAscending }, writer.uint32(50).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAppSearchRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.searchTerm = StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 2:
                    if (tag === 16) {
                        message.categories.push(reader.int32());
                        continue;
                    }
                    if (tag === 18) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.categories.push(reader.int32());
                        }
                        continue;
                    }
                    break;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.page = Int32Value.decode(reader, reader.uint32()).value;
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.pageSize = Int32Value.decode(reader, reader.uint32()).value;
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.orderBy = reader.int32();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.isAscending = BoolValue.decode(reader, reader.uint32()).value;
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            searchTerm: isSet(object.searchTerm) ? String(object.searchTerm) : undefined,
            categories: globalThis.Array.isArray(object?.categories)
                ? object.categories.map((e) => categoriesFromJSON(e))
                : [],
            page: isSet(object.page) ? Number(object.page) : undefined,
            pageSize: isSet(object.pageSize) ? Number(object.pageSize) : undefined,
            orderBy: isSet(object.orderBy) ? orderByFromJSON(object.orderBy) : 0,
            isAscending: isSet(object.isAscending) ? Boolean(object.isAscending) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.searchTerm !== undefined) {
            obj.searchTerm = message.searchTerm;
        }
        if (message.categories?.length) {
            obj.categories = message.categories.map((e) => categoriesToJSON(e));
        }
        if (message.page !== undefined) {
            obj.page = message.page;
        }
        if (message.pageSize !== undefined) {
            obj.pageSize = message.pageSize;
        }
        if (message.orderBy !== 0) {
            obj.orderBy = orderByToJSON(message.orderBy);
        }
        if (message.isAscending !== undefined) {
            obj.isAscending = message.isAscending;
        }
        return obj;
    },
    create(base) {
        return AppSearchRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAppSearchRequest();
        message.searchTerm = object.searchTerm ?? undefined;
        message.categories = object.categories?.map((e) => e) || [];
        message.page = object.page ?? undefined;
        message.pageSize = object.pageSize ?? undefined;
        message.orderBy = object.orderBy ?? 0;
        message.isAscending = object.isAscending ?? undefined;
        return message;
    },
};
messageTypeRegistry.set(AppSearchRequest.$type, AppSearchRequest);
function createBaseGetAppBySlugRequest() {
    return { slug: "", limit: undefined, offset: undefined, hidePrereleaseVersions: undefined };
}
export const GetAppBySlugRequest = {
    $type: "devvit.dev_portal.app.GetAppBySlugRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.slug !== "") {
            writer.uint32(10).string(message.slug);
        }
        if (message.limit !== undefined) {
            writer.uint32(16).int32(message.limit);
        }
        if (message.offset !== undefined) {
            writer.uint32(24).int32(message.offset);
        }
        if (message.hidePrereleaseVersions !== undefined) {
            writer.uint32(32).bool(message.hidePrereleaseVersions);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetAppBySlugRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.slug = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.limit = reader.int32();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.offset = reader.int32();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.hidePrereleaseVersions = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            slug: isSet(object.slug) ? globalThis.String(object.slug) : "",
            limit: isSet(object.limit) ? globalThis.Number(object.limit) : undefined,
            offset: isSet(object.offset) ? globalThis.Number(object.offset) : undefined,
            hidePrereleaseVersions: isSet(object.hidePrereleaseVersions)
                ? globalThis.Boolean(object.hidePrereleaseVersions)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.slug !== "") {
            obj.slug = message.slug;
        }
        if (message.limit !== undefined) {
            obj.limit = Math.round(message.limit);
        }
        if (message.offset !== undefined) {
            obj.offset = Math.round(message.offset);
        }
        if (message.hidePrereleaseVersions !== undefined) {
            obj.hidePrereleaseVersions = message.hidePrereleaseVersions;
        }
        return obj;
    },
    create(base) {
        return GetAppBySlugRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetAppBySlugRequest();
        message.slug = object.slug ?? "";
        message.limit = object.limit ?? undefined;
        message.offset = object.offset ?? undefined;
        message.hidePrereleaseVersions = object.hidePrereleaseVersions ?? undefined;
        return message;
    },
};
messageTypeRegistry.set(GetAppBySlugRequest.$type, GetAppBySlugRequest);
function createBaseGetAllWithOwnerRequest() {
    return { owner: "" };
}
export const GetAllWithOwnerRequest = {
    $type: "devvit.dev_portal.app.GetAllWithOwnerRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.owner !== "") {
            writer.uint32(10).string(message.owner);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetAllWithOwnerRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.owner = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { owner: isSet(object.owner) ? globalThis.String(object.owner) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.owner !== "") {
            obj.owner = message.owner;
        }
        return obj;
    },
    create(base) {
        return GetAllWithOwnerRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetAllWithOwnerRequest();
        message.owner = object.owner ?? "";
        return message;
    },
};
messageTypeRegistry.set(GetAllWithOwnerRequest.$type, GetAllWithOwnerRequest);
function createBaseAppCreationRequest() {
    return { name: "", description: "", isNsfw: false, categories: [], autogenerateName: false, captcha: "" };
}
export const AppCreationRequest = {
    $type: "devvit.dev_portal.app.AppCreationRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.description !== "") {
            writer.uint32(18).string(message.description);
        }
        if (message.isNsfw !== false) {
            writer.uint32(24).bool(message.isNsfw);
        }
        writer.uint32(34).fork();
        for (const v of message.categories) {
            writer.int32(v);
        }
        writer.ldelim();
        if (message.autogenerateName !== false) {
            writer.uint32(40).bool(message.autogenerateName);
        }
        if (message.captcha !== "") {
            writer.uint32(50).string(message.captcha);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAppCreationRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.isNsfw = reader.bool();
                    continue;
                case 4:
                    if (tag === 32) {
                        message.categories.push(reader.int32());
                        continue;
                    }
                    if (tag === 34) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.categories.push(reader.int32());
                        }
                        continue;
                    }
                    break;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.autogenerateName = reader.bool();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.captcha = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            isNsfw: isSet(object.isNsfw) ? globalThis.Boolean(object.isNsfw) : false,
            categories: globalThis.Array.isArray(object?.categories)
                ? object.categories.map((e) => categoriesFromJSON(e))
                : [],
            autogenerateName: isSet(object.autogenerateName) ? globalThis.Boolean(object.autogenerateName) : false,
            captcha: isSet(object.captcha) ? globalThis.String(object.captcha) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.isNsfw !== false) {
            obj.isNsfw = message.isNsfw;
        }
        if (message.categories?.length) {
            obj.categories = message.categories.map((e) => categoriesToJSON(e));
        }
        if (message.autogenerateName !== false) {
            obj.autogenerateName = message.autogenerateName;
        }
        if (message.captcha !== "") {
            obj.captcha = message.captcha;
        }
        return obj;
    },
    create(base) {
        return AppCreationRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAppCreationRequest();
        message.name = object.name ?? "";
        message.description = object.description ?? "";
        message.isNsfw = object.isNsfw ?? false;
        message.categories = object.categories?.map((e) => e) || [];
        message.autogenerateName = object.autogenerateName ?? false;
        message.captcha = object.captcha ?? "";
        return message;
    },
};
messageTypeRegistry.set(AppCreationRequest.$type, AppCreationRequest);
function createBaseGetPopularAppsRequest() {
    return { limit: 0 };
}
export const GetPopularAppsRequest = {
    $type: "devvit.dev_portal.app.GetPopularAppsRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.limit !== 0) {
            writer.uint32(8).int32(message.limit);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetPopularAppsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.limit = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.limit !== 0) {
            obj.limit = Math.round(message.limit);
        }
        return obj;
    },
    create(base) {
        return GetPopularAppsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetPopularAppsRequest();
        message.limit = object.limit ?? 0;
        return message;
    },
};
messageTypeRegistry.set(GetPopularAppsRequest.$type, GetPopularAppsRequest);
function createBaseMediaSignature() {
    return { filePath: "", size: 0, hash: "", isWebviewAsset: false };
}
export const MediaSignature = {
    $type: "devvit.dev_portal.app.MediaSignature",
    encode(message, writer = _m0.Writer.create()) {
        if (message.filePath !== "") {
            writer.uint32(10).string(message.filePath);
        }
        if (message.size !== 0) {
            writer.uint32(16).int32(message.size);
        }
        if (message.hash !== "") {
            writer.uint32(26).string(message.hash);
        }
        if (message.isWebviewAsset !== false) {
            writer.uint32(32).bool(message.isWebviewAsset);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMediaSignature();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.filePath = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.size = reader.int32();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.hash = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.isWebviewAsset = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            filePath: isSet(object.filePath) ? globalThis.String(object.filePath) : "",
            size: isSet(object.size) ? globalThis.Number(object.size) : 0,
            hash: isSet(object.hash) ? globalThis.String(object.hash) : "",
            isWebviewAsset: isSet(object.isWebviewAsset) ? globalThis.Boolean(object.isWebviewAsset) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.filePath !== "") {
            obj.filePath = message.filePath;
        }
        if (message.size !== 0) {
            obj.size = Math.round(message.size);
        }
        if (message.hash !== "") {
            obj.hash = message.hash;
        }
        if (message.isWebviewAsset !== false) {
            obj.isWebviewAsset = message.isWebviewAsset;
        }
        return obj;
    },
    create(base) {
        return MediaSignature.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMediaSignature();
        message.filePath = object.filePath ?? "";
        message.size = object.size ?? 0;
        message.hash = object.hash ?? "";
        message.isWebviewAsset = object.isWebviewAsset ?? false;
        return message;
    },
};
messageTypeRegistry.set(MediaSignature.$type, MediaSignature);
function createBaseCheckIfMediaExistsRequest() {
    return { id: undefined, slug: undefined, signatures: [] };
}
export const CheckIfMediaExistsRequest = {
    $type: "devvit.dev_portal.app.CheckIfMediaExistsRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== undefined) {
            writer.uint32(10).string(message.id);
        }
        if (message.slug !== undefined) {
            writer.uint32(18).string(message.slug);
        }
        for (const v of message.signatures) {
            MediaSignature.encode(v, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCheckIfMediaExistsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.slug = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.signatures.push(MediaSignature.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : undefined,
            slug: isSet(object.slug) ? globalThis.String(object.slug) : undefined,
            signatures: globalThis.Array.isArray(object?.signatures)
                ? object.signatures.map((e) => MediaSignature.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== undefined) {
            obj.id = message.id;
        }
        if (message.slug !== undefined) {
            obj.slug = message.slug;
        }
        if (message.signatures?.length) {
            obj.signatures = message.signatures.map((e) => MediaSignature.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return CheckIfMediaExistsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCheckIfMediaExistsRequest();
        message.id = object.id ?? undefined;
        message.slug = object.slug ?? undefined;
        message.signatures = object.signatures?.map((e) => MediaSignature.fromPartial(e)) || [];
        return message;
    },
};
messageTypeRegistry.set(CheckIfMediaExistsRequest.$type, CheckIfMediaExistsRequest);
function createBaseUploadNewMediaRequest() {
    return {
        id: undefined,
        slug: undefined,
        size: 0,
        hash: "",
        contents: new Uint8Array(0),
        webviewAsset: undefined,
        filePath: undefined,
    };
}
export const UploadNewMediaRequest = {
    $type: "devvit.dev_portal.app.UploadNewMediaRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== undefined) {
            writer.uint32(10).string(message.id);
        }
        if (message.slug !== undefined) {
            writer.uint32(18).string(message.slug);
        }
        if (message.size !== 0) {
            writer.uint32(24).int32(message.size);
        }
        if (message.hash !== "") {
            writer.uint32(34).string(message.hash);
        }
        if (message.contents.length !== 0) {
            writer.uint32(42).bytes(message.contents);
        }
        if (message.webviewAsset !== undefined) {
            writer.uint32(48).bool(message.webviewAsset);
        }
        if (message.filePath !== undefined) {
            writer.uint32(58).string(message.filePath);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUploadNewMediaRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.slug = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.size = reader.int32();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.hash = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.contents = reader.bytes();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.webviewAsset = reader.bool();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.filePath = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : undefined,
            slug: isSet(object.slug) ? globalThis.String(object.slug) : undefined,
            size: isSet(object.size) ? globalThis.Number(object.size) : 0,
            hash: isSet(object.hash) ? globalThis.String(object.hash) : "",
            contents: isSet(object.contents) ? bytesFromBase64(object.contents) : new Uint8Array(0),
            webviewAsset: isSet(object.webviewAsset) ? globalThis.Boolean(object.webviewAsset) : undefined,
            filePath: isSet(object.filePath) ? globalThis.String(object.filePath) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== undefined) {
            obj.id = message.id;
        }
        if (message.slug !== undefined) {
            obj.slug = message.slug;
        }
        if (message.size !== 0) {
            obj.size = Math.round(message.size);
        }
        if (message.hash !== "") {
            obj.hash = message.hash;
        }
        if (message.contents.length !== 0) {
            obj.contents = base64FromBytes(message.contents);
        }
        if (message.webviewAsset !== undefined) {
            obj.webviewAsset = message.webviewAsset;
        }
        if (message.filePath !== undefined) {
            obj.filePath = message.filePath;
        }
        return obj;
    },
    create(base) {
        return UploadNewMediaRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUploadNewMediaRequest();
        message.id = object.id ?? undefined;
        message.slug = object.slug ?? undefined;
        message.size = object.size ?? 0;
        message.hash = object.hash ?? "";
        message.contents = object.contents ?? new Uint8Array(0);
        message.webviewAsset = object.webviewAsset ?? undefined;
        message.filePath = object.filePath ?? undefined;
        return message;
    },
};
messageTypeRegistry.set(UploadNewMediaRequest.$type, UploadNewMediaRequest);
function createBaseAppUpdateRequest() {
    return {
        id: "",
        slug: undefined,
        name: undefined,
        description: undefined,
        isNsfw: undefined,
        isDelisted: undefined,
        categories: [],
        termsAndConditions: undefined,
        privacyPolicy: undefined,
        defaultPool: undefined,
        isWebviewEnabled: undefined,
        capabilities: [],
    };
}
export const AppUpdateRequest = {
    $type: "devvit.dev_portal.app.AppUpdateRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.slug !== undefined) {
            StringValue.encode({ value: message.slug }, writer.uint32(18).fork()).ldelim();
        }
        if (message.name !== undefined) {
            StringValue.encode({ value: message.name }, writer.uint32(26).fork()).ldelim();
        }
        if (message.description !== undefined) {
            StringValue.encode({ value: message.description }, writer.uint32(34).fork()).ldelim();
        }
        if (message.isNsfw !== undefined) {
            BoolValue.encode({ value: message.isNsfw }, writer.uint32(42).fork()).ldelim();
        }
        if (message.isDelisted !== undefined) {
            BoolValue.encode({ value: message.isDelisted }, writer.uint32(50).fork()).ldelim();
        }
        writer.uint32(58).fork();
        for (const v of message.categories) {
            writer.int32(v);
        }
        writer.ldelim();
        if (message.termsAndConditions !== undefined) {
            StringValue.encode({ value: message.termsAndConditions }, writer.uint32(66).fork()).ldelim();
        }
        if (message.privacyPolicy !== undefined) {
            StringValue.encode({ value: message.privacyPolicy }, writer.uint32(74).fork()).ldelim();
        }
        if (message.defaultPool !== undefined) {
            writer.uint32(80).int32(message.defaultPool);
        }
        if (message.isWebviewEnabled !== undefined) {
            writer.uint32(88).bool(message.isWebviewEnabled);
        }
        writer.uint32(98).fork();
        for (const v of message.capabilities) {
            writer.int32(v);
        }
        writer.ldelim();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAppUpdateRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.slug = StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.name = StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.description = StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.isNsfw = BoolValue.decode(reader, reader.uint32()).value;
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.isDelisted = BoolValue.decode(reader, reader.uint32()).value;
                    continue;
                case 7:
                    if (tag === 56) {
                        message.categories.push(reader.int32());
                        continue;
                    }
                    if (tag === 58) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.categories.push(reader.int32());
                        }
                        continue;
                    }
                    break;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.termsAndConditions = StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.privacyPolicy = StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 10:
                    if (tag !== 80) {
                        break;
                    }
                    message.defaultPool = reader.int32();
                    continue;
                case 11:
                    if (tag !== 88) {
                        break;
                    }
                    message.isWebviewEnabled = reader.bool();
                    continue;
                case 12:
                    if (tag === 96) {
                        message.capabilities.push(reader.int32());
                        continue;
                    }
                    if (tag === 98) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.capabilities.push(reader.int32());
                        }
                        continue;
                    }
                    break;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            slug: isSet(object.slug) ? String(object.slug) : undefined,
            name: isSet(object.name) ? String(object.name) : undefined,
            description: isSet(object.description) ? String(object.description) : undefined,
            isNsfw: isSet(object.isNsfw) ? Boolean(object.isNsfw) : undefined,
            isDelisted: isSet(object.isDelisted) ? Boolean(object.isDelisted) : undefined,
            categories: globalThis.Array.isArray(object?.categories)
                ? object.categories.map((e) => categoriesFromJSON(e))
                : [],
            termsAndConditions: isSet(object.termsAndConditions) ? String(object.termsAndConditions) : undefined,
            privacyPolicy: isSet(object.privacyPolicy) ? String(object.privacyPolicy) : undefined,
            defaultPool: isSet(object.defaultPool) ? computePoolFromJSON(object.defaultPool) : undefined,
            isWebviewEnabled: isSet(object.isWebviewEnabled) ? globalThis.Boolean(object.isWebviewEnabled) : undefined,
            capabilities: globalThis.Array.isArray(object?.capabilities)
                ? object.capabilities.map((e) => appCapabilityFromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.slug !== undefined) {
            obj.slug = message.slug;
        }
        if (message.name !== undefined) {
            obj.name = message.name;
        }
        if (message.description !== undefined) {
            obj.description = message.description;
        }
        if (message.isNsfw !== undefined) {
            obj.isNsfw = message.isNsfw;
        }
        if (message.isDelisted !== undefined) {
            obj.isDelisted = message.isDelisted;
        }
        if (message.categories?.length) {
            obj.categories = message.categories.map((e) => categoriesToJSON(e));
        }
        if (message.termsAndConditions !== undefined) {
            obj.termsAndConditions = message.termsAndConditions;
        }
        if (message.privacyPolicy !== undefined) {
            obj.privacyPolicy = message.privacyPolicy;
        }
        if (message.defaultPool !== undefined) {
            obj.defaultPool = computePoolToJSON(message.defaultPool);
        }
        if (message.isWebviewEnabled !== undefined) {
            obj.isWebviewEnabled = message.isWebviewEnabled;
        }
        if (message.capabilities?.length) {
            obj.capabilities = message.capabilities.map((e) => appCapabilityToJSON(e));
        }
        return obj;
    },
    create(base) {
        return AppUpdateRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAppUpdateRequest();
        message.id = object.id ?? "";
        message.slug = object.slug ?? undefined;
        message.name = object.name ?? undefined;
        message.description = object.description ?? undefined;
        message.isNsfw = object.isNsfw ?? undefined;
        message.isDelisted = object.isDelisted ?? undefined;
        message.categories = object.categories?.map((e) => e) || [];
        message.termsAndConditions = object.termsAndConditions ?? undefined;
        message.privacyPolicy = object.privacyPolicy ?? undefined;
        message.defaultPool = object.defaultPool ?? undefined;
        message.isWebviewEnabled = object.isWebviewEnabled ?? undefined;
        message.capabilities = object.capabilities?.map((e) => e) || [];
        return message;
    },
};
messageTypeRegistry.set(AppUpdateRequest.$type, AppUpdateRequest);
function createBaseFullAppInfo() {
    return { app: undefined, versions: [] };
}
export const FullAppInfo = {
    $type: "devvit.dev_portal.app.FullAppInfo",
    encode(message, writer = _m0.Writer.create()) {
        if (message.app !== undefined) {
            AppInfo.encode(message.app, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.versions) {
            AppVersionInfo.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFullAppInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.app = AppInfo.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.versions.push(AppVersionInfo.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            app: isSet(object.app) ? AppInfo.fromJSON(object.app) : undefined,
            versions: globalThis.Array.isArray(object?.versions)
                ? object.versions.map((e) => AppVersionInfo.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.app !== undefined) {
            obj.app = AppInfo.toJSON(message.app);
        }
        if (message.versions?.length) {
            obj.versions = message.versions.map((e) => AppVersionInfo.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return FullAppInfo.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFullAppInfo();
        message.app = (object.app !== undefined && object.app !== null) ? AppInfo.fromPartial(object.app) : undefined;
        message.versions = object.versions?.map((e) => AppVersionInfo.fromPartial(e)) || [];
        return message;
    },
};
messageTypeRegistry.set(FullAppInfo.$type, FullAppInfo);
function createBaseMediaSignatureStatus() {
    return { filePath: "", isNew: false, existingMediaId: undefined };
}
export const MediaSignatureStatus = {
    $type: "devvit.dev_portal.app.MediaSignatureStatus",
    encode(message, writer = _m0.Writer.create()) {
        if (message.filePath !== "") {
            writer.uint32(10).string(message.filePath);
        }
        if (message.isNew !== false) {
            writer.uint32(16).bool(message.isNew);
        }
        if (message.existingMediaId !== undefined) {
            writer.uint32(26).string(message.existingMediaId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMediaSignatureStatus();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.filePath = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.isNew = reader.bool();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.existingMediaId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            filePath: isSet(object.filePath) ? globalThis.String(object.filePath) : "",
            isNew: isSet(object.isNew) ? globalThis.Boolean(object.isNew) : false,
            existingMediaId: isSet(object.existingMediaId) ? globalThis.String(object.existingMediaId) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.filePath !== "") {
            obj.filePath = message.filePath;
        }
        if (message.isNew !== false) {
            obj.isNew = message.isNew;
        }
        if (message.existingMediaId !== undefined) {
            obj.existingMediaId = message.existingMediaId;
        }
        return obj;
    },
    create(base) {
        return MediaSignatureStatus.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMediaSignatureStatus();
        message.filePath = object.filePath ?? "";
        message.isNew = object.isNew ?? false;
        message.existingMediaId = object.existingMediaId ?? undefined;
        return message;
    },
};
messageTypeRegistry.set(MediaSignatureStatus.$type, MediaSignatureStatus);
function createBaseCheckIfMediaExistsResponse() {
    return { statuses: [] };
}
export const CheckIfMediaExistsResponse = {
    $type: "devvit.dev_portal.app.CheckIfMediaExistsResponse",
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.statuses) {
            MediaSignatureStatus.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCheckIfMediaExistsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.statuses.push(MediaSignatureStatus.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            statuses: globalThis.Array.isArray(object?.statuses)
                ? object.statuses.map((e) => MediaSignatureStatus.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.statuses?.length) {
            obj.statuses = message.statuses.map((e) => MediaSignatureStatus.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return CheckIfMediaExistsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCheckIfMediaExistsResponse();
        message.statuses = object.statuses?.map((e) => MediaSignatureStatus.fromPartial(e)) || [];
        return message;
    },
};
messageTypeRegistry.set(CheckIfMediaExistsResponse.$type, CheckIfMediaExistsResponse);
function createBaseUploadNewMediaResponse() {
    return { assetId: "", mediaId: "" };
}
export const UploadNewMediaResponse = {
    $type: "devvit.dev_portal.app.UploadNewMediaResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.assetId !== "") {
            writer.uint32(10).string(message.assetId);
        }
        if (message.mediaId !== "") {
            writer.uint32(18).string(message.mediaId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUploadNewMediaResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.assetId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.mediaId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            assetId: isSet(object.assetId) ? globalThis.String(object.assetId) : "",
            mediaId: isSet(object.mediaId) ? globalThis.String(object.mediaId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.assetId !== "") {
            obj.assetId = message.assetId;
        }
        if (message.mediaId !== "") {
            obj.mediaId = message.mediaId;
        }
        return obj;
    },
    create(base) {
        return UploadNewMediaResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUploadNewMediaResponse();
        message.assetId = object.assetId ?? "";
        message.mediaId = object.mediaId ?? "";
        return message;
    },
};
messageTypeRegistry.set(UploadNewMediaResponse.$type, UploadNewMediaResponse);
function createBaseAppSearchResponse() {
    return { apps: [], totalResults: 0, pageNumber: 0, pageSize: 0 };
}
export const AppSearchResponse = {
    $type: "devvit.dev_portal.app.AppSearchResponse",
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.apps) {
            AppInfo.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.totalResults !== 0) {
            writer.uint32(16).int32(message.totalResults);
        }
        if (message.pageNumber !== 0) {
            writer.uint32(24).int32(message.pageNumber);
        }
        if (message.pageSize !== 0) {
            writer.uint32(32).int32(message.pageSize);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAppSearchResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.apps.push(AppInfo.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.totalResults = reader.int32();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.pageNumber = reader.int32();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.pageSize = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            apps: globalThis.Array.isArray(object?.apps) ? object.apps.map((e) => AppInfo.fromJSON(e)) : [],
            totalResults: isSet(object.totalResults) ? globalThis.Number(object.totalResults) : 0,
            pageNumber: isSet(object.pageNumber) ? globalThis.Number(object.pageNumber) : 0,
            pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.apps?.length) {
            obj.apps = message.apps.map((e) => AppInfo.toJSON(e));
        }
        if (message.totalResults !== 0) {
            obj.totalResults = Math.round(message.totalResults);
        }
        if (message.pageNumber !== 0) {
            obj.pageNumber = Math.round(message.pageNumber);
        }
        if (message.pageSize !== 0) {
            obj.pageSize = Math.round(message.pageSize);
        }
        return obj;
    },
    create(base) {
        return AppSearchResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAppSearchResponse();
        message.apps = object.apps?.map((e) => AppInfo.fromPartial(e)) || [];
        message.totalResults = object.totalResults ?? 0;
        message.pageNumber = object.pageNumber ?? 0;
        message.pageSize = object.pageSize ?? 0;
        return message;
    },
};
messageTypeRegistry.set(AppSearchResponse.$type, AppSearchResponse);
function createBaseUnpublishAppRequest() {
    return { slug: undefined, shouldDelist: false };
}
export const UnpublishAppRequest = {
    $type: "devvit.dev_portal.app.UnpublishAppRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.slug !== undefined) {
            StringValue.encode({ value: message.slug }, writer.uint32(10).fork()).ldelim();
        }
        if (message.shouldDelist !== false) {
            writer.uint32(16).bool(message.shouldDelist);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUnpublishAppRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.slug = StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.shouldDelist = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            slug: isSet(object.slug) ? String(object.slug) : undefined,
            shouldDelist: isSet(object.shouldDelist) ? globalThis.Boolean(object.shouldDelist) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.slug !== undefined) {
            obj.slug = message.slug;
        }
        if (message.shouldDelist !== false) {
            obj.shouldDelist = message.shouldDelist;
        }
        return obj;
    },
    create(base) {
        return UnpublishAppRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUnpublishAppRequest();
        message.slug = object.slug ?? undefined;
        message.shouldDelist = object.shouldDelist ?? false;
        return message;
    },
};
messageTypeRegistry.set(UnpublishAppRequest.$type, UnpublishAppRequest);
function createBaseAppExistsRequest() {
    return { slug: undefined };
}
export const AppExistsRequest = {
    $type: "devvit.dev_portal.app.AppExistsRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.slug !== undefined) {
            StringValue.encode({ value: message.slug }, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAppExistsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.slug = StringValue.decode(reader, reader.uint32()).value;
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { slug: isSet(object.slug) ? String(object.slug) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.slug !== undefined) {
            obj.slug = message.slug;
        }
        return obj;
    },
    create(base) {
        return AppExistsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAppExistsRequest();
        message.slug = object.slug ?? undefined;
        return message;
    },
};
messageTypeRegistry.set(AppExistsRequest.$type, AppExistsRequest);
function createBaseAppExistsResponse() {
    return { exists: false };
}
export const AppExistsResponse = {
    $type: "devvit.dev_portal.app.AppExistsResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.exists !== false) {
            writer.uint32(8).bool(message.exists);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAppExistsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.exists = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { exists: isSet(object.exists) ? globalThis.Boolean(object.exists) : false };
    },
    toJSON(message) {
        const obj = {};
        if (message.exists !== false) {
            obj.exists = message.exists;
        }
        return obj;
    },
    create(base) {
        return AppExistsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAppExistsResponse();
        message.exists = object.exists ?? false;
        return message;
    },
};
messageTypeRegistry.set(AppExistsResponse.$type, AppExistsResponse);
function createBaseAppAccountExistsRequest() {
    return { accountName: "" };
}
export const AppAccountExistsRequest = {
    $type: "devvit.dev_portal.app.AppAccountExistsRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.accountName !== "") {
            writer.uint32(10).string(message.accountName);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAppAccountExistsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.accountName = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { accountName: isSet(object.accountName) ? globalThis.String(object.accountName) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.accountName !== "") {
            obj.accountName = message.accountName;
        }
        return obj;
    },
    create(base) {
        return AppAccountExistsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAppAccountExistsRequest();
        message.accountName = object.accountName ?? "";
        return message;
    },
};
messageTypeRegistry.set(AppAccountExistsRequest.$type, AppAccountExistsRequest);
function createBaseAppAccountExistsResponse() {
    return { exists: false, suggestions: [] };
}
export const AppAccountExistsResponse = {
    $type: "devvit.dev_portal.app.AppAccountExistsResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.exists !== false) {
            writer.uint32(8).bool(message.exists);
        }
        for (const v of message.suggestions) {
            writer.uint32(18).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAppAccountExistsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.exists = reader.bool();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.suggestions.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            exists: isSet(object.exists) ? globalThis.Boolean(object.exists) : false,
            suggestions: globalThis.Array.isArray(object?.suggestions)
                ? object.suggestions.map((e) => globalThis.String(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.exists !== false) {
            obj.exists = message.exists;
        }
        if (message.suggestions?.length) {
            obj.suggestions = message.suggestions;
        }
        return obj;
    },
    create(base) {
        return AppAccountExistsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAppAccountExistsResponse();
        message.exists = object.exists ?? false;
        message.suggestions = object.suggestions?.map((e) => e) || [];
        return message;
    },
};
messageTypeRegistry.set(AppAccountExistsResponse.$type, AppAccountExistsResponse);
function createBaseCreateAppAccountRequest() {
    return { slug: "", accountName: undefined, captcha: "" };
}
export const CreateAppAccountRequest = {
    $type: "devvit.dev_portal.app.CreateAppAccountRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.slug !== "") {
            writer.uint32(10).string(message.slug);
        }
        if (message.accountName !== undefined) {
            writer.uint32(18).string(message.accountName);
        }
        if (message.captcha !== "") {
            writer.uint32(26).string(message.captcha);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateAppAccountRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.slug = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.accountName = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.captcha = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            slug: isSet(object.slug) ? globalThis.String(object.slug) : "",
            accountName: isSet(object.accountName) ? globalThis.String(object.accountName) : undefined,
            captcha: isSet(object.captcha) ? globalThis.String(object.captcha) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.slug !== "") {
            obj.slug = message.slug;
        }
        if (message.accountName !== undefined) {
            obj.accountName = message.accountName;
        }
        if (message.captcha !== "") {
            obj.captcha = message.captcha;
        }
        return obj;
    },
    create(base) {
        return CreateAppAccountRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCreateAppAccountRequest();
        message.slug = object.slug ?? "";
        message.accountName = object.accountName ?? undefined;
        message.captcha = object.captcha ?? "";
        return message;
    },
};
messageTypeRegistry.set(CreateAppAccountRequest.$type, CreateAppAccountRequest);
function createBaseCreateAppAccountResponse() {
    return { created: false, errors: undefined };
}
export const CreateAppAccountResponse = {
    $type: "devvit.dev_portal.app.CreateAppAccountResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.created !== false) {
            writer.uint32(8).bool(message.created);
        }
        if (message.errors !== undefined) {
            writer.uint32(18).string(message.errors);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateAppAccountResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.created = reader.bool();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.errors = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            created: isSet(object.created) ? globalThis.Boolean(object.created) : false,
            errors: isSet(object.errors) ? globalThis.String(object.errors) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.created !== false) {
            obj.created = message.created;
        }
        if (message.errors !== undefined) {
            obj.errors = message.errors;
        }
        return obj;
    },
    create(base) {
        return CreateAppAccountResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCreateAppAccountResponse();
        message.created = object.created ?? false;
        message.errors = object.errors ?? undefined;
        return message;
    },
};
messageTypeRegistry.set(CreateAppAccountResponse.$type, CreateAppAccountResponse);
function createBaseRecoverAppAccountRequest() {
    return {
        name: "",
        slug: "",
        description: "",
        isNsfw: false,
        categories: [],
        ownerId: "",
        username: "",
        password: "",
    };
}
export const RecoverAppAccountRequest = {
    $type: "devvit.dev_portal.app.RecoverAppAccountRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.slug !== "") {
            writer.uint32(18).string(message.slug);
        }
        if (message.description !== "") {
            writer.uint32(26).string(message.description);
        }
        if (message.isNsfw !== false) {
            writer.uint32(32).bool(message.isNsfw);
        }
        writer.uint32(42).fork();
        for (const v of message.categories) {
            writer.int32(v);
        }
        writer.ldelim();
        if (message.ownerId !== "") {
            writer.uint32(50).string(message.ownerId);
        }
        if (message.username !== "") {
            writer.uint32(58).string(message.username);
        }
        if (message.password !== "") {
            writer.uint32(66).string(message.password);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRecoverAppAccountRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.slug = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.isNsfw = reader.bool();
                    continue;
                case 5:
                    if (tag === 40) {
                        message.categories.push(reader.int32());
                        continue;
                    }
                    if (tag === 42) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.categories.push(reader.int32());
                        }
                        continue;
                    }
                    break;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.ownerId = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.username = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.password = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            slug: isSet(object.slug) ? globalThis.String(object.slug) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            isNsfw: isSet(object.isNsfw) ? globalThis.Boolean(object.isNsfw) : false,
            categories: globalThis.Array.isArray(object?.categories)
                ? object.categories.map((e) => categoriesFromJSON(e))
                : [],
            ownerId: isSet(object.ownerId) ? globalThis.String(object.ownerId) : "",
            username: isSet(object.username) ? globalThis.String(object.username) : "",
            password: isSet(object.password) ? globalThis.String(object.password) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.slug !== "") {
            obj.slug = message.slug;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.isNsfw !== false) {
            obj.isNsfw = message.isNsfw;
        }
        if (message.categories?.length) {
            obj.categories = message.categories.map((e) => categoriesToJSON(e));
        }
        if (message.ownerId !== "") {
            obj.ownerId = message.ownerId;
        }
        if (message.username !== "") {
            obj.username = message.username;
        }
        if (message.password !== "") {
            obj.password = message.password;
        }
        return obj;
    },
    create(base) {
        return RecoverAppAccountRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRecoverAppAccountRequest();
        message.name = object.name ?? "";
        message.slug = object.slug ?? "";
        message.description = object.description ?? "";
        message.isNsfw = object.isNsfw ?? false;
        message.categories = object.categories?.map((e) => e) || [];
        message.ownerId = object.ownerId ?? "";
        message.username = object.username ?? "";
        message.password = object.password ?? "";
        return message;
    },
};
messageTypeRegistry.set(RecoverAppAccountRequest.$type, RecoverAppAccountRequest);
function createBaseDisableAppRequest() {
    return { id: "" };
}
export const DisableAppRequest = {
    $type: "devvit.dev_portal.app.DisableAppRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDisableAppRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return DisableAppRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDisableAppRequest();
        message.id = object.id ?? "";
        return message;
    },
};
messageTypeRegistry.set(DisableAppRequest.$type, DisableAppRequest);
function createBaseEnableAppRequest() {
    return { id: "" };
}
export const EnableAppRequest = {
    $type: "devvit.dev_portal.app.EnableAppRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEnableAppRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return EnableAppRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseEnableAppRequest();
        message.id = object.id ?? "";
        return message;
    },
};
messageTypeRegistry.set(EnableAppRequest.$type, EnableAppRequest);
function bytesFromBase64(b64) {
    if (globalThis.Buffer) {
        return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = globalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (globalThis.Buffer) {
        return globalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(globalThis.String.fromCharCode(byte));
        });
        return globalThis.btoa(bin.join(""));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
