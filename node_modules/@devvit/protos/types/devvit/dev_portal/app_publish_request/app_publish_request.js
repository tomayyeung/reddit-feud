/**
 * #app_publish_request.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { Timestamp } from "../../../google/protobuf/timestamp.js";
import { messageTypeRegistry } from "../../../typeRegistry.js";
import { AppInfo } from "../app/info/app_info.js";
import { AppVersionInfo } from "../app_version/info/app_version_info.js";
import { Redditor } from "../reddit/redditor.js";
import { AppPublishRequestNote } from "./note/app_publish_request_note.js";
import { AppPublishRequestReview } from "./review/app_publish_request_review.js";
export var AppPublishRequestStatus;
(function (AppPublishRequestStatus) {
    AppPublishRequestStatus[AppPublishRequestStatus["APPROVED"] = 0] = "APPROVED";
    AppPublishRequestStatus[AppPublishRequestStatus["DENIED"] = 1] = "DENIED";
    AppPublishRequestStatus[AppPublishRequestStatus["OBSOLETE"] = 2] = "OBSOLETE";
    AppPublishRequestStatus[AppPublishRequestStatus["PENDING"] = 3] = "PENDING";
    AppPublishRequestStatus[AppPublishRequestStatus["WITHDRAWN"] = 4] = "WITHDRAWN";
    AppPublishRequestStatus[AppPublishRequestStatus["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(AppPublishRequestStatus || (AppPublishRequestStatus = {}));
export function appPublishRequestStatusFromJSON(object) {
    switch (object) {
        case 0:
        case "APPROVED":
            return AppPublishRequestStatus.APPROVED;
        case 1:
        case "DENIED":
            return AppPublishRequestStatus.DENIED;
        case 2:
        case "OBSOLETE":
            return AppPublishRequestStatus.OBSOLETE;
        case 3:
        case "PENDING":
            return AppPublishRequestStatus.PENDING;
        case 4:
        case "WITHDRAWN":
            return AppPublishRequestStatus.WITHDRAWN;
        case -1:
        case "UNRECOGNIZED":
        default:
            return AppPublishRequestStatus.UNRECOGNIZED;
    }
}
export function appPublishRequestStatusToJSON(object) {
    switch (object) {
        case AppPublishRequestStatus.APPROVED:
            return 0;
        case AppPublishRequestStatus.DENIED:
            return 1;
        case AppPublishRequestStatus.OBSOLETE:
            return 2;
        case AppPublishRequestStatus.PENDING:
            return 3;
        case AppPublishRequestStatus.WITHDRAWN:
            return 4;
        case AppPublishRequestStatus.UNRECOGNIZED:
        default:
            return -1;
    }
}
export var AppPublishRequestVisibility;
(function (AppPublishRequestVisibility) {
    AppPublishRequestVisibility[AppPublishRequestVisibility["PUBLIC"] = 0] = "PUBLIC";
    AppPublishRequestVisibility[AppPublishRequestVisibility["UNLISTED"] = 1] = "UNLISTED";
    AppPublishRequestVisibility[AppPublishRequestVisibility["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(AppPublishRequestVisibility || (AppPublishRequestVisibility = {}));
export function appPublishRequestVisibilityFromJSON(object) {
    switch (object) {
        case 0:
        case "PUBLIC":
            return AppPublishRequestVisibility.PUBLIC;
        case 1:
        case "UNLISTED":
            return AppPublishRequestVisibility.UNLISTED;
        case -1:
        case "UNRECOGNIZED":
        default:
            return AppPublishRequestVisibility.UNRECOGNIZED;
    }
}
export function appPublishRequestVisibilityToJSON(object) {
    switch (object) {
        case AppPublishRequestVisibility.PUBLIC:
            return 0;
        case AppPublishRequestVisibility.UNLISTED:
            return 1;
        case AppPublishRequestVisibility.UNRECOGNIZED:
        default:
            return -1;
    }
}
function createBaseFullPublishRequestInfo() {
    return {
        id: "",
        createdAt: undefined,
        createdBy: undefined,
        status: 0,
        visibility: 0,
        appVersionInfo: undefined,
        appInfo: undefined,
        reviews: [],
        notes: [],
        appInstallationCount: undefined,
    };
}
export const FullPublishRequestInfo = {
    $type: "devvit.dev_portal.app_publish_request.FullPublishRequestInfo",
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.createdAt !== undefined) {
            Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(18).fork()).ldelim();
        }
        if (message.createdBy !== undefined) {
            Redditor.encode(message.createdBy, writer.uint32(26).fork()).ldelim();
        }
        if (message.status !== 0) {
            writer.uint32(32).int32(message.status);
        }
        if (message.visibility !== 0) {
            writer.uint32(80).int32(message.visibility);
        }
        if (message.appVersionInfo !== undefined) {
            AppVersionInfo.encode(message.appVersionInfo, writer.uint32(42).fork()).ldelim();
        }
        if (message.appInfo !== undefined) {
            AppInfo.encode(message.appInfo, writer.uint32(50).fork()).ldelim();
        }
        for (const v of message.reviews) {
            AppPublishRequestReview.encode(v, writer.uint32(58).fork()).ldelim();
        }
        for (const v of message.notes) {
            AppPublishRequestNote.encode(v, writer.uint32(66).fork()).ldelim();
        }
        if (message.appInstallationCount !== undefined) {
            writer.uint32(72).int32(message.appInstallationCount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFullPublishRequestInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.createdBy = Redditor.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.status = reader.int32();
                    continue;
                case 10:
                    if (tag !== 80) {
                        break;
                    }
                    message.visibility = reader.int32();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.appVersionInfo = AppVersionInfo.decode(reader, reader.uint32());
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.appInfo = AppInfo.decode(reader, reader.uint32());
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.reviews.push(AppPublishRequestReview.decode(reader, reader.uint32()));
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.notes.push(AppPublishRequestNote.decode(reader, reader.uint32()));
                    continue;
                case 9:
                    if (tag !== 72) {
                        break;
                    }
                    message.appInstallationCount = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
            createdBy: isSet(object.createdBy) ? Redditor.fromJSON(object.createdBy) : undefined,
            status: isSet(object.status) ? appPublishRequestStatusFromJSON(object.status) : 0,
            visibility: isSet(object.visibility) ? appPublishRequestVisibilityFromJSON(object.visibility) : 0,
            appVersionInfo: isSet(object.appVersionInfo) ? AppVersionInfo.fromJSON(object.appVersionInfo) : undefined,
            appInfo: isSet(object.appInfo) ? AppInfo.fromJSON(object.appInfo) : undefined,
            reviews: globalThis.Array.isArray(object?.reviews)
                ? object.reviews.map((e) => AppPublishRequestReview.fromJSON(e))
                : [],
            notes: globalThis.Array.isArray(object?.notes)
                ? object.notes.map((e) => AppPublishRequestNote.fromJSON(e))
                : [],
            appInstallationCount: isSet(object.appInstallationCount)
                ? globalThis.Number(object.appInstallationCount)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.createdAt !== undefined) {
            obj.createdAt = message.createdAt.toISOString();
        }
        if (message.createdBy !== undefined) {
            obj.createdBy = Redditor.toJSON(message.createdBy);
        }
        if (message.status !== 0) {
            obj.status = appPublishRequestStatusToJSON(message.status);
        }
        if (message.visibility !== 0) {
            obj.visibility = appPublishRequestVisibilityToJSON(message.visibility);
        }
        if (message.appVersionInfo !== undefined) {
            obj.appVersionInfo = AppVersionInfo.toJSON(message.appVersionInfo);
        }
        if (message.appInfo !== undefined) {
            obj.appInfo = AppInfo.toJSON(message.appInfo);
        }
        if (message.reviews?.length) {
            obj.reviews = message.reviews.map((e) => AppPublishRequestReview.toJSON(e));
        }
        if (message.notes?.length) {
            obj.notes = message.notes.map((e) => AppPublishRequestNote.toJSON(e));
        }
        if (message.appInstallationCount !== undefined) {
            obj.appInstallationCount = Math.round(message.appInstallationCount);
        }
        return obj;
    },
    create(base) {
        return FullPublishRequestInfo.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFullPublishRequestInfo();
        message.id = object.id ?? "";
        message.createdAt = object.createdAt ?? undefined;
        message.createdBy = (object.createdBy !== undefined && object.createdBy !== null)
            ? Redditor.fromPartial(object.createdBy)
            : undefined;
        message.status = object.status ?? 0;
        message.visibility = object.visibility ?? 0;
        message.appVersionInfo = (object.appVersionInfo !== undefined && object.appVersionInfo !== null)
            ? AppVersionInfo.fromPartial(object.appVersionInfo)
            : undefined;
        message.appInfo = (object.appInfo !== undefined && object.appInfo !== null)
            ? AppInfo.fromPartial(object.appInfo)
            : undefined;
        message.reviews = object.reviews?.map((e) => AppPublishRequestReview.fromPartial(e)) || [];
        message.notes = object.notes?.map((e) => AppPublishRequestNote.fromPartial(e)) || [];
        message.appInstallationCount = object.appInstallationCount ?? undefined;
        return message;
    },
};
messageTypeRegistry.set(FullPublishRequestInfo.$type, FullPublishRequestInfo);
function createBaseMultiplePublishRequestInfos() {
    return { requests: [], pagination: undefined };
}
export const MultiplePublishRequestInfos = {
    $type: "devvit.dev_portal.app_publish_request.MultiplePublishRequestInfos",
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.requests) {
            FullPublishRequestInfo.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.pagination !== undefined) {
            MultiplePublishRequestInfos_PageInfo.encode(message.pagination, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMultiplePublishRequestInfos();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.requests.push(FullPublishRequestInfo.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.pagination = MultiplePublishRequestInfos_PageInfo.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            requests: globalThis.Array.isArray(object?.requests)
                ? object.requests.map((e) => FullPublishRequestInfo.fromJSON(e))
                : [],
            pagination: isSet(object.pagination)
                ? MultiplePublishRequestInfos_PageInfo.fromJSON(object.pagination)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.requests?.length) {
            obj.requests = message.requests.map((e) => FullPublishRequestInfo.toJSON(e));
        }
        if (message.pagination !== undefined) {
            obj.pagination = MultiplePublishRequestInfos_PageInfo.toJSON(message.pagination);
        }
        return obj;
    },
    create(base) {
        return MultiplePublishRequestInfos.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMultiplePublishRequestInfos();
        message.requests = object.requests?.map((e) => FullPublishRequestInfo.fromPartial(e)) || [];
        message.pagination = (object.pagination !== undefined && object.pagination !== null)
            ? MultiplePublishRequestInfos_PageInfo.fromPartial(object.pagination)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set(MultiplePublishRequestInfos.$type, MultiplePublishRequestInfos);
function createBaseMultiplePublishRequestInfos_PageInfo() {
    return { page: 0, pageSize: 0, total: 0 };
}
export const MultiplePublishRequestInfos_PageInfo = {
    $type: "devvit.dev_portal.app_publish_request.MultiplePublishRequestInfos.PageInfo",
    encode(message, writer = _m0.Writer.create()) {
        if (message.page !== 0) {
            writer.uint32(8).int32(message.page);
        }
        if (message.pageSize !== 0) {
            writer.uint32(16).int32(message.pageSize);
        }
        if (message.total !== 0) {
            writer.uint32(24).int32(message.total);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMultiplePublishRequestInfos_PageInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.page = reader.int32();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.pageSize = reader.int32();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.total = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            page: isSet(object.page) ? globalThis.Number(object.page) : 0,
            pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
            total: isSet(object.total) ? globalThis.Number(object.total) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.page !== 0) {
            obj.page = Math.round(message.page);
        }
        if (message.pageSize !== 0) {
            obj.pageSize = Math.round(message.pageSize);
        }
        if (message.total !== 0) {
            obj.total = Math.round(message.total);
        }
        return obj;
    },
    create(base) {
        return MultiplePublishRequestInfos_PageInfo.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMultiplePublishRequestInfos_PageInfo();
        message.page = object.page ?? 0;
        message.pageSize = object.pageSize ?? 0;
        message.total = object.total ?? 0;
        return message;
    },
};
messageTypeRegistry.set(MultiplePublishRequestInfos_PageInfo.$type, MultiplePublishRequestInfos_PageInfo);
function createBaseAppPRCreateRequest() {
    return { appVersionId: undefined, appSlugAndVersionNumber: undefined, visibility: 0 };
}
export const AppPRCreateRequest = {
    $type: "devvit.dev_portal.app_publish_request.AppPRCreateRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.appVersionId !== undefined) {
            writer.uint32(10).string(message.appVersionId);
        }
        if (message.appSlugAndVersionNumber !== undefined) {
            writer.uint32(18).string(message.appSlugAndVersionNumber);
        }
        if (message.visibility !== 0) {
            writer.uint32(24).int32(message.visibility);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAppPRCreateRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.appVersionId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.appSlugAndVersionNumber = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.visibility = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            appVersionId: isSet(object.appVersionId) ? globalThis.String(object.appVersionId) : undefined,
            appSlugAndVersionNumber: isSet(object.appSlugAndVersionNumber)
                ? globalThis.String(object.appSlugAndVersionNumber)
                : undefined,
            visibility: isSet(object.visibility) ? appPublishRequestVisibilityFromJSON(object.visibility) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.appVersionId !== undefined) {
            obj.appVersionId = message.appVersionId;
        }
        if (message.appSlugAndVersionNumber !== undefined) {
            obj.appSlugAndVersionNumber = message.appSlugAndVersionNumber;
        }
        if (message.visibility !== 0) {
            obj.visibility = appPublishRequestVisibilityToJSON(message.visibility);
        }
        return obj;
    },
    create(base) {
        return AppPRCreateRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAppPRCreateRequest();
        message.appVersionId = object.appVersionId ?? undefined;
        message.appSlugAndVersionNumber = object.appSlugAndVersionNumber ?? undefined;
        message.visibility = object.visibility ?? 0;
        return message;
    },
};
messageTypeRegistry.set(AppPRCreateRequest.$type, AppPRCreateRequest);
function createBaseAppPRUpdateRequest() {
    return { appVersionId: undefined, publishRequestId: undefined, appSlugAndVersionNumber: undefined, status: 0 };
}
export const AppPRUpdateRequest = {
    $type: "devvit.dev_portal.app_publish_request.AppPRUpdateRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.appVersionId !== undefined) {
            writer.uint32(10).string(message.appVersionId);
        }
        if (message.publishRequestId !== undefined) {
            writer.uint32(18).string(message.publishRequestId);
        }
        if (message.appSlugAndVersionNumber !== undefined) {
            writer.uint32(26).string(message.appSlugAndVersionNumber);
        }
        if (message.status !== 0) {
            writer.uint32(32).int32(message.status);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAppPRUpdateRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.appVersionId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.publishRequestId = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.appSlugAndVersionNumber = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.status = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            appVersionId: isSet(object.appVersionId) ? globalThis.String(object.appVersionId) : undefined,
            publishRequestId: isSet(object.publishRequestId) ? globalThis.String(object.publishRequestId) : undefined,
            appSlugAndVersionNumber: isSet(object.appSlugAndVersionNumber)
                ? globalThis.String(object.appSlugAndVersionNumber)
                : undefined,
            status: isSet(object.status) ? appPublishRequestStatusFromJSON(object.status) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.appVersionId !== undefined) {
            obj.appVersionId = message.appVersionId;
        }
        if (message.publishRequestId !== undefined) {
            obj.publishRequestId = message.publishRequestId;
        }
        if (message.appSlugAndVersionNumber !== undefined) {
            obj.appSlugAndVersionNumber = message.appSlugAndVersionNumber;
        }
        if (message.status !== 0) {
            obj.status = appPublishRequestStatusToJSON(message.status);
        }
        return obj;
    },
    create(base) {
        return AppPRUpdateRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAppPRUpdateRequest();
        message.appVersionId = object.appVersionId ?? undefined;
        message.publishRequestId = object.publishRequestId ?? undefined;
        message.appSlugAndVersionNumber = object.appSlugAndVersionNumber ?? undefined;
        message.status = object.status ?? 0;
        return message;
    },
};
messageTypeRegistry.set(AppPRUpdateRequest.$type, AppPRUpdateRequest);
function createBaseAppPRGetRequest() {
    return { appVersionId: undefined, publishRequestId: undefined, appSlugAndVersionNumber: undefined };
}
export const AppPRGetRequest = {
    $type: "devvit.dev_portal.app_publish_request.AppPRGetRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.appVersionId !== undefined) {
            writer.uint32(10).string(message.appVersionId);
        }
        if (message.publishRequestId !== undefined) {
            writer.uint32(18).string(message.publishRequestId);
        }
        if (message.appSlugAndVersionNumber !== undefined) {
            writer.uint32(26).string(message.appSlugAndVersionNumber);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAppPRGetRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.appVersionId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.publishRequestId = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.appSlugAndVersionNumber = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            appVersionId: isSet(object.appVersionId) ? globalThis.String(object.appVersionId) : undefined,
            publishRequestId: isSet(object.publishRequestId) ? globalThis.String(object.publishRequestId) : undefined,
            appSlugAndVersionNumber: isSet(object.appSlugAndVersionNumber)
                ? globalThis.String(object.appSlugAndVersionNumber)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.appVersionId !== undefined) {
            obj.appVersionId = message.appVersionId;
        }
        if (message.publishRequestId !== undefined) {
            obj.publishRequestId = message.publishRequestId;
        }
        if (message.appSlugAndVersionNumber !== undefined) {
            obj.appSlugAndVersionNumber = message.appSlugAndVersionNumber;
        }
        return obj;
    },
    create(base) {
        return AppPRGetRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAppPRGetRequest();
        message.appVersionId = object.appVersionId ?? undefined;
        message.publishRequestId = object.publishRequestId ?? undefined;
        message.appSlugAndVersionNumber = object.appSlugAndVersionNumber ?? undefined;
        return message;
    },
};
messageTypeRegistry.set(AppPRGetRequest.$type, AppPRGetRequest);
function createBaseAppPRFindManyRequest() {
    return {
        appId: undefined,
        appName: undefined,
        appSlug: undefined,
        searchTerm: undefined,
        pagination: undefined,
        sort: undefined,
        statuses: [],
    };
}
export const AppPRFindManyRequest = {
    $type: "devvit.dev_portal.app_publish_request.AppPRFindManyRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.appId !== undefined) {
            writer.uint32(10).string(message.appId);
        }
        if (message.appName !== undefined) {
            writer.uint32(18).string(message.appName);
        }
        if (message.appSlug !== undefined) {
            writer.uint32(26).string(message.appSlug);
        }
        if (message.searchTerm !== undefined) {
            writer.uint32(34).string(message.searchTerm);
        }
        if (message.pagination !== undefined) {
            AppPRFindManyRequest_PaginationInfo.encode(message.pagination, writer.uint32(42).fork()).ldelim();
        }
        if (message.sort !== undefined) {
            AppPRFindManyRequest_SortInfo.encode(message.sort, writer.uint32(50).fork()).ldelim();
        }
        writer.uint32(58).fork();
        for (const v of message.statuses) {
            writer.int32(v);
        }
        writer.ldelim();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAppPRFindManyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.appId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.appName = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.appSlug = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.searchTerm = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.pagination = AppPRFindManyRequest_PaginationInfo.decode(reader, reader.uint32());
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.sort = AppPRFindManyRequest_SortInfo.decode(reader, reader.uint32());
                    continue;
                case 7:
                    if (tag === 56) {
                        message.statuses.push(reader.int32());
                        continue;
                    }
                    if (tag === 58) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.statuses.push(reader.int32());
                        }
                        continue;
                    }
                    break;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            appId: isSet(object.appId) ? globalThis.String(object.appId) : undefined,
            appName: isSet(object.appName) ? globalThis.String(object.appName) : undefined,
            appSlug: isSet(object.appSlug) ? globalThis.String(object.appSlug) : undefined,
            searchTerm: isSet(object.searchTerm) ? globalThis.String(object.searchTerm) : undefined,
            pagination: isSet(object.pagination)
                ? AppPRFindManyRequest_PaginationInfo.fromJSON(object.pagination)
                : undefined,
            sort: isSet(object.sort) ? AppPRFindManyRequest_SortInfo.fromJSON(object.sort) : undefined,
            statuses: globalThis.Array.isArray(object?.statuses)
                ? object.statuses.map((e) => appPublishRequestStatusFromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.appId !== undefined) {
            obj.appId = message.appId;
        }
        if (message.appName !== undefined) {
            obj.appName = message.appName;
        }
        if (message.appSlug !== undefined) {
            obj.appSlug = message.appSlug;
        }
        if (message.searchTerm !== undefined) {
            obj.searchTerm = message.searchTerm;
        }
        if (message.pagination !== undefined) {
            obj.pagination = AppPRFindManyRequest_PaginationInfo.toJSON(message.pagination);
        }
        if (message.sort !== undefined) {
            obj.sort = AppPRFindManyRequest_SortInfo.toJSON(message.sort);
        }
        if (message.statuses?.length) {
            obj.statuses = message.statuses.map((e) => appPublishRequestStatusToJSON(e));
        }
        return obj;
    },
    create(base) {
        return AppPRFindManyRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAppPRFindManyRequest();
        message.appId = object.appId ?? undefined;
        message.appName = object.appName ?? undefined;
        message.appSlug = object.appSlug ?? undefined;
        message.searchTerm = object.searchTerm ?? undefined;
        message.pagination = (object.pagination !== undefined && object.pagination !== null)
            ? AppPRFindManyRequest_PaginationInfo.fromPartial(object.pagination)
            : undefined;
        message.sort = (object.sort !== undefined && object.sort !== null)
            ? AppPRFindManyRequest_SortInfo.fromPartial(object.sort)
            : undefined;
        message.statuses = object.statuses?.map((e) => e) || [];
        return message;
    },
};
messageTypeRegistry.set(AppPRFindManyRequest.$type, AppPRFindManyRequest);
function createBaseAppPRFindManyRequest_PaginationInfo() {
    return { page: 0, pageSize: 0 };
}
export const AppPRFindManyRequest_PaginationInfo = {
    $type: "devvit.dev_portal.app_publish_request.AppPRFindManyRequest.PaginationInfo",
    encode(message, writer = _m0.Writer.create()) {
        if (message.page !== 0) {
            writer.uint32(8).int32(message.page);
        }
        if (message.pageSize !== 0) {
            writer.uint32(16).int32(message.pageSize);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAppPRFindManyRequest_PaginationInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.page = reader.int32();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.pageSize = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            page: isSet(object.page) ? globalThis.Number(object.page) : 0,
            pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.page !== 0) {
            obj.page = Math.round(message.page);
        }
        if (message.pageSize !== 0) {
            obj.pageSize = Math.round(message.pageSize);
        }
        return obj;
    },
    create(base) {
        return AppPRFindManyRequest_PaginationInfo.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAppPRFindManyRequest_PaginationInfo();
        message.page = object.page ?? 0;
        message.pageSize = object.pageSize ?? 0;
        return message;
    },
};
messageTypeRegistry.set(AppPRFindManyRequest_PaginationInfo.$type, AppPRFindManyRequest_PaginationInfo);
function createBaseAppPRFindManyRequest_SortInfo() {
    return { field: "", asc: false };
}
export const AppPRFindManyRequest_SortInfo = {
    $type: "devvit.dev_portal.app_publish_request.AppPRFindManyRequest.SortInfo",
    encode(message, writer = _m0.Writer.create()) {
        if (message.field !== "") {
            writer.uint32(10).string(message.field);
        }
        if (message.asc !== false) {
            writer.uint32(16).bool(message.asc);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAppPRFindManyRequest_SortInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.field = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.asc = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            field: isSet(object.field) ? globalThis.String(object.field) : "",
            asc: isSet(object.asc) ? globalThis.Boolean(object.asc) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.field !== "") {
            obj.field = message.field;
        }
        if (message.asc !== false) {
            obj.asc = message.asc;
        }
        return obj;
    },
    create(base) {
        return AppPRFindManyRequest_SortInfo.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAppPRFindManyRequest_SortInfo();
        message.field = object.field ?? "";
        message.asc = object.asc ?? false;
        return message;
    },
};
messageTypeRegistry.set(AppPRFindManyRequest_SortInfo.$type, AppPRFindManyRequest_SortInfo);
function toTimestamp(date) {
    const seconds = Math.trunc(date.getTime() / 1000);
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (t.seconds || 0) * 1000;
    millis += (t.nanos || 0) / 1000000;
    return new globalThis.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof globalThis.Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new globalThis.Date(o);
    }
    else {
        return fromTimestamp(Timestamp.fromJSON(o));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
