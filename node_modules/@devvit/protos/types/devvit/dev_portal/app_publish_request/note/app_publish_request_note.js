/**
 * #app_publish_request_note.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { Timestamp } from "../../../../google/protobuf/timestamp.js";
import { messageTypeRegistry } from "../../../../typeRegistry.js";
import { Redditor } from "../../reddit/redditor.js";
function createBaseAppPublishRequestNote() {
    return { id: "", createdAt: undefined, updatedAt: undefined, author: undefined, note: "" };
}
export const AppPublishRequestNote = {
    $type: "devvit.dev_portal.app_publish_request.note.AppPublishRequestNote",
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.createdAt !== undefined) {
            Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(18).fork()).ldelim();
        }
        if (message.updatedAt !== undefined) {
            Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(26).fork()).ldelim();
        }
        if (message.author !== undefined) {
            Redditor.encode(message.author, writer.uint32(34).fork()).ldelim();
        }
        if (message.note !== "") {
            writer.uint32(42).string(message.note);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAppPublishRequestNote();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.author = Redditor.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.note = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
            updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
            author: isSet(object.author) ? Redditor.fromJSON(object.author) : undefined,
            note: isSet(object.note) ? globalThis.String(object.note) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.createdAt !== undefined) {
            obj.createdAt = message.createdAt.toISOString();
        }
        if (message.updatedAt !== undefined) {
            obj.updatedAt = message.updatedAt.toISOString();
        }
        if (message.author !== undefined) {
            obj.author = Redditor.toJSON(message.author);
        }
        if (message.note !== "") {
            obj.note = message.note;
        }
        return obj;
    },
    create(base) {
        return AppPublishRequestNote.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAppPublishRequestNote();
        message.id = object.id ?? "";
        message.createdAt = object.createdAt ?? undefined;
        message.updatedAt = object.updatedAt ?? undefined;
        message.author = (object.author !== undefined && object.author !== null)
            ? Redditor.fromPartial(object.author)
            : undefined;
        message.note = object.note ?? "";
        return message;
    },
};
messageTypeRegistry.set(AppPublishRequestNote.$type, AppPublishRequestNote);
function createBaseAppPRAddNoteRequest() {
    return { appPublishRequestId: "", note: "" };
}
export const AppPRAddNoteRequest = {
    $type: "devvit.dev_portal.app_publish_request.note.AppPRAddNoteRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.appPublishRequestId !== "") {
            writer.uint32(10).string(message.appPublishRequestId);
        }
        if (message.note !== "") {
            writer.uint32(18).string(message.note);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAppPRAddNoteRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.appPublishRequestId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.note = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            appPublishRequestId: isSet(object.appPublishRequestId) ? globalThis.String(object.appPublishRequestId) : "",
            note: isSet(object.note) ? globalThis.String(object.note) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.appPublishRequestId !== "") {
            obj.appPublishRequestId = message.appPublishRequestId;
        }
        if (message.note !== "") {
            obj.note = message.note;
        }
        return obj;
    },
    create(base) {
        return AppPRAddNoteRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAppPRAddNoteRequest();
        message.appPublishRequestId = object.appPublishRequestId ?? "";
        message.note = object.note ?? "";
        return message;
    },
};
messageTypeRegistry.set(AppPRAddNoteRequest.$type, AppPRAddNoteRequest);
function createBaseAppPRUpdateNoteRequest() {
    return { appPublishRequestNoteId: "", note: "" };
}
export const AppPRUpdateNoteRequest = {
    $type: "devvit.dev_portal.app_publish_request.note.AppPRUpdateNoteRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.appPublishRequestNoteId !== "") {
            writer.uint32(10).string(message.appPublishRequestNoteId);
        }
        if (message.note !== "") {
            writer.uint32(18).string(message.note);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAppPRUpdateNoteRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.appPublishRequestNoteId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.note = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            appPublishRequestNoteId: isSet(object.appPublishRequestNoteId)
                ? globalThis.String(object.appPublishRequestNoteId)
                : "",
            note: isSet(object.note) ? globalThis.String(object.note) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.appPublishRequestNoteId !== "") {
            obj.appPublishRequestNoteId = message.appPublishRequestNoteId;
        }
        if (message.note !== "") {
            obj.note = message.note;
        }
        return obj;
    },
    create(base) {
        return AppPRUpdateNoteRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAppPRUpdateNoteRequest();
        message.appPublishRequestNoteId = object.appPublishRequestNoteId ?? "";
        message.note = object.note ?? "";
        return message;
    },
};
messageTypeRegistry.set(AppPRUpdateNoteRequest.$type, AppPRUpdateNoteRequest);
function toTimestamp(date) {
    const seconds = Math.trunc(date.getTime() / 1000);
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (t.seconds || 0) * 1000;
    millis += (t.nanos || 0) / 1000000;
    return new globalThis.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof globalThis.Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new globalThis.Date(o);
    }
    else {
        return fromTimestamp(Timestamp.fromJSON(o));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
