/**
 * #app_version.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { Bundle } from "../../plugin/buildpack/buildpack_common.js";
import { LinkedBundle } from "../../runtime/bundle.js";
import { ActorTypeInfo } from "../actor/actor_type.js";
import { AppInfo } from "../app/info/app_info.js";
import { InstallationInfo } from "../installation/installation.js";
import { AppVersionInfo, ComputePool, InstallationType, OptionalVersionVisibility, VersionVisibility } from "./info/app_version_info.js";
/** Used to create a new app version. */
export interface AppVersionCreationRequest {
    /** What is the ID of the app this version belongs to? */
    appId: string;
    /** How visible is this app version? */
    visibility: VersionVisibility;
    /** What installation types are allowed for this app? */
    validInstallTypes: InstallationType[];
    /** What is this version's major version number? i.e. x.0.0 */
    majorVersion: number;
    /** What is this version's minor version number? i.e. 0.x.0 */
    minorVersion: number;
    /** What is this version's patch version number? i.e. 0.0.x */
    patchVersion: number;
    /** What is this version's prerelease version number, if applicable? i.e. 0.0.0.x */
    prereleaseVersion?: number | undefined;
    /** Give me the actor bundles of this app */
    actorBundles: Bundle[];
    /** What should go in this version's about chunk? (Comes from README.md by default.) */
    about: string;
}
/** Used to send an app's slug and version; the object equivalent of "my-app@1.2.3" */
export interface AppSlugAndVersion {
    /** What's the slug of the app we're looking for? */
    slug: string;
    /** What version are you looking for? Can be '1.2.3[.4]' or 'latest'. */
    version: string;
}
/**
 * Used to update an existing app version's information. If a field is optional, omitting it will
 * leave its value unchanged.
 */
export interface AppVersionUpdateRequest {
    /** What is the ID of the version you want to update? */
    id: string;
    /** How visible should the version be? */
    visibility?: OptionalVersionVisibility | undefined;
    validInstallTypes: InstallationType[];
    /** What should go in this version's about chunk? */
    about?: string | undefined;
    pool: ComputePool;
}
/**
 * Get a list of valid installation locations for a given app version, optionally with
 * paging info.
 */
export interface ValidInstallLocationsRequest {
    /** What is the ID of the app version you want to get valid install locations for? */
    id: string;
    /** If present, specifies what page of the response data you're asking for. */
    pageInfo: InstallLocationPageInfo[];
}
/** For a given install location type, give me requests before or after a given cursor. */
export interface InstallLocationPageInfo {
    /** The type of installation we're paging over */
    type: InstallationType;
    /** Show me results before this startCursor. */
    before?: string | undefined;
    /** Show me results after this endCursor. */
    after?: string | undefined;
}
/**
 * Contains the basic information about an app version, as well as the app it belongs to, the
 * actors contained in the app, and any installations of the app.
 */
export interface FullAppVersionInfo {
    appVersion?: AppVersionInfo | undefined;
    app?: AppInfo | undefined;
    actorTypes: ActorTypeInfo[];
    installations: InstallationInfo[];
}
/**
 * Lists all valid installation types and locations for a given app.
 * Logic for this response:
 * For each install type:
 * - the type we're talking about
 * - an array of valid install locations
 */
export interface ValidInstallLocationsResponse {
    locations: InstallLocationInfo[];
}
/** Gives an installation type, and list all valid installation locations matching that type. */
export interface InstallLocationInfo {
    /** The type of installation we're providing locations for */
    type: InstallationType;
    /** The list of valid install locations */
    locations: InstallLocationDetails[];
    /** Paging info for the response, if applicable */
    pageInfo?: PageInfo | undefined;
}
/** Details each valid install location, and if there's already an install there or not. */
export interface InstallLocationDetails {
    /** The thing ID of the valid install location */
    thingId: string;
    /** The name of the valid install location */
    name: string;
    /** If present, gives the UUID of an installation of the app in question that already exists in this location. */
    existingInstallId?: string | undefined;
    /** The icon or avatar for the install location */
    icon?: string | undefined;
}
/** Used to provide paging info about a response. This mirrors the PageInfo type in GQL. */
export interface PageInfo {
    /** When paginating forwards, are there more items? */
    hasNextPage: boolean;
    /** When paginating backwards, are there more items? */
    hasPreviousPage: boolean;
    /** When paginating backwards, the cursor to continue. */
    startCursor: string;
    /** When paginating forwards, the cursor to continue. */
    endCursor: string;
}
export interface GetAppVersionBundleResponse {
    actorBundles: GetAppVersionBundleResponse_BundleInfo[];
}
export interface GetAppVersionBundleResponse_BundleInfo {
    actor: string;
    bundle?: LinkedBundle | undefined;
}
export declare const AppVersionCreationRequest: {
    $type: "devvit.dev_portal.app_version.AppVersionCreationRequest";
    encode(message: AppVersionCreationRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AppVersionCreationRequest;
    fromJSON(object: any): AppVersionCreationRequest;
    toJSON(message: AppVersionCreationRequest): unknown;
    create(base?: DeepPartial<AppVersionCreationRequest>): AppVersionCreationRequest;
    fromPartial(object: DeepPartial<AppVersionCreationRequest>): AppVersionCreationRequest;
};
export declare const AppSlugAndVersion: {
    $type: "devvit.dev_portal.app_version.AppSlugAndVersion";
    encode(message: AppSlugAndVersion, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AppSlugAndVersion;
    fromJSON(object: any): AppSlugAndVersion;
    toJSON(message: AppSlugAndVersion): unknown;
    create(base?: DeepPartial<AppSlugAndVersion>): AppSlugAndVersion;
    fromPartial(object: DeepPartial<AppSlugAndVersion>): AppSlugAndVersion;
};
export declare const AppVersionUpdateRequest: {
    $type: "devvit.dev_portal.app_version.AppVersionUpdateRequest";
    encode(message: AppVersionUpdateRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AppVersionUpdateRequest;
    fromJSON(object: any): AppVersionUpdateRequest;
    toJSON(message: AppVersionUpdateRequest): unknown;
    create(base?: DeepPartial<AppVersionUpdateRequest>): AppVersionUpdateRequest;
    fromPartial(object: DeepPartial<AppVersionUpdateRequest>): AppVersionUpdateRequest;
};
export declare const ValidInstallLocationsRequest: {
    $type: "devvit.dev_portal.app_version.ValidInstallLocationsRequest";
    encode(message: ValidInstallLocationsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ValidInstallLocationsRequest;
    fromJSON(object: any): ValidInstallLocationsRequest;
    toJSON(message: ValidInstallLocationsRequest): unknown;
    create(base?: DeepPartial<ValidInstallLocationsRequest>): ValidInstallLocationsRequest;
    fromPartial(object: DeepPartial<ValidInstallLocationsRequest>): ValidInstallLocationsRequest;
};
export declare const InstallLocationPageInfo: {
    $type: "devvit.dev_portal.app_version.InstallLocationPageInfo";
    encode(message: InstallLocationPageInfo, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): InstallLocationPageInfo;
    fromJSON(object: any): InstallLocationPageInfo;
    toJSON(message: InstallLocationPageInfo): unknown;
    create(base?: DeepPartial<InstallLocationPageInfo>): InstallLocationPageInfo;
    fromPartial(object: DeepPartial<InstallLocationPageInfo>): InstallLocationPageInfo;
};
export declare const FullAppVersionInfo: {
    $type: "devvit.dev_portal.app_version.FullAppVersionInfo";
    encode(message: FullAppVersionInfo, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FullAppVersionInfo;
    fromJSON(object: any): FullAppVersionInfo;
    toJSON(message: FullAppVersionInfo): unknown;
    create(base?: DeepPartial<FullAppVersionInfo>): FullAppVersionInfo;
    fromPartial(object: DeepPartial<FullAppVersionInfo>): FullAppVersionInfo;
};
export declare const ValidInstallLocationsResponse: {
    $type: "devvit.dev_portal.app_version.ValidInstallLocationsResponse";
    encode(message: ValidInstallLocationsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ValidInstallLocationsResponse;
    fromJSON(object: any): ValidInstallLocationsResponse;
    toJSON(message: ValidInstallLocationsResponse): unknown;
    create(base?: DeepPartial<ValidInstallLocationsResponse>): ValidInstallLocationsResponse;
    fromPartial(object: DeepPartial<ValidInstallLocationsResponse>): ValidInstallLocationsResponse;
};
export declare const InstallLocationInfo: {
    $type: "devvit.dev_portal.app_version.InstallLocationInfo";
    encode(message: InstallLocationInfo, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): InstallLocationInfo;
    fromJSON(object: any): InstallLocationInfo;
    toJSON(message: InstallLocationInfo): unknown;
    create(base?: DeepPartial<InstallLocationInfo>): InstallLocationInfo;
    fromPartial(object: DeepPartial<InstallLocationInfo>): InstallLocationInfo;
};
export declare const InstallLocationDetails: {
    $type: "devvit.dev_portal.app_version.InstallLocationDetails";
    encode(message: InstallLocationDetails, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): InstallLocationDetails;
    fromJSON(object: any): InstallLocationDetails;
    toJSON(message: InstallLocationDetails): unknown;
    create(base?: DeepPartial<InstallLocationDetails>): InstallLocationDetails;
    fromPartial(object: DeepPartial<InstallLocationDetails>): InstallLocationDetails;
};
export declare const PageInfo: {
    $type: "devvit.dev_portal.app_version.PageInfo";
    encode(message: PageInfo, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PageInfo;
    fromJSON(object: any): PageInfo;
    toJSON(message: PageInfo): unknown;
    create(base?: DeepPartial<PageInfo>): PageInfo;
    fromPartial(object: DeepPartial<PageInfo>): PageInfo;
};
export declare const GetAppVersionBundleResponse: {
    $type: "devvit.dev_portal.app_version.GetAppVersionBundleResponse";
    encode(message: GetAppVersionBundleResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetAppVersionBundleResponse;
    fromJSON(object: any): GetAppVersionBundleResponse;
    toJSON(message: GetAppVersionBundleResponse): unknown;
    create(base?: DeepPartial<GetAppVersionBundleResponse>): GetAppVersionBundleResponse;
    fromPartial(object: DeepPartial<GetAppVersionBundleResponse>): GetAppVersionBundleResponse;
};
export declare const GetAppVersionBundleResponse_BundleInfo: {
    $type: "devvit.dev_portal.app_version.GetAppVersionBundleResponse.BundleInfo";
    encode(message: GetAppVersionBundleResponse_BundleInfo, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetAppVersionBundleResponse_BundleInfo;
    fromJSON(object: any): GetAppVersionBundleResponse_BundleInfo;
    toJSON(message: GetAppVersionBundleResponse_BundleInfo): unknown;
    create(base?: DeepPartial<GetAppVersionBundleResponse_BundleInfo>): GetAppVersionBundleResponse_BundleInfo;
    fromPartial(object: DeepPartial<GetAppVersionBundleResponse_BundleInfo>): GetAppVersionBundleResponse_BundleInfo;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=app_version.d.ts.map