/**
 * #app_version_info.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { Timestamp } from "../../../../google/protobuf/timestamp.js";
import { Int32Value } from "../../../../google/protobuf/wrappers.js";
import { messageTypeRegistry } from "../../../../typeRegistry.js";
export var VersionVisibility;
(function (VersionVisibility) {
    VersionVisibility[VersionVisibility["PUBLIC"] = 0] = "PUBLIC";
    VersionVisibility[VersionVisibility["PRIVATE"] = 1] = "PRIVATE";
    VersionVisibility[VersionVisibility["UNLISTED"] = 2] = "UNLISTED";
    VersionVisibility[VersionVisibility["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(VersionVisibility || (VersionVisibility = {}));
export function versionVisibilityFromJSON(object) {
    switch (object) {
        case 0:
        case "PUBLIC":
            return VersionVisibility.PUBLIC;
        case 1:
        case "PRIVATE":
            return VersionVisibility.PRIVATE;
        case 2:
        case "UNLISTED":
            return VersionVisibility.UNLISTED;
        case -1:
        case "UNRECOGNIZED":
        default:
            return VersionVisibility.UNRECOGNIZED;
    }
}
export function versionVisibilityToJSON(object) {
    switch (object) {
        case VersionVisibility.PUBLIC:
            return 0;
        case VersionVisibility.PRIVATE:
            return 1;
        case VersionVisibility.UNLISTED:
            return 2;
        case VersionVisibility.UNRECOGNIZED:
        default:
            return -1;
    }
}
export var BuildStatus;
(function (BuildStatus) {
    BuildStatus[BuildStatus["BUILDING"] = 0] = "BUILDING";
    BuildStatus[BuildStatus["READY"] = 1] = "READY";
    BuildStatus[BuildStatus["FAILED"] = 2] = "FAILED";
    BuildStatus[BuildStatus["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(BuildStatus || (BuildStatus = {}));
export function buildStatusFromJSON(object) {
    switch (object) {
        case 0:
        case "BUILDING":
            return BuildStatus.BUILDING;
        case 1:
        case "READY":
            return BuildStatus.READY;
        case 2:
        case "FAILED":
            return BuildStatus.FAILED;
        case -1:
        case "UNRECOGNIZED":
        default:
            return BuildStatus.UNRECOGNIZED;
    }
}
export function buildStatusToJSON(object) {
    switch (object) {
        case BuildStatus.BUILDING:
            return 0;
        case BuildStatus.READY:
            return 1;
        case BuildStatus.FAILED:
            return 2;
        case BuildStatus.UNRECOGNIZED:
        default:
            return -1;
    }
}
export var InstallationType;
(function (InstallationType) {
    InstallationType[InstallationType["USER"] = 0] = "USER";
    InstallationType[InstallationType["SUBREDDIT"] = 1] = "SUBREDDIT";
    InstallationType[InstallationType["SUBREDDIT_GLOBAL"] = 2] = "SUBREDDIT_GLOBAL";
    InstallationType[InstallationType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(InstallationType || (InstallationType = {}));
export function installationTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "USER":
            return InstallationType.USER;
        case 1:
        case "SUBREDDIT":
            return InstallationType.SUBREDDIT;
        case 2:
        case "SUBREDDIT_GLOBAL":
            return InstallationType.SUBREDDIT_GLOBAL;
        case -1:
        case "UNRECOGNIZED":
        default:
            return InstallationType.UNRECOGNIZED;
    }
}
export function installationTypeToJSON(object) {
    switch (object) {
        case InstallationType.USER:
            return 0;
        case InstallationType.SUBREDDIT:
            return 1;
        case InstallationType.SUBREDDIT_GLOBAL:
            return 2;
        case InstallationType.UNRECOGNIZED:
        default:
            return -1;
    }
}
export var ComputePool;
(function (ComputePool) {
    ComputePool[ComputePool["LOW"] = 0] = "LOW";
    /** @deprecated */
    ComputePool[ComputePool["MEDIUM"] = 1] = "MEDIUM";
    ComputePool[ComputePool["HIGH"] = 2] = "HIGH";
    ComputePool[ComputePool["RESTRICTED"] = 3] = "RESTRICTED";
    ComputePool[ComputePool["INTERNAL"] = 4] = "INTERNAL";
    ComputePool[ComputePool["BETA"] = 5] = "BETA";
    ComputePool[ComputePool["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ComputePool || (ComputePool = {}));
export function computePoolFromJSON(object) {
    switch (object) {
        case 0:
        case "LOW":
            return ComputePool.LOW;
        case 1:
        case "MEDIUM":
            return ComputePool.MEDIUM;
        case 2:
        case "HIGH":
            return ComputePool.HIGH;
        case 3:
        case "RESTRICTED":
            return ComputePool.RESTRICTED;
        case 4:
        case "INTERNAL":
            return ComputePool.INTERNAL;
        case 5:
        case "BETA":
            return ComputePool.BETA;
        case -1:
        case "UNRECOGNIZED":
        default:
            return ComputePool.UNRECOGNIZED;
    }
}
export function computePoolToJSON(object) {
    switch (object) {
        case ComputePool.LOW:
            return 0;
        case ComputePool.MEDIUM:
            return 1;
        case ComputePool.HIGH:
            return 2;
        case ComputePool.RESTRICTED:
            return 3;
        case ComputePool.INTERNAL:
            return 4;
        case ComputePool.BETA:
            return 5;
        case ComputePool.UNRECOGNIZED:
        default:
            return -1;
    }
}
function createBaseOptionalVersionVisibility() {
    return { value: 0 };
}
export const OptionalVersionVisibility = {
    $type: "devvit.dev_portal.app_version.info.OptionalVersionVisibility",
    encode(message, writer = _m0.Writer.create()) {
        if (message.value !== 0) {
            writer.uint32(8).int32(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOptionalVersionVisibility();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.value = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { value: isSet(object.value) ? versionVisibilityFromJSON(object.value) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.value !== 0) {
            obj.value = versionVisibilityToJSON(message.value);
        }
        return obj;
    },
    create(base) {
        return OptionalVersionVisibility.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseOptionalVersionVisibility();
        message.value = object.value ?? 0;
        return message;
    },
};
messageTypeRegistry.set(OptionalVersionVisibility.$type, OptionalVersionVisibility);
function createBaseAppVersionInfo() {
    return {
        id: "",
        visibility: 0,
        validInstallTypes: [],
        majorVersion: 0,
        minorVersion: 0,
        patchVersion: 0,
        prereleaseVersion: undefined,
        uploadedAt: undefined,
        buildStatus: 0,
        builtAt: undefined,
        about: "",
        hasCustomSettings: false,
        pool: 0,
    };
}
export const AppVersionInfo = {
    $type: "devvit.dev_portal.app_version.info.AppVersionInfo",
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.visibility !== 0) {
            writer.uint32(16).int32(message.visibility);
        }
        writer.uint32(34).fork();
        for (const v of message.validInstallTypes) {
            writer.int32(v);
        }
        writer.ldelim();
        if (message.majorVersion !== 0) {
            writer.uint32(40).int32(message.majorVersion);
        }
        if (message.minorVersion !== 0) {
            writer.uint32(48).int32(message.minorVersion);
        }
        if (message.patchVersion !== 0) {
            writer.uint32(56).int32(message.patchVersion);
        }
        if (message.prereleaseVersion !== undefined) {
            Int32Value.encode({ value: message.prereleaseVersion }, writer.uint32(66).fork()).ldelim();
        }
        if (message.uploadedAt !== undefined) {
            Timestamp.encode(toTimestamp(message.uploadedAt), writer.uint32(74).fork()).ldelim();
        }
        if (message.buildStatus !== 0) {
            writer.uint32(80).int32(message.buildStatus);
        }
        if (message.builtAt !== undefined) {
            Timestamp.encode(toTimestamp(message.builtAt), writer.uint32(90).fork()).ldelim();
        }
        if (message.about !== "") {
            writer.uint32(98).string(message.about);
        }
        if (message.hasCustomSettings !== false) {
            writer.uint32(104).bool(message.hasCustomSettings);
        }
        if (message.pool !== 0) {
            writer.uint32(112).int32(message.pool);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAppVersionInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.visibility = reader.int32();
                    continue;
                case 4:
                    if (tag === 32) {
                        message.validInstallTypes.push(reader.int32());
                        continue;
                    }
                    if (tag === 34) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.validInstallTypes.push(reader.int32());
                        }
                        continue;
                    }
                    break;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.majorVersion = reader.int32();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.minorVersion = reader.int32();
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.patchVersion = reader.int32();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.prereleaseVersion = Int32Value.decode(reader, reader.uint32()).value;
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.uploadedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 10:
                    if (tag !== 80) {
                        break;
                    }
                    message.buildStatus = reader.int32();
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.builtAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    message.about = reader.string();
                    continue;
                case 13:
                    if (tag !== 104) {
                        break;
                    }
                    message.hasCustomSettings = reader.bool();
                    continue;
                case 14:
                    if (tag !== 112) {
                        break;
                    }
                    message.pool = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            visibility: isSet(object.visibility) ? versionVisibilityFromJSON(object.visibility) : 0,
            validInstallTypes: globalThis.Array.isArray(object?.validInstallTypes)
                ? object.validInstallTypes.map((e) => installationTypeFromJSON(e))
                : [],
            majorVersion: isSet(object.majorVersion) ? globalThis.Number(object.majorVersion) : 0,
            minorVersion: isSet(object.minorVersion) ? globalThis.Number(object.minorVersion) : 0,
            patchVersion: isSet(object.patchVersion) ? globalThis.Number(object.patchVersion) : 0,
            prereleaseVersion: isSet(object.prereleaseVersion) ? Number(object.prereleaseVersion) : undefined,
            uploadedAt: isSet(object.uploadedAt) ? fromJsonTimestamp(object.uploadedAt) : undefined,
            buildStatus: isSet(object.buildStatus) ? buildStatusFromJSON(object.buildStatus) : 0,
            builtAt: isSet(object.builtAt) ? fromJsonTimestamp(object.builtAt) : undefined,
            about: isSet(object.about) ? globalThis.String(object.about) : "",
            hasCustomSettings: isSet(object.hasCustomSettings) ? globalThis.Boolean(object.hasCustomSettings) : false,
            pool: isSet(object.pool) ? computePoolFromJSON(object.pool) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.visibility !== 0) {
            obj.visibility = versionVisibilityToJSON(message.visibility);
        }
        if (message.validInstallTypes?.length) {
            obj.validInstallTypes = message.validInstallTypes.map((e) => installationTypeToJSON(e));
        }
        if (message.majorVersion !== 0) {
            obj.majorVersion = Math.round(message.majorVersion);
        }
        if (message.minorVersion !== 0) {
            obj.minorVersion = Math.round(message.minorVersion);
        }
        if (message.patchVersion !== 0) {
            obj.patchVersion = Math.round(message.patchVersion);
        }
        if (message.prereleaseVersion !== undefined) {
            obj.prereleaseVersion = message.prereleaseVersion;
        }
        if (message.uploadedAt !== undefined) {
            obj.uploadedAt = message.uploadedAt.toISOString();
        }
        if (message.buildStatus !== 0) {
            obj.buildStatus = buildStatusToJSON(message.buildStatus);
        }
        if (message.builtAt !== undefined) {
            obj.builtAt = message.builtAt.toISOString();
        }
        if (message.about !== "") {
            obj.about = message.about;
        }
        if (message.hasCustomSettings !== false) {
            obj.hasCustomSettings = message.hasCustomSettings;
        }
        if (message.pool !== 0) {
            obj.pool = computePoolToJSON(message.pool);
        }
        return obj;
    },
    create(base) {
        return AppVersionInfo.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAppVersionInfo();
        message.id = object.id ?? "";
        message.visibility = object.visibility ?? 0;
        message.validInstallTypes = object.validInstallTypes?.map((e) => e) || [];
        message.majorVersion = object.majorVersion ?? 0;
        message.minorVersion = object.minorVersion ?? 0;
        message.patchVersion = object.patchVersion ?? 0;
        message.prereleaseVersion = object.prereleaseVersion ?? undefined;
        message.uploadedAt = object.uploadedAt ?? undefined;
        message.buildStatus = object.buildStatus ?? 0;
        message.builtAt = object.builtAt ?? undefined;
        message.about = object.about ?? "";
        message.hasCustomSettings = object.hasCustomSettings ?? false;
        message.pool = object.pool ?? 0;
        return message;
    },
};
messageTypeRegistry.set(AppVersionInfo.$type, AppVersionInfo);
function toTimestamp(date) {
    const seconds = Math.trunc(date.getTime() / 1000);
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (t.seconds || 0) * 1000;
    millis += (t.nanos || 0) / 1000000;
    return new globalThis.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof globalThis.Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new globalThis.Date(o);
    }
    else {
        return fromTimestamp(Timestamp.fromJSON(o));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
