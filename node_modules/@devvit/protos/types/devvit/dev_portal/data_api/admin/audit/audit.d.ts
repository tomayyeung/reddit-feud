/**
 * #audit.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
export declare enum AuditLogEventType {
    DATA_SUBSCRIPTION_CREATE = 0,
    DATA_SUBSCRIPTION_UPDATE = 1,
    DATA_SUBSCRIPTION_DELETE = 2,
    DATA_TOKEN_CREATE = 3,
    DATA_TOKEN_REVOKE = 4,
    ORGANIZATION_DELETE = 5,
    UNRECOGNIZED = -1
}
export declare function auditLogEventTypeFromJSON(object: any): AuditLogEventType;
export declare function auditLogEventTypeToJSON(object: AuditLogEventType): number;
export interface AuditLogEvent {
    /** unique identifier for the event */
    id: string;
    /** when the event was created */
    createdAt?: Date | undefined;
    /** t2_ id of the user who performed the action */
    userId: string;
    /** type of the event */
    type: AuditLogEventType;
    /** id of the organization the event is associated with */
    organizationId: string;
    dataTokenCreatePayload?: DataTokenCreateAuditLogEventPayload | undefined;
    dataTokenRevokePayload?: DataTokenRevokeAuditLogEventPayload | undefined;
    dataSubscriptionCreatePayload?: DataSubscriptionCreateAuditLogEventPayload | undefined;
    dataSubscriptionUpdatePayload?: DataSubscriptionUpdateAuditLogEventPayload | undefined;
    dataSubscriptionDeletePayload?: DataSubscriptionDeleteAuditLogEventPayload | undefined;
    /**
     * username of the user who performed the action without the u/ prefix
     * @example "spez"
     */
    username: string;
}
export interface DataTokenCreateAuditLogEventPayload {
    /** id of the data token that was created */
    tokenId: string;
    /** expiration date of the data token */
    expiration?: Date | undefined;
}
export interface DataTokenRevokeAuditLogEventPayload {
    /** id of the data token that was revoked */
    tokenId: string;
}
export interface DataSubscriptionCreateAuditLogEventPayload {
    subscriptionId: string;
}
export interface DataSubscriptionUpdateAuditLogEventPayload {
    subscriptionId: string;
}
export interface DataSubscriptionDeleteAuditLogEventPayload {
    subscriptionId: string;
}
export interface GetAuditLogEventsRequest {
    organizationName: string;
}
export interface GetAuditLogEventsResponse {
    events: AuditLogEvent[];
}
export declare const AuditLogEvent: {
    $type: "devvit.dev_portal.data_api.admin.audit.AuditLogEvent";
    encode(message: AuditLogEvent, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AuditLogEvent;
    fromJSON(object: any): AuditLogEvent;
    toJSON(message: AuditLogEvent): unknown;
    create(base?: DeepPartial<AuditLogEvent>): AuditLogEvent;
    fromPartial(object: DeepPartial<AuditLogEvent>): AuditLogEvent;
};
export declare const DataTokenCreateAuditLogEventPayload: {
    $type: "devvit.dev_portal.data_api.admin.audit.DataTokenCreateAuditLogEventPayload";
    encode(message: DataTokenCreateAuditLogEventPayload, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DataTokenCreateAuditLogEventPayload;
    fromJSON(object: any): DataTokenCreateAuditLogEventPayload;
    toJSON(message: DataTokenCreateAuditLogEventPayload): unknown;
    create(base?: DeepPartial<DataTokenCreateAuditLogEventPayload>): DataTokenCreateAuditLogEventPayload;
    fromPartial(object: DeepPartial<DataTokenCreateAuditLogEventPayload>): DataTokenCreateAuditLogEventPayload;
};
export declare const DataTokenRevokeAuditLogEventPayload: {
    $type: "devvit.dev_portal.data_api.admin.audit.DataTokenRevokeAuditLogEventPayload";
    encode(message: DataTokenRevokeAuditLogEventPayload, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DataTokenRevokeAuditLogEventPayload;
    fromJSON(object: any): DataTokenRevokeAuditLogEventPayload;
    toJSON(message: DataTokenRevokeAuditLogEventPayload): unknown;
    create(base?: DeepPartial<DataTokenRevokeAuditLogEventPayload>): DataTokenRevokeAuditLogEventPayload;
    fromPartial(object: DeepPartial<DataTokenRevokeAuditLogEventPayload>): DataTokenRevokeAuditLogEventPayload;
};
export declare const DataSubscriptionCreateAuditLogEventPayload: {
    $type: "devvit.dev_portal.data_api.admin.audit.DataSubscriptionCreateAuditLogEventPayload";
    encode(message: DataSubscriptionCreateAuditLogEventPayload, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DataSubscriptionCreateAuditLogEventPayload;
    fromJSON(object: any): DataSubscriptionCreateAuditLogEventPayload;
    toJSON(message: DataSubscriptionCreateAuditLogEventPayload): unknown;
    create(base?: DeepPartial<DataSubscriptionCreateAuditLogEventPayload>): DataSubscriptionCreateAuditLogEventPayload;
    fromPartial(object: DeepPartial<DataSubscriptionCreateAuditLogEventPayload>): DataSubscriptionCreateAuditLogEventPayload;
};
export declare const DataSubscriptionUpdateAuditLogEventPayload: {
    $type: "devvit.dev_portal.data_api.admin.audit.DataSubscriptionUpdateAuditLogEventPayload";
    encode(message: DataSubscriptionUpdateAuditLogEventPayload, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DataSubscriptionUpdateAuditLogEventPayload;
    fromJSON(object: any): DataSubscriptionUpdateAuditLogEventPayload;
    toJSON(message: DataSubscriptionUpdateAuditLogEventPayload): unknown;
    create(base?: DeepPartial<DataSubscriptionUpdateAuditLogEventPayload>): DataSubscriptionUpdateAuditLogEventPayload;
    fromPartial(object: DeepPartial<DataSubscriptionUpdateAuditLogEventPayload>): DataSubscriptionUpdateAuditLogEventPayload;
};
export declare const DataSubscriptionDeleteAuditLogEventPayload: {
    $type: "devvit.dev_portal.data_api.admin.audit.DataSubscriptionDeleteAuditLogEventPayload";
    encode(message: DataSubscriptionDeleteAuditLogEventPayload, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DataSubscriptionDeleteAuditLogEventPayload;
    fromJSON(object: any): DataSubscriptionDeleteAuditLogEventPayload;
    toJSON(message: DataSubscriptionDeleteAuditLogEventPayload): unknown;
    create(base?: DeepPartial<DataSubscriptionDeleteAuditLogEventPayload>): DataSubscriptionDeleteAuditLogEventPayload;
    fromPartial(object: DeepPartial<DataSubscriptionDeleteAuditLogEventPayload>): DataSubscriptionDeleteAuditLogEventPayload;
};
export declare const GetAuditLogEventsRequest: {
    $type: "devvit.dev_portal.data_api.admin.audit.GetAuditLogEventsRequest";
    encode(message: GetAuditLogEventsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetAuditLogEventsRequest;
    fromJSON(object: any): GetAuditLogEventsRequest;
    toJSON(message: GetAuditLogEventsRequest): unknown;
    create(base?: DeepPartial<GetAuditLogEventsRequest>): GetAuditLogEventsRequest;
    fromPartial(object: DeepPartial<GetAuditLogEventsRequest>): GetAuditLogEventsRequest;
};
export declare const GetAuditLogEventsResponse: {
    $type: "devvit.dev_portal.data_api.admin.audit.GetAuditLogEventsResponse";
    encode(message: GetAuditLogEventsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetAuditLogEventsResponse;
    fromJSON(object: any): GetAuditLogEventsResponse;
    toJSON(message: GetAuditLogEventsResponse): unknown;
    create(base?: DeepPartial<GetAuditLogEventsResponse>): GetAuditLogEventsResponse;
    fromPartial(object: DeepPartial<GetAuditLogEventsResponse>): GetAuditLogEventsResponse;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=audit.d.ts.map