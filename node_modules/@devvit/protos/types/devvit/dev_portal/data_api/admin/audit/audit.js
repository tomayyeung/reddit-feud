/**
 * #audit.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { Timestamp } from "../../../../../google/protobuf/timestamp.js";
import { messageTypeRegistry } from "../../../../../typeRegistry.js";
export var AuditLogEventType;
(function (AuditLogEventType) {
    AuditLogEventType[AuditLogEventType["DATA_SUBSCRIPTION_CREATE"] = 0] = "DATA_SUBSCRIPTION_CREATE";
    AuditLogEventType[AuditLogEventType["DATA_SUBSCRIPTION_UPDATE"] = 1] = "DATA_SUBSCRIPTION_UPDATE";
    AuditLogEventType[AuditLogEventType["DATA_SUBSCRIPTION_DELETE"] = 2] = "DATA_SUBSCRIPTION_DELETE";
    AuditLogEventType[AuditLogEventType["DATA_TOKEN_CREATE"] = 3] = "DATA_TOKEN_CREATE";
    AuditLogEventType[AuditLogEventType["DATA_TOKEN_REVOKE"] = 4] = "DATA_TOKEN_REVOKE";
    AuditLogEventType[AuditLogEventType["ORGANIZATION_DELETE"] = 5] = "ORGANIZATION_DELETE";
    AuditLogEventType[AuditLogEventType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(AuditLogEventType || (AuditLogEventType = {}));
export function auditLogEventTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "DATA_SUBSCRIPTION_CREATE":
            return AuditLogEventType.DATA_SUBSCRIPTION_CREATE;
        case 1:
        case "DATA_SUBSCRIPTION_UPDATE":
            return AuditLogEventType.DATA_SUBSCRIPTION_UPDATE;
        case 2:
        case "DATA_SUBSCRIPTION_DELETE":
            return AuditLogEventType.DATA_SUBSCRIPTION_DELETE;
        case 3:
        case "DATA_TOKEN_CREATE":
            return AuditLogEventType.DATA_TOKEN_CREATE;
        case 4:
        case "DATA_TOKEN_REVOKE":
            return AuditLogEventType.DATA_TOKEN_REVOKE;
        case 5:
        case "ORGANIZATION_DELETE":
            return AuditLogEventType.ORGANIZATION_DELETE;
        case -1:
        case "UNRECOGNIZED":
        default:
            return AuditLogEventType.UNRECOGNIZED;
    }
}
export function auditLogEventTypeToJSON(object) {
    switch (object) {
        case AuditLogEventType.DATA_SUBSCRIPTION_CREATE:
            return 0;
        case AuditLogEventType.DATA_SUBSCRIPTION_UPDATE:
            return 1;
        case AuditLogEventType.DATA_SUBSCRIPTION_DELETE:
            return 2;
        case AuditLogEventType.DATA_TOKEN_CREATE:
            return 3;
        case AuditLogEventType.DATA_TOKEN_REVOKE:
            return 4;
        case AuditLogEventType.ORGANIZATION_DELETE:
            return 5;
        case AuditLogEventType.UNRECOGNIZED:
        default:
            return -1;
    }
}
function createBaseAuditLogEvent() {
    return {
        id: "",
        createdAt: undefined,
        userId: "",
        type: 0,
        organizationId: "",
        dataTokenCreatePayload: undefined,
        dataTokenRevokePayload: undefined,
        dataSubscriptionCreatePayload: undefined,
        dataSubscriptionUpdatePayload: undefined,
        dataSubscriptionDeletePayload: undefined,
        username: "",
    };
}
export const AuditLogEvent = {
    $type: "devvit.dev_portal.data_api.admin.audit.AuditLogEvent",
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.createdAt !== undefined) {
            Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(18).fork()).ldelim();
        }
        if (message.userId !== "") {
            writer.uint32(26).string(message.userId);
        }
        if (message.type !== 0) {
            writer.uint32(32).int32(message.type);
        }
        if (message.organizationId !== "") {
            writer.uint32(42).string(message.organizationId);
        }
        if (message.dataTokenCreatePayload !== undefined) {
            DataTokenCreateAuditLogEventPayload.encode(message.dataTokenCreatePayload, writer.uint32(50).fork()).ldelim();
        }
        if (message.dataTokenRevokePayload !== undefined) {
            DataTokenRevokeAuditLogEventPayload.encode(message.dataTokenRevokePayload, writer.uint32(58).fork()).ldelim();
        }
        if (message.dataSubscriptionCreatePayload !== undefined) {
            DataSubscriptionCreateAuditLogEventPayload.encode(message.dataSubscriptionCreatePayload, writer.uint32(66).fork())
                .ldelim();
        }
        if (message.dataSubscriptionUpdatePayload !== undefined) {
            DataSubscriptionUpdateAuditLogEventPayload.encode(message.dataSubscriptionUpdatePayload, writer.uint32(74).fork())
                .ldelim();
        }
        if (message.dataSubscriptionDeletePayload !== undefined) {
            DataSubscriptionDeleteAuditLogEventPayload.encode(message.dataSubscriptionDeletePayload, writer.uint32(82).fork())
                .ldelim();
        }
        if (message.username !== "") {
            writer.uint32(90).string(message.username);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAuditLogEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.type = reader.int32();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.organizationId = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.dataTokenCreatePayload = DataTokenCreateAuditLogEventPayload.decode(reader, reader.uint32());
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.dataTokenRevokePayload = DataTokenRevokeAuditLogEventPayload.decode(reader, reader.uint32());
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.dataSubscriptionCreatePayload = DataSubscriptionCreateAuditLogEventPayload.decode(reader, reader.uint32());
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.dataSubscriptionUpdatePayload = DataSubscriptionUpdateAuditLogEventPayload.decode(reader, reader.uint32());
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.dataSubscriptionDeletePayload = DataSubscriptionDeleteAuditLogEventPayload.decode(reader, reader.uint32());
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.username = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
            type: isSet(object.type) ? auditLogEventTypeFromJSON(object.type) : 0,
            organizationId: isSet(object.organizationId) ? globalThis.String(object.organizationId) : "",
            dataTokenCreatePayload: isSet(object.dataTokenCreatePayload)
                ? DataTokenCreateAuditLogEventPayload.fromJSON(object.dataTokenCreatePayload)
                : undefined,
            dataTokenRevokePayload: isSet(object.dataTokenRevokePayload)
                ? DataTokenRevokeAuditLogEventPayload.fromJSON(object.dataTokenRevokePayload)
                : undefined,
            dataSubscriptionCreatePayload: isSet(object.dataSubscriptionCreatePayload)
                ? DataSubscriptionCreateAuditLogEventPayload.fromJSON(object.dataSubscriptionCreatePayload)
                : undefined,
            dataSubscriptionUpdatePayload: isSet(object.dataSubscriptionUpdatePayload)
                ? DataSubscriptionUpdateAuditLogEventPayload.fromJSON(object.dataSubscriptionUpdatePayload)
                : undefined,
            dataSubscriptionDeletePayload: isSet(object.dataSubscriptionDeletePayload)
                ? DataSubscriptionDeleteAuditLogEventPayload.fromJSON(object.dataSubscriptionDeletePayload)
                : undefined,
            username: isSet(object.username) ? globalThis.String(object.username) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.createdAt !== undefined) {
            obj.createdAt = message.createdAt.toISOString();
        }
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        if (message.type !== 0) {
            obj.type = auditLogEventTypeToJSON(message.type);
        }
        if (message.organizationId !== "") {
            obj.organizationId = message.organizationId;
        }
        if (message.dataTokenCreatePayload !== undefined) {
            obj.dataTokenCreatePayload = DataTokenCreateAuditLogEventPayload.toJSON(message.dataTokenCreatePayload);
        }
        if (message.dataTokenRevokePayload !== undefined) {
            obj.dataTokenRevokePayload = DataTokenRevokeAuditLogEventPayload.toJSON(message.dataTokenRevokePayload);
        }
        if (message.dataSubscriptionCreatePayload !== undefined) {
            obj.dataSubscriptionCreatePayload = DataSubscriptionCreateAuditLogEventPayload.toJSON(message.dataSubscriptionCreatePayload);
        }
        if (message.dataSubscriptionUpdatePayload !== undefined) {
            obj.dataSubscriptionUpdatePayload = DataSubscriptionUpdateAuditLogEventPayload.toJSON(message.dataSubscriptionUpdatePayload);
        }
        if (message.dataSubscriptionDeletePayload !== undefined) {
            obj.dataSubscriptionDeletePayload = DataSubscriptionDeleteAuditLogEventPayload.toJSON(message.dataSubscriptionDeletePayload);
        }
        if (message.username !== "") {
            obj.username = message.username;
        }
        return obj;
    },
    create(base) {
        return AuditLogEvent.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAuditLogEvent();
        message.id = object.id ?? "";
        message.createdAt = object.createdAt ?? undefined;
        message.userId = object.userId ?? "";
        message.type = object.type ?? 0;
        message.organizationId = object.organizationId ?? "";
        message.dataTokenCreatePayload =
            (object.dataTokenCreatePayload !== undefined && object.dataTokenCreatePayload !== null)
                ? DataTokenCreateAuditLogEventPayload.fromPartial(object.dataTokenCreatePayload)
                : undefined;
        message.dataTokenRevokePayload =
            (object.dataTokenRevokePayload !== undefined && object.dataTokenRevokePayload !== null)
                ? DataTokenRevokeAuditLogEventPayload.fromPartial(object.dataTokenRevokePayload)
                : undefined;
        message.dataSubscriptionCreatePayload =
            (object.dataSubscriptionCreatePayload !== undefined && object.dataSubscriptionCreatePayload !== null)
                ? DataSubscriptionCreateAuditLogEventPayload.fromPartial(object.dataSubscriptionCreatePayload)
                : undefined;
        message.dataSubscriptionUpdatePayload =
            (object.dataSubscriptionUpdatePayload !== undefined && object.dataSubscriptionUpdatePayload !== null)
                ? DataSubscriptionUpdateAuditLogEventPayload.fromPartial(object.dataSubscriptionUpdatePayload)
                : undefined;
        message.dataSubscriptionDeletePayload =
            (object.dataSubscriptionDeletePayload !== undefined && object.dataSubscriptionDeletePayload !== null)
                ? DataSubscriptionDeleteAuditLogEventPayload.fromPartial(object.dataSubscriptionDeletePayload)
                : undefined;
        message.username = object.username ?? "";
        return message;
    },
};
messageTypeRegistry.set(AuditLogEvent.$type, AuditLogEvent);
function createBaseDataTokenCreateAuditLogEventPayload() {
    return { tokenId: "", expiration: undefined };
}
export const DataTokenCreateAuditLogEventPayload = {
    $type: "devvit.dev_portal.data_api.admin.audit.DataTokenCreateAuditLogEventPayload",
    encode(message, writer = _m0.Writer.create()) {
        if (message.tokenId !== "") {
            writer.uint32(10).string(message.tokenId);
        }
        if (message.expiration !== undefined) {
            Timestamp.encode(toTimestamp(message.expiration), writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDataTokenCreateAuditLogEventPayload();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.tokenId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.expiration = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            tokenId: isSet(object.tokenId) ? globalThis.String(object.tokenId) : "",
            expiration: isSet(object.expiration) ? fromJsonTimestamp(object.expiration) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.tokenId !== "") {
            obj.tokenId = message.tokenId;
        }
        if (message.expiration !== undefined) {
            obj.expiration = message.expiration.toISOString();
        }
        return obj;
    },
    create(base) {
        return DataTokenCreateAuditLogEventPayload.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDataTokenCreateAuditLogEventPayload();
        message.tokenId = object.tokenId ?? "";
        message.expiration = object.expiration ?? undefined;
        return message;
    },
};
messageTypeRegistry.set(DataTokenCreateAuditLogEventPayload.$type, DataTokenCreateAuditLogEventPayload);
function createBaseDataTokenRevokeAuditLogEventPayload() {
    return { tokenId: "" };
}
export const DataTokenRevokeAuditLogEventPayload = {
    $type: "devvit.dev_portal.data_api.admin.audit.DataTokenRevokeAuditLogEventPayload",
    encode(message, writer = _m0.Writer.create()) {
        if (message.tokenId !== "") {
            writer.uint32(10).string(message.tokenId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDataTokenRevokeAuditLogEventPayload();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.tokenId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { tokenId: isSet(object.tokenId) ? globalThis.String(object.tokenId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.tokenId !== "") {
            obj.tokenId = message.tokenId;
        }
        return obj;
    },
    create(base) {
        return DataTokenRevokeAuditLogEventPayload.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDataTokenRevokeAuditLogEventPayload();
        message.tokenId = object.tokenId ?? "";
        return message;
    },
};
messageTypeRegistry.set(DataTokenRevokeAuditLogEventPayload.$type, DataTokenRevokeAuditLogEventPayload);
function createBaseDataSubscriptionCreateAuditLogEventPayload() {
    return { subscriptionId: "" };
}
export const DataSubscriptionCreateAuditLogEventPayload = {
    $type: "devvit.dev_portal.data_api.admin.audit.DataSubscriptionCreateAuditLogEventPayload",
    encode(message, writer = _m0.Writer.create()) {
        if (message.subscriptionId !== "") {
            writer.uint32(10).string(message.subscriptionId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDataSubscriptionCreateAuditLogEventPayload();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.subscriptionId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { subscriptionId: isSet(object.subscriptionId) ? globalThis.String(object.subscriptionId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.subscriptionId !== "") {
            obj.subscriptionId = message.subscriptionId;
        }
        return obj;
    },
    create(base) {
        return DataSubscriptionCreateAuditLogEventPayload.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDataSubscriptionCreateAuditLogEventPayload();
        message.subscriptionId = object.subscriptionId ?? "";
        return message;
    },
};
messageTypeRegistry.set(DataSubscriptionCreateAuditLogEventPayload.$type, DataSubscriptionCreateAuditLogEventPayload);
function createBaseDataSubscriptionUpdateAuditLogEventPayload() {
    return { subscriptionId: "" };
}
export const DataSubscriptionUpdateAuditLogEventPayload = {
    $type: "devvit.dev_portal.data_api.admin.audit.DataSubscriptionUpdateAuditLogEventPayload",
    encode(message, writer = _m0.Writer.create()) {
        if (message.subscriptionId !== "") {
            writer.uint32(10).string(message.subscriptionId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDataSubscriptionUpdateAuditLogEventPayload();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.subscriptionId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { subscriptionId: isSet(object.subscriptionId) ? globalThis.String(object.subscriptionId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.subscriptionId !== "") {
            obj.subscriptionId = message.subscriptionId;
        }
        return obj;
    },
    create(base) {
        return DataSubscriptionUpdateAuditLogEventPayload.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDataSubscriptionUpdateAuditLogEventPayload();
        message.subscriptionId = object.subscriptionId ?? "";
        return message;
    },
};
messageTypeRegistry.set(DataSubscriptionUpdateAuditLogEventPayload.$type, DataSubscriptionUpdateAuditLogEventPayload);
function createBaseDataSubscriptionDeleteAuditLogEventPayload() {
    return { subscriptionId: "" };
}
export const DataSubscriptionDeleteAuditLogEventPayload = {
    $type: "devvit.dev_portal.data_api.admin.audit.DataSubscriptionDeleteAuditLogEventPayload",
    encode(message, writer = _m0.Writer.create()) {
        if (message.subscriptionId !== "") {
            writer.uint32(10).string(message.subscriptionId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDataSubscriptionDeleteAuditLogEventPayload();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.subscriptionId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { subscriptionId: isSet(object.subscriptionId) ? globalThis.String(object.subscriptionId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.subscriptionId !== "") {
            obj.subscriptionId = message.subscriptionId;
        }
        return obj;
    },
    create(base) {
        return DataSubscriptionDeleteAuditLogEventPayload.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDataSubscriptionDeleteAuditLogEventPayload();
        message.subscriptionId = object.subscriptionId ?? "";
        return message;
    },
};
messageTypeRegistry.set(DataSubscriptionDeleteAuditLogEventPayload.$type, DataSubscriptionDeleteAuditLogEventPayload);
function createBaseGetAuditLogEventsRequest() {
    return { organizationName: "" };
}
export const GetAuditLogEventsRequest = {
    $type: "devvit.dev_portal.data_api.admin.audit.GetAuditLogEventsRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.organizationName !== "") {
            writer.uint32(10).string(message.organizationName);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetAuditLogEventsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.organizationName = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { organizationName: isSet(object.organizationName) ? globalThis.String(object.organizationName) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.organizationName !== "") {
            obj.organizationName = message.organizationName;
        }
        return obj;
    },
    create(base) {
        return GetAuditLogEventsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetAuditLogEventsRequest();
        message.organizationName = object.organizationName ?? "";
        return message;
    },
};
messageTypeRegistry.set(GetAuditLogEventsRequest.$type, GetAuditLogEventsRequest);
function createBaseGetAuditLogEventsResponse() {
    return { events: [] };
}
export const GetAuditLogEventsResponse = {
    $type: "devvit.dev_portal.data_api.admin.audit.GetAuditLogEventsResponse",
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.events) {
            AuditLogEvent.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetAuditLogEventsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.events.push(AuditLogEvent.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            events: globalThis.Array.isArray(object?.events) ? object.events.map((e) => AuditLogEvent.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.events?.length) {
            obj.events = message.events.map((e) => AuditLogEvent.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return GetAuditLogEventsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetAuditLogEventsResponse();
        message.events = object.events?.map((e) => AuditLogEvent.fromPartial(e)) || [];
        return message;
    },
};
messageTypeRegistry.set(GetAuditLogEventsResponse.$type, GetAuditLogEventsResponse);
function toTimestamp(date) {
    const seconds = Math.trunc(date.getTime() / 1000);
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (t.seconds || 0) * 1000;
    millis += (t.nanos || 0) / 1000000;
    return new globalThis.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof globalThis.Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new globalThis.Date(o);
    }
    else {
        return fromTimestamp(Timestamp.fromJSON(o));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
