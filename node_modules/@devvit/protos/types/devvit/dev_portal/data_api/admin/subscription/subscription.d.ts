/**
 * #subscription.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { DataSubscription } from "../../../../data/api/v1alpha/admin.js";
import { DataTier, FirehoseEvent } from "../../../../options/options.js";
import { SubredditRating } from "../../../../reddit/v2alpha/subredditv2.js";
/** region Subscription messages */
export interface CreateDataSubscriptionRequest {
    tier: DataTier;
    events: FirehoseEvent[];
    subreddits: string[];
    subredditRatings: SubredditRating[];
    customer: string;
    name: string;
    description?: string | undefined;
}
export interface CreateDataSubscriptionResponse {
    subscription?: DataSubscription | undefined;
}
export interface GetDataSubscriptionByIdRequest {
    subscriptionId: string;
}
export interface GetDataSubscriptionByIdResponse {
    subscription?: DataSubscription | undefined;
}
export interface DataSubscriptionSubredditInfo {
    /**
     * t5_ subreddit ID
     * @example "t5_2qh1o"
     */
    id: string;
    /**
     * Subreddit display name - not prefixed with r/
     * @example "aww"
     */
    name: string;
    /** Subreddit icon URL */
    icon: string;
    /** Whether the subreddit is NSFW */
    isNsfw: boolean;
}
/** Data subscription for UI consumption that includes hydrated subreddit info */
export interface UIDataSubscription {
    /** Subscription ID */
    id: string;
    /** Subscription name */
    name: string;
    /** Subscription description */
    description?: string | undefined;
    /** Firehose events types the subscription is subscribed to */
    events: FirehoseEvent[];
    /** Subreddits the subscription is subscribed to */
    subreddits: DataSubscriptionSubredditInfo[];
    /** Subreddit ratings the subscription is subscribed to */
    subredditRatings: SubredditRating[];
}
export interface GetDataSubscriptionsByOrganizationNameRequest {
    organizationName: string;
}
export interface GetDataSubscriptionsByOrganizationNameResponse {
    subscriptions: UIDataSubscription[];
}
export interface UpdateDataSubscriptionRequest {
    /** Id of the subscription to update */
    subscriptionId: string;
    /** New name of the subscription */
    name?: string | undefined;
    /** New description of the subscription */
    description?: string | undefined;
    /** New data tier of the subscription. */
    tier?: DataTier | undefined;
    /** New events. Will overwrite the array of existing events. */
    events: FirehoseEvent[];
    /** New subreddits. Will overwrite the array of existing subreddits. */
    subreddits: string[];
    /** New subreddit ratings. Will overwrite the array of existing subreddit ratings. */
    subredditRatings: SubredditRating[];
}
export interface UpdateDataSubscriptionResponse {
    subscription?: DataSubscription | undefined;
}
export interface DeleteDataSubscriptionRequest {
    subscriptionId: string;
}
export interface DeleteDataSubscriptionResponse {
}
export declare const CreateDataSubscriptionRequest: {
    $type: "devvit.dev_portal.data_api.admin.subscription.CreateDataSubscriptionRequest";
    encode(message: CreateDataSubscriptionRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CreateDataSubscriptionRequest;
    fromJSON(object: any): CreateDataSubscriptionRequest;
    toJSON(message: CreateDataSubscriptionRequest): unknown;
    create(base?: DeepPartial<CreateDataSubscriptionRequest>): CreateDataSubscriptionRequest;
    fromPartial(object: DeepPartial<CreateDataSubscriptionRequest>): CreateDataSubscriptionRequest;
};
export declare const CreateDataSubscriptionResponse: {
    $type: "devvit.dev_portal.data_api.admin.subscription.CreateDataSubscriptionResponse";
    encode(message: CreateDataSubscriptionResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CreateDataSubscriptionResponse;
    fromJSON(object: any): CreateDataSubscriptionResponse;
    toJSON(message: CreateDataSubscriptionResponse): unknown;
    create(base?: DeepPartial<CreateDataSubscriptionResponse>): CreateDataSubscriptionResponse;
    fromPartial(object: DeepPartial<CreateDataSubscriptionResponse>): CreateDataSubscriptionResponse;
};
export declare const GetDataSubscriptionByIdRequest: {
    $type: "devvit.dev_portal.data_api.admin.subscription.GetDataSubscriptionByIdRequest";
    encode(message: GetDataSubscriptionByIdRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetDataSubscriptionByIdRequest;
    fromJSON(object: any): GetDataSubscriptionByIdRequest;
    toJSON(message: GetDataSubscriptionByIdRequest): unknown;
    create(base?: DeepPartial<GetDataSubscriptionByIdRequest>): GetDataSubscriptionByIdRequest;
    fromPartial(object: DeepPartial<GetDataSubscriptionByIdRequest>): GetDataSubscriptionByIdRequest;
};
export declare const GetDataSubscriptionByIdResponse: {
    $type: "devvit.dev_portal.data_api.admin.subscription.GetDataSubscriptionByIdResponse";
    encode(message: GetDataSubscriptionByIdResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetDataSubscriptionByIdResponse;
    fromJSON(object: any): GetDataSubscriptionByIdResponse;
    toJSON(message: GetDataSubscriptionByIdResponse): unknown;
    create(base?: DeepPartial<GetDataSubscriptionByIdResponse>): GetDataSubscriptionByIdResponse;
    fromPartial(object: DeepPartial<GetDataSubscriptionByIdResponse>): GetDataSubscriptionByIdResponse;
};
export declare const DataSubscriptionSubredditInfo: {
    $type: "devvit.dev_portal.data_api.admin.subscription.DataSubscriptionSubredditInfo";
    encode(message: DataSubscriptionSubredditInfo, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DataSubscriptionSubredditInfo;
    fromJSON(object: any): DataSubscriptionSubredditInfo;
    toJSON(message: DataSubscriptionSubredditInfo): unknown;
    create(base?: DeepPartial<DataSubscriptionSubredditInfo>): DataSubscriptionSubredditInfo;
    fromPartial(object: DeepPartial<DataSubscriptionSubredditInfo>): DataSubscriptionSubredditInfo;
};
export declare const UIDataSubscription: {
    $type: "devvit.dev_portal.data_api.admin.subscription.UIDataSubscription";
    encode(message: UIDataSubscription, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UIDataSubscription;
    fromJSON(object: any): UIDataSubscription;
    toJSON(message: UIDataSubscription): unknown;
    create(base?: DeepPartial<UIDataSubscription>): UIDataSubscription;
    fromPartial(object: DeepPartial<UIDataSubscription>): UIDataSubscription;
};
export declare const GetDataSubscriptionsByOrganizationNameRequest: {
    $type: "devvit.dev_portal.data_api.admin.subscription.GetDataSubscriptionsByOrganizationNameRequest";
    encode(message: GetDataSubscriptionsByOrganizationNameRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetDataSubscriptionsByOrganizationNameRequest;
    fromJSON(object: any): GetDataSubscriptionsByOrganizationNameRequest;
    toJSON(message: GetDataSubscriptionsByOrganizationNameRequest): unknown;
    create(base?: DeepPartial<GetDataSubscriptionsByOrganizationNameRequest>): GetDataSubscriptionsByOrganizationNameRequest;
    fromPartial(object: DeepPartial<GetDataSubscriptionsByOrganizationNameRequest>): GetDataSubscriptionsByOrganizationNameRequest;
};
export declare const GetDataSubscriptionsByOrganizationNameResponse: {
    $type: "devvit.dev_portal.data_api.admin.subscription.GetDataSubscriptionsByOrganizationNameResponse";
    encode(message: GetDataSubscriptionsByOrganizationNameResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetDataSubscriptionsByOrganizationNameResponse;
    fromJSON(object: any): GetDataSubscriptionsByOrganizationNameResponse;
    toJSON(message: GetDataSubscriptionsByOrganizationNameResponse): unknown;
    create(base?: DeepPartial<GetDataSubscriptionsByOrganizationNameResponse>): GetDataSubscriptionsByOrganizationNameResponse;
    fromPartial(object: DeepPartial<GetDataSubscriptionsByOrganizationNameResponse>): GetDataSubscriptionsByOrganizationNameResponse;
};
export declare const UpdateDataSubscriptionRequest: {
    $type: "devvit.dev_portal.data_api.admin.subscription.UpdateDataSubscriptionRequest";
    encode(message: UpdateDataSubscriptionRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UpdateDataSubscriptionRequest;
    fromJSON(object: any): UpdateDataSubscriptionRequest;
    toJSON(message: UpdateDataSubscriptionRequest): unknown;
    create(base?: DeepPartial<UpdateDataSubscriptionRequest>): UpdateDataSubscriptionRequest;
    fromPartial(object: DeepPartial<UpdateDataSubscriptionRequest>): UpdateDataSubscriptionRequest;
};
export declare const UpdateDataSubscriptionResponse: {
    $type: "devvit.dev_portal.data_api.admin.subscription.UpdateDataSubscriptionResponse";
    encode(message: UpdateDataSubscriptionResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UpdateDataSubscriptionResponse;
    fromJSON(object: any): UpdateDataSubscriptionResponse;
    toJSON(message: UpdateDataSubscriptionResponse): unknown;
    create(base?: DeepPartial<UpdateDataSubscriptionResponse>): UpdateDataSubscriptionResponse;
    fromPartial(object: DeepPartial<UpdateDataSubscriptionResponse>): UpdateDataSubscriptionResponse;
};
export declare const DeleteDataSubscriptionRequest: {
    $type: "devvit.dev_portal.data_api.admin.subscription.DeleteDataSubscriptionRequest";
    encode(message: DeleteDataSubscriptionRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DeleteDataSubscriptionRequest;
    fromJSON(object: any): DeleteDataSubscriptionRequest;
    toJSON(message: DeleteDataSubscriptionRequest): unknown;
    create(base?: DeepPartial<DeleteDataSubscriptionRequest>): DeleteDataSubscriptionRequest;
    fromPartial(object: DeepPartial<DeleteDataSubscriptionRequest>): DeleteDataSubscriptionRequest;
};
export declare const DeleteDataSubscriptionResponse: {
    $type: "devvit.dev_portal.data_api.admin.subscription.DeleteDataSubscriptionResponse";
    encode(_: DeleteDataSubscriptionResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DeleteDataSubscriptionResponse;
    fromJSON(_: any): DeleteDataSubscriptionResponse;
    toJSON(_: DeleteDataSubscriptionResponse): unknown;
    create(base?: DeepPartial<DeleteDataSubscriptionResponse>): DeleteDataSubscriptionResponse;
    fromPartial(_: DeepPartial<DeleteDataSubscriptionResponse>): DeleteDataSubscriptionResponse;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=subscription.d.ts.map