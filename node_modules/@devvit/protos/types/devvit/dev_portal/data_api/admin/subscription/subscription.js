/**
 * #subscription.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { messageTypeRegistry } from "../../../../../typeRegistry.js";
import { DataSubscription } from "../../../../data/api/v1alpha/admin.js";
import { dataTierFromJSON, dataTierToJSON, firehoseEventFromJSON, firehoseEventToJSON, } from "../../../../options/options.js";
import { subredditRatingFromJSON, subredditRatingToJSON, } from "../../../../reddit/v2alpha/subredditv2.js";
function createBaseCreateDataSubscriptionRequest() {
    return { tier: 0, events: [], subreddits: [], subredditRatings: [], customer: "", name: "", description: undefined };
}
export const CreateDataSubscriptionRequest = {
    $type: "devvit.dev_portal.data_api.admin.subscription.CreateDataSubscriptionRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.tier !== 0) {
            writer.uint32(8).int32(message.tier);
        }
        writer.uint32(18).fork();
        for (const v of message.events) {
            writer.int32(v);
        }
        writer.ldelim();
        for (const v of message.subreddits) {
            writer.uint32(26).string(v);
        }
        writer.uint32(34).fork();
        for (const v of message.subredditRatings) {
            writer.int32(v);
        }
        writer.ldelim();
        if (message.customer !== "") {
            writer.uint32(42).string(message.customer);
        }
        if (message.name !== "") {
            writer.uint32(50).string(message.name);
        }
        if (message.description !== undefined) {
            writer.uint32(58).string(message.description);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateDataSubscriptionRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.tier = reader.int32();
                    continue;
                case 2:
                    if (tag === 16) {
                        message.events.push(reader.int32());
                        continue;
                    }
                    if (tag === 18) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.events.push(reader.int32());
                        }
                        continue;
                    }
                    break;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.subreddits.push(reader.string());
                    continue;
                case 4:
                    if (tag === 32) {
                        message.subredditRatings.push(reader.int32());
                        continue;
                    }
                    if (tag === 34) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.subredditRatings.push(reader.int32());
                        }
                        continue;
                    }
                    break;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.customer = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            tier: isSet(object.tier) ? dataTierFromJSON(object.tier) : 0,
            events: globalThis.Array.isArray(object?.events) ? object.events.map((e) => firehoseEventFromJSON(e)) : [],
            subreddits: globalThis.Array.isArray(object?.subreddits)
                ? object.subreddits.map((e) => globalThis.String(e))
                : [],
            subredditRatings: globalThis.Array.isArray(object?.subredditRatings)
                ? object.subredditRatings.map((e) => subredditRatingFromJSON(e))
                : [],
            customer: isSet(object.customer) ? globalThis.String(object.customer) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.tier !== 0) {
            obj.tier = dataTierToJSON(message.tier);
        }
        if (message.events?.length) {
            obj.events = message.events.map((e) => firehoseEventToJSON(e));
        }
        if (message.subreddits?.length) {
            obj.subreddits = message.subreddits;
        }
        if (message.subredditRatings?.length) {
            obj.subredditRatings = message.subredditRatings.map((e) => subredditRatingToJSON(e));
        }
        if (message.customer !== "") {
            obj.customer = message.customer;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.description !== undefined) {
            obj.description = message.description;
        }
        return obj;
    },
    create(base) {
        return CreateDataSubscriptionRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCreateDataSubscriptionRequest();
        message.tier = object.tier ?? 0;
        message.events = object.events?.map((e) => e) || [];
        message.subreddits = object.subreddits?.map((e) => e) || [];
        message.subredditRatings = object.subredditRatings?.map((e) => e) || [];
        message.customer = object.customer ?? "";
        message.name = object.name ?? "";
        message.description = object.description ?? undefined;
        return message;
    },
};
messageTypeRegistry.set(CreateDataSubscriptionRequest.$type, CreateDataSubscriptionRequest);
function createBaseCreateDataSubscriptionResponse() {
    return { subscription: undefined };
}
export const CreateDataSubscriptionResponse = {
    $type: "devvit.dev_portal.data_api.admin.subscription.CreateDataSubscriptionResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.subscription !== undefined) {
            DataSubscription.encode(message.subscription, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateDataSubscriptionResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.subscription = DataSubscription.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { subscription: isSet(object.subscription) ? DataSubscription.fromJSON(object.subscription) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.subscription !== undefined) {
            obj.subscription = DataSubscription.toJSON(message.subscription);
        }
        return obj;
    },
    create(base) {
        return CreateDataSubscriptionResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCreateDataSubscriptionResponse();
        message.subscription = (object.subscription !== undefined && object.subscription !== null)
            ? DataSubscription.fromPartial(object.subscription)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set(CreateDataSubscriptionResponse.$type, CreateDataSubscriptionResponse);
function createBaseGetDataSubscriptionByIdRequest() {
    return { subscriptionId: "" };
}
export const GetDataSubscriptionByIdRequest = {
    $type: "devvit.dev_portal.data_api.admin.subscription.GetDataSubscriptionByIdRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.subscriptionId !== "") {
            writer.uint32(10).string(message.subscriptionId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDataSubscriptionByIdRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.subscriptionId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { subscriptionId: isSet(object.subscriptionId) ? globalThis.String(object.subscriptionId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.subscriptionId !== "") {
            obj.subscriptionId = message.subscriptionId;
        }
        return obj;
    },
    create(base) {
        return GetDataSubscriptionByIdRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetDataSubscriptionByIdRequest();
        message.subscriptionId = object.subscriptionId ?? "";
        return message;
    },
};
messageTypeRegistry.set(GetDataSubscriptionByIdRequest.$type, GetDataSubscriptionByIdRequest);
function createBaseGetDataSubscriptionByIdResponse() {
    return { subscription: undefined };
}
export const GetDataSubscriptionByIdResponse = {
    $type: "devvit.dev_portal.data_api.admin.subscription.GetDataSubscriptionByIdResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.subscription !== undefined) {
            DataSubscription.encode(message.subscription, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDataSubscriptionByIdResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.subscription = DataSubscription.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { subscription: isSet(object.subscription) ? DataSubscription.fromJSON(object.subscription) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.subscription !== undefined) {
            obj.subscription = DataSubscription.toJSON(message.subscription);
        }
        return obj;
    },
    create(base) {
        return GetDataSubscriptionByIdResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetDataSubscriptionByIdResponse();
        message.subscription = (object.subscription !== undefined && object.subscription !== null)
            ? DataSubscription.fromPartial(object.subscription)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set(GetDataSubscriptionByIdResponse.$type, GetDataSubscriptionByIdResponse);
function createBaseDataSubscriptionSubredditInfo() {
    return { id: "", name: "", icon: "", isNsfw: false };
}
export const DataSubscriptionSubredditInfo = {
    $type: "devvit.dev_portal.data_api.admin.subscription.DataSubscriptionSubredditInfo",
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.icon !== "") {
            writer.uint32(26).string(message.icon);
        }
        if (message.isNsfw !== false) {
            writer.uint32(32).bool(message.isNsfw);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDataSubscriptionSubredditInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.icon = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.isNsfw = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            icon: isSet(object.icon) ? globalThis.String(object.icon) : "",
            isNsfw: isSet(object.isNsfw) ? globalThis.Boolean(object.isNsfw) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.icon !== "") {
            obj.icon = message.icon;
        }
        if (message.isNsfw !== false) {
            obj.isNsfw = message.isNsfw;
        }
        return obj;
    },
    create(base) {
        return DataSubscriptionSubredditInfo.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDataSubscriptionSubredditInfo();
        message.id = object.id ?? "";
        message.name = object.name ?? "";
        message.icon = object.icon ?? "";
        message.isNsfw = object.isNsfw ?? false;
        return message;
    },
};
messageTypeRegistry.set(DataSubscriptionSubredditInfo.$type, DataSubscriptionSubredditInfo);
function createBaseUIDataSubscription() {
    return { id: "", name: "", description: undefined, events: [], subreddits: [], subredditRatings: [] };
}
export const UIDataSubscription = {
    $type: "devvit.dev_portal.data_api.admin.subscription.UIDataSubscription",
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.description !== undefined) {
            writer.uint32(26).string(message.description);
        }
        writer.uint32(34).fork();
        for (const v of message.events) {
            writer.int32(v);
        }
        writer.ldelim();
        for (const v of message.subreddits) {
            DataSubscriptionSubredditInfo.encode(v, writer.uint32(42).fork()).ldelim();
        }
        writer.uint32(50).fork();
        for (const v of message.subredditRatings) {
            writer.int32(v);
        }
        writer.ldelim();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUIDataSubscription();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 4:
                    if (tag === 32) {
                        message.events.push(reader.int32());
                        continue;
                    }
                    if (tag === 34) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.events.push(reader.int32());
                        }
                        continue;
                    }
                    break;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.subreddits.push(DataSubscriptionSubredditInfo.decode(reader, reader.uint32()));
                    continue;
                case 6:
                    if (tag === 48) {
                        message.subredditRatings.push(reader.int32());
                        continue;
                    }
                    if (tag === 50) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.subredditRatings.push(reader.int32());
                        }
                        continue;
                    }
                    break;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : undefined,
            events: globalThis.Array.isArray(object?.events) ? object.events.map((e) => firehoseEventFromJSON(e)) : [],
            subreddits: globalThis.Array.isArray(object?.subreddits)
                ? object.subreddits.map((e) => DataSubscriptionSubredditInfo.fromJSON(e))
                : [],
            subredditRatings: globalThis.Array.isArray(object?.subredditRatings)
                ? object.subredditRatings.map((e) => subredditRatingFromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.description !== undefined) {
            obj.description = message.description;
        }
        if (message.events?.length) {
            obj.events = message.events.map((e) => firehoseEventToJSON(e));
        }
        if (message.subreddits?.length) {
            obj.subreddits = message.subreddits.map((e) => DataSubscriptionSubredditInfo.toJSON(e));
        }
        if (message.subredditRatings?.length) {
            obj.subredditRatings = message.subredditRatings.map((e) => subredditRatingToJSON(e));
        }
        return obj;
    },
    create(base) {
        return UIDataSubscription.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUIDataSubscription();
        message.id = object.id ?? "";
        message.name = object.name ?? "";
        message.description = object.description ?? undefined;
        message.events = object.events?.map((e) => e) || [];
        message.subreddits = object.subreddits?.map((e) => DataSubscriptionSubredditInfo.fromPartial(e)) || [];
        message.subredditRatings = object.subredditRatings?.map((e) => e) || [];
        return message;
    },
};
messageTypeRegistry.set(UIDataSubscription.$type, UIDataSubscription);
function createBaseGetDataSubscriptionsByOrganizationNameRequest() {
    return { organizationName: "" };
}
export const GetDataSubscriptionsByOrganizationNameRequest = {
    $type: "devvit.dev_portal.data_api.admin.subscription.GetDataSubscriptionsByOrganizationNameRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.organizationName !== "") {
            writer.uint32(10).string(message.organizationName);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDataSubscriptionsByOrganizationNameRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.organizationName = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { organizationName: isSet(object.organizationName) ? globalThis.String(object.organizationName) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.organizationName !== "") {
            obj.organizationName = message.organizationName;
        }
        return obj;
    },
    create(base) {
        return GetDataSubscriptionsByOrganizationNameRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetDataSubscriptionsByOrganizationNameRequest();
        message.organizationName = object.organizationName ?? "";
        return message;
    },
};
messageTypeRegistry.set(GetDataSubscriptionsByOrganizationNameRequest.$type, GetDataSubscriptionsByOrganizationNameRequest);
function createBaseGetDataSubscriptionsByOrganizationNameResponse() {
    return { subscriptions: [] };
}
export const GetDataSubscriptionsByOrganizationNameResponse = {
    $type: "devvit.dev_portal.data_api.admin.subscription.GetDataSubscriptionsByOrganizationNameResponse",
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.subscriptions) {
            UIDataSubscription.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDataSubscriptionsByOrganizationNameResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.subscriptions.push(UIDataSubscription.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            subscriptions: globalThis.Array.isArray(object?.subscriptions)
                ? object.subscriptions.map((e) => UIDataSubscription.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.subscriptions?.length) {
            obj.subscriptions = message.subscriptions.map((e) => UIDataSubscription.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return GetDataSubscriptionsByOrganizationNameResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetDataSubscriptionsByOrganizationNameResponse();
        message.subscriptions = object.subscriptions?.map((e) => UIDataSubscription.fromPartial(e)) || [];
        return message;
    },
};
messageTypeRegistry.set(GetDataSubscriptionsByOrganizationNameResponse.$type, GetDataSubscriptionsByOrganizationNameResponse);
function createBaseUpdateDataSubscriptionRequest() {
    return {
        subscriptionId: "",
        name: undefined,
        description: undefined,
        tier: undefined,
        events: [],
        subreddits: [],
        subredditRatings: [],
    };
}
export const UpdateDataSubscriptionRequest = {
    $type: "devvit.dev_portal.data_api.admin.subscription.UpdateDataSubscriptionRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.subscriptionId !== "") {
            writer.uint32(10).string(message.subscriptionId);
        }
        if (message.name !== undefined) {
            writer.uint32(18).string(message.name);
        }
        if (message.description !== undefined) {
            writer.uint32(26).string(message.description);
        }
        if (message.tier !== undefined) {
            writer.uint32(32).int32(message.tier);
        }
        writer.uint32(42).fork();
        for (const v of message.events) {
            writer.int32(v);
        }
        writer.ldelim();
        for (const v of message.subreddits) {
            writer.uint32(50).string(v);
        }
        writer.uint32(58).fork();
        for (const v of message.subredditRatings) {
            writer.int32(v);
        }
        writer.ldelim();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateDataSubscriptionRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.subscriptionId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.tier = reader.int32();
                    continue;
                case 5:
                    if (tag === 40) {
                        message.events.push(reader.int32());
                        continue;
                    }
                    if (tag === 42) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.events.push(reader.int32());
                        }
                        continue;
                    }
                    break;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.subreddits.push(reader.string());
                    continue;
                case 7:
                    if (tag === 56) {
                        message.subredditRatings.push(reader.int32());
                        continue;
                    }
                    if (tag === 58) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.subredditRatings.push(reader.int32());
                        }
                        continue;
                    }
                    break;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            subscriptionId: isSet(object.subscriptionId) ? globalThis.String(object.subscriptionId) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : undefined,
            description: isSet(object.description) ? globalThis.String(object.description) : undefined,
            tier: isSet(object.tier) ? dataTierFromJSON(object.tier) : undefined,
            events: globalThis.Array.isArray(object?.events) ? object.events.map((e) => firehoseEventFromJSON(e)) : [],
            subreddits: globalThis.Array.isArray(object?.subreddits)
                ? object.subreddits.map((e) => globalThis.String(e))
                : [],
            subredditRatings: globalThis.Array.isArray(object?.subredditRatings)
                ? object.subredditRatings.map((e) => subredditRatingFromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.subscriptionId !== "") {
            obj.subscriptionId = message.subscriptionId;
        }
        if (message.name !== undefined) {
            obj.name = message.name;
        }
        if (message.description !== undefined) {
            obj.description = message.description;
        }
        if (message.tier !== undefined) {
            obj.tier = dataTierToJSON(message.tier);
        }
        if (message.events?.length) {
            obj.events = message.events.map((e) => firehoseEventToJSON(e));
        }
        if (message.subreddits?.length) {
            obj.subreddits = message.subreddits;
        }
        if (message.subredditRatings?.length) {
            obj.subredditRatings = message.subredditRatings.map((e) => subredditRatingToJSON(e));
        }
        return obj;
    },
    create(base) {
        return UpdateDataSubscriptionRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateDataSubscriptionRequest();
        message.subscriptionId = object.subscriptionId ?? "";
        message.name = object.name ?? undefined;
        message.description = object.description ?? undefined;
        message.tier = object.tier ?? undefined;
        message.events = object.events?.map((e) => e) || [];
        message.subreddits = object.subreddits?.map((e) => e) || [];
        message.subredditRatings = object.subredditRatings?.map((e) => e) || [];
        return message;
    },
};
messageTypeRegistry.set(UpdateDataSubscriptionRequest.$type, UpdateDataSubscriptionRequest);
function createBaseUpdateDataSubscriptionResponse() {
    return { subscription: undefined };
}
export const UpdateDataSubscriptionResponse = {
    $type: "devvit.dev_portal.data_api.admin.subscription.UpdateDataSubscriptionResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.subscription !== undefined) {
            DataSubscription.encode(message.subscription, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateDataSubscriptionResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.subscription = DataSubscription.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { subscription: isSet(object.subscription) ? DataSubscription.fromJSON(object.subscription) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.subscription !== undefined) {
            obj.subscription = DataSubscription.toJSON(message.subscription);
        }
        return obj;
    },
    create(base) {
        return UpdateDataSubscriptionResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUpdateDataSubscriptionResponse();
        message.subscription = (object.subscription !== undefined && object.subscription !== null)
            ? DataSubscription.fromPartial(object.subscription)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set(UpdateDataSubscriptionResponse.$type, UpdateDataSubscriptionResponse);
function createBaseDeleteDataSubscriptionRequest() {
    return { subscriptionId: "" };
}
export const DeleteDataSubscriptionRequest = {
    $type: "devvit.dev_portal.data_api.admin.subscription.DeleteDataSubscriptionRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.subscriptionId !== "") {
            writer.uint32(10).string(message.subscriptionId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeleteDataSubscriptionRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.subscriptionId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { subscriptionId: isSet(object.subscriptionId) ? globalThis.String(object.subscriptionId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.subscriptionId !== "") {
            obj.subscriptionId = message.subscriptionId;
        }
        return obj;
    },
    create(base) {
        return DeleteDataSubscriptionRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeleteDataSubscriptionRequest();
        message.subscriptionId = object.subscriptionId ?? "";
        return message;
    },
};
messageTypeRegistry.set(DeleteDataSubscriptionRequest.$type, DeleteDataSubscriptionRequest);
function createBaseDeleteDataSubscriptionResponse() {
    return {};
}
export const DeleteDataSubscriptionResponse = {
    $type: "devvit.dev_portal.data_api.admin.subscription.DeleteDataSubscriptionResponse",
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeleteDataSubscriptionResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return DeleteDataSubscriptionResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseDeleteDataSubscriptionResponse();
        return message;
    },
};
messageTypeRegistry.set(DeleteDataSubscriptionResponse.$type, DeleteDataSubscriptionResponse);
function isSet(value) {
    return value !== null && value !== undefined;
}
