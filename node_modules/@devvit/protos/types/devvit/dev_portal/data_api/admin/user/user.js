/**
 * #user.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { messageTypeRegistry } from "../../../../../typeRegistry.js";
function createBaseUser() {
    return { t2id: "", orgId: "", username: "" };
}
export const User = {
    $type: "devvit.dev_portal.data_api.admin.user.User",
    encode(message, writer = _m0.Writer.create()) {
        if (message.t2id !== "") {
            writer.uint32(10).string(message.t2id);
        }
        if (message.orgId !== "") {
            writer.uint32(18).string(message.orgId);
        }
        if (message.username !== "") {
            writer.uint32(26).string(message.username);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUser();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.t2id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.orgId = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.username = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            t2id: isSet(object.t2id) ? globalThis.String(object.t2id) : "",
            orgId: isSet(object.orgId) ? globalThis.String(object.orgId) : "",
            username: isSet(object.username) ? globalThis.String(object.username) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.t2id !== "") {
            obj.t2id = message.t2id;
        }
        if (message.orgId !== "") {
            obj.orgId = message.orgId;
        }
        if (message.username !== "") {
            obj.username = message.username;
        }
        return obj;
    },
    create(base) {
        return User.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUser();
        message.t2id = object.t2id ?? "";
        message.orgId = object.orgId ?? "";
        message.username = object.username ?? "";
        return message;
    },
};
messageTypeRegistry.set(User.$type, User);
function createBaseAddUsersToOrgRequest() {
    return { orgId: "", usernames: [] };
}
export const AddUsersToOrgRequest = {
    $type: "devvit.dev_portal.data_api.admin.user.AddUsersToOrgRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.orgId !== "") {
            writer.uint32(18).string(message.orgId);
        }
        for (const v of message.usernames) {
            writer.uint32(26).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddUsersToOrgRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.orgId = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.usernames.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            orgId: isSet(object.orgId) ? globalThis.String(object.orgId) : "",
            usernames: globalThis.Array.isArray(object?.usernames)
                ? object.usernames.map((e) => globalThis.String(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.orgId !== "") {
            obj.orgId = message.orgId;
        }
        if (message.usernames?.length) {
            obj.usernames = message.usernames;
        }
        return obj;
    },
    create(base) {
        return AddUsersToOrgRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddUsersToOrgRequest();
        message.orgId = object.orgId ?? "";
        message.usernames = object.usernames?.map((e) => e) || [];
        return message;
    },
};
messageTypeRegistry.set(AddUsersToOrgRequest.$type, AddUsersToOrgRequest);
function createBaseAddUsersToOrgResponse() {
    return { users: [] };
}
export const AddUsersToOrgResponse = {
    $type: "devvit.dev_portal.data_api.admin.user.AddUsersToOrgResponse",
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.users) {
            User.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddUsersToOrgResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.users.push(User.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { users: globalThis.Array.isArray(object?.users) ? object.users.map((e) => User.fromJSON(e)) : [] };
    },
    toJSON(message) {
        const obj = {};
        if (message.users?.length) {
            obj.users = message.users.map((e) => User.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return AddUsersToOrgResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAddUsersToOrgResponse();
        message.users = object.users?.map((e) => User.fromPartial(e)) || [];
        return message;
    },
};
messageTypeRegistry.set(AddUsersToOrgResponse.$type, AddUsersToOrgResponse);
function createBaseGetUsersByOrgIdRequest() {
    return { id: "" };
}
export const GetUsersByOrgIdRequest = {
    $type: "devvit.dev_portal.data_api.admin.user.GetUsersByOrgIdRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetUsersByOrgIdRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return GetUsersByOrgIdRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetUsersByOrgIdRequest();
        message.id = object.id ?? "";
        return message;
    },
};
messageTypeRegistry.set(GetUsersByOrgIdRequest.$type, GetUsersByOrgIdRequest);
function createBaseGetUsersByOrgIdResponse() {
    return { users: [] };
}
export const GetUsersByOrgIdResponse = {
    $type: "devvit.dev_portal.data_api.admin.user.GetUsersByOrgIdResponse",
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.users) {
            User.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetUsersByOrgIdResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.users.push(User.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { users: globalThis.Array.isArray(object?.users) ? object.users.map((e) => User.fromJSON(e)) : [] };
    },
    toJSON(message) {
        const obj = {};
        if (message.users?.length) {
            obj.users = message.users.map((e) => User.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return GetUsersByOrgIdResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetUsersByOrgIdResponse();
        message.users = object.users?.map((e) => User.fromPartial(e)) || [];
        return message;
    },
};
messageTypeRegistry.set(GetUsersByOrgIdResponse.$type, GetUsersByOrgIdResponse);
function createBaseGetUserByIdRequest() {
    return { t2id: "" };
}
export const GetUserByIdRequest = {
    $type: "devvit.dev_portal.data_api.admin.user.GetUserByIdRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.t2id !== "") {
            writer.uint32(10).string(message.t2id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetUserByIdRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.t2id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { t2id: isSet(object.t2id) ? globalThis.String(object.t2id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.t2id !== "") {
            obj.t2id = message.t2id;
        }
        return obj;
    },
    create(base) {
        return GetUserByIdRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetUserByIdRequest();
        message.t2id = object.t2id ?? "";
        return message;
    },
};
messageTypeRegistry.set(GetUserByIdRequest.$type, GetUserByIdRequest);
function createBaseGetUserByIdResponse() {
    return { user: undefined };
}
export const GetUserByIdResponse = {
    $type: "devvit.dev_portal.data_api.admin.user.GetUserByIdResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.user !== undefined) {
            User.encode(message.user, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetUserByIdResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.user = User.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { user: isSet(object.user) ? User.fromJSON(object.user) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.user !== undefined) {
            obj.user = User.toJSON(message.user);
        }
        return obj;
    },
    create(base) {
        return GetUserByIdResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetUserByIdResponse();
        message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
        return message;
    },
};
messageTypeRegistry.set(GetUserByIdResponse.$type, GetUserByIdResponse);
function createBaseDeleteUserRequest() {
    return { t2id: "" };
}
export const DeleteUserRequest = {
    $type: "devvit.dev_portal.data_api.admin.user.DeleteUserRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.t2id !== "") {
            writer.uint32(10).string(message.t2id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeleteUserRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.t2id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { t2id: isSet(object.t2id) ? globalThis.String(object.t2id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.t2id !== "") {
            obj.t2id = message.t2id;
        }
        return obj;
    },
    create(base) {
        return DeleteUserRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeleteUserRequest();
        message.t2id = object.t2id ?? "";
        return message;
    },
};
messageTypeRegistry.set(DeleteUserRequest.$type, DeleteUserRequest);
function createBaseDeleteUserResponse() {
    return { user: undefined };
}
export const DeleteUserResponse = {
    $type: "devvit.dev_portal.data_api.admin.user.DeleteUserResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.user !== undefined) {
            User.encode(message.user, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeleteUserResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.user = User.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { user: isSet(object.user) ? User.fromJSON(object.user) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.user !== undefined) {
            obj.user = User.toJSON(message.user);
        }
        return obj;
    },
    create(base) {
        return DeleteUserResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDeleteUserResponse();
        message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
        return message;
    },
};
messageTypeRegistry.set(DeleteUserResponse.$type, DeleteUserResponse);
function isSet(value) {
    return value !== null && value !== undefined;
}
