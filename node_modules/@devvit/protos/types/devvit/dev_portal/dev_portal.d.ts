/**
 * #dev_portal.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { Metadata } from "../../../lib/Types.js";
import { Empty } from "../../google/protobuf/empty.js";
import { Value } from "../../google/protobuf/struct.js";
import { UUID } from "../uuid.js";
import { AppAccountExistsRequest, AppAccountExistsResponse, AppCreationRequest, AppExistsRequest, AppExistsResponse, AppSearchRequest, AppSearchResponse, AppUpdateRequest, CheckIfMediaExistsRequest, CheckIfMediaExistsResponse, CreateAppAccountRequest, CreateAppAccountResponse, DisableAppRequest, EnableAppRequest, FullAppInfo, GetAllWithOwnerRequest, GetAppBySlugRequest, GetPopularAppsRequest, RecoverAppAccountRequest, UnpublishAppRequest, UploadNewMediaRequest, UploadNewMediaResponse } from "./app/app.js";
import { AppInfo, MultipleAppInfos } from "./app/info/app_info.js";
import { AppPRCreateRequest, AppPRFindManyRequest, AppPRGetRequest, AppPRUpdateRequest, FullPublishRequestInfo, MultiplePublishRequestInfos } from "./app_publish_request/app_publish_request.js";
import { AppPRAddNoteRequest, AppPRUpdateNoteRequest } from "./app_publish_request/note/app_publish_request_note.js";
import { AppPRSetReviewDecisionRequest } from "./app_publish_request/review/app_publish_request_review.js";
import { GetAppSettingsFormRequest, GetAppSettingsFormResponse, GetAppSettingsRequest, GetAppSettingsResponse, UpdateAppSettingsRequest, UpdateAppSettingsResponse, ValidateAppSettingsFormRequest, ValidateAppSettingsFormResponse } from "./app_settings/app_settings.js";
import { AppSlugAndVersion, AppVersionCreationRequest, AppVersionUpdateRequest, FullAppVersionInfo, GetAppVersionBundleResponse, ValidInstallLocationsRequest, ValidInstallLocationsResponse } from "./app_version/app_version.js";
import { AppVersionInfo } from "./app_version/info/app_version_info.js";
import { GetAuditLogEventsRequest, GetAuditLogEventsResponse } from "./data_api/admin/audit/audit.js";
import { CreateDataTokenRequest, CreateDataTokenResponse, GetDataTokenByIdRequest, GetDataTokenByIdResponse, GetDataTokensByOrganizationNameRequest, GetDataTokensByOrganizationNameResponse, RevokeDataTokenByIdRequest, RevokeDataTokenByIdResponse } from "./data_api/admin/auth/auth.js";
import { CreateOrganizationRequest, CreateOrganizationResponse, GetOrganizationByNameRequest, GetOrganizationByNameResponse, GetOrganizationsRequest, GetOrganizationsResponse } from "./data_api/admin/organization/organization.js";
import { CreateDataSubscriptionRequest, CreateDataSubscriptionResponse, DeleteDataSubscriptionRequest, DeleteDataSubscriptionResponse, GetDataSubscriptionByIdRequest, GetDataSubscriptionByIdResponse, GetDataSubscriptionsByOrganizationNameRequest, GetDataSubscriptionsByOrganizationNameResponse, UpdateDataSubscriptionRequest, UpdateDataSubscriptionResponse } from "./data_api/admin/subscription/subscription.js";
import { AddUsersToOrgRequest, AddUsersToOrgResponse, DeleteUserRequest, DeleteUserResponse, GetUserByIdRequest, GetUserByIdResponse, GetUsersByOrgIdRequest, GetUsersByOrgIdResponse } from "./data_api/admin/user/user.js";
import { CreateFeedbackRequest } from "./feedback/feedback.js";
import { FullInstallationInfo, GetAllWithAppRequest, GetAllWithAppResponse, GetAllWithInstallerRequest, GetAllWithInstallLocationRequest, GetByAppNameAndInstallLocationRequest, GetInstallationHistoryRequest, GetInstallationHistoryResponse, InstallationCreationRequest, InstallationUpdateRequest, InstallationUpgradeManyRequest, InstallationUpgradeManyResponse, InstallationUpgradeRequest, MultipleInstallationsResponse } from "./installation/installation.js";
import { GetInstallationSettingsFormRequest, GetInstallationSettingsFormResponse, GetInstallationSettingsRequest, GetInstallationSettingsResponse, UpdateInstallationSettingsRequest, UpdateInstallationSettingsResponse, ValidateInstallationSettingsFormRequest, ValidateInstallationSettingsFormResponse } from "./installation_settings/installation_settings.js";
import { GetNutritionByNameVersionRequest, MultipleNutritionCategories } from "./nutrition/nutrition.js";
import { ProductList } from "./payments/product.js";
export interface App {
    Create(request: AppCreationRequest, metadata?: Metadata): Promise<AppInfo>;
    Search(request: AppSearchRequest, metadata?: Metadata): Promise<AppSearchResponse>;
    GetBySlug(request: GetAppBySlugRequest, metadata?: Metadata): Promise<FullAppInfo>;
    GetByUUID(request: UUID, metadata?: Metadata): Promise<FullAppInfo>;
    GetAllWithLocation(request: GetAllWithInstallLocationRequest, metadata?: Metadata): Promise<MultipleAppInfos>;
    GetAllWithInstaller(request: GetAllWithInstallerRequest, metadata?: Metadata): Promise<MultipleAppInfos>;
    GetAllWithOwner(request: GetAllWithOwnerRequest, metadata?: Metadata): Promise<MultipleAppInfos>;
    /** Get the X most popular apps, as determined by number of installations. */
    GetPopularApps(request: GetPopularAppsRequest, metadata?: Metadata): Promise<MultipleAppInfos>;
    CheckIfMediaExists(request: CheckIfMediaExistsRequest, metadata?: Metadata): Promise<CheckIfMediaExistsResponse>;
    UploadNewMedia(request: UploadNewMediaRequest, metadata?: Metadata): Promise<UploadNewMediaResponse>;
    Update(request: AppUpdateRequest, metadata?: Metadata): Promise<FullAppInfo>;
    Unpublish(request: UnpublishAppRequest, metadata?: Metadata): Promise<Empty>;
    Disable(request: DisableAppRequest, metadata?: Metadata): Promise<Empty>;
    Enable(request: EnableAppRequest, metadata?: Metadata): Promise<Empty>;
    Exists(request: AppExistsRequest, metadata?: Metadata): Promise<AppExistsResponse>;
    AppAccountExists(request: AppAccountExistsRequest, metadata?: Metadata): Promise<AppAccountExistsResponse>;
    CreateAppAccount(request: CreateAppAccountRequest, metadata?: Metadata): Promise<CreateAppAccountResponse>;
    RecoverAppAccount(request: RecoverAppAccountRequest, metadata?: Metadata): Promise<AppInfo>;
}
export declare const AppServiceName = "devvit.dev_portal.App";
export declare class AppClientImpl implements App {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Create(request: AppCreationRequest, metadata?: Metadata): Promise<AppInfo>;
    Search(request: AppSearchRequest, metadata?: Metadata): Promise<AppSearchResponse>;
    GetBySlug(request: GetAppBySlugRequest, metadata?: Metadata): Promise<FullAppInfo>;
    GetByUUID(request: UUID, metadata?: Metadata): Promise<FullAppInfo>;
    GetAllWithLocation(request: GetAllWithInstallLocationRequest, metadata?: Metadata): Promise<MultipleAppInfos>;
    GetAllWithInstaller(request: GetAllWithInstallerRequest, metadata?: Metadata): Promise<MultipleAppInfos>;
    GetAllWithOwner(request: GetAllWithOwnerRequest, metadata?: Metadata): Promise<MultipleAppInfos>;
    GetPopularApps(request: GetPopularAppsRequest, metadata?: Metadata): Promise<MultipleAppInfos>;
    CheckIfMediaExists(request: CheckIfMediaExistsRequest, metadata?: Metadata): Promise<CheckIfMediaExistsResponse>;
    UploadNewMedia(request: UploadNewMediaRequest, metadata?: Metadata): Promise<UploadNewMediaResponse>;
    Update(request: AppUpdateRequest, metadata?: Metadata): Promise<FullAppInfo>;
    Unpublish(request: UnpublishAppRequest, metadata?: Metadata): Promise<Empty>;
    Disable(request: DisableAppRequest, metadata?: Metadata): Promise<Empty>;
    Enable(request: EnableAppRequest, metadata?: Metadata): Promise<Empty>;
    Exists(request: AppExistsRequest, metadata?: Metadata): Promise<AppExistsResponse>;
    AppAccountExists(request: AppAccountExistsRequest, metadata?: Metadata): Promise<AppAccountExistsResponse>;
    CreateAppAccount(request: CreateAppAccountRequest, metadata?: Metadata): Promise<CreateAppAccountResponse>;
    RecoverAppAccount(request: RecoverAppAccountRequest, metadata?: Metadata): Promise<AppInfo>;
}
export type AppDefinition = typeof AppDefinition;
export declare const AppDefinition: {
    readonly name: "App";
    readonly fullName: "devvit.dev_portal.App";
    readonly methods: {
        readonly create: {
            readonly name: "Create";
            readonly requestType: {
                $type: "devvit.dev_portal.app.AppCreationRequest";
                encode(message: AppCreationRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): AppCreationRequest;
                fromJSON(object: any): AppCreationRequest;
                toJSON(message: AppCreationRequest): unknown;
                create(base?: {
                    name?: string;
                    description?: string;
                    isNsfw?: boolean;
                    categories?: import("./app/categories/categories.js").Categories[];
                    autogenerateName?: boolean;
                    captcha?: string;
                } | undefined): AppCreationRequest;
                fromPartial(object: {
                    name?: string;
                    description?: string;
                    isNsfw?: boolean;
                    categories?: import("./app/categories/categories.js").Categories[];
                    autogenerateName?: boolean;
                    captcha?: string;
                }): AppCreationRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.app.info.AppInfo";
                encode(message: AppInfo, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): AppInfo;
                fromJSON(object: any): AppInfo;
                toJSON(message: AppInfo): unknown;
                create(base?: {
                    id?: string;
                    slug?: string;
                    name?: string;
                    description?: string;
                    appAccount?: {
                        id?: string;
                        displayName?: string;
                        snoovatarIconUrl?: string;
                    } | undefined;
                    isNsfw?: boolean;
                    isDelisted?: boolean;
                    isFirstParty?: boolean;
                    isArchived?: boolean;
                    isWebviewEnabled?: boolean;
                    createdAt?: Date | undefined;
                    owner?: {
                        id?: string;
                        displayName?: string;
                        snoovatarIconUrl?: string;
                    } | undefined;
                    categories?: import("./app/categories/categories.js").Categories[];
                    stats?: {
                        installCount?: number;
                    } | undefined;
                    termsAndConditions?: string;
                    privacyPolicy?: string;
                    defaultPool?: import("./app_version/info/app_version_info.js").ComputePool;
                    capabilities?: import("./app/info/app_info.js").AppCapability[];
                    isDisabled?: boolean;
                } | undefined): AppInfo;
                fromPartial(object: {
                    id?: string;
                    slug?: string;
                    name?: string;
                    description?: string;
                    appAccount?: {
                        id?: string;
                        displayName?: string;
                        snoovatarIconUrl?: string;
                    } | undefined;
                    isNsfw?: boolean;
                    isDelisted?: boolean;
                    isFirstParty?: boolean;
                    isArchived?: boolean;
                    isWebviewEnabled?: boolean;
                    createdAt?: Date | undefined;
                    owner?: {
                        id?: string;
                        displayName?: string;
                        snoovatarIconUrl?: string;
                    } | undefined;
                    categories?: import("./app/categories/categories.js").Categories[];
                    stats?: {
                        installCount?: number;
                    } | undefined;
                    termsAndConditions?: string;
                    privacyPolicy?: string;
                    defaultPool?: import("./app_version/info/app_version_info.js").ComputePool;
                    capabilities?: import("./app/info/app_info.js").AppCapability[];
                    isDisabled?: boolean;
                }): AppInfo;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly search: {
            readonly name: "Search";
            readonly requestType: {
                $type: "devvit.dev_portal.app.AppSearchRequest";
                encode(message: AppSearchRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): AppSearchRequest;
                fromJSON(object: any): AppSearchRequest;
                toJSON(message: AppSearchRequest): unknown;
                create(base?: {
                    searchTerm?: string | undefined;
                    categories?: import("./app/categories/categories.js").Categories[];
                    page?: number | undefined;
                    pageSize?: number | undefined;
                    orderBy?: import("./app/app.js").OrderBy;
                    isAscending?: boolean | undefined;
                } | undefined): AppSearchRequest;
                fromPartial(object: {
                    searchTerm?: string | undefined;
                    categories?: import("./app/categories/categories.js").Categories[];
                    page?: number | undefined;
                    pageSize?: number | undefined;
                    orderBy?: import("./app/app.js").OrderBy;
                    isAscending?: boolean | undefined;
                }): AppSearchRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.app.AppSearchResponse";
                encode(message: AppSearchResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): AppSearchResponse;
                fromJSON(object: any): AppSearchResponse;
                toJSON(message: AppSearchResponse): unknown;
                create(base?: {
                    apps?: {
                        id?: string;
                        slug?: string;
                        name?: string;
                        description?: string;
                        appAccount?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        isNsfw?: boolean;
                        isDelisted?: boolean;
                        isFirstParty?: boolean;
                        isArchived?: boolean;
                        isWebviewEnabled?: boolean;
                        createdAt?: Date | undefined;
                        owner?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        categories?: import("./app/categories/categories.js").Categories[];
                        stats?: {
                            installCount?: number;
                        } | undefined;
                        termsAndConditions?: string;
                        privacyPolicy?: string;
                        defaultPool?: import("./app_version/info/app_version_info.js").ComputePool;
                        capabilities?: import("./app/info/app_info.js").AppCapability[];
                        isDisabled?: boolean;
                    }[];
                    totalResults?: number;
                    pageNumber?: number;
                    pageSize?: number;
                } | undefined): AppSearchResponse;
                fromPartial(object: {
                    apps?: {
                        id?: string;
                        slug?: string;
                        name?: string;
                        description?: string;
                        appAccount?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        isNsfw?: boolean;
                        isDelisted?: boolean;
                        isFirstParty?: boolean;
                        isArchived?: boolean;
                        isWebviewEnabled?: boolean;
                        createdAt?: Date | undefined;
                        owner?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        categories?: import("./app/categories/categories.js").Categories[];
                        stats?: {
                            installCount?: number;
                        } | undefined;
                        termsAndConditions?: string;
                        privacyPolicy?: string;
                        defaultPool?: import("./app_version/info/app_version_info.js").ComputePool;
                        capabilities?: import("./app/info/app_info.js").AppCapability[];
                        isDisabled?: boolean;
                    }[];
                    totalResults?: number;
                    pageNumber?: number;
                    pageSize?: number;
                }): AppSearchResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly getBySlug: {
            readonly name: "GetBySlug";
            readonly requestType: {
                $type: "devvit.dev_portal.app.GetAppBySlugRequest";
                encode(message: GetAppBySlugRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GetAppBySlugRequest;
                fromJSON(object: any): GetAppBySlugRequest;
                toJSON(message: GetAppBySlugRequest): unknown;
                create(base?: {
                    slug?: string;
                    limit?: number | undefined;
                    offset?: number | undefined;
                    hidePrereleaseVersions?: boolean | undefined;
                } | undefined): GetAppBySlugRequest;
                fromPartial(object: {
                    slug?: string;
                    limit?: number | undefined;
                    offset?: number | undefined;
                    hidePrereleaseVersions?: boolean | undefined;
                }): GetAppBySlugRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.app.FullAppInfo";
                encode(message: FullAppInfo, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): FullAppInfo;
                fromJSON(object: any): FullAppInfo;
                toJSON(message: FullAppInfo): unknown;
                create(base?: {
                    app?: {
                        id?: string;
                        slug?: string;
                        name?: string;
                        description?: string;
                        appAccount?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        isNsfw?: boolean;
                        isDelisted?: boolean;
                        isFirstParty?: boolean;
                        isArchived?: boolean;
                        isWebviewEnabled?: boolean;
                        createdAt?: Date | undefined;
                        owner?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        categories?: import("./app/categories/categories.js").Categories[];
                        stats?: {
                            installCount?: number;
                        } | undefined;
                        termsAndConditions?: string;
                        privacyPolicy?: string;
                        defaultPool?: import("./app_version/info/app_version_info.js").ComputePool;
                        capabilities?: import("./app/info/app_info.js").AppCapability[];
                        isDisabled?: boolean;
                    } | undefined;
                    versions?: {
                        id?: string;
                        visibility?: import("./app_version/info/app_version_info.js").VersionVisibility;
                        validInstallTypes?: import("./app_version/info/app_version_info.js").InstallationType[];
                        majorVersion?: number;
                        minorVersion?: number;
                        patchVersion?: number;
                        prereleaseVersion?: number | undefined;
                        uploadedAt?: Date | undefined;
                        buildStatus?: import("./app_version/info/app_version_info.js").BuildStatus;
                        builtAt?: Date | undefined;
                        about?: string;
                        hasCustomSettings?: boolean;
                        pool?: import("./app_version/info/app_version_info.js").ComputePool;
                    }[];
                } | undefined): FullAppInfo;
                fromPartial(object: {
                    app?: {
                        id?: string;
                        slug?: string;
                        name?: string;
                        description?: string;
                        appAccount?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        isNsfw?: boolean;
                        isDelisted?: boolean;
                        isFirstParty?: boolean;
                        isArchived?: boolean;
                        isWebviewEnabled?: boolean;
                        createdAt?: Date | undefined;
                        owner?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        categories?: import("./app/categories/categories.js").Categories[];
                        stats?: {
                            installCount?: number;
                        } | undefined;
                        termsAndConditions?: string;
                        privacyPolicy?: string;
                        defaultPool?: import("./app_version/info/app_version_info.js").ComputePool;
                        capabilities?: import("./app/info/app_info.js").AppCapability[];
                        isDisabled?: boolean;
                    } | undefined;
                    versions?: {
                        id?: string;
                        visibility?: import("./app_version/info/app_version_info.js").VersionVisibility;
                        validInstallTypes?: import("./app_version/info/app_version_info.js").InstallationType[];
                        majorVersion?: number;
                        minorVersion?: number;
                        patchVersion?: number;
                        prereleaseVersion?: number | undefined;
                        uploadedAt?: Date | undefined;
                        buildStatus?: import("./app_version/info/app_version_info.js").BuildStatus;
                        builtAt?: Date | undefined;
                        about?: string;
                        hasCustomSettings?: boolean;
                        pool?: import("./app_version/info/app_version_info.js").ComputePool;
                    }[];
                }): FullAppInfo;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly getByUUID: {
            readonly name: "GetByUUID";
            readonly requestType: {
                $type: "devvit.UUID";
                encode(message: UUID, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): UUID;
                fromJSON(object: any): UUID;
                toJSON(message: UUID): unknown;
                create(base?: {
                    id?: string;
                } | undefined): UUID;
                fromPartial(object: {
                    id?: string;
                }): UUID;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.app.FullAppInfo";
                encode(message: FullAppInfo, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): FullAppInfo;
                fromJSON(object: any): FullAppInfo;
                toJSON(message: FullAppInfo): unknown;
                create(base?: {
                    app?: {
                        id?: string;
                        slug?: string;
                        name?: string;
                        description?: string;
                        appAccount?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        isNsfw?: boolean;
                        isDelisted?: boolean;
                        isFirstParty?: boolean;
                        isArchived?: boolean;
                        isWebviewEnabled?: boolean;
                        createdAt?: Date | undefined;
                        owner?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        categories?: import("./app/categories/categories.js").Categories[];
                        stats?: {
                            installCount?: number;
                        } | undefined;
                        termsAndConditions?: string;
                        privacyPolicy?: string;
                        defaultPool?: import("./app_version/info/app_version_info.js").ComputePool;
                        capabilities?: import("./app/info/app_info.js").AppCapability[];
                        isDisabled?: boolean;
                    } | undefined;
                    versions?: {
                        id?: string;
                        visibility?: import("./app_version/info/app_version_info.js").VersionVisibility;
                        validInstallTypes?: import("./app_version/info/app_version_info.js").InstallationType[];
                        majorVersion?: number;
                        minorVersion?: number;
                        patchVersion?: number;
                        prereleaseVersion?: number | undefined;
                        uploadedAt?: Date | undefined;
                        buildStatus?: import("./app_version/info/app_version_info.js").BuildStatus;
                        builtAt?: Date | undefined;
                        about?: string;
                        hasCustomSettings?: boolean;
                        pool?: import("./app_version/info/app_version_info.js").ComputePool;
                    }[];
                } | undefined): FullAppInfo;
                fromPartial(object: {
                    app?: {
                        id?: string;
                        slug?: string;
                        name?: string;
                        description?: string;
                        appAccount?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        isNsfw?: boolean;
                        isDelisted?: boolean;
                        isFirstParty?: boolean;
                        isArchived?: boolean;
                        isWebviewEnabled?: boolean;
                        createdAt?: Date | undefined;
                        owner?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        categories?: import("./app/categories/categories.js").Categories[];
                        stats?: {
                            installCount?: number;
                        } | undefined;
                        termsAndConditions?: string;
                        privacyPolicy?: string;
                        defaultPool?: import("./app_version/info/app_version_info.js").ComputePool;
                        capabilities?: import("./app/info/app_info.js").AppCapability[];
                        isDisabled?: boolean;
                    } | undefined;
                    versions?: {
                        id?: string;
                        visibility?: import("./app_version/info/app_version_info.js").VersionVisibility;
                        validInstallTypes?: import("./app_version/info/app_version_info.js").InstallationType[];
                        majorVersion?: number;
                        minorVersion?: number;
                        patchVersion?: number;
                        prereleaseVersion?: number | undefined;
                        uploadedAt?: Date | undefined;
                        buildStatus?: import("./app_version/info/app_version_info.js").BuildStatus;
                        builtAt?: Date | undefined;
                        about?: string;
                        hasCustomSettings?: boolean;
                        pool?: import("./app_version/info/app_version_info.js").ComputePool;
                    }[];
                }): FullAppInfo;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly getAllWithLocation: {
            readonly name: "GetAllWithLocation";
            readonly requestType: {
                $type: "devvit.dev_portal.installation.GetAllWithInstallLocationRequest";
                encode(message: GetAllWithInstallLocationRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GetAllWithInstallLocationRequest;
                fromJSON(object: any): GetAllWithInstallLocationRequest;
                toJSON(message: GetAllWithInstallLocationRequest): unknown;
                create(base?: {
                    type?: import("./app_version/info/app_version_info.js").InstallationType;
                    location?: string;
                } | undefined): GetAllWithInstallLocationRequest;
                fromPartial(object: {
                    type?: import("./app_version/info/app_version_info.js").InstallationType;
                    location?: string;
                }): GetAllWithInstallLocationRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.app.info.MultipleAppInfos";
                encode(message: MultipleAppInfos, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MultipleAppInfos;
                fromJSON(object: any): MultipleAppInfos;
                toJSON(message: MultipleAppInfos): unknown;
                create(base?: {
                    apps?: {
                        id?: string;
                        slug?: string;
                        name?: string;
                        description?: string;
                        appAccount?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        isNsfw?: boolean;
                        isDelisted?: boolean;
                        isFirstParty?: boolean;
                        isArchived?: boolean;
                        isWebviewEnabled?: boolean;
                        createdAt?: Date | undefined;
                        owner?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        categories?: import("./app/categories/categories.js").Categories[];
                        stats?: {
                            installCount?: number;
                        } | undefined;
                        termsAndConditions?: string;
                        privacyPolicy?: string;
                        defaultPool?: import("./app_version/info/app_version_info.js").ComputePool;
                        capabilities?: import("./app/info/app_info.js").AppCapability[];
                        isDisabled?: boolean;
                    }[];
                } | undefined): MultipleAppInfos;
                fromPartial(object: {
                    apps?: {
                        id?: string;
                        slug?: string;
                        name?: string;
                        description?: string;
                        appAccount?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        isNsfw?: boolean;
                        isDelisted?: boolean;
                        isFirstParty?: boolean;
                        isArchived?: boolean;
                        isWebviewEnabled?: boolean;
                        createdAt?: Date | undefined;
                        owner?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        categories?: import("./app/categories/categories.js").Categories[];
                        stats?: {
                            installCount?: number;
                        } | undefined;
                        termsAndConditions?: string;
                        privacyPolicy?: string;
                        defaultPool?: import("./app_version/info/app_version_info.js").ComputePool;
                        capabilities?: import("./app/info/app_info.js").AppCapability[];
                        isDisabled?: boolean;
                    }[];
                }): MultipleAppInfos;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly getAllWithInstaller: {
            readonly name: "GetAllWithInstaller";
            readonly requestType: {
                $type: "devvit.dev_portal.installation.GetAllWithInstallerRequest";
                encode(message: GetAllWithInstallerRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GetAllWithInstallerRequest;
                fromJSON(object: any): GetAllWithInstallerRequest;
                toJSON(message: GetAllWithInstallerRequest): unknown;
                create(base?: {
                    installedBy?: string;
                } | undefined): GetAllWithInstallerRequest;
                fromPartial(object: {
                    installedBy?: string;
                }): GetAllWithInstallerRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.app.info.MultipleAppInfos";
                encode(message: MultipleAppInfos, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MultipleAppInfos;
                fromJSON(object: any): MultipleAppInfos;
                toJSON(message: MultipleAppInfos): unknown;
                create(base?: {
                    apps?: {
                        id?: string;
                        slug?: string;
                        name?: string;
                        description?: string;
                        appAccount?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        isNsfw?: boolean;
                        isDelisted?: boolean;
                        isFirstParty?: boolean;
                        isArchived?: boolean;
                        isWebviewEnabled?: boolean;
                        createdAt?: Date | undefined;
                        owner?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        categories?: import("./app/categories/categories.js").Categories[];
                        stats?: {
                            installCount?: number;
                        } | undefined;
                        termsAndConditions?: string;
                        privacyPolicy?: string;
                        defaultPool?: import("./app_version/info/app_version_info.js").ComputePool;
                        capabilities?: import("./app/info/app_info.js").AppCapability[];
                        isDisabled?: boolean;
                    }[];
                } | undefined): MultipleAppInfos;
                fromPartial(object: {
                    apps?: {
                        id?: string;
                        slug?: string;
                        name?: string;
                        description?: string;
                        appAccount?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        isNsfw?: boolean;
                        isDelisted?: boolean;
                        isFirstParty?: boolean;
                        isArchived?: boolean;
                        isWebviewEnabled?: boolean;
                        createdAt?: Date | undefined;
                        owner?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        categories?: import("./app/categories/categories.js").Categories[];
                        stats?: {
                            installCount?: number;
                        } | undefined;
                        termsAndConditions?: string;
                        privacyPolicy?: string;
                        defaultPool?: import("./app_version/info/app_version_info.js").ComputePool;
                        capabilities?: import("./app/info/app_info.js").AppCapability[];
                        isDisabled?: boolean;
                    }[];
                }): MultipleAppInfos;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly getAllWithOwner: {
            readonly name: "GetAllWithOwner";
            readonly requestType: {
                $type: "devvit.dev_portal.app.GetAllWithOwnerRequest";
                encode(message: GetAllWithOwnerRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GetAllWithOwnerRequest;
                fromJSON(object: any): GetAllWithOwnerRequest;
                toJSON(message: GetAllWithOwnerRequest): unknown;
                create(base?: {
                    owner?: string;
                } | undefined): GetAllWithOwnerRequest;
                fromPartial(object: {
                    owner?: string;
                }): GetAllWithOwnerRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.app.info.MultipleAppInfos";
                encode(message: MultipleAppInfos, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MultipleAppInfos;
                fromJSON(object: any): MultipleAppInfos;
                toJSON(message: MultipleAppInfos): unknown;
                create(base?: {
                    apps?: {
                        id?: string;
                        slug?: string;
                        name?: string;
                        description?: string;
                        appAccount?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        isNsfw?: boolean;
                        isDelisted?: boolean;
                        isFirstParty?: boolean;
                        isArchived?: boolean;
                        isWebviewEnabled?: boolean;
                        createdAt?: Date | undefined;
                        owner?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        categories?: import("./app/categories/categories.js").Categories[];
                        stats?: {
                            installCount?: number;
                        } | undefined;
                        termsAndConditions?: string;
                        privacyPolicy?: string;
                        defaultPool?: import("./app_version/info/app_version_info.js").ComputePool;
                        capabilities?: import("./app/info/app_info.js").AppCapability[];
                        isDisabled?: boolean;
                    }[];
                } | undefined): MultipleAppInfos;
                fromPartial(object: {
                    apps?: {
                        id?: string;
                        slug?: string;
                        name?: string;
                        description?: string;
                        appAccount?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        isNsfw?: boolean;
                        isDelisted?: boolean;
                        isFirstParty?: boolean;
                        isArchived?: boolean;
                        isWebviewEnabled?: boolean;
                        createdAt?: Date | undefined;
                        owner?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        categories?: import("./app/categories/categories.js").Categories[];
                        stats?: {
                            installCount?: number;
                        } | undefined;
                        termsAndConditions?: string;
                        privacyPolicy?: string;
                        defaultPool?: import("./app_version/info/app_version_info.js").ComputePool;
                        capabilities?: import("./app/info/app_info.js").AppCapability[];
                        isDisabled?: boolean;
                    }[];
                }): MultipleAppInfos;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Get the X most popular apps, as determined by number of installations. */
        readonly getPopularApps: {
            readonly name: "GetPopularApps";
            readonly requestType: {
                $type: "devvit.dev_portal.app.GetPopularAppsRequest";
                encode(message: GetPopularAppsRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GetPopularAppsRequest;
                fromJSON(object: any): GetPopularAppsRequest;
                toJSON(message: GetPopularAppsRequest): unknown;
                create(base?: {
                    limit?: number;
                } | undefined): GetPopularAppsRequest;
                fromPartial(object: {
                    limit?: number;
                }): GetPopularAppsRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.app.info.MultipleAppInfos";
                encode(message: MultipleAppInfos, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MultipleAppInfos;
                fromJSON(object: any): MultipleAppInfos;
                toJSON(message: MultipleAppInfos): unknown;
                create(base?: {
                    apps?: {
                        id?: string;
                        slug?: string;
                        name?: string;
                        description?: string;
                        appAccount?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        isNsfw?: boolean;
                        isDelisted?: boolean;
                        isFirstParty?: boolean;
                        isArchived?: boolean;
                        isWebviewEnabled?: boolean;
                        createdAt?: Date | undefined;
                        owner?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        categories?: import("./app/categories/categories.js").Categories[];
                        stats?: {
                            installCount?: number;
                        } | undefined;
                        termsAndConditions?: string;
                        privacyPolicy?: string;
                        defaultPool?: import("./app_version/info/app_version_info.js").ComputePool;
                        capabilities?: import("./app/info/app_info.js").AppCapability[];
                        isDisabled?: boolean;
                    }[];
                } | undefined): MultipleAppInfos;
                fromPartial(object: {
                    apps?: {
                        id?: string;
                        slug?: string;
                        name?: string;
                        description?: string;
                        appAccount?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        isNsfw?: boolean;
                        isDelisted?: boolean;
                        isFirstParty?: boolean;
                        isArchived?: boolean;
                        isWebviewEnabled?: boolean;
                        createdAt?: Date | undefined;
                        owner?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        categories?: import("./app/categories/categories.js").Categories[];
                        stats?: {
                            installCount?: number;
                        } | undefined;
                        termsAndConditions?: string;
                        privacyPolicy?: string;
                        defaultPool?: import("./app_version/info/app_version_info.js").ComputePool;
                        capabilities?: import("./app/info/app_info.js").AppCapability[];
                        isDisabled?: boolean;
                    }[];
                }): MultipleAppInfos;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly checkIfMediaExists: {
            readonly name: "CheckIfMediaExists";
            readonly requestType: {
                $type: "devvit.dev_portal.app.CheckIfMediaExistsRequest";
                encode(message: CheckIfMediaExistsRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): CheckIfMediaExistsRequest;
                fromJSON(object: any): CheckIfMediaExistsRequest;
                toJSON(message: CheckIfMediaExistsRequest): unknown;
                create(base?: {
                    id?: string | undefined;
                    slug?: string | undefined;
                    signatures?: {
                        filePath?: string;
                        size?: number;
                        hash?: string;
                        isWebviewAsset?: boolean;
                    }[];
                } | undefined): CheckIfMediaExistsRequest;
                fromPartial(object: {
                    id?: string | undefined;
                    slug?: string | undefined;
                    signatures?: {
                        filePath?: string;
                        size?: number;
                        hash?: string;
                        isWebviewAsset?: boolean;
                    }[];
                }): CheckIfMediaExistsRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.app.CheckIfMediaExistsResponse";
                encode(message: CheckIfMediaExistsResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): CheckIfMediaExistsResponse;
                fromJSON(object: any): CheckIfMediaExistsResponse;
                toJSON(message: CheckIfMediaExistsResponse): unknown;
                create(base?: {
                    statuses?: {
                        filePath?: string;
                        isNew?: boolean;
                        existingMediaId?: string | undefined;
                    }[];
                } | undefined): CheckIfMediaExistsResponse;
                fromPartial(object: {
                    statuses?: {
                        filePath?: string;
                        isNew?: boolean;
                        existingMediaId?: string | undefined;
                    }[];
                }): CheckIfMediaExistsResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly uploadNewMedia: {
            readonly name: "UploadNewMedia";
            readonly requestType: {
                $type: "devvit.dev_portal.app.UploadNewMediaRequest";
                encode(message: UploadNewMediaRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): UploadNewMediaRequest;
                fromJSON(object: any): UploadNewMediaRequest;
                toJSON(message: UploadNewMediaRequest): unknown;
                create(base?: {
                    id?: string | undefined;
                    slug?: string | undefined;
                    size?: number;
                    hash?: string;
                    contents?: Uint8Array;
                    webviewAsset?: boolean | undefined;
                    filePath?: string | undefined;
                } | undefined): UploadNewMediaRequest;
                fromPartial(object: {
                    id?: string | undefined;
                    slug?: string | undefined;
                    size?: number;
                    hash?: string;
                    contents?: Uint8Array;
                    webviewAsset?: boolean | undefined;
                    filePath?: string | undefined;
                }): UploadNewMediaRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.app.UploadNewMediaResponse";
                encode(message: UploadNewMediaResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): UploadNewMediaResponse;
                fromJSON(object: any): UploadNewMediaResponse;
                toJSON(message: UploadNewMediaResponse): unknown;
                create(base?: {
                    assetId?: string;
                    mediaId?: string;
                } | undefined): UploadNewMediaResponse;
                fromPartial(object: {
                    assetId?: string;
                    mediaId?: string;
                }): UploadNewMediaResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly update: {
            readonly name: "Update";
            readonly requestType: {
                $type: "devvit.dev_portal.app.AppUpdateRequest";
                encode(message: AppUpdateRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): AppUpdateRequest;
                fromJSON(object: any): AppUpdateRequest;
                toJSON(message: AppUpdateRequest): unknown;
                create(base?: {
                    id?: string;
                    slug?: string | undefined;
                    name?: string | undefined;
                    description?: string | undefined;
                    isNsfw?: boolean | undefined;
                    isDelisted?: boolean | undefined;
                    categories?: import("./app/categories/categories.js").Categories[];
                    termsAndConditions?: string | undefined;
                    privacyPolicy?: string | undefined;
                    defaultPool?: import("./app_version/info/app_version_info.js").ComputePool | undefined;
                    isWebviewEnabled?: boolean | undefined;
                    capabilities?: import("./app/info/app_info.js").AppCapability[];
                } | undefined): AppUpdateRequest;
                fromPartial(object: {
                    id?: string;
                    slug?: string | undefined;
                    name?: string | undefined;
                    description?: string | undefined;
                    isNsfw?: boolean | undefined;
                    isDelisted?: boolean | undefined;
                    categories?: import("./app/categories/categories.js").Categories[];
                    termsAndConditions?: string | undefined;
                    privacyPolicy?: string | undefined;
                    defaultPool?: import("./app_version/info/app_version_info.js").ComputePool | undefined;
                    isWebviewEnabled?: boolean | undefined;
                    capabilities?: import("./app/info/app_info.js").AppCapability[];
                }): AppUpdateRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.app.FullAppInfo";
                encode(message: FullAppInfo, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): FullAppInfo;
                fromJSON(object: any): FullAppInfo;
                toJSON(message: FullAppInfo): unknown;
                create(base?: {
                    app?: {
                        id?: string;
                        slug?: string;
                        name?: string;
                        description?: string;
                        appAccount?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        isNsfw?: boolean;
                        isDelisted?: boolean;
                        isFirstParty?: boolean;
                        isArchived?: boolean;
                        isWebviewEnabled?: boolean;
                        createdAt?: Date | undefined;
                        owner?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        categories?: import("./app/categories/categories.js").Categories[];
                        stats?: {
                            installCount?: number;
                        } | undefined;
                        termsAndConditions?: string;
                        privacyPolicy?: string;
                        defaultPool?: import("./app_version/info/app_version_info.js").ComputePool;
                        capabilities?: import("./app/info/app_info.js").AppCapability[];
                        isDisabled?: boolean;
                    } | undefined;
                    versions?: {
                        id?: string;
                        visibility?: import("./app_version/info/app_version_info.js").VersionVisibility;
                        validInstallTypes?: import("./app_version/info/app_version_info.js").InstallationType[];
                        majorVersion?: number;
                        minorVersion?: number;
                        patchVersion?: number;
                        prereleaseVersion?: number | undefined;
                        uploadedAt?: Date | undefined;
                        buildStatus?: import("./app_version/info/app_version_info.js").BuildStatus;
                        builtAt?: Date | undefined;
                        about?: string;
                        hasCustomSettings?: boolean;
                        pool?: import("./app_version/info/app_version_info.js").ComputePool;
                    }[];
                } | undefined): FullAppInfo;
                fromPartial(object: {
                    app?: {
                        id?: string;
                        slug?: string;
                        name?: string;
                        description?: string;
                        appAccount?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        isNsfw?: boolean;
                        isDelisted?: boolean;
                        isFirstParty?: boolean;
                        isArchived?: boolean;
                        isWebviewEnabled?: boolean;
                        createdAt?: Date | undefined;
                        owner?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        categories?: import("./app/categories/categories.js").Categories[];
                        stats?: {
                            installCount?: number;
                        } | undefined;
                        termsAndConditions?: string;
                        privacyPolicy?: string;
                        defaultPool?: import("./app_version/info/app_version_info.js").ComputePool;
                        capabilities?: import("./app/info/app_info.js").AppCapability[];
                        isDisabled?: boolean;
                    } | undefined;
                    versions?: {
                        id?: string;
                        visibility?: import("./app_version/info/app_version_info.js").VersionVisibility;
                        validInstallTypes?: import("./app_version/info/app_version_info.js").InstallationType[];
                        majorVersion?: number;
                        minorVersion?: number;
                        patchVersion?: number;
                        prereleaseVersion?: number | undefined;
                        uploadedAt?: Date | undefined;
                        buildStatus?: import("./app_version/info/app_version_info.js").BuildStatus;
                        builtAt?: Date | undefined;
                        about?: string;
                        hasCustomSettings?: boolean;
                        pool?: import("./app_version/info/app_version_info.js").ComputePool;
                    }[];
                }): FullAppInfo;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly unpublish: {
            readonly name: "Unpublish";
            readonly requestType: {
                $type: "devvit.dev_portal.app.UnpublishAppRequest";
                encode(message: UnpublishAppRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): UnpublishAppRequest;
                fromJSON(object: any): UnpublishAppRequest;
                toJSON(message: UnpublishAppRequest): unknown;
                create(base?: {
                    slug?: string | undefined;
                    shouldDelist?: boolean;
                } | undefined): UnpublishAppRequest;
                fromPartial(object: {
                    slug?: string | undefined;
                    shouldDelist?: boolean;
                }): UnpublishAppRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {} | undefined): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly disable: {
            readonly name: "Disable";
            readonly requestType: {
                $type: "devvit.dev_portal.app.DisableAppRequest";
                encode(message: DisableAppRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): DisableAppRequest;
                fromJSON(object: any): DisableAppRequest;
                toJSON(message: DisableAppRequest): unknown;
                create(base?: {
                    id?: string;
                } | undefined): DisableAppRequest;
                fromPartial(object: {
                    id?: string;
                }): DisableAppRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {} | undefined): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly enable: {
            readonly name: "Enable";
            readonly requestType: {
                $type: "devvit.dev_portal.app.EnableAppRequest";
                encode(message: EnableAppRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): EnableAppRequest;
                fromJSON(object: any): EnableAppRequest;
                toJSON(message: EnableAppRequest): unknown;
                create(base?: {
                    id?: string;
                } | undefined): EnableAppRequest;
                fromPartial(object: {
                    id?: string;
                }): EnableAppRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {} | undefined): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly exists: {
            readonly name: "Exists";
            readonly requestType: {
                $type: "devvit.dev_portal.app.AppExistsRequest";
                encode(message: AppExistsRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): AppExistsRequest;
                fromJSON(object: any): AppExistsRequest;
                toJSON(message: AppExistsRequest): unknown;
                create(base?: {
                    slug?: string | undefined;
                } | undefined): AppExistsRequest;
                fromPartial(object: {
                    slug?: string | undefined;
                }): AppExistsRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.app.AppExistsResponse";
                encode(message: AppExistsResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): AppExistsResponse;
                fromJSON(object: any): AppExistsResponse;
                toJSON(message: AppExistsResponse): unknown;
                create(base?: {
                    exists?: boolean;
                } | undefined): AppExistsResponse;
                fromPartial(object: {
                    exists?: boolean;
                }): AppExistsResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly appAccountExists: {
            readonly name: "AppAccountExists";
            readonly requestType: {
                $type: "devvit.dev_portal.app.AppAccountExistsRequest";
                encode(message: AppAccountExistsRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): AppAccountExistsRequest;
                fromJSON(object: any): AppAccountExistsRequest;
                toJSON(message: AppAccountExistsRequest): unknown;
                create(base?: {
                    accountName?: string;
                } | undefined): AppAccountExistsRequest;
                fromPartial(object: {
                    accountName?: string;
                }): AppAccountExistsRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.app.AppAccountExistsResponse";
                encode(message: AppAccountExistsResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): AppAccountExistsResponse;
                fromJSON(object: any): AppAccountExistsResponse;
                toJSON(message: AppAccountExistsResponse): unknown;
                create(base?: {
                    exists?: boolean;
                    suggestions?: string[];
                } | undefined): AppAccountExistsResponse;
                fromPartial(object: {
                    exists?: boolean;
                    suggestions?: string[];
                }): AppAccountExistsResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly createAppAccount: {
            readonly name: "CreateAppAccount";
            readonly requestType: {
                $type: "devvit.dev_portal.app.CreateAppAccountRequest";
                encode(message: CreateAppAccountRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): CreateAppAccountRequest;
                fromJSON(object: any): CreateAppAccountRequest;
                toJSON(message: CreateAppAccountRequest): unknown;
                create(base?: {
                    slug?: string;
                    accountName?: string | undefined;
                    captcha?: string;
                } | undefined): CreateAppAccountRequest;
                fromPartial(object: {
                    slug?: string;
                    accountName?: string | undefined;
                    captcha?: string;
                }): CreateAppAccountRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.app.CreateAppAccountResponse";
                encode(message: CreateAppAccountResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): CreateAppAccountResponse;
                fromJSON(object: any): CreateAppAccountResponse;
                toJSON(message: CreateAppAccountResponse): unknown;
                create(base?: {
                    created?: boolean;
                    errors?: string | undefined;
                } | undefined): CreateAppAccountResponse;
                fromPartial(object: {
                    created?: boolean;
                    errors?: string | undefined;
                }): CreateAppAccountResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly recoverAppAccount: {
            readonly name: "RecoverAppAccount";
            readonly requestType: {
                $type: "devvit.dev_portal.app.RecoverAppAccountRequest";
                encode(message: RecoverAppAccountRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): RecoverAppAccountRequest;
                fromJSON(object: any): RecoverAppAccountRequest;
                toJSON(message: RecoverAppAccountRequest): unknown;
                create(base?: {
                    name?: string;
                    slug?: string;
                    description?: string;
                    isNsfw?: boolean;
                    categories?: import("./app/categories/categories.js").Categories[];
                    ownerId?: string;
                    username?: string;
                    password?: string;
                } | undefined): RecoverAppAccountRequest;
                fromPartial(object: {
                    name?: string;
                    slug?: string;
                    description?: string;
                    isNsfw?: boolean;
                    categories?: import("./app/categories/categories.js").Categories[];
                    ownerId?: string;
                    username?: string;
                    password?: string;
                }): RecoverAppAccountRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.app.info.AppInfo";
                encode(message: AppInfo, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): AppInfo;
                fromJSON(object: any): AppInfo;
                toJSON(message: AppInfo): unknown;
                create(base?: {
                    id?: string;
                    slug?: string;
                    name?: string;
                    description?: string;
                    appAccount?: {
                        id?: string;
                        displayName?: string;
                        snoovatarIconUrl?: string;
                    } | undefined;
                    isNsfw?: boolean;
                    isDelisted?: boolean;
                    isFirstParty?: boolean;
                    isArchived?: boolean;
                    isWebviewEnabled?: boolean;
                    createdAt?: Date | undefined;
                    owner?: {
                        id?: string;
                        displayName?: string;
                        snoovatarIconUrl?: string;
                    } | undefined;
                    categories?: import("./app/categories/categories.js").Categories[];
                    stats?: {
                        installCount?: number;
                    } | undefined;
                    termsAndConditions?: string;
                    privacyPolicy?: string;
                    defaultPool?: import("./app_version/info/app_version_info.js").ComputePool;
                    capabilities?: import("./app/info/app_info.js").AppCapability[];
                    isDisabled?: boolean;
                } | undefined): AppInfo;
                fromPartial(object: {
                    id?: string;
                    slug?: string;
                    name?: string;
                    description?: string;
                    appAccount?: {
                        id?: string;
                        displayName?: string;
                        snoovatarIconUrl?: string;
                    } | undefined;
                    isNsfw?: boolean;
                    isDelisted?: boolean;
                    isFirstParty?: boolean;
                    isArchived?: boolean;
                    isWebviewEnabled?: boolean;
                    createdAt?: Date | undefined;
                    owner?: {
                        id?: string;
                        displayName?: string;
                        snoovatarIconUrl?: string;
                    } | undefined;
                    categories?: import("./app/categories/categories.js").Categories[];
                    stats?: {
                        installCount?: number;
                    } | undefined;
                    termsAndConditions?: string;
                    privacyPolicy?: string;
                    defaultPool?: import("./app_version/info/app_version_info.js").ComputePool;
                    capabilities?: import("./app/info/app_info.js").AppCapability[];
                    isDisabled?: boolean;
                }): AppInfo;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
export interface AppVersion {
    Create(request: AppVersionCreationRequest, metadata?: Metadata): Promise<AppVersionInfo>;
    Get(request: UUID, metadata?: Metadata): Promise<FullAppVersionInfo>;
    GetBySlugAndVersionNumber(request: AppSlugAndVersion, metadata?: Metadata): Promise<FullAppVersionInfo>;
    Update(request: AppVersionUpdateRequest, metadata?: Metadata): Promise<FullAppVersionInfo>;
    GetValidInstallLocations(request: ValidInstallLocationsRequest, metadata?: Metadata): Promise<ValidInstallLocationsResponse>;
    GetAppVersionBundle(request: UUID, metadata?: Metadata): Promise<GetAppVersionBundleResponse>;
    /**
     * Get app nutritional labels by app name (slug) and optional version (1.2.3,
     * 1.2.3.4, latest). Unlike SemVer, latest includes pre-release versions, not
     * just stable.
     */
    GetNutritionByNameVersion(request: GetNutritionByNameVersionRequest, metadata?: Metadata): Promise<MultipleNutritionCategories>;
    /** Get app nutritional labels by app version id */
    GetNutritionByAppVersionId(request: UUID, metadata?: Metadata): Promise<MultipleNutritionCategories>;
    /** Get app products by app version id */
    GetProductsByAppVersionId(request: UUID, metadata?: Metadata): Promise<ProductList>;
}
export declare const AppVersionServiceName = "devvit.dev_portal.AppVersion";
export declare class AppVersionClientImpl implements AppVersion {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Create(request: AppVersionCreationRequest, metadata?: Metadata): Promise<AppVersionInfo>;
    Get(request: UUID, metadata?: Metadata): Promise<FullAppVersionInfo>;
    GetBySlugAndVersionNumber(request: AppSlugAndVersion, metadata?: Metadata): Promise<FullAppVersionInfo>;
    Update(request: AppVersionUpdateRequest, metadata?: Metadata): Promise<FullAppVersionInfo>;
    GetValidInstallLocations(request: ValidInstallLocationsRequest, metadata?: Metadata): Promise<ValidInstallLocationsResponse>;
    GetAppVersionBundle(request: UUID, metadata?: Metadata): Promise<GetAppVersionBundleResponse>;
    GetNutritionByNameVersion(request: GetNutritionByNameVersionRequest, metadata?: Metadata): Promise<MultipleNutritionCategories>;
    GetNutritionByAppVersionId(request: UUID, metadata?: Metadata): Promise<MultipleNutritionCategories>;
    GetProductsByAppVersionId(request: UUID, metadata?: Metadata): Promise<ProductList>;
}
export type AppVersionDefinition = typeof AppVersionDefinition;
export declare const AppVersionDefinition: {
    readonly name: "AppVersion";
    readonly fullName: "devvit.dev_portal.AppVersion";
    readonly methods: {
        readonly create: {
            readonly name: "Create";
            readonly requestType: {
                $type: "devvit.dev_portal.app_version.AppVersionCreationRequest";
                encode(message: AppVersionCreationRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): AppVersionCreationRequest;
                fromJSON(object: any): AppVersionCreationRequest;
                toJSON(message: AppVersionCreationRequest): unknown;
                create(base?: {
                    appId?: string;
                    visibility?: import("./app_version/info/app_version_info.js").VersionVisibility;
                    validInstallTypes?: import("./app_version/info/app_version_info.js").InstallationType[];
                    majorVersion?: number;
                    minorVersion?: number;
                    patchVersion?: number;
                    prereleaseVersion?: number | undefined;
                    actorBundles?: {
                        code?: string;
                        sourceMap?: string | undefined;
                        dependencies?: {
                            actor?: {
                                name?: string;
                                owner?: string;
                                version?: string;
                            } | undefined;
                            hostname?: string;
                            provides?: {
                                actor?: {
                                    name?: string;
                                    owner?: string;
                                    version?: string;
                                } | undefined;
                                definition?: {
                                    fullName?: string;
                                    methods?: {
                                        fullName?: string;
                                        name?: string;
                                        requestStream?: boolean;
                                        responseStream?: boolean;
                                        requestType?: string;
                                        responseType?: string;
                                    }[];
                                    name?: string;
                                    version?: string;
                                } | undefined;
                                locations?: {
                                    allow?: string[];
                                    deny?: string[];
                                } | undefined;
                                partitionsBy?: string[];
                            }[];
                            uses?: {
                                name?: string | undefined;
                                owner?: string | undefined;
                                typeName?: string;
                                versions?: string | undefined;
                            }[];
                        } | undefined;
                        buildInfo?: {
                            created?: Date | undefined;
                            dependencies?: {
                                [x: string]: string | undefined;
                            };
                            targetRuntime?: import("../runtime/bundle.js").TargetRuntime;
                        } | undefined;
                        assets?: {
                            files?: {
                                path?: string;
                                content?: string;
                                isDirectory?: boolean;
                                isBase64?: boolean;
                            }[];
                        } | undefined;
                        assetIds?: {
                            [x: string]: string | undefined;
                        };
                        webviewAssetIds?: {
                            [x: string]: string | undefined;
                        };
                        paymentsConfig?: {
                            products?: {
                                [x: string]: {
                                    sku?: string;
                                    name?: string;
                                    price?: {
                                        amount?: number;
                                        currency?: import("../payments/v1alpha/product.js").Currency;
                                    } | undefined;
                                    environment?: import("../payments/v1alpha/common.js").Environment;
                                    description?: string;
                                    accountingType?: import("../payments/v1alpha/product.js").AccountingType;
                                    productMetadata?: {
                                        [x: string]: string | undefined;
                                    };
                                    images?: {
                                        [x: string]: string | undefined;
                                    };
                                } | undefined;
                            };
                        } | undefined;
                    }[];
                    about?: string;
                } | undefined): AppVersionCreationRequest;
                fromPartial(object: {
                    appId?: string;
                    visibility?: import("./app_version/info/app_version_info.js").VersionVisibility;
                    validInstallTypes?: import("./app_version/info/app_version_info.js").InstallationType[];
                    majorVersion?: number;
                    minorVersion?: number;
                    patchVersion?: number;
                    prereleaseVersion?: number | undefined;
                    actorBundles?: {
                        code?: string;
                        sourceMap?: string | undefined;
                        dependencies?: {
                            actor?: {
                                name?: string;
                                owner?: string;
                                version?: string;
                            } | undefined;
                            hostname?: string;
                            provides?: {
                                actor?: {
                                    name?: string;
                                    owner?: string;
                                    version?: string;
                                } | undefined;
                                definition?: {
                                    fullName?: string;
                                    methods?: {
                                        fullName?: string;
                                        name?: string;
                                        requestStream?: boolean;
                                        responseStream?: boolean;
                                        requestType?: string;
                                        responseType?: string;
                                    }[];
                                    name?: string;
                                    version?: string;
                                } | undefined;
                                locations?: {
                                    allow?: string[];
                                    deny?: string[];
                                } | undefined;
                                partitionsBy?: string[];
                            }[];
                            uses?: {
                                name?: string | undefined;
                                owner?: string | undefined;
                                typeName?: string;
                                versions?: string | undefined;
                            }[];
                        } | undefined;
                        buildInfo?: {
                            created?: Date | undefined;
                            dependencies?: {
                                [x: string]: string | undefined;
                            };
                            targetRuntime?: import("../runtime/bundle.js").TargetRuntime;
                        } | undefined;
                        assets?: {
                            files?: {
                                path?: string;
                                content?: string;
                                isDirectory?: boolean;
                                isBase64?: boolean;
                            }[];
                        } | undefined;
                        assetIds?: {
                            [x: string]: string | undefined;
                        };
                        webviewAssetIds?: {
                            [x: string]: string | undefined;
                        };
                        paymentsConfig?: {
                            products?: {
                                [x: string]: {
                                    sku?: string;
                                    name?: string;
                                    price?: {
                                        amount?: number;
                                        currency?: import("../payments/v1alpha/product.js").Currency;
                                    } | undefined;
                                    environment?: import("../payments/v1alpha/common.js").Environment;
                                    description?: string;
                                    accountingType?: import("../payments/v1alpha/product.js").AccountingType;
                                    productMetadata?: {
                                        [x: string]: string | undefined;
                                    };
                                    images?: {
                                        [x: string]: string | undefined;
                                    };
                                } | undefined;
                            };
                        } | undefined;
                    }[];
                    about?: string;
                }): AppVersionCreationRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.app_version.info.AppVersionInfo";
                encode(message: AppVersionInfo, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): AppVersionInfo;
                fromJSON(object: any): AppVersionInfo;
                toJSON(message: AppVersionInfo): unknown;
                create(base?: {
                    id?: string;
                    visibility?: import("./app_version/info/app_version_info.js").VersionVisibility;
                    validInstallTypes?: import("./app_version/info/app_version_info.js").InstallationType[];
                    majorVersion?: number;
                    minorVersion?: number;
                    patchVersion?: number;
                    prereleaseVersion?: number | undefined;
                    uploadedAt?: Date | undefined;
                    buildStatus?: import("./app_version/info/app_version_info.js").BuildStatus;
                    builtAt?: Date | undefined;
                    about?: string;
                    hasCustomSettings?: boolean;
                    pool?: import("./app_version/info/app_version_info.js").ComputePool;
                } | undefined): AppVersionInfo;
                fromPartial(object: {
                    id?: string;
                    visibility?: import("./app_version/info/app_version_info.js").VersionVisibility;
                    validInstallTypes?: import("./app_version/info/app_version_info.js").InstallationType[];
                    majorVersion?: number;
                    minorVersion?: number;
                    patchVersion?: number;
                    prereleaseVersion?: number | undefined;
                    uploadedAt?: Date | undefined;
                    buildStatus?: import("./app_version/info/app_version_info.js").BuildStatus;
                    builtAt?: Date | undefined;
                    about?: string;
                    hasCustomSettings?: boolean;
                    pool?: import("./app_version/info/app_version_info.js").ComputePool;
                }): AppVersionInfo;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly get: {
            readonly name: "Get";
            readonly requestType: {
                $type: "devvit.UUID";
                encode(message: UUID, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): UUID;
                fromJSON(object: any): UUID;
                toJSON(message: UUID): unknown;
                create(base?: {
                    id?: string;
                } | undefined): UUID;
                fromPartial(object: {
                    id?: string;
                }): UUID;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.app_version.FullAppVersionInfo";
                encode(message: FullAppVersionInfo, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): FullAppVersionInfo;
                fromJSON(object: any): FullAppVersionInfo;
                toJSON(message: FullAppVersionInfo): unknown;
                create(base?: {
                    appVersion?: {
                        id?: string;
                        visibility?: import("./app_version/info/app_version_info.js").VersionVisibility;
                        validInstallTypes?: import("./app_version/info/app_version_info.js").InstallationType[];
                        majorVersion?: number;
                        minorVersion?: number;
                        patchVersion?: number;
                        prereleaseVersion?: number | undefined;
                        uploadedAt?: Date | undefined;
                        buildStatus?: import("./app_version/info/app_version_info.js").BuildStatus;
                        builtAt?: Date | undefined;
                        about?: string;
                        hasCustomSettings?: boolean;
                        pool?: import("./app_version/info/app_version_info.js").ComputePool;
                    } | undefined;
                    app?: {
                        id?: string;
                        slug?: string;
                        name?: string;
                        description?: string;
                        appAccount?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        isNsfw?: boolean;
                        isDelisted?: boolean;
                        isFirstParty?: boolean;
                        isArchived?: boolean;
                        isWebviewEnabled?: boolean;
                        createdAt?: Date | undefined;
                        owner?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        categories?: import("./app/categories/categories.js").Categories[];
                        stats?: {
                            installCount?: number;
                        } | undefined;
                        termsAndConditions?: string;
                        privacyPolicy?: string;
                        defaultPool?: import("./app_version/info/app_version_info.js").ComputePool;
                        capabilities?: import("./app/info/app_info.js").AppCapability[];
                        isDisabled?: boolean;
                    } | undefined;
                    actorTypes?: {
                        id?: string;
                        name?: string;
                        isEnabled?: boolean;
                    }[];
                    installations?: {
                        id?: string;
                        upgradeStrategy?: import("./installation/installation.js").UpgradeStrategy;
                        upgradeStrategyConfig?: {
                            [x: string]: any;
                        } | undefined;
                        runAs?: string | undefined;
                        type?: import("./app_version/info/app_version_info.js").InstallationType;
                        location?: {
                            id?: string;
                            name?: string;
                            type?: import("../reddit/thing_type.js").ThingType;
                            icon?: string | undefined;
                            isNsfw?: boolean;
                            isUnavailable?: boolean;
                        } | undefined;
                        isEnabled?: boolean;
                    }[];
                } | undefined): FullAppVersionInfo;
                fromPartial(object: {
                    appVersion?: {
                        id?: string;
                        visibility?: import("./app_version/info/app_version_info.js").VersionVisibility;
                        validInstallTypes?: import("./app_version/info/app_version_info.js").InstallationType[];
                        majorVersion?: number;
                        minorVersion?: number;
                        patchVersion?: number;
                        prereleaseVersion?: number | undefined;
                        uploadedAt?: Date | undefined;
                        buildStatus?: import("./app_version/info/app_version_info.js").BuildStatus;
                        builtAt?: Date | undefined;
                        about?: string;
                        hasCustomSettings?: boolean;
                        pool?: import("./app_version/info/app_version_info.js").ComputePool;
                    } | undefined;
                    app?: {
                        id?: string;
                        slug?: string;
                        name?: string;
                        description?: string;
                        appAccount?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        isNsfw?: boolean;
                        isDelisted?: boolean;
                        isFirstParty?: boolean;
                        isArchived?: boolean;
                        isWebviewEnabled?: boolean;
                        createdAt?: Date | undefined;
                        owner?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        categories?: import("./app/categories/categories.js").Categories[];
                        stats?: {
                            installCount?: number;
                        } | undefined;
                        termsAndConditions?: string;
                        privacyPolicy?: string;
                        defaultPool?: import("./app_version/info/app_version_info.js").ComputePool;
                        capabilities?: import("./app/info/app_info.js").AppCapability[];
                        isDisabled?: boolean;
                    } | undefined;
                    actorTypes?: {
                        id?: string;
                        name?: string;
                        isEnabled?: boolean;
                    }[];
                    installations?: {
                        id?: string;
                        upgradeStrategy?: import("./installation/installation.js").UpgradeStrategy;
                        upgradeStrategyConfig?: {
                            [x: string]: any;
                        } | undefined;
                        runAs?: string | undefined;
                        type?: import("./app_version/info/app_version_info.js").InstallationType;
                        location?: {
                            id?: string;
                            name?: string;
                            type?: import("../reddit/thing_type.js").ThingType;
                            icon?: string | undefined;
                            isNsfw?: boolean;
                            isUnavailable?: boolean;
                        } | undefined;
                        isEnabled?: boolean;
                    }[];
                }): FullAppVersionInfo;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly getBySlugAndVersionNumber: {
            readonly name: "GetBySlugAndVersionNumber";
            readonly requestType: {
                $type: "devvit.dev_portal.app_version.AppSlugAndVersion";
                encode(message: AppSlugAndVersion, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): AppSlugAndVersion;
                fromJSON(object: any): AppSlugAndVersion;
                toJSON(message: AppSlugAndVersion): unknown;
                create(base?: {
                    slug?: string;
                    version?: string;
                } | undefined): AppSlugAndVersion;
                fromPartial(object: {
                    slug?: string;
                    version?: string;
                }): AppSlugAndVersion;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.app_version.FullAppVersionInfo";
                encode(message: FullAppVersionInfo, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): FullAppVersionInfo;
                fromJSON(object: any): FullAppVersionInfo;
                toJSON(message: FullAppVersionInfo): unknown;
                create(base?: {
                    appVersion?: {
                        id?: string;
                        visibility?: import("./app_version/info/app_version_info.js").VersionVisibility;
                        validInstallTypes?: import("./app_version/info/app_version_info.js").InstallationType[];
                        majorVersion?: number;
                        minorVersion?: number;
                        patchVersion?: number;
                        prereleaseVersion?: number | undefined;
                        uploadedAt?: Date | undefined;
                        buildStatus?: import("./app_version/info/app_version_info.js").BuildStatus;
                        builtAt?: Date | undefined;
                        about?: string;
                        hasCustomSettings?: boolean;
                        pool?: import("./app_version/info/app_version_info.js").ComputePool;
                    } | undefined;
                    app?: {
                        id?: string;
                        slug?: string;
                        name?: string;
                        description?: string;
                        appAccount?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        isNsfw?: boolean;
                        isDelisted?: boolean;
                        isFirstParty?: boolean;
                        isArchived?: boolean;
                        isWebviewEnabled?: boolean;
                        createdAt?: Date | undefined;
                        owner?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        categories?: import("./app/categories/categories.js").Categories[];
                        stats?: {
                            installCount?: number;
                        } | undefined;
                        termsAndConditions?: string;
                        privacyPolicy?: string;
                        defaultPool?: import("./app_version/info/app_version_info.js").ComputePool;
                        capabilities?: import("./app/info/app_info.js").AppCapability[];
                        isDisabled?: boolean;
                    } | undefined;
                    actorTypes?: {
                        id?: string;
                        name?: string;
                        isEnabled?: boolean;
                    }[];
                    installations?: {
                        id?: string;
                        upgradeStrategy?: import("./installation/installation.js").UpgradeStrategy;
                        upgradeStrategyConfig?: {
                            [x: string]: any;
                        } | undefined;
                        runAs?: string | undefined;
                        type?: import("./app_version/info/app_version_info.js").InstallationType;
                        location?: {
                            id?: string;
                            name?: string;
                            type?: import("../reddit/thing_type.js").ThingType;
                            icon?: string | undefined;
                            isNsfw?: boolean;
                            isUnavailable?: boolean;
                        } | undefined;
                        isEnabled?: boolean;
                    }[];
                } | undefined): FullAppVersionInfo;
                fromPartial(object: {
                    appVersion?: {
                        id?: string;
                        visibility?: import("./app_version/info/app_version_info.js").VersionVisibility;
                        validInstallTypes?: import("./app_version/info/app_version_info.js").InstallationType[];
                        majorVersion?: number;
                        minorVersion?: number;
                        patchVersion?: number;
                        prereleaseVersion?: number | undefined;
                        uploadedAt?: Date | undefined;
                        buildStatus?: import("./app_version/info/app_version_info.js").BuildStatus;
                        builtAt?: Date | undefined;
                        about?: string;
                        hasCustomSettings?: boolean;
                        pool?: import("./app_version/info/app_version_info.js").ComputePool;
                    } | undefined;
                    app?: {
                        id?: string;
                        slug?: string;
                        name?: string;
                        description?: string;
                        appAccount?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        isNsfw?: boolean;
                        isDelisted?: boolean;
                        isFirstParty?: boolean;
                        isArchived?: boolean;
                        isWebviewEnabled?: boolean;
                        createdAt?: Date | undefined;
                        owner?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        categories?: import("./app/categories/categories.js").Categories[];
                        stats?: {
                            installCount?: number;
                        } | undefined;
                        termsAndConditions?: string;
                        privacyPolicy?: string;
                        defaultPool?: import("./app_version/info/app_version_info.js").ComputePool;
                        capabilities?: import("./app/info/app_info.js").AppCapability[];
                        isDisabled?: boolean;
                    } | undefined;
                    actorTypes?: {
                        id?: string;
                        name?: string;
                        isEnabled?: boolean;
                    }[];
                    installations?: {
                        id?: string;
                        upgradeStrategy?: import("./installation/installation.js").UpgradeStrategy;
                        upgradeStrategyConfig?: {
                            [x: string]: any;
                        } | undefined;
                        runAs?: string | undefined;
                        type?: import("./app_version/info/app_version_info.js").InstallationType;
                        location?: {
                            id?: string;
                            name?: string;
                            type?: import("../reddit/thing_type.js").ThingType;
                            icon?: string | undefined;
                            isNsfw?: boolean;
                            isUnavailable?: boolean;
                        } | undefined;
                        isEnabled?: boolean;
                    }[];
                }): FullAppVersionInfo;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly update: {
            readonly name: "Update";
            readonly requestType: {
                $type: "devvit.dev_portal.app_version.AppVersionUpdateRequest";
                encode(message: AppVersionUpdateRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): AppVersionUpdateRequest;
                fromJSON(object: any): AppVersionUpdateRequest;
                toJSON(message: AppVersionUpdateRequest): unknown;
                create(base?: {
                    id?: string;
                    visibility?: {
                        value?: import("./app_version/info/app_version_info.js").VersionVisibility;
                    } | undefined;
                    validInstallTypes?: import("./app_version/info/app_version_info.js").InstallationType[];
                    about?: string | undefined;
                    pool?: import("./app_version/info/app_version_info.js").ComputePool;
                } | undefined): AppVersionUpdateRequest;
                fromPartial(object: {
                    id?: string;
                    visibility?: {
                        value?: import("./app_version/info/app_version_info.js").VersionVisibility;
                    } | undefined;
                    validInstallTypes?: import("./app_version/info/app_version_info.js").InstallationType[];
                    about?: string | undefined;
                    pool?: import("./app_version/info/app_version_info.js").ComputePool;
                }): AppVersionUpdateRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.app_version.FullAppVersionInfo";
                encode(message: FullAppVersionInfo, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): FullAppVersionInfo;
                fromJSON(object: any): FullAppVersionInfo;
                toJSON(message: FullAppVersionInfo): unknown;
                create(base?: {
                    appVersion?: {
                        id?: string;
                        visibility?: import("./app_version/info/app_version_info.js").VersionVisibility;
                        validInstallTypes?: import("./app_version/info/app_version_info.js").InstallationType[];
                        majorVersion?: number;
                        minorVersion?: number;
                        patchVersion?: number;
                        prereleaseVersion?: number | undefined;
                        uploadedAt?: Date | undefined;
                        buildStatus?: import("./app_version/info/app_version_info.js").BuildStatus;
                        builtAt?: Date | undefined;
                        about?: string;
                        hasCustomSettings?: boolean;
                        pool?: import("./app_version/info/app_version_info.js").ComputePool;
                    } | undefined;
                    app?: {
                        id?: string;
                        slug?: string;
                        name?: string;
                        description?: string;
                        appAccount?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        isNsfw?: boolean;
                        isDelisted?: boolean;
                        isFirstParty?: boolean;
                        isArchived?: boolean;
                        isWebviewEnabled?: boolean;
                        createdAt?: Date | undefined;
                        owner?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        categories?: import("./app/categories/categories.js").Categories[];
                        stats?: {
                            installCount?: number;
                        } | undefined;
                        termsAndConditions?: string;
                        privacyPolicy?: string;
                        defaultPool?: import("./app_version/info/app_version_info.js").ComputePool;
                        capabilities?: import("./app/info/app_info.js").AppCapability[];
                        isDisabled?: boolean;
                    } | undefined;
                    actorTypes?: {
                        id?: string;
                        name?: string;
                        isEnabled?: boolean;
                    }[];
                    installations?: {
                        id?: string;
                        upgradeStrategy?: import("./installation/installation.js").UpgradeStrategy;
                        upgradeStrategyConfig?: {
                            [x: string]: any;
                        } | undefined;
                        runAs?: string | undefined;
                        type?: import("./app_version/info/app_version_info.js").InstallationType;
                        location?: {
                            id?: string;
                            name?: string;
                            type?: import("../reddit/thing_type.js").ThingType;
                            icon?: string | undefined;
                            isNsfw?: boolean;
                            isUnavailable?: boolean;
                        } | undefined;
                        isEnabled?: boolean;
                    }[];
                } | undefined): FullAppVersionInfo;
                fromPartial(object: {
                    appVersion?: {
                        id?: string;
                        visibility?: import("./app_version/info/app_version_info.js").VersionVisibility;
                        validInstallTypes?: import("./app_version/info/app_version_info.js").InstallationType[];
                        majorVersion?: number;
                        minorVersion?: number;
                        patchVersion?: number;
                        prereleaseVersion?: number | undefined;
                        uploadedAt?: Date | undefined;
                        buildStatus?: import("./app_version/info/app_version_info.js").BuildStatus;
                        builtAt?: Date | undefined;
                        about?: string;
                        hasCustomSettings?: boolean;
                        pool?: import("./app_version/info/app_version_info.js").ComputePool;
                    } | undefined;
                    app?: {
                        id?: string;
                        slug?: string;
                        name?: string;
                        description?: string;
                        appAccount?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        isNsfw?: boolean;
                        isDelisted?: boolean;
                        isFirstParty?: boolean;
                        isArchived?: boolean;
                        isWebviewEnabled?: boolean;
                        createdAt?: Date | undefined;
                        owner?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        categories?: import("./app/categories/categories.js").Categories[];
                        stats?: {
                            installCount?: number;
                        } | undefined;
                        termsAndConditions?: string;
                        privacyPolicy?: string;
                        defaultPool?: import("./app_version/info/app_version_info.js").ComputePool;
                        capabilities?: import("./app/info/app_info.js").AppCapability[];
                        isDisabled?: boolean;
                    } | undefined;
                    actorTypes?: {
                        id?: string;
                        name?: string;
                        isEnabled?: boolean;
                    }[];
                    installations?: {
                        id?: string;
                        upgradeStrategy?: import("./installation/installation.js").UpgradeStrategy;
                        upgradeStrategyConfig?: {
                            [x: string]: any;
                        } | undefined;
                        runAs?: string | undefined;
                        type?: import("./app_version/info/app_version_info.js").InstallationType;
                        location?: {
                            id?: string;
                            name?: string;
                            type?: import("../reddit/thing_type.js").ThingType;
                            icon?: string | undefined;
                            isNsfw?: boolean;
                            isUnavailable?: boolean;
                        } | undefined;
                        isEnabled?: boolean;
                    }[];
                }): FullAppVersionInfo;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly getValidInstallLocations: {
            readonly name: "GetValidInstallLocations";
            readonly requestType: {
                $type: "devvit.dev_portal.app_version.ValidInstallLocationsRequest";
                encode(message: ValidInstallLocationsRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ValidInstallLocationsRequest;
                fromJSON(object: any): ValidInstallLocationsRequest;
                toJSON(message: ValidInstallLocationsRequest): unknown;
                create(base?: {
                    id?: string;
                    pageInfo?: {
                        type?: import("./app_version/info/app_version_info.js").InstallationType;
                        before?: string | undefined;
                        after?: string | undefined;
                    }[];
                } | undefined): ValidInstallLocationsRequest;
                fromPartial(object: {
                    id?: string;
                    pageInfo?: {
                        type?: import("./app_version/info/app_version_info.js").InstallationType;
                        before?: string | undefined;
                        after?: string | undefined;
                    }[];
                }): ValidInstallLocationsRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.app_version.ValidInstallLocationsResponse";
                encode(message: ValidInstallLocationsResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ValidInstallLocationsResponse;
                fromJSON(object: any): ValidInstallLocationsResponse;
                toJSON(message: ValidInstallLocationsResponse): unknown;
                create(base?: {
                    locations?: {
                        type?: import("./app_version/info/app_version_info.js").InstallationType;
                        locations?: {
                            thingId?: string;
                            name?: string;
                            existingInstallId?: string | undefined;
                            icon?: string | undefined;
                        }[];
                        pageInfo?: {
                            hasNextPage?: boolean;
                            hasPreviousPage?: boolean;
                            startCursor?: string;
                            endCursor?: string;
                        } | undefined;
                    }[];
                } | undefined): ValidInstallLocationsResponse;
                fromPartial(object: {
                    locations?: {
                        type?: import("./app_version/info/app_version_info.js").InstallationType;
                        locations?: {
                            thingId?: string;
                            name?: string;
                            existingInstallId?: string | undefined;
                            icon?: string | undefined;
                        }[];
                        pageInfo?: {
                            hasNextPage?: boolean;
                            hasPreviousPage?: boolean;
                            startCursor?: string;
                            endCursor?: string;
                        } | undefined;
                    }[];
                }): ValidInstallLocationsResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly getAppVersionBundle: {
            readonly name: "GetAppVersionBundle";
            readonly requestType: {
                $type: "devvit.UUID";
                encode(message: UUID, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): UUID;
                fromJSON(object: any): UUID;
                toJSON(message: UUID): unknown;
                create(base?: {
                    id?: string;
                } | undefined): UUID;
                fromPartial(object: {
                    id?: string;
                }): UUID;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.app_version.GetAppVersionBundleResponse";
                encode(message: GetAppVersionBundleResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GetAppVersionBundleResponse;
                fromJSON(object: any): GetAppVersionBundleResponse;
                toJSON(message: GetAppVersionBundleResponse): unknown;
                create(base?: {
                    actorBundles?: {
                        actor?: string;
                        bundle?: {
                            actor?: {
                                name?: string;
                                owner?: string;
                                version?: string;
                            } | undefined;
                            code?: string;
                            sourceMap?: string | undefined;
                            hostname?: string;
                            provides?: {
                                fullName?: string;
                                methods?: {
                                    fullName?: string;
                                    name?: string;
                                    requestStream?: boolean;
                                    responseStream?: boolean;
                                    requestType?: string;
                                    responseType?: string;
                                }[];
                                name?: string;
                                version?: string;
                            }[];
                            uses?: any[];
                            buildInfo?: {
                                created?: Date | undefined;
                                dependencies?: {
                                    [x: string]: string | undefined;
                                };
                                targetRuntime?: import("../runtime/bundle.js").TargetRuntime;
                            } | undefined;
                            assetsUrl?: string | undefined;
                            assets?: {
                                [x: string]: string | undefined;
                            };
                            webviewAssets?: {
                                [x: string]: string | undefined;
                            };
                            products?: {
                                [x: string]: string | undefined;
                            };
                        } | undefined;
                    }[];
                } | undefined): GetAppVersionBundleResponse;
                fromPartial(object: {
                    actorBundles?: {
                        actor?: string;
                        bundle?: {
                            actor?: {
                                name?: string;
                                owner?: string;
                                version?: string;
                            } | undefined;
                            code?: string;
                            sourceMap?: string | undefined;
                            hostname?: string;
                            provides?: {
                                fullName?: string;
                                methods?: {
                                    fullName?: string;
                                    name?: string;
                                    requestStream?: boolean;
                                    responseStream?: boolean;
                                    requestType?: string;
                                    responseType?: string;
                                }[];
                                name?: string;
                                version?: string;
                            }[];
                            uses?: any[];
                            buildInfo?: {
                                created?: Date | undefined;
                                dependencies?: {
                                    [x: string]: string | undefined;
                                };
                                targetRuntime?: import("../runtime/bundle.js").TargetRuntime;
                            } | undefined;
                            assetsUrl?: string | undefined;
                            assets?: {
                                [x: string]: string | undefined;
                            };
                            webviewAssets?: {
                                [x: string]: string | undefined;
                            };
                            products?: {
                                [x: string]: string | undefined;
                            };
                        } | undefined;
                    }[];
                }): GetAppVersionBundleResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /**
         * Get app nutritional labels by app name (slug) and optional version (1.2.3,
         * 1.2.3.4, latest). Unlike SemVer, latest includes pre-release versions, not
         * just stable.
         */
        readonly getNutritionByNameVersion: {
            readonly name: "GetNutritionByNameVersion";
            readonly requestType: {
                $type: "devvit.dev_portal.nutrition.GetNutritionByNameVersionRequest";
                encode(message: GetNutritionByNameVersionRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GetNutritionByNameVersionRequest;
                fromJSON(object: any): GetNutritionByNameVersionRequest;
                toJSON(message: GetNutritionByNameVersionRequest): unknown;
                create(base?: {
                    name?: string;
                    version?: string | undefined;
                } | undefined): GetNutritionByNameVersionRequest;
                fromPartial(object: {
                    name?: string;
                    version?: string | undefined;
                }): GetNutritionByNameVersionRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.nutrition.MultipleNutritionCategories";
                encode(message: MultipleNutritionCategories, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MultipleNutritionCategories;
                fromJSON(object: any): MultipleNutritionCategories;
                toJSON(message: MultipleNutritionCategories): unknown;
                create(base?: {
                    categories?: import("./nutrition/nutrition.js").NutritionCategory[];
                } | undefined): MultipleNutritionCategories;
                fromPartial(object: {
                    categories?: import("./nutrition/nutrition.js").NutritionCategory[];
                }): MultipleNutritionCategories;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Get app nutritional labels by app version id */
        readonly getNutritionByAppVersionId: {
            readonly name: "GetNutritionByAppVersionId";
            readonly requestType: {
                $type: "devvit.UUID";
                encode(message: UUID, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): UUID;
                fromJSON(object: any): UUID;
                toJSON(message: UUID): unknown;
                create(base?: {
                    id?: string;
                } | undefined): UUID;
                fromPartial(object: {
                    id?: string;
                }): UUID;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.nutrition.MultipleNutritionCategories";
                encode(message: MultipleNutritionCategories, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MultipleNutritionCategories;
                fromJSON(object: any): MultipleNutritionCategories;
                toJSON(message: MultipleNutritionCategories): unknown;
                create(base?: {
                    categories?: import("./nutrition/nutrition.js").NutritionCategory[];
                } | undefined): MultipleNutritionCategories;
                fromPartial(object: {
                    categories?: import("./nutrition/nutrition.js").NutritionCategory[];
                }): MultipleNutritionCategories;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Get app products by app version id */
        readonly getProductsByAppVersionId: {
            readonly name: "GetProductsByAppVersionId";
            readonly requestType: {
                $type: "devvit.UUID";
                encode(message: UUID, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): UUID;
                fromJSON(object: any): UUID;
                toJSON(message: UUID): unknown;
                create(base?: {
                    id?: string;
                } | undefined): UUID;
                fromPartial(object: {
                    id?: string;
                }): UUID;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.payments.ProductList";
                encode(message: ProductList, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ProductList;
                fromJSON(object: any): ProductList;
                toJSON(message: ProductList): unknown;
                create(base?: {
                    products?: {
                        sku?: string;
                        name?: string;
                        price?: {
                            amount?: number;
                            currency?: import("../payments/v1alpha/product.js").Currency;
                        } | undefined;
                        environment?: import("../payments/v1alpha/common.js").Environment;
                        description?: string;
                        accountingType?: import("../payments/v1alpha/product.js").AccountingType;
                        productMetadata?: {
                            [x: string]: string | undefined;
                        };
                        images?: {
                            [x: string]: string | undefined;
                        };
                    }[];
                } | undefined): ProductList;
                fromPartial(object: {
                    products?: {
                        sku?: string;
                        name?: string;
                        price?: {
                            amount?: number;
                            currency?: import("../payments/v1alpha/product.js").Currency;
                        } | undefined;
                        environment?: import("../payments/v1alpha/common.js").Environment;
                        description?: string;
                        accountingType?: import("../payments/v1alpha/product.js").AccountingType;
                        productMetadata?: {
                            [x: string]: string | undefined;
                        };
                        images?: {
                            [x: string]: string | undefined;
                        };
                    }[];
                }): ProductList;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
export interface Installations {
    Create(request: InstallationCreationRequest, metadata?: Metadata): Promise<FullInstallationInfo>;
    GetByUUID(request: UUID, metadata?: Metadata): Promise<FullInstallationInfo>;
    GetByAppNameAndInstallLocation(request: GetByAppNameAndInstallLocationRequest, metadata?: Metadata): Promise<FullInstallationInfo>;
    GetAllWithInstallLocation(request: GetAllWithInstallLocationRequest, metadata?: Metadata): Promise<MultipleInstallationsResponse>;
    GetAllWithInstaller(request: GetAllWithInstallerRequest, metadata?: Metadata): Promise<MultipleInstallationsResponse>;
    GetAllWithVersionUUID(request: UUID, metadata?: Metadata): Promise<MultipleInstallationsResponse>;
    GetAllWithApp(request: GetAllWithAppRequest, metadata?: Metadata): Promise<GetAllWithAppResponse>;
    GetInstallationHistory(request: GetInstallationHistoryRequest, metadata?: Metadata): Promise<GetInstallationHistoryResponse>;
    Upgrade(request: InstallationUpgradeRequest, metadata?: Metadata): Promise<FullInstallationInfo>;
    UpgradeMany(request: InstallationUpgradeManyRequest, metadata?: Metadata): Promise<InstallationUpgradeManyResponse>;
    Update(request: InstallationUpdateRequest, metadata?: Metadata): Promise<FullInstallationInfo>;
    Remove(request: UUID, metadata?: Metadata): Promise<Empty>;
}
export declare const InstallationsServiceName = "devvit.dev_portal.Installations";
export declare class InstallationsClientImpl implements Installations {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Create(request: InstallationCreationRequest, metadata?: Metadata): Promise<FullInstallationInfo>;
    GetByUUID(request: UUID, metadata?: Metadata): Promise<FullInstallationInfo>;
    GetByAppNameAndInstallLocation(request: GetByAppNameAndInstallLocationRequest, metadata?: Metadata): Promise<FullInstallationInfo>;
    GetAllWithInstallLocation(request: GetAllWithInstallLocationRequest, metadata?: Metadata): Promise<MultipleInstallationsResponse>;
    GetAllWithInstaller(request: GetAllWithInstallerRequest, metadata?: Metadata): Promise<MultipleInstallationsResponse>;
    GetAllWithVersionUUID(request: UUID, metadata?: Metadata): Promise<MultipleInstallationsResponse>;
    GetAllWithApp(request: GetAllWithAppRequest, metadata?: Metadata): Promise<GetAllWithAppResponse>;
    GetInstallationHistory(request: GetInstallationHistoryRequest, metadata?: Metadata): Promise<GetInstallationHistoryResponse>;
    Upgrade(request: InstallationUpgradeRequest, metadata?: Metadata): Promise<FullInstallationInfo>;
    UpgradeMany(request: InstallationUpgradeManyRequest, metadata?: Metadata): Promise<InstallationUpgradeManyResponse>;
    Update(request: InstallationUpdateRequest, metadata?: Metadata): Promise<FullInstallationInfo>;
    Remove(request: UUID, metadata?: Metadata): Promise<Empty>;
}
export type InstallationsDefinition = typeof InstallationsDefinition;
export declare const InstallationsDefinition: {
    readonly name: "Installations";
    readonly fullName: "devvit.dev_portal.Installations";
    readonly methods: {
        readonly create: {
            readonly name: "Create";
            readonly requestType: {
                $type: "devvit.dev_portal.installation.InstallationCreationRequest";
                encode(message: InstallationCreationRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): InstallationCreationRequest;
                fromJSON(object: any): InstallationCreationRequest;
                toJSON(message: InstallationCreationRequest): unknown;
                create(base?: {
                    appVersionId?: string;
                    runAs?: string | undefined;
                    type?: import("./app_version/info/app_version_info.js").InstallationType;
                    location?: string;
                    upgradeStrategy?: import("./installation/installation.js").UpgradeStrategy;
                    upgradeStrategyConfig?: {
                        [x: string]: any;
                    } | undefined;
                } | undefined): InstallationCreationRequest;
                fromPartial(object: {
                    appVersionId?: string;
                    runAs?: string | undefined;
                    type?: import("./app_version/info/app_version_info.js").InstallationType;
                    location?: string;
                    upgradeStrategy?: import("./installation/installation.js").UpgradeStrategy;
                    upgradeStrategyConfig?: {
                        [x: string]: any;
                    } | undefined;
                }): InstallationCreationRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.installation.FullInstallationInfo";
                encode(message: FullInstallationInfo, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): FullInstallationInfo;
                fromJSON(object: any): FullInstallationInfo;
                toJSON(message: FullInstallationInfo): unknown;
                create(base?: {
                    installation?: {
                        id?: string;
                        upgradeStrategy?: import("./installation/installation.js").UpgradeStrategy;
                        upgradeStrategyConfig?: {
                            [x: string]: any;
                        } | undefined;
                        runAs?: string | undefined;
                        type?: import("./app_version/info/app_version_info.js").InstallationType;
                        location?: {
                            id?: string;
                            name?: string;
                            type?: import("../reddit/thing_type.js").ThingType;
                            icon?: string | undefined;
                            isNsfw?: boolean;
                            isUnavailable?: boolean;
                        } | undefined;
                        isEnabled?: boolean;
                    } | undefined;
                    appVersion?: {
                        id?: string;
                        visibility?: import("./app_version/info/app_version_info.js").VersionVisibility;
                        validInstallTypes?: import("./app_version/info/app_version_info.js").InstallationType[];
                        majorVersion?: number;
                        minorVersion?: number;
                        patchVersion?: number;
                        prereleaseVersion?: number | undefined;
                        uploadedAt?: Date | undefined;
                        buildStatus?: import("./app_version/info/app_version_info.js").BuildStatus;
                        builtAt?: Date | undefined;
                        about?: string;
                        hasCustomSettings?: boolean;
                        pool?: import("./app_version/info/app_version_info.js").ComputePool;
                    } | undefined;
                    app?: {
                        id?: string;
                        slug?: string;
                        name?: string;
                        description?: string;
                        appAccount?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        isNsfw?: boolean;
                        isDelisted?: boolean;
                        isFirstParty?: boolean;
                        isArchived?: boolean;
                        isWebviewEnabled?: boolean;
                        createdAt?: Date | undefined;
                        owner?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        categories?: import("./app/categories/categories.js").Categories[];
                        stats?: {
                            installCount?: number;
                        } | undefined;
                        termsAndConditions?: string;
                        privacyPolicy?: string;
                        defaultPool?: import("./app_version/info/app_version_info.js").ComputePool;
                        capabilities?: import("./app/info/app_info.js").AppCapability[];
                        isDisabled?: boolean;
                    } | undefined;
                } | undefined): FullInstallationInfo;
                fromPartial(object: {
                    installation?: {
                        id?: string;
                        upgradeStrategy?: import("./installation/installation.js").UpgradeStrategy;
                        upgradeStrategyConfig?: {
                            [x: string]: any;
                        } | undefined;
                        runAs?: string | undefined;
                        type?: import("./app_version/info/app_version_info.js").InstallationType;
                        location?: {
                            id?: string;
                            name?: string;
                            type?: import("../reddit/thing_type.js").ThingType;
                            icon?: string | undefined;
                            isNsfw?: boolean;
                            isUnavailable?: boolean;
                        } | undefined;
                        isEnabled?: boolean;
                    } | undefined;
                    appVersion?: {
                        id?: string;
                        visibility?: import("./app_version/info/app_version_info.js").VersionVisibility;
                        validInstallTypes?: import("./app_version/info/app_version_info.js").InstallationType[];
                        majorVersion?: number;
                        minorVersion?: number;
                        patchVersion?: number;
                        prereleaseVersion?: number | undefined;
                        uploadedAt?: Date | undefined;
                        buildStatus?: import("./app_version/info/app_version_info.js").BuildStatus;
                        builtAt?: Date | undefined;
                        about?: string;
                        hasCustomSettings?: boolean;
                        pool?: import("./app_version/info/app_version_info.js").ComputePool;
                    } | undefined;
                    app?: {
                        id?: string;
                        slug?: string;
                        name?: string;
                        description?: string;
                        appAccount?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        isNsfw?: boolean;
                        isDelisted?: boolean;
                        isFirstParty?: boolean;
                        isArchived?: boolean;
                        isWebviewEnabled?: boolean;
                        createdAt?: Date | undefined;
                        owner?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        categories?: import("./app/categories/categories.js").Categories[];
                        stats?: {
                            installCount?: number;
                        } | undefined;
                        termsAndConditions?: string;
                        privacyPolicy?: string;
                        defaultPool?: import("./app_version/info/app_version_info.js").ComputePool;
                        capabilities?: import("./app/info/app_info.js").AppCapability[];
                        isDisabled?: boolean;
                    } | undefined;
                }): FullInstallationInfo;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly getByUUID: {
            readonly name: "GetByUUID";
            readonly requestType: {
                $type: "devvit.UUID";
                encode(message: UUID, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): UUID;
                fromJSON(object: any): UUID;
                toJSON(message: UUID): unknown;
                create(base?: {
                    id?: string;
                } | undefined): UUID;
                fromPartial(object: {
                    id?: string;
                }): UUID;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.installation.FullInstallationInfo";
                encode(message: FullInstallationInfo, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): FullInstallationInfo;
                fromJSON(object: any): FullInstallationInfo;
                toJSON(message: FullInstallationInfo): unknown;
                create(base?: {
                    installation?: {
                        id?: string;
                        upgradeStrategy?: import("./installation/installation.js").UpgradeStrategy;
                        upgradeStrategyConfig?: {
                            [x: string]: any;
                        } | undefined;
                        runAs?: string | undefined;
                        type?: import("./app_version/info/app_version_info.js").InstallationType;
                        location?: {
                            id?: string;
                            name?: string;
                            type?: import("../reddit/thing_type.js").ThingType;
                            icon?: string | undefined;
                            isNsfw?: boolean;
                            isUnavailable?: boolean;
                        } | undefined;
                        isEnabled?: boolean;
                    } | undefined;
                    appVersion?: {
                        id?: string;
                        visibility?: import("./app_version/info/app_version_info.js").VersionVisibility;
                        validInstallTypes?: import("./app_version/info/app_version_info.js").InstallationType[];
                        majorVersion?: number;
                        minorVersion?: number;
                        patchVersion?: number;
                        prereleaseVersion?: number | undefined;
                        uploadedAt?: Date | undefined;
                        buildStatus?: import("./app_version/info/app_version_info.js").BuildStatus;
                        builtAt?: Date | undefined;
                        about?: string;
                        hasCustomSettings?: boolean;
                        pool?: import("./app_version/info/app_version_info.js").ComputePool;
                    } | undefined;
                    app?: {
                        id?: string;
                        slug?: string;
                        name?: string;
                        description?: string;
                        appAccount?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        isNsfw?: boolean;
                        isDelisted?: boolean;
                        isFirstParty?: boolean;
                        isArchived?: boolean;
                        isWebviewEnabled?: boolean;
                        createdAt?: Date | undefined;
                        owner?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        categories?: import("./app/categories/categories.js").Categories[];
                        stats?: {
                            installCount?: number;
                        } | undefined;
                        termsAndConditions?: string;
                        privacyPolicy?: string;
                        defaultPool?: import("./app_version/info/app_version_info.js").ComputePool;
                        capabilities?: import("./app/info/app_info.js").AppCapability[];
                        isDisabled?: boolean;
                    } | undefined;
                } | undefined): FullInstallationInfo;
                fromPartial(object: {
                    installation?: {
                        id?: string;
                        upgradeStrategy?: import("./installation/installation.js").UpgradeStrategy;
                        upgradeStrategyConfig?: {
                            [x: string]: any;
                        } | undefined;
                        runAs?: string | undefined;
                        type?: import("./app_version/info/app_version_info.js").InstallationType;
                        location?: {
                            id?: string;
                            name?: string;
                            type?: import("../reddit/thing_type.js").ThingType;
                            icon?: string | undefined;
                            isNsfw?: boolean;
                            isUnavailable?: boolean;
                        } | undefined;
                        isEnabled?: boolean;
                    } | undefined;
                    appVersion?: {
                        id?: string;
                        visibility?: import("./app_version/info/app_version_info.js").VersionVisibility;
                        validInstallTypes?: import("./app_version/info/app_version_info.js").InstallationType[];
                        majorVersion?: number;
                        minorVersion?: number;
                        patchVersion?: number;
                        prereleaseVersion?: number | undefined;
                        uploadedAt?: Date | undefined;
                        buildStatus?: import("./app_version/info/app_version_info.js").BuildStatus;
                        builtAt?: Date | undefined;
                        about?: string;
                        hasCustomSettings?: boolean;
                        pool?: import("./app_version/info/app_version_info.js").ComputePool;
                    } | undefined;
                    app?: {
                        id?: string;
                        slug?: string;
                        name?: string;
                        description?: string;
                        appAccount?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        isNsfw?: boolean;
                        isDelisted?: boolean;
                        isFirstParty?: boolean;
                        isArchived?: boolean;
                        isWebviewEnabled?: boolean;
                        createdAt?: Date | undefined;
                        owner?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        categories?: import("./app/categories/categories.js").Categories[];
                        stats?: {
                            installCount?: number;
                        } | undefined;
                        termsAndConditions?: string;
                        privacyPolicy?: string;
                        defaultPool?: import("./app_version/info/app_version_info.js").ComputePool;
                        capabilities?: import("./app/info/app_info.js").AppCapability[];
                        isDisabled?: boolean;
                    } | undefined;
                }): FullInstallationInfo;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly getByAppNameAndInstallLocation: {
            readonly name: "GetByAppNameAndInstallLocation";
            readonly requestType: {
                $type: "devvit.dev_portal.installation.GetByAppNameAndInstallLocationRequest";
                encode(message: GetByAppNameAndInstallLocationRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GetByAppNameAndInstallLocationRequest;
                fromJSON(object: any): GetByAppNameAndInstallLocationRequest;
                toJSON(message: GetByAppNameAndInstallLocationRequest): unknown;
                create(base?: {
                    slug?: string;
                    type?: import("./app_version/info/app_version_info.js").InstallationType;
                    location?: string;
                } | undefined): GetByAppNameAndInstallLocationRequest;
                fromPartial(object: {
                    slug?: string;
                    type?: import("./app_version/info/app_version_info.js").InstallationType;
                    location?: string;
                }): GetByAppNameAndInstallLocationRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.installation.FullInstallationInfo";
                encode(message: FullInstallationInfo, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): FullInstallationInfo;
                fromJSON(object: any): FullInstallationInfo;
                toJSON(message: FullInstallationInfo): unknown;
                create(base?: {
                    installation?: {
                        id?: string;
                        upgradeStrategy?: import("./installation/installation.js").UpgradeStrategy;
                        upgradeStrategyConfig?: {
                            [x: string]: any;
                        } | undefined;
                        runAs?: string | undefined;
                        type?: import("./app_version/info/app_version_info.js").InstallationType;
                        location?: {
                            id?: string;
                            name?: string;
                            type?: import("../reddit/thing_type.js").ThingType;
                            icon?: string | undefined;
                            isNsfw?: boolean;
                            isUnavailable?: boolean;
                        } | undefined;
                        isEnabled?: boolean;
                    } | undefined;
                    appVersion?: {
                        id?: string;
                        visibility?: import("./app_version/info/app_version_info.js").VersionVisibility;
                        validInstallTypes?: import("./app_version/info/app_version_info.js").InstallationType[];
                        majorVersion?: number;
                        minorVersion?: number;
                        patchVersion?: number;
                        prereleaseVersion?: number | undefined;
                        uploadedAt?: Date | undefined;
                        buildStatus?: import("./app_version/info/app_version_info.js").BuildStatus;
                        builtAt?: Date | undefined;
                        about?: string;
                        hasCustomSettings?: boolean;
                        pool?: import("./app_version/info/app_version_info.js").ComputePool;
                    } | undefined;
                    app?: {
                        id?: string;
                        slug?: string;
                        name?: string;
                        description?: string;
                        appAccount?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        isNsfw?: boolean;
                        isDelisted?: boolean;
                        isFirstParty?: boolean;
                        isArchived?: boolean;
                        isWebviewEnabled?: boolean;
                        createdAt?: Date | undefined;
                        owner?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        categories?: import("./app/categories/categories.js").Categories[];
                        stats?: {
                            installCount?: number;
                        } | undefined;
                        termsAndConditions?: string;
                        privacyPolicy?: string;
                        defaultPool?: import("./app_version/info/app_version_info.js").ComputePool;
                        capabilities?: import("./app/info/app_info.js").AppCapability[];
                        isDisabled?: boolean;
                    } | undefined;
                } | undefined): FullInstallationInfo;
                fromPartial(object: {
                    installation?: {
                        id?: string;
                        upgradeStrategy?: import("./installation/installation.js").UpgradeStrategy;
                        upgradeStrategyConfig?: {
                            [x: string]: any;
                        } | undefined;
                        runAs?: string | undefined;
                        type?: import("./app_version/info/app_version_info.js").InstallationType;
                        location?: {
                            id?: string;
                            name?: string;
                            type?: import("../reddit/thing_type.js").ThingType;
                            icon?: string | undefined;
                            isNsfw?: boolean;
                            isUnavailable?: boolean;
                        } | undefined;
                        isEnabled?: boolean;
                    } | undefined;
                    appVersion?: {
                        id?: string;
                        visibility?: import("./app_version/info/app_version_info.js").VersionVisibility;
                        validInstallTypes?: import("./app_version/info/app_version_info.js").InstallationType[];
                        majorVersion?: number;
                        minorVersion?: number;
                        patchVersion?: number;
                        prereleaseVersion?: number | undefined;
                        uploadedAt?: Date | undefined;
                        buildStatus?: import("./app_version/info/app_version_info.js").BuildStatus;
                        builtAt?: Date | undefined;
                        about?: string;
                        hasCustomSettings?: boolean;
                        pool?: import("./app_version/info/app_version_info.js").ComputePool;
                    } | undefined;
                    app?: {
                        id?: string;
                        slug?: string;
                        name?: string;
                        description?: string;
                        appAccount?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        isNsfw?: boolean;
                        isDelisted?: boolean;
                        isFirstParty?: boolean;
                        isArchived?: boolean;
                        isWebviewEnabled?: boolean;
                        createdAt?: Date | undefined;
                        owner?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        categories?: import("./app/categories/categories.js").Categories[];
                        stats?: {
                            installCount?: number;
                        } | undefined;
                        termsAndConditions?: string;
                        privacyPolicy?: string;
                        defaultPool?: import("./app_version/info/app_version_info.js").ComputePool;
                        capabilities?: import("./app/info/app_info.js").AppCapability[];
                        isDisabled?: boolean;
                    } | undefined;
                }): FullInstallationInfo;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly getAllWithInstallLocation: {
            readonly name: "GetAllWithInstallLocation";
            readonly requestType: {
                $type: "devvit.dev_portal.installation.GetAllWithInstallLocationRequest";
                encode(message: GetAllWithInstallLocationRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GetAllWithInstallLocationRequest;
                fromJSON(object: any): GetAllWithInstallLocationRequest;
                toJSON(message: GetAllWithInstallLocationRequest): unknown;
                create(base?: {
                    type?: import("./app_version/info/app_version_info.js").InstallationType;
                    location?: string;
                } | undefined): GetAllWithInstallLocationRequest;
                fromPartial(object: {
                    type?: import("./app_version/info/app_version_info.js").InstallationType;
                    location?: string;
                }): GetAllWithInstallLocationRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.installation.MultipleInstallationsResponse";
                encode(message: MultipleInstallationsResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MultipleInstallationsResponse;
                fromJSON(object: any): MultipleInstallationsResponse;
                toJSON(message: MultipleInstallationsResponse): unknown;
                create(base?: {
                    installations?: {
                        id?: string;
                        upgradeStrategy?: import("./installation/installation.js").UpgradeStrategy;
                        upgradeStrategyConfig?: {
                            [x: string]: any;
                        } | undefined;
                        runAs?: string | undefined;
                        type?: import("./app_version/info/app_version_info.js").InstallationType;
                        location?: {
                            id?: string;
                            name?: string;
                            type?: import("../reddit/thing_type.js").ThingType;
                            icon?: string | undefined;
                            isNsfw?: boolean;
                            isUnavailable?: boolean;
                        } | undefined;
                        isEnabled?: boolean;
                    }[];
                } | undefined): MultipleInstallationsResponse;
                fromPartial(object: {
                    installations?: {
                        id?: string;
                        upgradeStrategy?: import("./installation/installation.js").UpgradeStrategy;
                        upgradeStrategyConfig?: {
                            [x: string]: any;
                        } | undefined;
                        runAs?: string | undefined;
                        type?: import("./app_version/info/app_version_info.js").InstallationType;
                        location?: {
                            id?: string;
                            name?: string;
                            type?: import("../reddit/thing_type.js").ThingType;
                            icon?: string | undefined;
                            isNsfw?: boolean;
                            isUnavailable?: boolean;
                        } | undefined;
                        isEnabled?: boolean;
                    }[];
                }): MultipleInstallationsResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly getAllWithInstaller: {
            readonly name: "GetAllWithInstaller";
            readonly requestType: {
                $type: "devvit.dev_portal.installation.GetAllWithInstallerRequest";
                encode(message: GetAllWithInstallerRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GetAllWithInstallerRequest;
                fromJSON(object: any): GetAllWithInstallerRequest;
                toJSON(message: GetAllWithInstallerRequest): unknown;
                create(base?: {
                    installedBy?: string;
                } | undefined): GetAllWithInstallerRequest;
                fromPartial(object: {
                    installedBy?: string;
                }): GetAllWithInstallerRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.installation.MultipleInstallationsResponse";
                encode(message: MultipleInstallationsResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MultipleInstallationsResponse;
                fromJSON(object: any): MultipleInstallationsResponse;
                toJSON(message: MultipleInstallationsResponse): unknown;
                create(base?: {
                    installations?: {
                        id?: string;
                        upgradeStrategy?: import("./installation/installation.js").UpgradeStrategy;
                        upgradeStrategyConfig?: {
                            [x: string]: any;
                        } | undefined;
                        runAs?: string | undefined;
                        type?: import("./app_version/info/app_version_info.js").InstallationType;
                        location?: {
                            id?: string;
                            name?: string;
                            type?: import("../reddit/thing_type.js").ThingType;
                            icon?: string | undefined;
                            isNsfw?: boolean;
                            isUnavailable?: boolean;
                        } | undefined;
                        isEnabled?: boolean;
                    }[];
                } | undefined): MultipleInstallationsResponse;
                fromPartial(object: {
                    installations?: {
                        id?: string;
                        upgradeStrategy?: import("./installation/installation.js").UpgradeStrategy;
                        upgradeStrategyConfig?: {
                            [x: string]: any;
                        } | undefined;
                        runAs?: string | undefined;
                        type?: import("./app_version/info/app_version_info.js").InstallationType;
                        location?: {
                            id?: string;
                            name?: string;
                            type?: import("../reddit/thing_type.js").ThingType;
                            icon?: string | undefined;
                            isNsfw?: boolean;
                            isUnavailable?: boolean;
                        } | undefined;
                        isEnabled?: boolean;
                    }[];
                }): MultipleInstallationsResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly getAllWithVersionUUID: {
            readonly name: "GetAllWithVersionUUID";
            readonly requestType: {
                $type: "devvit.UUID";
                encode(message: UUID, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): UUID;
                fromJSON(object: any): UUID;
                toJSON(message: UUID): unknown;
                create(base?: {
                    id?: string;
                } | undefined): UUID;
                fromPartial(object: {
                    id?: string;
                }): UUID;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.installation.MultipleInstallationsResponse";
                encode(message: MultipleInstallationsResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MultipleInstallationsResponse;
                fromJSON(object: any): MultipleInstallationsResponse;
                toJSON(message: MultipleInstallationsResponse): unknown;
                create(base?: {
                    installations?: {
                        id?: string;
                        upgradeStrategy?: import("./installation/installation.js").UpgradeStrategy;
                        upgradeStrategyConfig?: {
                            [x: string]: any;
                        } | undefined;
                        runAs?: string | undefined;
                        type?: import("./app_version/info/app_version_info.js").InstallationType;
                        location?: {
                            id?: string;
                            name?: string;
                            type?: import("../reddit/thing_type.js").ThingType;
                            icon?: string | undefined;
                            isNsfw?: boolean;
                            isUnavailable?: boolean;
                        } | undefined;
                        isEnabled?: boolean;
                    }[];
                } | undefined): MultipleInstallationsResponse;
                fromPartial(object: {
                    installations?: {
                        id?: string;
                        upgradeStrategy?: import("./installation/installation.js").UpgradeStrategy;
                        upgradeStrategyConfig?: {
                            [x: string]: any;
                        } | undefined;
                        runAs?: string | undefined;
                        type?: import("./app_version/info/app_version_info.js").InstallationType;
                        location?: {
                            id?: string;
                            name?: string;
                            type?: import("../reddit/thing_type.js").ThingType;
                            icon?: string | undefined;
                            isNsfw?: boolean;
                            isUnavailable?: boolean;
                        } | undefined;
                        isEnabled?: boolean;
                    }[];
                }): MultipleInstallationsResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly getAllWithApp: {
            readonly name: "GetAllWithApp";
            readonly requestType: {
                $type: "devvit.dev_portal.installation.GetAllWithAppRequest";
                encode(message: GetAllWithAppRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GetAllWithAppRequest;
                fromJSON(object: any): GetAllWithAppRequest;
                toJSON(message: GetAllWithAppRequest): unknown;
                create(base?: {
                    id?: string;
                    take?: number | undefined;
                    skip?: number | undefined;
                } | undefined): GetAllWithAppRequest;
                fromPartial(object: {
                    id?: string;
                    take?: number | undefined;
                    skip?: number | undefined;
                }): GetAllWithAppRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.installation.GetAllWithAppResponse";
                encode(message: GetAllWithAppResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GetAllWithAppResponse;
                fromJSON(object: any): GetAllWithAppResponse;
                toJSON(message: GetAllWithAppResponse): unknown;
                create(base?: {
                    installations?: {
                        installation?: {
                            id?: string;
                            upgradeStrategy?: import("./installation/installation.js").UpgradeStrategy;
                            upgradeStrategyConfig?: {
                                [x: string]: any;
                            } | undefined;
                            runAs?: string | undefined;
                            type?: import("./app_version/info/app_version_info.js").InstallationType;
                            location?: {
                                id?: string;
                                name?: string;
                                type?: import("../reddit/thing_type.js").ThingType;
                                icon?: string | undefined;
                                isNsfw?: boolean;
                                isUnavailable?: boolean;
                            } | undefined;
                            isEnabled?: boolean;
                        } | undefined;
                        appVersion?: {
                            id?: string;
                            visibility?: import("./app_version/info/app_version_info.js").VersionVisibility;
                            validInstallTypes?: import("./app_version/info/app_version_info.js").InstallationType[];
                            majorVersion?: number;
                            minorVersion?: number;
                            patchVersion?: number;
                            prereleaseVersion?: number | undefined;
                            uploadedAt?: Date | undefined;
                            buildStatus?: import("./app_version/info/app_version_info.js").BuildStatus;
                            builtAt?: Date | undefined;
                            about?: string;
                            hasCustomSettings?: boolean;
                            pool?: import("./app_version/info/app_version_info.js").ComputePool;
                        } | undefined;
                    }[];
                } | undefined): GetAllWithAppResponse;
                fromPartial(object: {
                    installations?: {
                        installation?: {
                            id?: string;
                            upgradeStrategy?: import("./installation/installation.js").UpgradeStrategy;
                            upgradeStrategyConfig?: {
                                [x: string]: any;
                            } | undefined;
                            runAs?: string | undefined;
                            type?: import("./app_version/info/app_version_info.js").InstallationType;
                            location?: {
                                id?: string;
                                name?: string;
                                type?: import("../reddit/thing_type.js").ThingType;
                                icon?: string | undefined;
                                isNsfw?: boolean;
                                isUnavailable?: boolean;
                            } | undefined;
                            isEnabled?: boolean;
                        } | undefined;
                        appVersion?: {
                            id?: string;
                            visibility?: import("./app_version/info/app_version_info.js").VersionVisibility;
                            validInstallTypes?: import("./app_version/info/app_version_info.js").InstallationType[];
                            majorVersion?: number;
                            minorVersion?: number;
                            patchVersion?: number;
                            prereleaseVersion?: number | undefined;
                            uploadedAt?: Date | undefined;
                            buildStatus?: import("./app_version/info/app_version_info.js").BuildStatus;
                            builtAt?: Date | undefined;
                            about?: string;
                            hasCustomSettings?: boolean;
                            pool?: import("./app_version/info/app_version_info.js").ComputePool;
                        } | undefined;
                    }[];
                }): GetAllWithAppResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly getInstallationHistory: {
            readonly name: "GetInstallationHistory";
            readonly requestType: {
                $type: "devvit.dev_portal.installation.GetInstallationHistoryRequest";
                encode(message: GetInstallationHistoryRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GetInstallationHistoryRequest;
                fromJSON(object: any): GetInstallationHistoryRequest;
                toJSON(message: GetInstallationHistoryRequest): unknown;
                create(base?: {
                    type?: import("./app_version/info/app_version_info.js").InstallationType;
                    location?: string;
                    slug?: string;
                    from?: Date | undefined;
                    to?: Date | undefined;
                    take?: number | undefined;
                    desc?: boolean | undefined;
                } | undefined): GetInstallationHistoryRequest;
                fromPartial(object: {
                    type?: import("./app_version/info/app_version_info.js").InstallationType;
                    location?: string;
                    slug?: string;
                    from?: Date | undefined;
                    to?: Date | undefined;
                    take?: number | undefined;
                    desc?: boolean | undefined;
                }): GetInstallationHistoryRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.installation.GetInstallationHistoryResponse";
                encode(message: GetInstallationHistoryResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GetInstallationHistoryResponse;
                fromJSON(object: any): GetInstallationHistoryResponse;
                toJSON(message: GetInstallationHistoryResponse): unknown;
                create(base?: {
                    events?: {
                        userId?: string;
                        name?: import("./installation/installation.js").InstallationHistoryEventName;
                        details?: {
                            [x: string]: string | undefined;
                        };
                        createdAt?: Date | undefined;
                    }[];
                    totalEvents?: number;
                } | undefined): GetInstallationHistoryResponse;
                fromPartial(object: {
                    events?: {
                        userId?: string;
                        name?: import("./installation/installation.js").InstallationHistoryEventName;
                        details?: {
                            [x: string]: string | undefined;
                        };
                        createdAt?: Date | undefined;
                    }[];
                    totalEvents?: number;
                }): GetInstallationHistoryResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly upgrade: {
            readonly name: "Upgrade";
            readonly requestType: {
                $type: "devvit.dev_portal.installation.InstallationUpgradeRequest";
                encode(message: InstallationUpgradeRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): InstallationUpgradeRequest;
                fromJSON(object: any): InstallationUpgradeRequest;
                toJSON(message: InstallationUpgradeRequest): unknown;
                create(base?: {
                    id?: string;
                    appVersionId?: string | undefined;
                } | undefined): InstallationUpgradeRequest;
                fromPartial(object: {
                    id?: string;
                    appVersionId?: string | undefined;
                }): InstallationUpgradeRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.installation.FullInstallationInfo";
                encode(message: FullInstallationInfo, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): FullInstallationInfo;
                fromJSON(object: any): FullInstallationInfo;
                toJSON(message: FullInstallationInfo): unknown;
                create(base?: {
                    installation?: {
                        id?: string;
                        upgradeStrategy?: import("./installation/installation.js").UpgradeStrategy;
                        upgradeStrategyConfig?: {
                            [x: string]: any;
                        } | undefined;
                        runAs?: string | undefined;
                        type?: import("./app_version/info/app_version_info.js").InstallationType;
                        location?: {
                            id?: string;
                            name?: string;
                            type?: import("../reddit/thing_type.js").ThingType;
                            icon?: string | undefined;
                            isNsfw?: boolean;
                            isUnavailable?: boolean;
                        } | undefined;
                        isEnabled?: boolean;
                    } | undefined;
                    appVersion?: {
                        id?: string;
                        visibility?: import("./app_version/info/app_version_info.js").VersionVisibility;
                        validInstallTypes?: import("./app_version/info/app_version_info.js").InstallationType[];
                        majorVersion?: number;
                        minorVersion?: number;
                        patchVersion?: number;
                        prereleaseVersion?: number | undefined;
                        uploadedAt?: Date | undefined;
                        buildStatus?: import("./app_version/info/app_version_info.js").BuildStatus;
                        builtAt?: Date | undefined;
                        about?: string;
                        hasCustomSettings?: boolean;
                        pool?: import("./app_version/info/app_version_info.js").ComputePool;
                    } | undefined;
                    app?: {
                        id?: string;
                        slug?: string;
                        name?: string;
                        description?: string;
                        appAccount?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        isNsfw?: boolean;
                        isDelisted?: boolean;
                        isFirstParty?: boolean;
                        isArchived?: boolean;
                        isWebviewEnabled?: boolean;
                        createdAt?: Date | undefined;
                        owner?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        categories?: import("./app/categories/categories.js").Categories[];
                        stats?: {
                            installCount?: number;
                        } | undefined;
                        termsAndConditions?: string;
                        privacyPolicy?: string;
                        defaultPool?: import("./app_version/info/app_version_info.js").ComputePool;
                        capabilities?: import("./app/info/app_info.js").AppCapability[];
                        isDisabled?: boolean;
                    } | undefined;
                } | undefined): FullInstallationInfo;
                fromPartial(object: {
                    installation?: {
                        id?: string;
                        upgradeStrategy?: import("./installation/installation.js").UpgradeStrategy;
                        upgradeStrategyConfig?: {
                            [x: string]: any;
                        } | undefined;
                        runAs?: string | undefined;
                        type?: import("./app_version/info/app_version_info.js").InstallationType;
                        location?: {
                            id?: string;
                            name?: string;
                            type?: import("../reddit/thing_type.js").ThingType;
                            icon?: string | undefined;
                            isNsfw?: boolean;
                            isUnavailable?: boolean;
                        } | undefined;
                        isEnabled?: boolean;
                    } | undefined;
                    appVersion?: {
                        id?: string;
                        visibility?: import("./app_version/info/app_version_info.js").VersionVisibility;
                        validInstallTypes?: import("./app_version/info/app_version_info.js").InstallationType[];
                        majorVersion?: number;
                        minorVersion?: number;
                        patchVersion?: number;
                        prereleaseVersion?: number | undefined;
                        uploadedAt?: Date | undefined;
                        buildStatus?: import("./app_version/info/app_version_info.js").BuildStatus;
                        builtAt?: Date | undefined;
                        about?: string;
                        hasCustomSettings?: boolean;
                        pool?: import("./app_version/info/app_version_info.js").ComputePool;
                    } | undefined;
                    app?: {
                        id?: string;
                        slug?: string;
                        name?: string;
                        description?: string;
                        appAccount?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        isNsfw?: boolean;
                        isDelisted?: boolean;
                        isFirstParty?: boolean;
                        isArchived?: boolean;
                        isWebviewEnabled?: boolean;
                        createdAt?: Date | undefined;
                        owner?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        categories?: import("./app/categories/categories.js").Categories[];
                        stats?: {
                            installCount?: number;
                        } | undefined;
                        termsAndConditions?: string;
                        privacyPolicy?: string;
                        defaultPool?: import("./app_version/info/app_version_info.js").ComputePool;
                        capabilities?: import("./app/info/app_info.js").AppCapability[];
                        isDisabled?: boolean;
                    } | undefined;
                }): FullInstallationInfo;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly upgradeMany: {
            readonly name: "UpgradeMany";
            readonly requestType: {
                $type: "devvit.dev_portal.installation.InstallationUpgradeManyRequest";
                encode(message: InstallationUpgradeManyRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): InstallationUpgradeManyRequest;
                fromJSON(object: any): InstallationUpgradeManyRequest;
                toJSON(message: InstallationUpgradeManyRequest): unknown;
                create(base?: {
                    ids?: string[];
                    appVersionId?: string;
                } | undefined): InstallationUpgradeManyRequest;
                fromPartial(object: {
                    ids?: string[];
                    appVersionId?: string;
                }): InstallationUpgradeManyRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.installation.InstallationUpgradeManyResponse";
                encode(message: InstallationUpgradeManyResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): InstallationUpgradeManyResponse;
                fromJSON(object: any): InstallationUpgradeManyResponse;
                toJSON(message: InstallationUpgradeManyResponse): unknown;
                create(base?: {
                    details?: {
                        id?: string;
                        success?: boolean;
                        error?: string | undefined;
                    }[];
                } | undefined): InstallationUpgradeManyResponse;
                fromPartial(object: {
                    details?: {
                        id?: string;
                        success?: boolean;
                        error?: string | undefined;
                    }[];
                }): InstallationUpgradeManyResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly update: {
            readonly name: "Update";
            readonly requestType: {
                $type: "devvit.dev_portal.installation.InstallationUpdateRequest";
                encode(message: InstallationUpdateRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): InstallationUpdateRequest;
                fromJSON(object: any): InstallationUpdateRequest;
                toJSON(message: InstallationUpdateRequest): unknown;
                create(base?: {
                    id?: string;
                    runAs?: string | undefined;
                    upgradeStrategy?: {
                        value?: import("./installation/installation.js").UpgradeStrategy;
                    } | undefined;
                    upgradeStrategyConfig?: {
                        [x: string]: any;
                    } | undefined;
                    isEnabled?: boolean | undefined;
                } | undefined): InstallationUpdateRequest;
                fromPartial(object: {
                    id?: string;
                    runAs?: string | undefined;
                    upgradeStrategy?: {
                        value?: import("./installation/installation.js").UpgradeStrategy;
                    } | undefined;
                    upgradeStrategyConfig?: {
                        [x: string]: any;
                    } | undefined;
                    isEnabled?: boolean | undefined;
                }): InstallationUpdateRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.installation.FullInstallationInfo";
                encode(message: FullInstallationInfo, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): FullInstallationInfo;
                fromJSON(object: any): FullInstallationInfo;
                toJSON(message: FullInstallationInfo): unknown;
                create(base?: {
                    installation?: {
                        id?: string;
                        upgradeStrategy?: import("./installation/installation.js").UpgradeStrategy;
                        upgradeStrategyConfig?: {
                            [x: string]: any;
                        } | undefined;
                        runAs?: string | undefined;
                        type?: import("./app_version/info/app_version_info.js").InstallationType;
                        location?: {
                            id?: string;
                            name?: string;
                            type?: import("../reddit/thing_type.js").ThingType;
                            icon?: string | undefined;
                            isNsfw?: boolean;
                            isUnavailable?: boolean;
                        } | undefined;
                        isEnabled?: boolean;
                    } | undefined;
                    appVersion?: {
                        id?: string;
                        visibility?: import("./app_version/info/app_version_info.js").VersionVisibility;
                        validInstallTypes?: import("./app_version/info/app_version_info.js").InstallationType[];
                        majorVersion?: number;
                        minorVersion?: number;
                        patchVersion?: number;
                        prereleaseVersion?: number | undefined;
                        uploadedAt?: Date | undefined;
                        buildStatus?: import("./app_version/info/app_version_info.js").BuildStatus;
                        builtAt?: Date | undefined;
                        about?: string;
                        hasCustomSettings?: boolean;
                        pool?: import("./app_version/info/app_version_info.js").ComputePool;
                    } | undefined;
                    app?: {
                        id?: string;
                        slug?: string;
                        name?: string;
                        description?: string;
                        appAccount?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        isNsfw?: boolean;
                        isDelisted?: boolean;
                        isFirstParty?: boolean;
                        isArchived?: boolean;
                        isWebviewEnabled?: boolean;
                        createdAt?: Date | undefined;
                        owner?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        categories?: import("./app/categories/categories.js").Categories[];
                        stats?: {
                            installCount?: number;
                        } | undefined;
                        termsAndConditions?: string;
                        privacyPolicy?: string;
                        defaultPool?: import("./app_version/info/app_version_info.js").ComputePool;
                        capabilities?: import("./app/info/app_info.js").AppCapability[];
                        isDisabled?: boolean;
                    } | undefined;
                } | undefined): FullInstallationInfo;
                fromPartial(object: {
                    installation?: {
                        id?: string;
                        upgradeStrategy?: import("./installation/installation.js").UpgradeStrategy;
                        upgradeStrategyConfig?: {
                            [x: string]: any;
                        } | undefined;
                        runAs?: string | undefined;
                        type?: import("./app_version/info/app_version_info.js").InstallationType;
                        location?: {
                            id?: string;
                            name?: string;
                            type?: import("../reddit/thing_type.js").ThingType;
                            icon?: string | undefined;
                            isNsfw?: boolean;
                            isUnavailable?: boolean;
                        } | undefined;
                        isEnabled?: boolean;
                    } | undefined;
                    appVersion?: {
                        id?: string;
                        visibility?: import("./app_version/info/app_version_info.js").VersionVisibility;
                        validInstallTypes?: import("./app_version/info/app_version_info.js").InstallationType[];
                        majorVersion?: number;
                        minorVersion?: number;
                        patchVersion?: number;
                        prereleaseVersion?: number | undefined;
                        uploadedAt?: Date | undefined;
                        buildStatus?: import("./app_version/info/app_version_info.js").BuildStatus;
                        builtAt?: Date | undefined;
                        about?: string;
                        hasCustomSettings?: boolean;
                        pool?: import("./app_version/info/app_version_info.js").ComputePool;
                    } | undefined;
                    app?: {
                        id?: string;
                        slug?: string;
                        name?: string;
                        description?: string;
                        appAccount?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        isNsfw?: boolean;
                        isDelisted?: boolean;
                        isFirstParty?: boolean;
                        isArchived?: boolean;
                        isWebviewEnabled?: boolean;
                        createdAt?: Date | undefined;
                        owner?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        categories?: import("./app/categories/categories.js").Categories[];
                        stats?: {
                            installCount?: number;
                        } | undefined;
                        termsAndConditions?: string;
                        privacyPolicy?: string;
                        defaultPool?: import("./app_version/info/app_version_info.js").ComputePool;
                        capabilities?: import("./app/info/app_info.js").AppCapability[];
                        isDisabled?: boolean;
                    } | undefined;
                }): FullInstallationInfo;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly remove: {
            readonly name: "Remove";
            readonly requestType: {
                $type: "devvit.UUID";
                encode(message: UUID, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): UUID;
                fromJSON(object: any): UUID;
                toJSON(message: UUID): unknown;
                create(base?: {
                    id?: string;
                } | undefined): UUID;
                fromPartial(object: {
                    id?: string;
                }): UUID;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {} | undefined): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
export interface Feedback {
    Create(request: CreateFeedbackRequest, metadata?: Metadata): Promise<Empty>;
}
export declare const FeedbackServiceName = "devvit.dev_portal.Feedback";
export declare class FeedbackClientImpl implements Feedback {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Create(request: CreateFeedbackRequest, metadata?: Metadata): Promise<Empty>;
}
export type FeedbackDefinition = typeof FeedbackDefinition;
export declare const FeedbackDefinition: {
    readonly name: "Feedback";
    readonly fullName: "devvit.dev_portal.Feedback";
    readonly methods: {
        readonly create: {
            readonly name: "Create";
            readonly requestType: {
                $type: "devvit.dev_portal.feedback.CreateFeedbackRequest";
                encode(message: CreateFeedbackRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): CreateFeedbackRequest;
                fromJSON(object: any): CreateFeedbackRequest;
                toJSON(message: CreateFeedbackRequest): unknown;
                create(base?: {
                    content?: string;
                } | undefined): CreateFeedbackRequest;
                fromPartial(object: {
                    content?: string;
                }): CreateFeedbackRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {} | undefined): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
export interface DataApiAdmin {
    /** Data Token */
    CreateDataToken(request: CreateDataTokenRequest, metadata?: Metadata): Promise<CreateDataTokenResponse>;
    GetDataTokenById(request: GetDataTokenByIdRequest, metadata?: Metadata): Promise<GetDataTokenByIdResponse>;
    GetDataTokensByOrganizationName(request: GetDataTokensByOrganizationNameRequest, metadata?: Metadata): Promise<GetDataTokensByOrganizationNameResponse>;
    RevokeDataTokenById(request: RevokeDataTokenByIdRequest, metadata?: Metadata): Promise<RevokeDataTokenByIdResponse>;
    /** Data Subscription */
    CreateDataSubscription(request: CreateDataSubscriptionRequest, metadata?: Metadata): Promise<CreateDataSubscriptionResponse>;
    GetDataSubscriptionById(request: GetDataSubscriptionByIdRequest, metadata?: Metadata): Promise<GetDataSubscriptionByIdResponse>;
    GetDataSubscriptionsByOrganizationName(request: GetDataSubscriptionsByOrganizationNameRequest, metadata?: Metadata): Promise<GetDataSubscriptionsByOrganizationNameResponse>;
    UpdateDataSubscription(request: UpdateDataSubscriptionRequest, metadata?: Metadata): Promise<UpdateDataSubscriptionResponse>;
    DeleteDataSubscription(request: DeleteDataSubscriptionRequest, metadata?: Metadata): Promise<DeleteDataSubscriptionResponse>;
    /** Organizations */
    CreateOrganization(request: CreateOrganizationRequest, metadata?: Metadata): Promise<CreateOrganizationResponse>;
    GetOrganizationByName(request: GetOrganizationByNameRequest, metadata?: Metadata): Promise<GetOrganizationByNameResponse>;
    GetOrganizations(request: GetOrganizationsRequest, metadata?: Metadata): Promise<GetOrganizationsResponse>;
    /** Audit Log */
    GetAuditLogEvents(request: GetAuditLogEventsRequest, metadata?: Metadata): Promise<GetAuditLogEventsResponse>;
    AddUsersToOrg(request: AddUsersToOrgRequest, metadata?: Metadata): Promise<AddUsersToOrgResponse>;
    GetUsersByOrgId(request: GetUsersByOrgIdRequest, metadata?: Metadata): Promise<GetUsersByOrgIdResponse>;
    GetUserById(request: GetUserByIdRequest, metadata?: Metadata): Promise<GetUserByIdResponse>;
    DeleteUser(request: DeleteUserRequest, metadata?: Metadata): Promise<DeleteUserResponse>;
}
export declare const DataApiAdminServiceName = "devvit.dev_portal.DataApiAdmin";
export declare class DataApiAdminClientImpl implements DataApiAdmin {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    CreateDataToken(request: CreateDataTokenRequest, metadata?: Metadata): Promise<CreateDataTokenResponse>;
    GetDataTokenById(request: GetDataTokenByIdRequest, metadata?: Metadata): Promise<GetDataTokenByIdResponse>;
    GetDataTokensByOrganizationName(request: GetDataTokensByOrganizationNameRequest, metadata?: Metadata): Promise<GetDataTokensByOrganizationNameResponse>;
    RevokeDataTokenById(request: RevokeDataTokenByIdRequest, metadata?: Metadata): Promise<RevokeDataTokenByIdResponse>;
    CreateDataSubscription(request: CreateDataSubscriptionRequest, metadata?: Metadata): Promise<CreateDataSubscriptionResponse>;
    GetDataSubscriptionById(request: GetDataSubscriptionByIdRequest, metadata?: Metadata): Promise<GetDataSubscriptionByIdResponse>;
    GetDataSubscriptionsByOrganizationName(request: GetDataSubscriptionsByOrganizationNameRequest, metadata?: Metadata): Promise<GetDataSubscriptionsByOrganizationNameResponse>;
    UpdateDataSubscription(request: UpdateDataSubscriptionRequest, metadata?: Metadata): Promise<UpdateDataSubscriptionResponse>;
    DeleteDataSubscription(request: DeleteDataSubscriptionRequest, metadata?: Metadata): Promise<DeleteDataSubscriptionResponse>;
    CreateOrganization(request: CreateOrganizationRequest, metadata?: Metadata): Promise<CreateOrganizationResponse>;
    GetOrganizationByName(request: GetOrganizationByNameRequest, metadata?: Metadata): Promise<GetOrganizationByNameResponse>;
    GetOrganizations(request: GetOrganizationsRequest, metadata?: Metadata): Promise<GetOrganizationsResponse>;
    GetAuditLogEvents(request: GetAuditLogEventsRequest, metadata?: Metadata): Promise<GetAuditLogEventsResponse>;
    AddUsersToOrg(request: AddUsersToOrgRequest, metadata?: Metadata): Promise<AddUsersToOrgResponse>;
    GetUsersByOrgId(request: GetUsersByOrgIdRequest, metadata?: Metadata): Promise<GetUsersByOrgIdResponse>;
    GetUserById(request: GetUserByIdRequest, metadata?: Metadata): Promise<GetUserByIdResponse>;
    DeleteUser(request: DeleteUserRequest, metadata?: Metadata): Promise<DeleteUserResponse>;
}
export type DataApiAdminDefinition = typeof DataApiAdminDefinition;
export declare const DataApiAdminDefinition: {
    readonly name: "DataApiAdmin";
    readonly fullName: "devvit.dev_portal.DataApiAdmin";
    readonly methods: {
        /** Data Token */
        readonly createDataToken: {
            readonly name: "CreateDataToken";
            readonly requestType: {
                $type: "devvit.dev_portal.data_api.admin.auth.CreateDataTokenRequest";
                encode(message: CreateDataTokenRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): CreateDataTokenRequest;
                fromJSON(object: any): CreateDataTokenRequest;
                toJSON(message: CreateDataTokenRequest): unknown;
                create(base?: {
                    organizationName?: string;
                    expiresIn?: {
                        seconds?: number;
                        nanos?: number;
                    } | undefined;
                } | undefined): CreateDataTokenRequest;
                fromPartial(object: {
                    organizationName?: string;
                    expiresIn?: {
                        seconds?: number;
                        nanos?: number;
                    } | undefined;
                }): CreateDataTokenRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.data_api.admin.auth.CreateDataTokenResponse";
                encode(message: CreateDataTokenResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): CreateDataTokenResponse;
                fromJSON(object: any): CreateDataTokenResponse;
                toJSON(message: CreateDataTokenResponse): unknown;
                create(base?: {
                    token?: string;
                    expiresAt?: Date | undefined;
                } | undefined): CreateDataTokenResponse;
                fromPartial(object: {
                    token?: string;
                    expiresAt?: Date | undefined;
                }): CreateDataTokenResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly getDataTokenById: {
            readonly name: "GetDataTokenById";
            readonly requestType: {
                $type: "devvit.dev_portal.data_api.admin.auth.GetDataTokenByIdRequest";
                encode(message: GetDataTokenByIdRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GetDataTokenByIdRequest;
                fromJSON(object: any): GetDataTokenByIdRequest;
                toJSON(message: GetDataTokenByIdRequest): unknown;
                create(base?: {
                    id?: string;
                } | undefined): GetDataTokenByIdRequest;
                fromPartial(object: {
                    id?: string;
                }): GetDataTokenByIdRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.data_api.admin.auth.GetDataTokenByIdResponse";
                encode(message: GetDataTokenByIdResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GetDataTokenByIdResponse;
                fromJSON(object: any): GetDataTokenByIdResponse;
                toJSON(message: GetDataTokenByIdResponse): unknown;
                create(base?: {
                    token?: {
                        id?: string;
                        organizationId?: string;
                        createdAt?: Date | undefined;
                        expiresAt?: Date | undefined;
                        isRevoked?: boolean;
                    } | undefined;
                } | undefined): GetDataTokenByIdResponse;
                fromPartial(object: {
                    token?: {
                        id?: string;
                        organizationId?: string;
                        createdAt?: Date | undefined;
                        expiresAt?: Date | undefined;
                        isRevoked?: boolean;
                    } | undefined;
                }): GetDataTokenByIdResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly getDataTokensByOrganizationName: {
            readonly name: "GetDataTokensByOrganizationName";
            readonly requestType: {
                $type: "devvit.dev_portal.data_api.admin.auth.GetDataTokensByOrganizationNameRequest";
                encode(message: GetDataTokensByOrganizationNameRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GetDataTokensByOrganizationNameRequest;
                fromJSON(object: any): GetDataTokensByOrganizationNameRequest;
                toJSON(message: GetDataTokensByOrganizationNameRequest): unknown;
                create(base?: {
                    organizationName?: string;
                } | undefined): GetDataTokensByOrganizationNameRequest;
                fromPartial(object: {
                    organizationName?: string;
                }): GetDataTokensByOrganizationNameRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.data_api.admin.auth.GetDataTokensByOrganizationNameResponse";
                encode(message: GetDataTokensByOrganizationNameResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GetDataTokensByOrganizationNameResponse;
                fromJSON(object: any): GetDataTokensByOrganizationNameResponse;
                toJSON(message: GetDataTokensByOrganizationNameResponse): unknown;
                create(base?: {
                    tokens?: {
                        id?: string;
                        organizationId?: string;
                        createdAt?: Date | undefined;
                        expiresAt?: Date | undefined;
                        isRevoked?: boolean;
                    }[];
                } | undefined): GetDataTokensByOrganizationNameResponse;
                fromPartial(object: {
                    tokens?: {
                        id?: string;
                        organizationId?: string;
                        createdAt?: Date | undefined;
                        expiresAt?: Date | undefined;
                        isRevoked?: boolean;
                    }[];
                }): GetDataTokensByOrganizationNameResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly revokeDataTokenById: {
            readonly name: "RevokeDataTokenById";
            readonly requestType: {
                $type: "devvit.dev_portal.data_api.admin.auth.RevokeDataTokenByIdRequest";
                encode(message: RevokeDataTokenByIdRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): RevokeDataTokenByIdRequest;
                fromJSON(object: any): RevokeDataTokenByIdRequest;
                toJSON(message: RevokeDataTokenByIdRequest): unknown;
                create(base?: {
                    tokenId?: string;
                } | undefined): RevokeDataTokenByIdRequest;
                fromPartial(object: {
                    tokenId?: string;
                }): RevokeDataTokenByIdRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.data_api.admin.auth.RevokeDataTokenByIdResponse";
                encode(_: RevokeDataTokenByIdResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): RevokeDataTokenByIdResponse;
                fromJSON(_: any): RevokeDataTokenByIdResponse;
                toJSON(_: RevokeDataTokenByIdResponse): unknown;
                create(base?: {} | undefined): RevokeDataTokenByIdResponse;
                fromPartial(_: {}): RevokeDataTokenByIdResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Data Subscription */
        readonly createDataSubscription: {
            readonly name: "CreateDataSubscription";
            readonly requestType: {
                $type: "devvit.dev_portal.data_api.admin.subscription.CreateDataSubscriptionRequest";
                encode(message: CreateDataSubscriptionRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): CreateDataSubscriptionRequest;
                fromJSON(object: any): CreateDataSubscriptionRequest;
                toJSON(message: CreateDataSubscriptionRequest): unknown;
                create(base?: {
                    tier?: import("../options/options.js").DataTier;
                    events?: import("../options/options.js").FirehoseEvent[];
                    subreddits?: string[];
                    subredditRatings?: import("../reddit/v2alpha/subredditv2.js").SubredditRating[];
                    customer?: string;
                    name?: string;
                    description?: string | undefined;
                } | undefined): CreateDataSubscriptionRequest;
                fromPartial(object: {
                    tier?: import("../options/options.js").DataTier;
                    events?: import("../options/options.js").FirehoseEvent[];
                    subreddits?: string[];
                    subredditRatings?: import("../reddit/v2alpha/subredditv2.js").SubredditRating[];
                    customer?: string;
                    name?: string;
                    description?: string | undefined;
                }): CreateDataSubscriptionRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.data_api.admin.subscription.CreateDataSubscriptionResponse";
                encode(message: CreateDataSubscriptionResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): CreateDataSubscriptionResponse;
                fromJSON(object: any): CreateDataSubscriptionResponse;
                toJSON(message: CreateDataSubscriptionResponse): unknown;
                create(base?: {
                    subscription?: {
                        id?: string;
                        tier?: import("../options/options.js").DataTier;
                        events?: import("../options/options.js").FirehoseEvent[];
                        subreddits?: string[];
                        subredditRatings?: import("../reddit/v2alpha/subredditv2.js").SubredditRating[];
                        organizationId?: string;
                        name?: string;
                        description?: string | undefined;
                    } | undefined;
                } | undefined): CreateDataSubscriptionResponse;
                fromPartial(object: {
                    subscription?: {
                        id?: string;
                        tier?: import("../options/options.js").DataTier;
                        events?: import("../options/options.js").FirehoseEvent[];
                        subreddits?: string[];
                        subredditRatings?: import("../reddit/v2alpha/subredditv2.js").SubredditRating[];
                        organizationId?: string;
                        name?: string;
                        description?: string | undefined;
                    } | undefined;
                }): CreateDataSubscriptionResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly getDataSubscriptionById: {
            readonly name: "GetDataSubscriptionById";
            readonly requestType: {
                $type: "devvit.dev_portal.data_api.admin.subscription.GetDataSubscriptionByIdRequest";
                encode(message: GetDataSubscriptionByIdRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GetDataSubscriptionByIdRequest;
                fromJSON(object: any): GetDataSubscriptionByIdRequest;
                toJSON(message: GetDataSubscriptionByIdRequest): unknown;
                create(base?: {
                    subscriptionId?: string;
                } | undefined): GetDataSubscriptionByIdRequest;
                fromPartial(object: {
                    subscriptionId?: string;
                }): GetDataSubscriptionByIdRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.data_api.admin.subscription.GetDataSubscriptionByIdResponse";
                encode(message: GetDataSubscriptionByIdResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GetDataSubscriptionByIdResponse;
                fromJSON(object: any): GetDataSubscriptionByIdResponse;
                toJSON(message: GetDataSubscriptionByIdResponse): unknown;
                create(base?: {
                    subscription?: {
                        id?: string;
                        tier?: import("../options/options.js").DataTier;
                        events?: import("../options/options.js").FirehoseEvent[];
                        subreddits?: string[];
                        subredditRatings?: import("../reddit/v2alpha/subredditv2.js").SubredditRating[];
                        organizationId?: string;
                        name?: string;
                        description?: string | undefined;
                    } | undefined;
                } | undefined): GetDataSubscriptionByIdResponse;
                fromPartial(object: {
                    subscription?: {
                        id?: string;
                        tier?: import("../options/options.js").DataTier;
                        events?: import("../options/options.js").FirehoseEvent[];
                        subreddits?: string[];
                        subredditRatings?: import("../reddit/v2alpha/subredditv2.js").SubredditRating[];
                        organizationId?: string;
                        name?: string;
                        description?: string | undefined;
                    } | undefined;
                }): GetDataSubscriptionByIdResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly getDataSubscriptionsByOrganizationName: {
            readonly name: "GetDataSubscriptionsByOrganizationName";
            readonly requestType: {
                $type: "devvit.dev_portal.data_api.admin.subscription.GetDataSubscriptionsByOrganizationNameRequest";
                encode(message: GetDataSubscriptionsByOrganizationNameRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GetDataSubscriptionsByOrganizationNameRequest;
                fromJSON(object: any): GetDataSubscriptionsByOrganizationNameRequest;
                toJSON(message: GetDataSubscriptionsByOrganizationNameRequest): unknown;
                create(base?: {
                    organizationName?: string;
                } | undefined): GetDataSubscriptionsByOrganizationNameRequest;
                fromPartial(object: {
                    organizationName?: string;
                }): GetDataSubscriptionsByOrganizationNameRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.data_api.admin.subscription.GetDataSubscriptionsByOrganizationNameResponse";
                encode(message: GetDataSubscriptionsByOrganizationNameResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GetDataSubscriptionsByOrganizationNameResponse;
                fromJSON(object: any): GetDataSubscriptionsByOrganizationNameResponse;
                toJSON(message: GetDataSubscriptionsByOrganizationNameResponse): unknown;
                create(base?: {
                    subscriptions?: {
                        id?: string;
                        name?: string;
                        description?: string | undefined;
                        events?: import("../options/options.js").FirehoseEvent[];
                        subreddits?: {
                            id?: string;
                            name?: string;
                            icon?: string;
                            isNsfw?: boolean;
                        }[];
                        subredditRatings?: import("../reddit/v2alpha/subredditv2.js").SubredditRating[];
                    }[];
                } | undefined): GetDataSubscriptionsByOrganizationNameResponse;
                fromPartial(object: {
                    subscriptions?: {
                        id?: string;
                        name?: string;
                        description?: string | undefined;
                        events?: import("../options/options.js").FirehoseEvent[];
                        subreddits?: {
                            id?: string;
                            name?: string;
                            icon?: string;
                            isNsfw?: boolean;
                        }[];
                        subredditRatings?: import("../reddit/v2alpha/subredditv2.js").SubredditRating[];
                    }[];
                }): GetDataSubscriptionsByOrganizationNameResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly updateDataSubscription: {
            readonly name: "UpdateDataSubscription";
            readonly requestType: {
                $type: "devvit.dev_portal.data_api.admin.subscription.UpdateDataSubscriptionRequest";
                encode(message: UpdateDataSubscriptionRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): UpdateDataSubscriptionRequest;
                fromJSON(object: any): UpdateDataSubscriptionRequest;
                toJSON(message: UpdateDataSubscriptionRequest): unknown;
                create(base?: {
                    subscriptionId?: string;
                    name?: string | undefined;
                    description?: string | undefined;
                    tier?: import("../options/options.js").DataTier | undefined;
                    events?: import("../options/options.js").FirehoseEvent[];
                    subreddits?: string[];
                    subredditRatings?: import("../reddit/v2alpha/subredditv2.js").SubredditRating[];
                } | undefined): UpdateDataSubscriptionRequest;
                fromPartial(object: {
                    subscriptionId?: string;
                    name?: string | undefined;
                    description?: string | undefined;
                    tier?: import("../options/options.js").DataTier | undefined;
                    events?: import("../options/options.js").FirehoseEvent[];
                    subreddits?: string[];
                    subredditRatings?: import("../reddit/v2alpha/subredditv2.js").SubredditRating[];
                }): UpdateDataSubscriptionRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.data_api.admin.subscription.UpdateDataSubscriptionResponse";
                encode(message: UpdateDataSubscriptionResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): UpdateDataSubscriptionResponse;
                fromJSON(object: any): UpdateDataSubscriptionResponse;
                toJSON(message: UpdateDataSubscriptionResponse): unknown;
                create(base?: {
                    subscription?: {
                        id?: string;
                        tier?: import("../options/options.js").DataTier;
                        events?: import("../options/options.js").FirehoseEvent[];
                        subreddits?: string[];
                        subredditRatings?: import("../reddit/v2alpha/subredditv2.js").SubredditRating[];
                        organizationId?: string;
                        name?: string;
                        description?: string | undefined;
                    } | undefined;
                } | undefined): UpdateDataSubscriptionResponse;
                fromPartial(object: {
                    subscription?: {
                        id?: string;
                        tier?: import("../options/options.js").DataTier;
                        events?: import("../options/options.js").FirehoseEvent[];
                        subreddits?: string[];
                        subredditRatings?: import("../reddit/v2alpha/subredditv2.js").SubredditRating[];
                        organizationId?: string;
                        name?: string;
                        description?: string | undefined;
                    } | undefined;
                }): UpdateDataSubscriptionResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly deleteDataSubscription: {
            readonly name: "DeleteDataSubscription";
            readonly requestType: {
                $type: "devvit.dev_portal.data_api.admin.subscription.DeleteDataSubscriptionRequest";
                encode(message: DeleteDataSubscriptionRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): DeleteDataSubscriptionRequest;
                fromJSON(object: any): DeleteDataSubscriptionRequest;
                toJSON(message: DeleteDataSubscriptionRequest): unknown;
                create(base?: {
                    subscriptionId?: string;
                } | undefined): DeleteDataSubscriptionRequest;
                fromPartial(object: {
                    subscriptionId?: string;
                }): DeleteDataSubscriptionRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.data_api.admin.subscription.DeleteDataSubscriptionResponse";
                encode(_: DeleteDataSubscriptionResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): DeleteDataSubscriptionResponse;
                fromJSON(_: any): DeleteDataSubscriptionResponse;
                toJSON(_: DeleteDataSubscriptionResponse): unknown;
                create(base?: {} | undefined): DeleteDataSubscriptionResponse;
                fromPartial(_: {}): DeleteDataSubscriptionResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Organizations */
        readonly createOrganization: {
            readonly name: "CreateOrganization";
            readonly requestType: {
                $type: "devvit.dev_portal.data_api.admin.organization.CreateOrganizationRequest";
                encode(message: CreateOrganizationRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): CreateOrganizationRequest;
                fromJSON(object: any): CreateOrganizationRequest;
                toJSON(message: CreateOrganizationRequest): unknown;
                create(base?: {
                    name?: string;
                    contractEndDate?: Date | undefined;
                } | undefined): CreateOrganizationRequest;
                fromPartial(object: {
                    name?: string;
                    contractEndDate?: Date | undefined;
                }): CreateOrganizationRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.data_api.admin.organization.CreateOrganizationResponse";
                encode(message: CreateOrganizationResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): CreateOrganizationResponse;
                fromJSON(object: any): CreateOrganizationResponse;
                toJSON(message: CreateOrganizationResponse): unknown;
                create(base?: {
                    organizationId?: string;
                    name?: string;
                } | undefined): CreateOrganizationResponse;
                fromPartial(object: {
                    organizationId?: string;
                    name?: string;
                }): CreateOrganizationResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly getOrganizationByName: {
            readonly name: "GetOrganizationByName";
            readonly requestType: {
                $type: "devvit.dev_portal.data_api.admin.organization.GetOrganizationByNameRequest";
                encode(message: GetOrganizationByNameRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GetOrganizationByNameRequest;
                fromJSON(object: any): GetOrganizationByNameRequest;
                toJSON(message: GetOrganizationByNameRequest): unknown;
                create(base?: {
                    name?: string;
                } | undefined): GetOrganizationByNameRequest;
                fromPartial(object: {
                    name?: string;
                }): GetOrganizationByNameRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.data_api.admin.organization.GetOrganizationByNameResponse";
                encode(message: GetOrganizationByNameResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GetOrganizationByNameResponse;
                fromJSON(object: any): GetOrganizationByNameResponse;
                toJSON(message: GetOrganizationByNameResponse): unknown;
                create(base?: {
                    organizationId?: string;
                    isInternal?: boolean;
                } | undefined): GetOrganizationByNameResponse;
                fromPartial(object: {
                    organizationId?: string;
                    isInternal?: boolean;
                }): GetOrganizationByNameResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly getOrganizations: {
            readonly name: "GetOrganizations";
            readonly requestType: {
                $type: "devvit.dev_portal.data_api.admin.organization.GetOrganizationsRequest";
                encode(_: GetOrganizationsRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GetOrganizationsRequest;
                fromJSON(_: any): GetOrganizationsRequest;
                toJSON(_: GetOrganizationsRequest): unknown;
                create(base?: {} | undefined): GetOrganizationsRequest;
                fromPartial(_: {}): GetOrganizationsRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.data_api.admin.organization.GetOrganizationsResponse";
                encode(message: GetOrganizationsResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GetOrganizationsResponse;
                fromJSON(object: any): GetOrganizationsResponse;
                toJSON(message: GetOrganizationsResponse): unknown;
                create(base?: {
                    organizations?: {
                        id?: string;
                        name?: string;
                        subscriptions?: {
                            id?: string;
                            tier?: import("../options/options.js").DataTier;
                            events?: import("../options/options.js").FirehoseEvent[];
                            subreddits?: string[];
                            subredditRatings?: import("../reddit/v2alpha/subredditv2.js").SubredditRating[];
                            organizationId?: string;
                            name?: string;
                            description?: string | undefined;
                        }[];
                        tokens?: {
                            id?: string;
                            organizationId?: string;
                            createdAt?: Date | undefined;
                            expiresAt?: Date | undefined;
                            isRevoked?: boolean;
                        }[];
                        contractEndDate?: Date | undefined;
                    }[];
                } | undefined): GetOrganizationsResponse;
                fromPartial(object: {
                    organizations?: {
                        id?: string;
                        name?: string;
                        subscriptions?: {
                            id?: string;
                            tier?: import("../options/options.js").DataTier;
                            events?: import("../options/options.js").FirehoseEvent[];
                            subreddits?: string[];
                            subredditRatings?: import("../reddit/v2alpha/subredditv2.js").SubredditRating[];
                            organizationId?: string;
                            name?: string;
                            description?: string | undefined;
                        }[];
                        tokens?: {
                            id?: string;
                            organizationId?: string;
                            createdAt?: Date | undefined;
                            expiresAt?: Date | undefined;
                            isRevoked?: boolean;
                        }[];
                        contractEndDate?: Date | undefined;
                    }[];
                }): GetOrganizationsResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Audit Log */
        readonly getAuditLogEvents: {
            readonly name: "GetAuditLogEvents";
            readonly requestType: {
                $type: "devvit.dev_portal.data_api.admin.audit.GetAuditLogEventsRequest";
                encode(message: GetAuditLogEventsRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GetAuditLogEventsRequest;
                fromJSON(object: any): GetAuditLogEventsRequest;
                toJSON(message: GetAuditLogEventsRequest): unknown;
                create(base?: {
                    organizationName?: string;
                } | undefined): GetAuditLogEventsRequest;
                fromPartial(object: {
                    organizationName?: string;
                }): GetAuditLogEventsRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.data_api.admin.audit.GetAuditLogEventsResponse";
                encode(message: GetAuditLogEventsResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GetAuditLogEventsResponse;
                fromJSON(object: any): GetAuditLogEventsResponse;
                toJSON(message: GetAuditLogEventsResponse): unknown;
                create(base?: {
                    events?: {
                        id?: string;
                        createdAt?: Date | undefined;
                        userId?: string;
                        type?: import("./data_api/admin/audit/audit.js").AuditLogEventType;
                        organizationId?: string;
                        dataTokenCreatePayload?: {
                            tokenId?: string;
                            expiration?: Date | undefined;
                        } | undefined;
                        dataTokenRevokePayload?: {
                            tokenId?: string;
                        } | undefined;
                        dataSubscriptionCreatePayload?: {
                            subscriptionId?: string;
                        } | undefined;
                        dataSubscriptionUpdatePayload?: {
                            subscriptionId?: string;
                        } | undefined;
                        dataSubscriptionDeletePayload?: {
                            subscriptionId?: string;
                        } | undefined;
                        username?: string;
                    }[];
                } | undefined): GetAuditLogEventsResponse;
                fromPartial(object: {
                    events?: {
                        id?: string;
                        createdAt?: Date | undefined;
                        userId?: string;
                        type?: import("./data_api/admin/audit/audit.js").AuditLogEventType;
                        organizationId?: string;
                        dataTokenCreatePayload?: {
                            tokenId?: string;
                            expiration?: Date | undefined;
                        } | undefined;
                        dataTokenRevokePayload?: {
                            tokenId?: string;
                        } | undefined;
                        dataSubscriptionCreatePayload?: {
                            subscriptionId?: string;
                        } | undefined;
                        dataSubscriptionUpdatePayload?: {
                            subscriptionId?: string;
                        } | undefined;
                        dataSubscriptionDeletePayload?: {
                            subscriptionId?: string;
                        } | undefined;
                        username?: string;
                    }[];
                }): GetAuditLogEventsResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly addUsersToOrg: {
            readonly name: "AddUsersToOrg";
            readonly requestType: {
                $type: "devvit.dev_portal.data_api.admin.user.AddUsersToOrgRequest";
                encode(message: AddUsersToOrgRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): AddUsersToOrgRequest;
                fromJSON(object: any): AddUsersToOrgRequest;
                toJSON(message: AddUsersToOrgRequest): unknown;
                create(base?: {
                    orgId?: string;
                    usernames?: string[];
                } | undefined): AddUsersToOrgRequest;
                fromPartial(object: {
                    orgId?: string;
                    usernames?: string[];
                }): AddUsersToOrgRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.data_api.admin.user.AddUsersToOrgResponse";
                encode(message: AddUsersToOrgResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): AddUsersToOrgResponse;
                fromJSON(object: any): AddUsersToOrgResponse;
                toJSON(message: AddUsersToOrgResponse): unknown;
                create(base?: {
                    users?: {
                        t2id?: string;
                        orgId?: string;
                        username?: string;
                    }[];
                } | undefined): AddUsersToOrgResponse;
                fromPartial(object: {
                    users?: {
                        t2id?: string;
                        orgId?: string;
                        username?: string;
                    }[];
                }): AddUsersToOrgResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly getUsersByOrgId: {
            readonly name: "GetUsersByOrgId";
            readonly requestType: {
                $type: "devvit.dev_portal.data_api.admin.user.GetUsersByOrgIdRequest";
                encode(message: GetUsersByOrgIdRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GetUsersByOrgIdRequest;
                fromJSON(object: any): GetUsersByOrgIdRequest;
                toJSON(message: GetUsersByOrgIdRequest): unknown;
                create(base?: {
                    id?: string;
                } | undefined): GetUsersByOrgIdRequest;
                fromPartial(object: {
                    id?: string;
                }): GetUsersByOrgIdRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.data_api.admin.user.GetUsersByOrgIdResponse";
                encode(message: GetUsersByOrgIdResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GetUsersByOrgIdResponse;
                fromJSON(object: any): GetUsersByOrgIdResponse;
                toJSON(message: GetUsersByOrgIdResponse): unknown;
                create(base?: {
                    users?: {
                        t2id?: string;
                        orgId?: string;
                        username?: string;
                    }[];
                } | undefined): GetUsersByOrgIdResponse;
                fromPartial(object: {
                    users?: {
                        t2id?: string;
                        orgId?: string;
                        username?: string;
                    }[];
                }): GetUsersByOrgIdResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly getUserById: {
            readonly name: "GetUserById";
            readonly requestType: {
                $type: "devvit.dev_portal.data_api.admin.user.GetUserByIdRequest";
                encode(message: GetUserByIdRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GetUserByIdRequest;
                fromJSON(object: any): GetUserByIdRequest;
                toJSON(message: GetUserByIdRequest): unknown;
                create(base?: {
                    t2id?: string;
                } | undefined): GetUserByIdRequest;
                fromPartial(object: {
                    t2id?: string;
                }): GetUserByIdRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.data_api.admin.user.GetUserByIdResponse";
                encode(message: GetUserByIdResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GetUserByIdResponse;
                fromJSON(object: any): GetUserByIdResponse;
                toJSON(message: GetUserByIdResponse): unknown;
                create(base?: {
                    user?: {
                        t2id?: string;
                        orgId?: string;
                        username?: string;
                    } | undefined;
                } | undefined): GetUserByIdResponse;
                fromPartial(object: {
                    user?: {
                        t2id?: string;
                        orgId?: string;
                        username?: string;
                    } | undefined;
                }): GetUserByIdResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly deleteUser: {
            readonly name: "DeleteUser";
            readonly requestType: {
                $type: "devvit.dev_portal.data_api.admin.user.DeleteUserRequest";
                encode(message: DeleteUserRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): DeleteUserRequest;
                fromJSON(object: any): DeleteUserRequest;
                toJSON(message: DeleteUserRequest): unknown;
                create(base?: {
                    t2id?: string;
                } | undefined): DeleteUserRequest;
                fromPartial(object: {
                    t2id?: string;
                }): DeleteUserRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.data_api.admin.user.DeleteUserResponse";
                encode(message: DeleteUserResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): DeleteUserResponse;
                fromJSON(object: any): DeleteUserResponse;
                toJSON(message: DeleteUserResponse): unknown;
                create(base?: {
                    user?: {
                        t2id?: string;
                        orgId?: string;
                        username?: string;
                    } | undefined;
                } | undefined): DeleteUserResponse;
                fromPartial(object: {
                    user?: {
                        t2id?: string;
                        orgId?: string;
                        username?: string;
                    } | undefined;
                }): DeleteUserResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
/** A service to handle client-side events. */
export interface Events {
    /** Fire off a client-side event */
    SendEvent(request: Value, metadata?: Metadata): Promise<Empty>;
}
export declare const EventsServiceName = "devvit.dev_portal.Events";
export declare class EventsClientImpl implements Events {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    SendEvent(request: Value, metadata?: Metadata): Promise<Empty>;
}
/** A service to handle client-side events. */
export type EventsDefinition = typeof EventsDefinition;
export declare const EventsDefinition: {
    readonly name: "Events";
    readonly fullName: "devvit.dev_portal.Events";
    readonly methods: {
        /** Fire off a client-side event */
        readonly sendEvent: {
            readonly name: "SendEvent";
            readonly requestType: {
                $type: "google.protobuf.Value";
                encode(message: Value, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Value;
                fromJSON(object: any): Value;
                toJSON(message: Value): unknown;
                create(base?: {
                    nullValue?: import("../../google/protobuf/struct.js").NullValue | undefined;
                    numberValue?: number | undefined;
                    stringValue?: string | undefined;
                    boolValue?: boolean | undefined;
                    structValue?: {
                        [x: string]: any;
                    } | undefined;
                    listValue?: any[] | undefined;
                } | undefined): Value;
                fromPartial(object: {
                    nullValue?: import("../../google/protobuf/struct.js").NullValue | undefined;
                    numberValue?: number | undefined;
                    stringValue?: string | undefined;
                    boolValue?: boolean | undefined;
                    structValue?: {
                        [x: string]: any;
                    } | undefined;
                    listValue?: any[] | undefined;
                }): Value;
                wrap(value: any): Value;
                unwrap(message: any): string | number | boolean | Object | any[] | null | undefined;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {} | undefined): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
export interface DevPortalInstallationSettings {
    GetForm(request: GetInstallationSettingsFormRequest, metadata?: Metadata): Promise<GetInstallationSettingsFormResponse>;
    ValidateForm(request: ValidateInstallationSettingsFormRequest, metadata?: Metadata): Promise<ValidateInstallationSettingsFormResponse>;
    GetSettings(request: GetInstallationSettingsRequest, metadata?: Metadata): Promise<GetInstallationSettingsResponse>;
    UpdateSettings(request: UpdateInstallationSettingsRequest, metadata?: Metadata): Promise<UpdateInstallationSettingsResponse>;
}
export declare const DevPortalInstallationSettingsServiceName = "devvit.dev_portal.DevPortalInstallationSettings";
export declare class DevPortalInstallationSettingsClientImpl implements DevPortalInstallationSettings {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    GetForm(request: GetInstallationSettingsFormRequest, metadata?: Metadata): Promise<GetInstallationSettingsFormResponse>;
    ValidateForm(request: ValidateInstallationSettingsFormRequest, metadata?: Metadata): Promise<ValidateInstallationSettingsFormResponse>;
    GetSettings(request: GetInstallationSettingsRequest, metadata?: Metadata): Promise<GetInstallationSettingsResponse>;
    UpdateSettings(request: UpdateInstallationSettingsRequest, metadata?: Metadata): Promise<UpdateInstallationSettingsResponse>;
}
export type DevPortalInstallationSettingsDefinition = typeof DevPortalInstallationSettingsDefinition;
export declare const DevPortalInstallationSettingsDefinition: {
    readonly name: "DevPortalInstallationSettings";
    readonly fullName: "devvit.dev_portal.DevPortalInstallationSettings";
    readonly methods: {
        readonly getForm: {
            readonly name: "GetForm";
            readonly requestType: {
                $type: "devvit.dev_portal.installation_settings.GetInstallationSettingsFormRequest";
                encode(message: GetInstallationSettingsFormRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GetInstallationSettingsFormRequest;
                fromJSON(object: any): GetInstallationSettingsFormRequest;
                toJSON(message: GetInstallationSettingsFormRequest): unknown;
                create(base?: {
                    installationId?: string;
                } | undefined): GetInstallationSettingsFormRequest;
                fromPartial(object: {
                    installationId?: string;
                }): GetInstallationSettingsFormRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.installation_settings.GetInstallationSettingsFormResponse";
                encode(message: GetInstallationSettingsFormResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GetInstallationSettingsFormResponse;
                fromJSON(object: any): GetInstallationSettingsFormResponse;
                toJSON(message: GetInstallationSettingsFormResponse): unknown;
                create(base?: {
                    form?: {
                        [x: string]: {
                            fields?: {
                                fieldId?: string;
                                fieldType?: import("../../../community.js").FormFieldType;
                                label?: string;
                                helpText?: string | undefined;
                                defaultValue?: {
                                    fieldType?: import("../../../community.js").FormFieldType;
                                    isSecret?: boolean | undefined;
                                    stringValue?: string | undefined;
                                    numberValue?: number | undefined;
                                    boolValue?: boolean | undefined;
                                    listValue?: {
                                        itemType?: import("../../../community.js").FormFieldType;
                                        items?: any[];
                                    } | undefined;
                                    selectionValue?: {
                                        values?: string[];
                                    } | undefined;
                                    groupValue?: {} | undefined;
                                } | undefined;
                                required?: boolean | undefined;
                                disabled?: boolean | undefined;
                                fieldConfig?: {
                                    stringConfig?: {
                                        minLength?: number | undefined;
                                        maxLength?: number | undefined;
                                        placeholder?: string | undefined;
                                    } | undefined;
                                    paragraphConfig?: {
                                        maxCharacters?: number | undefined;
                                        lineHeight?: number | undefined;
                                        placeholder?: string | undefined;
                                    } | undefined;
                                    numberConfig?: {
                                        step?: number | undefined;
                                        min?: number | undefined;
                                        max?: number | undefined;
                                    } | undefined;
                                    booleanConfig?: {} | undefined;
                                    listConfig?: {
                                        itemType?: import("../../../community.js").FormFieldType;
                                        itemConfig?: any | undefined;
                                        minEntries?: number | undefined;
                                        maxEntries?: number | undefined;
                                        entryLabel?: string | undefined;
                                    } | undefined;
                                    selectionConfig?: {
                                        choices?: {
                                            label?: string;
                                            value?: string;
                                        }[];
                                        multiSelect?: boolean | undefined;
                                        minSelections?: number | undefined;
                                        maxSelections?: number | undefined;
                                        renderAsList?: boolean | undefined;
                                    } | undefined;
                                    groupConfig?: {
                                        fields?: any[];
                                    } | undefined;
                                } | undefined;
                                isSecret?: boolean | undefined;
                            }[];
                            title?: string | undefined;
                            shortDescription?: string | undefined;
                            acceptLabel?: string | undefined;
                            cancelLabel?: string | undefined;
                            id?: string | undefined;
                        } | undefined;
                    };
                } | undefined): GetInstallationSettingsFormResponse;
                fromPartial(object: {
                    form?: {
                        [x: string]: {
                            fields?: {
                                fieldId?: string;
                                fieldType?: import("../../../community.js").FormFieldType;
                                label?: string;
                                helpText?: string | undefined;
                                defaultValue?: {
                                    fieldType?: import("../../../community.js").FormFieldType;
                                    isSecret?: boolean | undefined;
                                    stringValue?: string | undefined;
                                    numberValue?: number | undefined;
                                    boolValue?: boolean | undefined;
                                    listValue?: {
                                        itemType?: import("../../../community.js").FormFieldType;
                                        items?: any[];
                                    } | undefined;
                                    selectionValue?: {
                                        values?: string[];
                                    } | undefined;
                                    groupValue?: {} | undefined;
                                } | undefined;
                                required?: boolean | undefined;
                                disabled?: boolean | undefined;
                                fieldConfig?: {
                                    stringConfig?: {
                                        minLength?: number | undefined;
                                        maxLength?: number | undefined;
                                        placeholder?: string | undefined;
                                    } | undefined;
                                    paragraphConfig?: {
                                        maxCharacters?: number | undefined;
                                        lineHeight?: number | undefined;
                                        placeholder?: string | undefined;
                                    } | undefined;
                                    numberConfig?: {
                                        step?: number | undefined;
                                        min?: number | undefined;
                                        max?: number | undefined;
                                    } | undefined;
                                    booleanConfig?: {} | undefined;
                                    listConfig?: {
                                        itemType?: import("../../../community.js").FormFieldType;
                                        itemConfig?: any | undefined;
                                        minEntries?: number | undefined;
                                        maxEntries?: number | undefined;
                                        entryLabel?: string | undefined;
                                    } | undefined;
                                    selectionConfig?: {
                                        choices?: {
                                            label?: string;
                                            value?: string;
                                        }[];
                                        multiSelect?: boolean | undefined;
                                        minSelections?: number | undefined;
                                        maxSelections?: number | undefined;
                                        renderAsList?: boolean | undefined;
                                    } | undefined;
                                    groupConfig?: {
                                        fields?: any[];
                                    } | undefined;
                                } | undefined;
                                isSecret?: boolean | undefined;
                            }[];
                            title?: string | undefined;
                            shortDescription?: string | undefined;
                            acceptLabel?: string | undefined;
                            cancelLabel?: string | undefined;
                            id?: string | undefined;
                        } | undefined;
                    };
                }): GetInstallationSettingsFormResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly validateForm: {
            readonly name: "ValidateForm";
            readonly requestType: {
                $type: "devvit.dev_portal.installation_settings.ValidateInstallationSettingsFormRequest";
                encode(message: ValidateInstallationSettingsFormRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ValidateInstallationSettingsFormRequest;
                fromJSON(object: any): ValidateInstallationSettingsFormRequest;
                toJSON(message: ValidateInstallationSettingsFormRequest): unknown;
                create(base?: {
                    installationId?: string;
                    settings?: {
                        version?: string;
                        settings?: {
                            [x: string]: {
                                fieldType?: import("../../../community.js").FormFieldType;
                                isSecret?: boolean | undefined;
                                stringValue?: string | undefined;
                                numberValue?: number | undefined;
                                boolValue?: boolean | undefined;
                                listValue?: {
                                    itemType?: import("../../../community.js").FormFieldType;
                                    items?: any[];
                                } | undefined;
                                selectionValue?: {
                                    values?: string[];
                                } | undefined;
                                groupValue?: {} | undefined;
                            } | undefined;
                        };
                        timestamp?: Date | undefined;
                    } | undefined;
                } | undefined): ValidateInstallationSettingsFormRequest;
                fromPartial(object: {
                    installationId?: string;
                    settings?: {
                        version?: string;
                        settings?: {
                            [x: string]: {
                                fieldType?: import("../../../community.js").FormFieldType;
                                isSecret?: boolean | undefined;
                                stringValue?: string | undefined;
                                numberValue?: number | undefined;
                                boolValue?: boolean | undefined;
                                listValue?: {
                                    itemType?: import("../../../community.js").FormFieldType;
                                    items?: any[];
                                } | undefined;
                                selectionValue?: {
                                    values?: string[];
                                } | undefined;
                                groupValue?: {} | undefined;
                            } | undefined;
                        };
                        timestamp?: Date | undefined;
                    } | undefined;
                }): ValidateInstallationSettingsFormRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.installation_settings.ValidateInstallationSettingsFormResponse";
                encode(message: ValidateInstallationSettingsFormResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ValidateInstallationSettingsFormResponse;
                fromJSON(object: any): ValidateInstallationSettingsFormResponse;
                toJSON(message: ValidateInstallationSettingsFormResponse): unknown;
                create(base?: {
                    success?: boolean;
                    errors?: {
                        [x: string]: string | undefined;
                    };
                } | undefined): ValidateInstallationSettingsFormResponse;
                fromPartial(object: {
                    success?: boolean;
                    errors?: {
                        [x: string]: string | undefined;
                    };
                }): ValidateInstallationSettingsFormResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly getSettings: {
            readonly name: "GetSettings";
            readonly requestType: {
                $type: "devvit.dev_portal.installation_settings.GetInstallationSettingsRequest";
                encode(message: GetInstallationSettingsRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GetInstallationSettingsRequest;
                fromJSON(object: any): GetInstallationSettingsRequest;
                toJSON(message: GetInstallationSettingsRequest): unknown;
                create(base?: {
                    installationId?: string;
                } | undefined): GetInstallationSettingsRequest;
                fromPartial(object: {
                    installationId?: string;
                }): GetInstallationSettingsRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.installation_settings.GetInstallationSettingsResponse";
                encode(message: GetInstallationSettingsResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GetInstallationSettingsResponse;
                fromJSON(object: any): GetInstallationSettingsResponse;
                toJSON(message: GetInstallationSettingsResponse): unknown;
                create(base?: {
                    settings?: {
                        version?: string;
                        settings?: {
                            [x: string]: {
                                fieldType?: import("../../../community.js").FormFieldType;
                                isSecret?: boolean | undefined;
                                stringValue?: string | undefined;
                                numberValue?: number | undefined;
                                boolValue?: boolean | undefined;
                                listValue?: {
                                    itemType?: import("../../../community.js").FormFieldType;
                                    items?: any[];
                                } | undefined;
                                selectionValue?: {
                                    values?: string[];
                                } | undefined;
                                groupValue?: {} | undefined;
                            } | undefined;
                        };
                        timestamp?: Date | undefined;
                    } | undefined;
                } | undefined): GetInstallationSettingsResponse;
                fromPartial(object: {
                    settings?: {
                        version?: string;
                        settings?: {
                            [x: string]: {
                                fieldType?: import("../../../community.js").FormFieldType;
                                isSecret?: boolean | undefined;
                                stringValue?: string | undefined;
                                numberValue?: number | undefined;
                                boolValue?: boolean | undefined;
                                listValue?: {
                                    itemType?: import("../../../community.js").FormFieldType;
                                    items?: any[];
                                } | undefined;
                                selectionValue?: {
                                    values?: string[];
                                } | undefined;
                                groupValue?: {} | undefined;
                            } | undefined;
                        };
                        timestamp?: Date | undefined;
                    } | undefined;
                }): GetInstallationSettingsResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly updateSettings: {
            readonly name: "UpdateSettings";
            readonly requestType: {
                $type: "devvit.dev_portal.installation_settings.UpdateInstallationSettingsRequest";
                encode(message: UpdateInstallationSettingsRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): UpdateInstallationSettingsRequest; /** Get app nutritional labels by app version id */
                fromJSON(object: any): UpdateInstallationSettingsRequest;
                toJSON(message: UpdateInstallationSettingsRequest): unknown;
                create(base?: {
                    installationId?: string;
                    settings?: {
                        version?: string;
                        settings?: {
                            [x: string]: {
                                fieldType?: import("../../../community.js").FormFieldType;
                                isSecret?: boolean | undefined;
                                stringValue?: string | undefined;
                                numberValue?: number | undefined;
                                boolValue?: boolean | undefined;
                                listValue?: {
                                    itemType?: import("../../../community.js").FormFieldType;
                                    items?: any[];
                                } | undefined;
                                selectionValue?: {
                                    values?: string[];
                                } | undefined;
                                groupValue?: {} | undefined;
                            } | undefined;
                        };
                        timestamp?: Date | undefined;
                    } | undefined;
                } | undefined): UpdateInstallationSettingsRequest;
                fromPartial(object: {
                    installationId?: string;
                    settings?: {
                        version?: string;
                        settings?: {
                            [x: string]: {
                                fieldType?: import("../../../community.js").FormFieldType;
                                isSecret?: boolean | undefined;
                                stringValue?: string | undefined;
                                numberValue?: number | undefined;
                                boolValue?: boolean | undefined;
                                listValue?: {
                                    itemType?: import("../../../community.js").FormFieldType;
                                    items?: any[];
                                } | undefined;
                                selectionValue?: {
                                    values?: string[];
                                } | undefined;
                                groupValue?: {} | undefined;
                            } | undefined;
                        };
                        timestamp?: Date | undefined;
                    } | undefined;
                }): UpdateInstallationSettingsRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.installation_settings.UpdateInstallationSettingsResponse";
                encode(message: UpdateInstallationSettingsResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): UpdateInstallationSettingsResponse;
                fromJSON(object: any): UpdateInstallationSettingsResponse;
                toJSON(message: UpdateInstallationSettingsResponse): unknown;
                create(base?: {
                    success?: boolean;
                    errors?: {
                        [x: string]: string | undefined;
                    };
                } | undefined): UpdateInstallationSettingsResponse;
                fromPartial(object: {
                    success?: boolean;
                    errors?: {
                        [x: string]: string | undefined;
                    };
                }): UpdateInstallationSettingsResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
export interface DevPortalAppSettings {
    GetForm(request: GetAppSettingsFormRequest, metadata?: Metadata): Promise<GetAppSettingsFormResponse>;
    ValidateForm(request: ValidateAppSettingsFormRequest, metadata?: Metadata): Promise<ValidateAppSettingsFormResponse>;
    GetSettings(request: GetAppSettingsRequest, metadata?: Metadata): Promise<GetAppSettingsResponse>;
    UpdateSettings(request: UpdateAppSettingsRequest, metadata?: Metadata): Promise<UpdateAppSettingsResponse>;
}
export declare const DevPortalAppSettingsServiceName = "devvit.dev_portal.DevPortalAppSettings";
export declare class DevPortalAppSettingsClientImpl implements DevPortalAppSettings {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    GetForm(request: GetAppSettingsFormRequest, metadata?: Metadata): Promise<GetAppSettingsFormResponse>;
    ValidateForm(request: ValidateAppSettingsFormRequest, metadata?: Metadata): Promise<ValidateAppSettingsFormResponse>;
    GetSettings(request: GetAppSettingsRequest, metadata?: Metadata): Promise<GetAppSettingsResponse>;
    UpdateSettings(request: UpdateAppSettingsRequest, metadata?: Metadata): Promise<UpdateAppSettingsResponse>;
}
export type DevPortalAppSettingsDefinition = typeof DevPortalAppSettingsDefinition;
export declare const DevPortalAppSettingsDefinition: {
    readonly name: "DevPortalAppSettings";
    readonly fullName: "devvit.dev_portal.DevPortalAppSettings";
    readonly methods: {
        readonly getForm: {
            readonly name: "GetForm";
            readonly requestType: {
                $type: "devvit.dev_portal.app_settings.GetAppSettingsFormRequest";
                encode(message: GetAppSettingsFormRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GetAppSettingsFormRequest;
                fromJSON(object: any): GetAppSettingsFormRequest;
                toJSON(message: GetAppSettingsFormRequest): unknown;
                create(base?: {
                    appId?: string;
                } | undefined): GetAppSettingsFormRequest;
                fromPartial(object: {
                    appId?: string;
                }): GetAppSettingsFormRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.app_settings.GetAppSettingsFormResponse";
                encode(message: GetAppSettingsFormResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GetAppSettingsFormResponse;
                fromJSON(object: any): GetAppSettingsFormResponse;
                toJSON(message: GetAppSettingsFormResponse): unknown;
                create(base?: {
                    form?: {
                        [x: string]: {
                            fields?: {
                                fieldId?: string;
                                fieldType?: import("../../../community.js").FormFieldType;
                                label?: string;
                                helpText?: string | undefined;
                                defaultValue?: {
                                    fieldType?: import("../../../community.js").FormFieldType;
                                    isSecret?: boolean | undefined;
                                    stringValue?: string | undefined;
                                    numberValue?: number | undefined;
                                    boolValue?: boolean | undefined;
                                    listValue?: {
                                        itemType?: import("../../../community.js").FormFieldType;
                                        items?: any[];
                                    } | undefined;
                                    selectionValue?: {
                                        values?: string[];
                                    } | undefined;
                                    groupValue?: {} | undefined;
                                } | undefined;
                                required?: boolean | undefined;
                                disabled?: boolean | undefined;
                                fieldConfig?: {
                                    stringConfig?: {
                                        minLength?: number | undefined;
                                        maxLength?: number | undefined;
                                        placeholder?: string | undefined;
                                    } | undefined;
                                    paragraphConfig?: {
                                        maxCharacters?: number | undefined;
                                        lineHeight?: number | undefined;
                                        placeholder?: string | undefined;
                                    } | undefined;
                                    numberConfig?: {
                                        step?: number | undefined;
                                        min?: number | undefined;
                                        max?: number | undefined;
                                    } | undefined;
                                    booleanConfig?: {} | undefined;
                                    listConfig?: {
                                        itemType?: import("../../../community.js").FormFieldType;
                                        itemConfig?: any | undefined;
                                        minEntries?: number | undefined;
                                        maxEntries?: number | undefined;
                                        entryLabel?: string | undefined;
                                    } | undefined;
                                    selectionConfig?: {
                                        choices?: {
                                            label?: string;
                                            value?: string;
                                        }[];
                                        multiSelect?: boolean | undefined;
                                        minSelections?: number | undefined;
                                        maxSelections?: number | undefined;
                                        renderAsList?: boolean | undefined;
                                    } | undefined;
                                    groupConfig?: {
                                        fields?: any[];
                                    } | undefined;
                                } | undefined;
                                isSecret?: boolean | undefined;
                            }[];
                            title?: string | undefined;
                            shortDescription?: string | undefined;
                            acceptLabel?: string | undefined;
                            cancelLabel?: string | undefined;
                            id?: string | undefined;
                        } | undefined;
                    };
                } | undefined): GetAppSettingsFormResponse;
                fromPartial(object: {
                    form?: {
                        [x: string]: {
                            fields?: {
                                fieldId?: string;
                                fieldType?: import("../../../community.js").FormFieldType;
                                label?: string;
                                helpText?: string | undefined;
                                defaultValue?: {
                                    fieldType?: import("../../../community.js").FormFieldType;
                                    isSecret?: boolean | undefined;
                                    stringValue?: string | undefined;
                                    numberValue?: number | undefined;
                                    boolValue?: boolean | undefined;
                                    listValue?: {
                                        itemType?: import("../../../community.js").FormFieldType;
                                        items?: any[];
                                    } | undefined;
                                    selectionValue?: {
                                        values?: string[];
                                    } | undefined;
                                    groupValue?: {} | undefined;
                                } | undefined;
                                required?: boolean | undefined;
                                disabled?: boolean | undefined;
                                fieldConfig?: {
                                    stringConfig?: {
                                        minLength?: number | undefined;
                                        maxLength?: number | undefined;
                                        placeholder?: string | undefined;
                                    } | undefined;
                                    paragraphConfig?: {
                                        maxCharacters?: number | undefined;
                                        lineHeight?: number | undefined;
                                        placeholder?: string | undefined;
                                    } | undefined;
                                    numberConfig?: {
                                        step?: number | undefined;
                                        min?: number | undefined;
                                        max?: number | undefined;
                                    } | undefined;
                                    booleanConfig?: {} | undefined;
                                    listConfig?: {
                                        itemType?: import("../../../community.js").FormFieldType;
                                        itemConfig?: any | undefined;
                                        minEntries?: number | undefined;
                                        maxEntries?: number | undefined;
                                        entryLabel?: string | undefined;
                                    } | undefined;
                                    selectionConfig?: {
                                        choices?: {
                                            label?: string;
                                            value?: string;
                                        }[];
                                        multiSelect?: boolean | undefined;
                                        minSelections?: number | undefined;
                                        maxSelections?: number | undefined;
                                        renderAsList?: boolean | undefined;
                                    } | undefined;
                                    groupConfig?: {
                                        fields?: any[];
                                    } | undefined;
                                } | undefined;
                                isSecret?: boolean | undefined;
                            }[];
                            title?: string | undefined;
                            shortDescription?: string | undefined;
                            acceptLabel?: string | undefined;
                            cancelLabel?: string | undefined;
                            id?: string | undefined;
                        } | undefined;
                    };
                }): GetAppSettingsFormResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly validateForm: {
            readonly name: "ValidateForm";
            readonly requestType: {
                $type: "devvit.dev_portal.app_settings.ValidateAppSettingsFormRequest";
                encode(message: ValidateAppSettingsFormRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ValidateAppSettingsFormRequest;
                fromJSON(object: any): ValidateAppSettingsFormRequest;
                toJSON(message: ValidateAppSettingsFormRequest): unknown;
                create(base?: {
                    appId?: string;
                    settings?: {
                        version?: string;
                        settings?: {
                            [x: string]: {
                                fieldType?: import("../../../community.js").FormFieldType;
                                isSecret?: boolean | undefined;
                                stringValue?: string | undefined;
                                numberValue?: number | undefined;
                                boolValue?: boolean | undefined;
                                listValue?: {
                                    itemType?: import("../../../community.js").FormFieldType;
                                    items?: any[];
                                } | undefined;
                                selectionValue?: {
                                    values?: string[];
                                } | undefined;
                                groupValue?: {} | undefined;
                            } | undefined;
                        };
                        timestamp?: Date | undefined;
                    } | undefined;
                } | undefined): ValidateAppSettingsFormRequest;
                fromPartial(object: {
                    appId?: string;
                    settings?: {
                        version?: string;
                        settings?: {
                            [x: string]: {
                                fieldType?: import("../../../community.js").FormFieldType;
                                isSecret?: boolean | undefined;
                                stringValue?: string | undefined;
                                numberValue?: number | undefined;
                                boolValue?: boolean | undefined;
                                listValue?: {
                                    itemType?: import("../../../community.js").FormFieldType;
                                    items?: any[];
                                } | undefined;
                                selectionValue?: {
                                    values?: string[];
                                } | undefined;
                                groupValue?: {} | undefined;
                            } | undefined;
                        };
                        timestamp?: Date | undefined;
                    } | undefined;
                }): ValidateAppSettingsFormRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.app_settings.ValidateAppSettingsFormResponse";
                encode(message: ValidateAppSettingsFormResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ValidateAppSettingsFormResponse;
                fromJSON(object: any): ValidateAppSettingsFormResponse;
                toJSON(message: ValidateAppSettingsFormResponse): unknown;
                create(base?: {
                    success?: boolean;
                    errors?: {
                        [x: string]: string | undefined;
                    };
                } | undefined): ValidateAppSettingsFormResponse;
                fromPartial(object: {
                    success?: boolean;
                    errors?: {
                        [x: string]: string | undefined;
                    };
                }): ValidateAppSettingsFormResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly getSettings: {
            readonly name: "GetSettings";
            readonly requestType: {
                $type: "devvit.dev_portal.app_settings.GetAppSettingsRequest";
                encode(message: GetAppSettingsRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GetAppSettingsRequest;
                fromJSON(object: any): GetAppSettingsRequest;
                toJSON(message: GetAppSettingsRequest): unknown;
                create(base?: {
                    appId?: string;
                } | undefined): GetAppSettingsRequest;
                fromPartial(object: {
                    appId?: string;
                }): GetAppSettingsRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.app_settings.GetAppSettingsResponse";
                encode(message: GetAppSettingsResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GetAppSettingsResponse;
                fromJSON(object: any): GetAppSettingsResponse;
                toJSON(message: GetAppSettingsResponse): unknown;
                create(base?: {
                    settings?: {
                        version?: string;
                        settings?: {
                            [x: string]: {
                                fieldType?: import("../../../community.js").FormFieldType;
                                isSecret?: boolean | undefined;
                                stringValue?: string | undefined;
                                numberValue?: number | undefined;
                                boolValue?: boolean | undefined;
                                listValue?: {
                                    itemType?: import("../../../community.js").FormFieldType;
                                    items?: any[];
                                } | undefined;
                                selectionValue?: {
                                    values?: string[];
                                } | undefined;
                                groupValue?: {} | undefined;
                            } | undefined;
                        };
                        timestamp?: Date | undefined;
                    } | undefined;
                } | undefined): GetAppSettingsResponse;
                fromPartial(object: {
                    settings?: {
                        version?: string;
                        settings?: {
                            [x: string]: {
                                fieldType?: import("../../../community.js").FormFieldType;
                                isSecret?: boolean | undefined;
                                stringValue?: string | undefined;
                                numberValue?: number | undefined;
                                boolValue?: boolean | undefined;
                                listValue?: {
                                    itemType?: import("../../../community.js").FormFieldType;
                                    items?: any[];
                                } | undefined;
                                selectionValue?: {
                                    values?: string[];
                                } | undefined;
                                groupValue?: {} | undefined;
                            } | undefined;
                        };
                        timestamp?: Date | undefined;
                    } | undefined;
                }): GetAppSettingsResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly updateSettings: {
            readonly name: "UpdateSettings";
            readonly requestType: {
                $type: "devvit.dev_portal.app_settings.UpdateAppSettingsRequest";
                encode(message: UpdateAppSettingsRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): UpdateAppSettingsRequest;
                fromJSON(object: any): UpdateAppSettingsRequest;
                toJSON(message: UpdateAppSettingsRequest): unknown;
                create(base?: {
                    appId?: string;
                    settings?: {
                        version?: string;
                        settings?: {
                            [x: string]: {
                                fieldType?: import("../../../community.js").FormFieldType;
                                isSecret?: boolean | undefined;
                                stringValue?: string | undefined;
                                numberValue?: number | undefined;
                                boolValue?: boolean | undefined;
                                listValue?: {
                                    itemType?: import("../../../community.js").FormFieldType;
                                    items?: any[];
                                } | undefined;
                                selectionValue?: {
                                    values?: string[];
                                } | undefined;
                                groupValue?: {} | undefined;
                            } | undefined;
                        };
                        timestamp?: Date | undefined;
                    } | undefined;
                } | undefined): UpdateAppSettingsRequest;
                fromPartial(object: {
                    appId?: string;
                    settings?: {
                        version?: string;
                        settings?: {
                            [x: string]: {
                                fieldType?: import("../../../community.js").FormFieldType;
                                isSecret?: boolean | undefined;
                                stringValue?: string | undefined;
                                numberValue?: number | undefined;
                                boolValue?: boolean | undefined;
                                listValue?: {
                                    itemType?: import("../../../community.js").FormFieldType;
                                    items?: any[];
                                } | undefined;
                                selectionValue?: {
                                    values?: string[];
                                } | undefined;
                                groupValue?: {} | undefined;
                            } | undefined;
                        };
                        timestamp?: Date | undefined;
                    } | undefined;
                }): UpdateAppSettingsRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.app_settings.UpdateAppSettingsResponse";
                encode(message: UpdateAppSettingsResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): UpdateAppSettingsResponse;
                fromJSON(object: any): UpdateAppSettingsResponse;
                toJSON(message: UpdateAppSettingsResponse): unknown;
                create(base?: {
                    success?: boolean;
                    errors?: {
                        [x: string]: string | undefined;
                    };
                } | undefined): UpdateAppSettingsResponse;
                fromPartial(object: {
                    success?: boolean;
                    errors?: {
                        [x: string]: string | undefined;
                    };
                }): UpdateAppSettingsResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
export interface DevPortalAppPublishRequest {
    Submit(request: AppPRCreateRequest, metadata?: Metadata): Promise<UUID>;
    Update(request: AppPRUpdateRequest, metadata?: Metadata): Promise<Empty>;
    Get(request: AppPRGetRequest, metadata?: Metadata): Promise<FullPublishRequestInfo>;
    FindMany(request: AppPRFindManyRequest, metadata?: Metadata): Promise<MultiplePublishRequestInfos>;
    SetReviewDecision(request: AppPRSetReviewDecisionRequest, metadata?: Metadata): Promise<UUID>;
    RemoveReview(request: UUID, metadata?: Metadata): Promise<Empty>;
    AddNote(request: AppPRAddNoteRequest, metadata?: Metadata): Promise<UUID>;
    UpdateNote(request: AppPRUpdateNoteRequest, metadata?: Metadata): Promise<Empty>;
    RemoveNote(request: UUID, metadata?: Metadata): Promise<Empty>;
}
export declare const DevPortalAppPublishRequestServiceName = "devvit.dev_portal.DevPortalAppPublishRequest";
export declare class DevPortalAppPublishRequestClientImpl implements DevPortalAppPublishRequest {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Submit(request: AppPRCreateRequest, metadata?: Metadata): Promise<UUID>;
    Update(request: AppPRUpdateRequest, metadata?: Metadata): Promise<Empty>;
    Get(request: AppPRGetRequest, metadata?: Metadata): Promise<FullPublishRequestInfo>;
    FindMany(request: AppPRFindManyRequest, metadata?: Metadata): Promise<MultiplePublishRequestInfos>;
    SetReviewDecision(request: AppPRSetReviewDecisionRequest, metadata?: Metadata): Promise<UUID>;
    RemoveReview(request: UUID, metadata?: Metadata): Promise<Empty>;
    AddNote(request: AppPRAddNoteRequest, metadata?: Metadata): Promise<UUID>;
    UpdateNote(request: AppPRUpdateNoteRequest, metadata?: Metadata): Promise<Empty>;
    RemoveNote(request: UUID, metadata?: Metadata): Promise<Empty>;
}
export type DevPortalAppPublishRequestDefinition = typeof DevPortalAppPublishRequestDefinition;
export declare const DevPortalAppPublishRequestDefinition: {
    readonly name: "DevPortalAppPublishRequest";
    readonly fullName: "devvit.dev_portal.DevPortalAppPublishRequest";
    readonly methods: {
        readonly submit: {
            readonly name: "Submit";
            readonly requestType: {
                $type: "devvit.dev_portal.app_publish_request.AppPRCreateRequest";
                encode(message: AppPRCreateRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): AppPRCreateRequest;
                fromJSON(object: any): AppPRCreateRequest;
                toJSON(message: AppPRCreateRequest): unknown;
                create(base?: {
                    appVersionId?: string | undefined;
                    appSlugAndVersionNumber?: string | undefined;
                    visibility?: import("./app_publish_request/app_publish_request.js").AppPublishRequestVisibility;
                } | undefined): AppPRCreateRequest;
                fromPartial(object: {
                    appVersionId?: string | undefined;
                    appSlugAndVersionNumber?: string | undefined;
                    visibility?: import("./app_publish_request/app_publish_request.js").AppPublishRequestVisibility;
                }): AppPRCreateRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.UUID";
                encode(message: UUID, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): UUID;
                fromJSON(object: any): UUID;
                toJSON(message: UUID): unknown;
                create(base?: {
                    id?: string;
                } | undefined): UUID;
                fromPartial(object: {
                    id?: string;
                }): UUID;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly update: {
            readonly name: "Update";
            readonly requestType: {
                $type: "devvit.dev_portal.app_publish_request.AppPRUpdateRequest";
                encode(message: AppPRUpdateRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): AppPRUpdateRequest;
                fromJSON(object: any): AppPRUpdateRequest;
                toJSON(message: AppPRUpdateRequest): unknown;
                create(base?: {
                    appVersionId?: string | undefined;
                    publishRequestId?: string | undefined;
                    appSlugAndVersionNumber?: string | undefined;
                    status?: import("./app_publish_request/app_publish_request.js").AppPublishRequestStatus;
                } | undefined): AppPRUpdateRequest;
                fromPartial(object: {
                    appVersionId?: string | undefined;
                    publishRequestId?: string | undefined;
                    appSlugAndVersionNumber?: string | undefined;
                    status?: import("./app_publish_request/app_publish_request.js").AppPublishRequestStatus;
                }): AppPRUpdateRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {} | undefined): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly get: {
            readonly name: "Get";
            readonly requestType: {
                $type: "devvit.dev_portal.app_publish_request.AppPRGetRequest";
                encode(message: AppPRGetRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): AppPRGetRequest;
                fromJSON(object: any): AppPRGetRequest;
                toJSON(message: AppPRGetRequest): unknown;
                create(base?: {
                    appVersionId?: string | undefined;
                    publishRequestId?: string | undefined;
                    appSlugAndVersionNumber?: string | undefined;
                } | undefined): AppPRGetRequest;
                fromPartial(object: {
                    appVersionId?: string | undefined;
                    publishRequestId?: string | undefined;
                    appSlugAndVersionNumber?: string | undefined;
                }): AppPRGetRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.app_publish_request.FullPublishRequestInfo";
                encode(message: FullPublishRequestInfo, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): FullPublishRequestInfo;
                fromJSON(object: any): FullPublishRequestInfo;
                toJSON(message: FullPublishRequestInfo): unknown;
                create(base?: {
                    id?: string;
                    createdAt?: Date | undefined;
                    createdBy?: {
                        id?: string;
                        displayName?: string;
                        snoovatarIconUrl?: string;
                    } | undefined;
                    status?: import("./app_publish_request/app_publish_request.js").AppPublishRequestStatus;
                    visibility?: import("./app_publish_request/app_publish_request.js").AppPublishRequestVisibility;
                    appVersionInfo?: {
                        id?: string;
                        visibility?: import("./app_version/info/app_version_info.js").VersionVisibility;
                        validInstallTypes?: import("./app_version/info/app_version_info.js").InstallationType[];
                        majorVersion?: number;
                        minorVersion?: number;
                        patchVersion?: number;
                        prereleaseVersion?: number | undefined;
                        uploadedAt?: Date | undefined;
                        buildStatus?: import("./app_version/info/app_version_info.js").BuildStatus;
                        builtAt?: Date | undefined;
                        about?: string;
                        hasCustomSettings?: boolean;
                        pool?: import("./app_version/info/app_version_info.js").ComputePool;
                    } | undefined;
                    appInfo?: {
                        id?: string;
                        slug?: string;
                        name?: string;
                        description?: string;
                        appAccount?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        isNsfw?: boolean;
                        isDelisted?: boolean;
                        isFirstParty?: boolean;
                        isArchived?: boolean;
                        isWebviewEnabled?: boolean;
                        createdAt?: Date | undefined;
                        owner?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        categories?: import("./app/categories/categories.js").Categories[];
                        stats?: {
                            installCount?: number;
                        } | undefined;
                        termsAndConditions?: string;
                        privacyPolicy?: string;
                        defaultPool?: import("./app_version/info/app_version_info.js").ComputePool;
                        capabilities?: import("./app/info/app_info.js").AppCapability[];
                        isDisabled?: boolean;
                    } | undefined;
                    reviews?: {
                        id?: string;
                        createdAt?: Date | undefined;
                        updatedAt?: Date | undefined;
                        reviewer?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        decision?: import("./app_publish_request/review/app_publish_request_review.js").AppPublishRequestReviewDecision;
                    }[];
                    notes?: {
                        id?: string;
                        createdAt?: Date | undefined;
                        updatedAt?: Date | undefined;
                        author?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        note?: string;
                    }[];
                    appInstallationCount?: number | undefined;
                } | undefined): FullPublishRequestInfo;
                fromPartial(object: {
                    id?: string;
                    createdAt?: Date | undefined;
                    createdBy?: {
                        id?: string;
                        displayName?: string;
                        snoovatarIconUrl?: string;
                    } | undefined;
                    status?: import("./app_publish_request/app_publish_request.js").AppPublishRequestStatus;
                    visibility?: import("./app_publish_request/app_publish_request.js").AppPublishRequestVisibility;
                    appVersionInfo?: {
                        id?: string;
                        visibility?: import("./app_version/info/app_version_info.js").VersionVisibility;
                        validInstallTypes?: import("./app_version/info/app_version_info.js").InstallationType[];
                        majorVersion?: number;
                        minorVersion?: number;
                        patchVersion?: number;
                        prereleaseVersion?: number | undefined;
                        uploadedAt?: Date | undefined;
                        buildStatus?: import("./app_version/info/app_version_info.js").BuildStatus;
                        builtAt?: Date | undefined;
                        about?: string;
                        hasCustomSettings?: boolean;
                        pool?: import("./app_version/info/app_version_info.js").ComputePool;
                    } | undefined;
                    appInfo?: {
                        id?: string;
                        slug?: string;
                        name?: string;
                        description?: string;
                        appAccount?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        isNsfw?: boolean;
                        isDelisted?: boolean;
                        isFirstParty?: boolean;
                        isArchived?: boolean;
                        isWebviewEnabled?: boolean;
                        createdAt?: Date | undefined;
                        owner?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        categories?: import("./app/categories/categories.js").Categories[];
                        stats?: {
                            installCount?: number;
                        } | undefined;
                        termsAndConditions?: string;
                        privacyPolicy?: string;
                        defaultPool?: import("./app_version/info/app_version_info.js").ComputePool;
                        capabilities?: import("./app/info/app_info.js").AppCapability[];
                        isDisabled?: boolean;
                    } | undefined;
                    reviews?: {
                        id?: string;
                        createdAt?: Date | undefined;
                        updatedAt?: Date | undefined;
                        reviewer?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        decision?: import("./app_publish_request/review/app_publish_request_review.js").AppPublishRequestReviewDecision;
                    }[];
                    notes?: {
                        id?: string;
                        createdAt?: Date | undefined;
                        updatedAt?: Date | undefined;
                        author?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        note?: string;
                    }[];
                    appInstallationCount?: number | undefined;
                }): FullPublishRequestInfo;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly findMany: {
            readonly name: "FindMany";
            readonly requestType: {
                $type: "devvit.dev_portal.app_publish_request.AppPRFindManyRequest";
                encode(message: AppPRFindManyRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): AppPRFindManyRequest;
                fromJSON(object: any): AppPRFindManyRequest;
                toJSON(message: AppPRFindManyRequest): unknown;
                create(base?: {
                    appId?: string | undefined;
                    appName?: string | undefined;
                    appSlug?: string | undefined;
                    searchTerm?: string | undefined;
                    pagination?: {
                        page?: number;
                        pageSize?: number;
                    } | undefined;
                    sort?: {
                        field?: string;
                        asc?: boolean;
                    } | undefined;
                    statuses?: import("./app_publish_request/app_publish_request.js").AppPublishRequestStatus[];
                } | undefined): AppPRFindManyRequest;
                fromPartial(object: {
                    appId?: string | undefined;
                    appName?: string | undefined;
                    appSlug?: string | undefined;
                    searchTerm?: string | undefined;
                    pagination?: {
                        page?: number;
                        pageSize?: number;
                    } | undefined;
                    sort?: {
                        field?: string;
                        asc?: boolean;
                    } | undefined;
                    statuses?: import("./app_publish_request/app_publish_request.js").AppPublishRequestStatus[];
                }): AppPRFindManyRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.dev_portal.app_publish_request.MultiplePublishRequestInfos";
                encode(message: MultiplePublishRequestInfos, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MultiplePublishRequestInfos;
                fromJSON(object: any): MultiplePublishRequestInfos;
                toJSON(message: MultiplePublishRequestInfos): unknown;
                create(base?: {
                    requests?: {
                        id?: string;
                        createdAt?: Date | undefined;
                        createdBy?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        status?: import("./app_publish_request/app_publish_request.js").AppPublishRequestStatus;
                        visibility?: import("./app_publish_request/app_publish_request.js").AppPublishRequestVisibility;
                        appVersionInfo?: {
                            id?: string;
                            visibility?: import("./app_version/info/app_version_info.js").VersionVisibility;
                            validInstallTypes?: import("./app_version/info/app_version_info.js").InstallationType[];
                            majorVersion?: number;
                            minorVersion?: number;
                            patchVersion?: number;
                            prereleaseVersion?: number | undefined;
                            uploadedAt?: Date | undefined;
                            buildStatus?: import("./app_version/info/app_version_info.js").BuildStatus;
                            builtAt?: Date | undefined;
                            about?: string;
                            hasCustomSettings?: boolean;
                            pool?: import("./app_version/info/app_version_info.js").ComputePool;
                        } | undefined;
                        appInfo?: {
                            id?: string;
                            slug?: string;
                            name?: string;
                            description?: string;
                            appAccount?: {
                                id?: string;
                                displayName?: string;
                                snoovatarIconUrl?: string;
                            } | undefined;
                            isNsfw?: boolean;
                            isDelisted?: boolean;
                            isFirstParty?: boolean;
                            isArchived?: boolean;
                            isWebviewEnabled?: boolean;
                            createdAt?: Date | undefined;
                            owner?: {
                                id?: string;
                                displayName?: string;
                                snoovatarIconUrl?: string;
                            } | undefined;
                            categories?: import("./app/categories/categories.js").Categories[];
                            stats?: {
                                installCount?: number;
                            } | undefined;
                            termsAndConditions?: string;
                            privacyPolicy?: string;
                            defaultPool?: import("./app_version/info/app_version_info.js").ComputePool;
                            capabilities?: import("./app/info/app_info.js").AppCapability[];
                            isDisabled?: boolean;
                        } | undefined;
                        reviews?: {
                            id?: string;
                            createdAt?: Date | undefined;
                            updatedAt?: Date | undefined;
                            reviewer?: {
                                id?: string;
                                displayName?: string;
                                snoovatarIconUrl?: string;
                            } | undefined;
                            decision?: import("./app_publish_request/review/app_publish_request_review.js").AppPublishRequestReviewDecision;
                        }[];
                        notes?: {
                            id?: string;
                            createdAt?: Date | undefined;
                            updatedAt?: Date | undefined;
                            author?: {
                                id?: string;
                                displayName?: string;
                                snoovatarIconUrl?: string;
                            } | undefined;
                            note?: string;
                        }[];
                        appInstallationCount?: number | undefined;
                    }[];
                    pagination?: {
                        page?: number;
                        pageSize?: number;
                        total?: number;
                    } | undefined;
                } | undefined): MultiplePublishRequestInfos;
                fromPartial(object: {
                    requests?: {
                        id?: string;
                        createdAt?: Date | undefined;
                        createdBy?: {
                            id?: string;
                            displayName?: string;
                            snoovatarIconUrl?: string;
                        } | undefined;
                        status?: import("./app_publish_request/app_publish_request.js").AppPublishRequestStatus;
                        visibility?: import("./app_publish_request/app_publish_request.js").AppPublishRequestVisibility;
                        appVersionInfo?: {
                            id?: string;
                            visibility?: import("./app_version/info/app_version_info.js").VersionVisibility;
                            validInstallTypes?: import("./app_version/info/app_version_info.js").InstallationType[];
                            majorVersion?: number;
                            minorVersion?: number;
                            patchVersion?: number;
                            prereleaseVersion?: number | undefined;
                            uploadedAt?: Date | undefined;
                            buildStatus?: import("./app_version/info/app_version_info.js").BuildStatus;
                            builtAt?: Date | undefined;
                            about?: string;
                            hasCustomSettings?: boolean;
                            pool?: import("./app_version/info/app_version_info.js").ComputePool;
                        } | undefined;
                        appInfo?: {
                            id?: string;
                            slug?: string;
                            name?: string;
                            description?: string;
                            appAccount?: {
                                id?: string;
                                displayName?: string;
                                snoovatarIconUrl?: string;
                            } | undefined;
                            isNsfw?: boolean;
                            isDelisted?: boolean;
                            isFirstParty?: boolean;
                            isArchived?: boolean;
                            isWebviewEnabled?: boolean;
                            createdAt?: Date | undefined;
                            owner?: {
                                id?: string;
                                displayName?: string;
                                snoovatarIconUrl?: string;
                            } | undefined;
                            categories?: import("./app/categories/categories.js").Categories[];
                            stats?: {
                                installCount?: number;
                            } | undefined;
                            termsAndConditions?: string;
                            privacyPolicy?: string;
                            defaultPool?: import("./app_version/info/app_version_info.js").ComputePool;
                            capabilities?: import("./app/info/app_info.js").AppCapability[];
                            isDisabled?: boolean;
                        } | undefined;
                        reviews?: {
                            id?: string;
                            createdAt?: Date | undefined;
                            updatedAt?: Date | undefined;
                            reviewer?: {
                                id?: string;
                                displayName?: string;
                                snoovatarIconUrl?: string;
                            } | undefined;
                            decision?: import("./app_publish_request/review/app_publish_request_review.js").AppPublishRequestReviewDecision;
                        }[];
                        notes?: {
                            id?: string;
                            createdAt?: Date | undefined;
                            updatedAt?: Date | undefined;
                            author?: {
                                id?: string;
                                displayName?: string;
                                snoovatarIconUrl?: string;
                            } | undefined;
                            note?: string;
                        }[];
                        appInstallationCount?: number | undefined;
                    }[];
                    pagination?: {
                        page?: number;
                        pageSize?: number;
                        total?: number;
                    } | undefined;
                }): MultiplePublishRequestInfos;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly setReviewDecision: {
            readonly name: "SetReviewDecision";
            readonly requestType: {
                $type: "devvit.dev_portal.app_publish_request.review.AppPRSetReviewDecisionRequest";
                encode(message: AppPRSetReviewDecisionRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): AppPRSetReviewDecisionRequest;
                fromJSON(object: any): AppPRSetReviewDecisionRequest;
                toJSON(message: AppPRSetReviewDecisionRequest): unknown;
                create(base?: {
                    appPublishRequestId?: string;
                    decision?: import("./app_publish_request/review/app_publish_request_review.js").AppPublishRequestReviewDecision;
                } | undefined): AppPRSetReviewDecisionRequest;
                fromPartial(object: {
                    appPublishRequestId?: string;
                    decision?: import("./app_publish_request/review/app_publish_request_review.js").AppPublishRequestReviewDecision;
                }): AppPRSetReviewDecisionRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.UUID";
                encode(message: UUID, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): UUID;
                fromJSON(object: any): UUID;
                toJSON(message: UUID): unknown;
                create(base?: {
                    id?: string;
                } | undefined): UUID;
                fromPartial(object: {
                    id?: string;
                }): UUID;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly removeReview: {
            readonly name: "RemoveReview";
            readonly requestType: {
                $type: "devvit.UUID";
                encode(message: UUID, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): UUID;
                fromJSON(object: any): UUID;
                toJSON(message: UUID): unknown;
                create(base?: {
                    id?: string;
                } | undefined): UUID;
                fromPartial(object: {
                    id?: string;
                }): UUID;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {} | undefined): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly addNote: {
            readonly name: "AddNote";
            readonly requestType: {
                $type: "devvit.dev_portal.app_publish_request.note.AppPRAddNoteRequest";
                encode(message: AppPRAddNoteRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): AppPRAddNoteRequest;
                fromJSON(object: any): AppPRAddNoteRequest;
                toJSON(message: AppPRAddNoteRequest): unknown;
                create(base?: {
                    appPublishRequestId?: string;
                    note?: string;
                } | undefined): AppPRAddNoteRequest;
                fromPartial(object: {
                    appPublishRequestId?: string;
                    note?: string;
                }): AppPRAddNoteRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.UUID";
                encode(message: UUID, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): UUID;
                fromJSON(object: any): UUID;
                toJSON(message: UUID): unknown;
                create(base?: {
                    id?: string;
                } | undefined): UUID;
                fromPartial(object: {
                    id?: string;
                }): UUID;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly updateNote: {
            readonly name: "UpdateNote";
            readonly requestType: {
                $type: "devvit.dev_portal.app_publish_request.note.AppPRUpdateNoteRequest";
                encode(message: AppPRUpdateNoteRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): AppPRUpdateNoteRequest;
                fromJSON(object: any): AppPRUpdateNoteRequest;
                toJSON(message: AppPRUpdateNoteRequest): unknown;
                create(base?: {
                    appPublishRequestNoteId?: string;
                    note?: string;
                } | undefined): AppPRUpdateNoteRequest;
                fromPartial(object: {
                    appPublishRequestNoteId?: string;
                    note?: string;
                }): AppPRUpdateNoteRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {} | undefined): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly removeNote: {
            readonly name: "RemoveNote";
            readonly requestType: {
                $type: "devvit.UUID";
                encode(message: UUID, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): UUID;
                fromJSON(object: any): UUID;
                toJSON(message: UUID): unknown;
                create(base?: {
                    id?: string;
                } | undefined): UUID;
                fromPartial(object: {
                    id?: string;
                }): UUID;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {} | undefined): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array, metadata?: Metadata): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=dev_portal.d.ts.map