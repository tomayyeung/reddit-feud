import { AppCreationRequest, AppSearchRequest, AppSearchResponse, GetAppBySlugRequest, FullAppInfo, GetAllWithOwnerRequest, GetPopularAppsRequest, CheckIfMediaExistsRequest, CheckIfMediaExistsResponse, UploadNewMediaRequest, UploadNewMediaResponse, AppUpdateRequest, UnpublishAppRequest, DisableAppRequest, EnableAppRequest, AppExistsRequest, AppExistsResponse, AppAccountExistsRequest, AppAccountExistsResponse, CreateAppAccountRequest, CreateAppAccountResponse, RecoverAppAccountRequest } from './app/app.js';
import { AppInfo, MultipleAppInfos } from './app/info/app_info.js';
import { UUID } from '../uuid.js';
import { GetAllWithInstallLocationRequest, GetAllWithInstallerRequest, InstallationCreationRequest, FullInstallationInfo, GetByAppNameAndInstallLocationRequest, MultipleInstallationsResponse, GetAllWithAppRequest, GetAllWithAppResponse, GetInstallationHistoryRequest, GetInstallationHistoryResponse, InstallationUpgradeRequest, InstallationUpgradeManyRequest, InstallationUpgradeManyResponse, InstallationUpdateRequest } from './installation/installation.js';
import { Empty } from '../../google/protobuf/empty.js';
import { AppVersionCreationRequest, FullAppVersionInfo, AppSlugAndVersion, AppVersionUpdateRequest, ValidInstallLocationsRequest, ValidInstallLocationsResponse, GetAppVersionBundleResponse } from './app_version/app_version.js';
import { AppVersionInfo } from './app_version/info/app_version_info.js';
import { GetNutritionByNameVersionRequest, MultipleNutritionCategories } from './nutrition/nutrition.js';
import { ProductList } from './payments/product.js';
import { CreateFeedbackRequest } from './feedback/feedback.js';
import { CreateDataTokenRequest, CreateDataTokenResponse, GetDataTokenByIdRequest, GetDataTokenByIdResponse, GetDataTokensByOrganizationNameRequest, GetDataTokensByOrganizationNameResponse, RevokeDataTokenByIdRequest, RevokeDataTokenByIdResponse } from './data_api/admin/auth/auth.js';
import { CreateDataSubscriptionRequest, CreateDataSubscriptionResponse, GetDataSubscriptionByIdRequest, GetDataSubscriptionByIdResponse, GetDataSubscriptionsByOrganizationNameRequest, GetDataSubscriptionsByOrganizationNameResponse, UpdateDataSubscriptionRequest, UpdateDataSubscriptionResponse, DeleteDataSubscriptionRequest, DeleteDataSubscriptionResponse } from './data_api/admin/subscription/subscription.js';
import { CreateOrganizationRequest, CreateOrganizationResponse, GetOrganizationByNameRequest, GetOrganizationByNameResponse, GetOrganizationsRequest, GetOrganizationsResponse } from './data_api/admin/organization/organization.js';
import { GetAuditLogEventsRequest, GetAuditLogEventsResponse } from './data_api/admin/audit/audit.js';
import { AddUsersToOrgRequest, AddUsersToOrgResponse, GetUsersByOrgIdRequest, GetUsersByOrgIdResponse, GetUserByIdRequest, GetUserByIdResponse, DeleteUserRequest, DeleteUserResponse } from './data_api/admin/user/user.js';
import { Value } from '../../google/protobuf/struct.js';
import { GetInstallationSettingsFormRequest, GetInstallationSettingsFormResponse, ValidateInstallationSettingsFormRequest, ValidateInstallationSettingsFormResponse, GetInstallationSettingsRequest, GetInstallationSettingsResponse, UpdateInstallationSettingsRequest, UpdateInstallationSettingsResponse } from './installation_settings/installation_settings.js';
import { GetAppSettingsFormRequest, GetAppSettingsFormResponse, ValidateAppSettingsFormRequest, ValidateAppSettingsFormResponse, GetAppSettingsRequest, GetAppSettingsResponse, UpdateAppSettingsRequest, UpdateAppSettingsResponse } from './app_settings/app_settings.js';
import { AppPRCreateRequest, AppPRUpdateRequest, AppPRGetRequest, FullPublishRequestInfo, AppPRFindManyRequest, MultiplePublishRequestInfos } from './app_publish_request/app_publish_request.js';
import { AppPRSetReviewDecisionRequest } from './app_publish_request/review/app_publish_request_review.js';
import { AppPRAddNoteRequest, AppPRUpdateNoteRequest } from './app_publish_request/note/app_publish_request_note.js';
interface Rpc {
    request(service: string, method: string, contentType: 'application/json' | 'application/protobuf', data: object | Uint8Array): Promise<object | Uint8Array>;
}
export interface AppClient {
    Create(request: AppCreationRequest): Promise<AppInfo>;
    Search(request: AppSearchRequest): Promise<AppSearchResponse>;
    GetBySlug(request: GetAppBySlugRequest): Promise<FullAppInfo>;
    GetByUUID(request: UUID): Promise<FullAppInfo>;
    GetAllWithLocation(request: GetAllWithInstallLocationRequest): Promise<MultipleAppInfos>;
    GetAllWithInstaller(request: GetAllWithInstallerRequest): Promise<MultipleAppInfos>;
    GetAllWithOwner(request: GetAllWithOwnerRequest): Promise<MultipleAppInfos>;
    GetPopularApps(request: GetPopularAppsRequest): Promise<MultipleAppInfos>;
    CheckIfMediaExists(request: CheckIfMediaExistsRequest): Promise<CheckIfMediaExistsResponse>;
    UploadNewMedia(request: UploadNewMediaRequest): Promise<UploadNewMediaResponse>;
    Update(request: AppUpdateRequest): Promise<FullAppInfo>;
    Unpublish(request: UnpublishAppRequest): Promise<Empty>;
    Disable(request: DisableAppRequest): Promise<Empty>;
    Enable(request: EnableAppRequest): Promise<Empty>;
    Exists(request: AppExistsRequest): Promise<AppExistsResponse>;
    AppAccountExists(request: AppAccountExistsRequest): Promise<AppAccountExistsResponse>;
    CreateAppAccount(request: CreateAppAccountRequest): Promise<CreateAppAccountResponse>;
    RecoverAppAccount(request: RecoverAppAccountRequest): Promise<AppInfo>;
}
export declare class AppClientJSON implements AppClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    Create(request: AppCreationRequest): Promise<AppInfo>;
    Search(request: AppSearchRequest): Promise<AppSearchResponse>;
    GetBySlug(request: GetAppBySlugRequest): Promise<FullAppInfo>;
    GetByUUID(request: UUID): Promise<FullAppInfo>;
    GetAllWithLocation(request: GetAllWithInstallLocationRequest): Promise<MultipleAppInfos>;
    GetAllWithInstaller(request: GetAllWithInstallerRequest): Promise<MultipleAppInfos>;
    GetAllWithOwner(request: GetAllWithOwnerRequest): Promise<MultipleAppInfos>;
    GetPopularApps(request: GetPopularAppsRequest): Promise<MultipleAppInfos>;
    CheckIfMediaExists(request: CheckIfMediaExistsRequest): Promise<CheckIfMediaExistsResponse>;
    UploadNewMedia(request: UploadNewMediaRequest): Promise<UploadNewMediaResponse>;
    Update(request: AppUpdateRequest): Promise<FullAppInfo>;
    Unpublish(request: UnpublishAppRequest): Promise<Empty>;
    Disable(request: DisableAppRequest): Promise<Empty>;
    Enable(request: EnableAppRequest): Promise<Empty>;
    Exists(request: AppExistsRequest): Promise<AppExistsResponse>;
    AppAccountExists(request: AppAccountExistsRequest): Promise<AppAccountExistsResponse>;
    CreateAppAccount(request: CreateAppAccountRequest): Promise<CreateAppAccountResponse>;
    RecoverAppAccount(request: RecoverAppAccountRequest): Promise<AppInfo>;
}
export declare class AppClientProtobuf implements AppClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    Create(request: AppCreationRequest): Promise<AppInfo>;
    Search(request: AppSearchRequest): Promise<AppSearchResponse>;
    GetBySlug(request: GetAppBySlugRequest): Promise<FullAppInfo>;
    GetByUUID(request: UUID): Promise<FullAppInfo>;
    GetAllWithLocation(request: GetAllWithInstallLocationRequest): Promise<MultipleAppInfos>;
    GetAllWithInstaller(request: GetAllWithInstallerRequest): Promise<MultipleAppInfos>;
    GetAllWithOwner(request: GetAllWithOwnerRequest): Promise<MultipleAppInfos>;
    GetPopularApps(request: GetPopularAppsRequest): Promise<MultipleAppInfos>;
    CheckIfMediaExists(request: CheckIfMediaExistsRequest): Promise<CheckIfMediaExistsResponse>;
    UploadNewMedia(request: UploadNewMediaRequest): Promise<UploadNewMediaResponse>;
    Update(request: AppUpdateRequest): Promise<FullAppInfo>;
    Unpublish(request: UnpublishAppRequest): Promise<Empty>;
    Disable(request: DisableAppRequest): Promise<Empty>;
    Enable(request: EnableAppRequest): Promise<Empty>;
    Exists(request: AppExistsRequest): Promise<AppExistsResponse>;
    AppAccountExists(request: AppAccountExistsRequest): Promise<AppAccountExistsResponse>;
    CreateAppAccount(request: CreateAppAccountRequest): Promise<CreateAppAccountResponse>;
    RecoverAppAccount(request: RecoverAppAccountRequest): Promise<AppInfo>;
}
interface Rpc {
    request(service: string, method: string, contentType: 'application/json' | 'application/protobuf', data: object | Uint8Array): Promise<object | Uint8Array>;
}
export interface AppVersionClient {
    Create(request: AppVersionCreationRequest): Promise<AppVersionInfo>;
    Get(request: UUID): Promise<FullAppVersionInfo>;
    GetBySlugAndVersionNumber(request: AppSlugAndVersion): Promise<FullAppVersionInfo>;
    Update(request: AppVersionUpdateRequest): Promise<FullAppVersionInfo>;
    GetValidInstallLocations(request: ValidInstallLocationsRequest): Promise<ValidInstallLocationsResponse>;
    GetAppVersionBundle(request: UUID): Promise<GetAppVersionBundleResponse>;
    GetNutritionByNameVersion(request: GetNutritionByNameVersionRequest): Promise<MultipleNutritionCategories>;
    GetNutritionByAppVersionId(request: UUID): Promise<MultipleNutritionCategories>;
    GetProductsByAppVersionId(request: UUID): Promise<ProductList>;
}
export declare class AppVersionClientJSON implements AppVersionClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    Create(request: AppVersionCreationRequest): Promise<AppVersionInfo>;
    Get(request: UUID): Promise<FullAppVersionInfo>;
    GetBySlugAndVersionNumber(request: AppSlugAndVersion): Promise<FullAppVersionInfo>;
    Update(request: AppVersionUpdateRequest): Promise<FullAppVersionInfo>;
    GetValidInstallLocations(request: ValidInstallLocationsRequest): Promise<ValidInstallLocationsResponse>;
    GetAppVersionBundle(request: UUID): Promise<GetAppVersionBundleResponse>;
    GetNutritionByNameVersion(request: GetNutritionByNameVersionRequest): Promise<MultipleNutritionCategories>;
    GetNutritionByAppVersionId(request: UUID): Promise<MultipleNutritionCategories>;
    GetProductsByAppVersionId(request: UUID): Promise<ProductList>;
}
export declare class AppVersionClientProtobuf implements AppVersionClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    Create(request: AppVersionCreationRequest): Promise<AppVersionInfo>;
    Get(request: UUID): Promise<FullAppVersionInfo>;
    GetBySlugAndVersionNumber(request: AppSlugAndVersion): Promise<FullAppVersionInfo>;
    Update(request: AppVersionUpdateRequest): Promise<FullAppVersionInfo>;
    GetValidInstallLocations(request: ValidInstallLocationsRequest): Promise<ValidInstallLocationsResponse>;
    GetAppVersionBundle(request: UUID): Promise<GetAppVersionBundleResponse>;
    GetNutritionByNameVersion(request: GetNutritionByNameVersionRequest): Promise<MultipleNutritionCategories>;
    GetNutritionByAppVersionId(request: UUID): Promise<MultipleNutritionCategories>;
    GetProductsByAppVersionId(request: UUID): Promise<ProductList>;
}
interface Rpc {
    request(service: string, method: string, contentType: 'application/json' | 'application/protobuf', data: object | Uint8Array): Promise<object | Uint8Array>;
}
export interface InstallationsClient {
    Create(request: InstallationCreationRequest): Promise<FullInstallationInfo>;
    GetByUUID(request: UUID): Promise<FullInstallationInfo>;
    GetByAppNameAndInstallLocation(request: GetByAppNameAndInstallLocationRequest): Promise<FullInstallationInfo>;
    GetAllWithInstallLocation(request: GetAllWithInstallLocationRequest): Promise<MultipleInstallationsResponse>;
    GetAllWithInstaller(request: GetAllWithInstallerRequest): Promise<MultipleInstallationsResponse>;
    GetAllWithVersionUUID(request: UUID): Promise<MultipleInstallationsResponse>;
    GetAllWithApp(request: GetAllWithAppRequest): Promise<GetAllWithAppResponse>;
    GetInstallationHistory(request: GetInstallationHistoryRequest): Promise<GetInstallationHistoryResponse>;
    Upgrade(request: InstallationUpgradeRequest): Promise<FullInstallationInfo>;
    UpgradeMany(request: InstallationUpgradeManyRequest): Promise<InstallationUpgradeManyResponse>;
    Update(request: InstallationUpdateRequest): Promise<FullInstallationInfo>;
    Remove(request: UUID): Promise<Empty>;
}
export declare class InstallationsClientJSON implements InstallationsClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    Create(request: InstallationCreationRequest): Promise<FullInstallationInfo>;
    GetByUUID(request: UUID): Promise<FullInstallationInfo>;
    GetByAppNameAndInstallLocation(request: GetByAppNameAndInstallLocationRequest): Promise<FullInstallationInfo>;
    GetAllWithInstallLocation(request: GetAllWithInstallLocationRequest): Promise<MultipleInstallationsResponse>;
    GetAllWithInstaller(request: GetAllWithInstallerRequest): Promise<MultipleInstallationsResponse>;
    GetAllWithVersionUUID(request: UUID): Promise<MultipleInstallationsResponse>;
    GetAllWithApp(request: GetAllWithAppRequest): Promise<GetAllWithAppResponse>;
    GetInstallationHistory(request: GetInstallationHistoryRequest): Promise<GetInstallationHistoryResponse>;
    Upgrade(request: InstallationUpgradeRequest): Promise<FullInstallationInfo>;
    UpgradeMany(request: InstallationUpgradeManyRequest): Promise<InstallationUpgradeManyResponse>;
    Update(request: InstallationUpdateRequest): Promise<FullInstallationInfo>;
    Remove(request: UUID): Promise<Empty>;
}
export declare class InstallationsClientProtobuf implements InstallationsClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    Create(request: InstallationCreationRequest): Promise<FullInstallationInfo>;
    GetByUUID(request: UUID): Promise<FullInstallationInfo>;
    GetByAppNameAndInstallLocation(request: GetByAppNameAndInstallLocationRequest): Promise<FullInstallationInfo>;
    GetAllWithInstallLocation(request: GetAllWithInstallLocationRequest): Promise<MultipleInstallationsResponse>;
    GetAllWithInstaller(request: GetAllWithInstallerRequest): Promise<MultipleInstallationsResponse>;
    GetAllWithVersionUUID(request: UUID): Promise<MultipleInstallationsResponse>;
    GetAllWithApp(request: GetAllWithAppRequest): Promise<GetAllWithAppResponse>;
    GetInstallationHistory(request: GetInstallationHistoryRequest): Promise<GetInstallationHistoryResponse>;
    Upgrade(request: InstallationUpgradeRequest): Promise<FullInstallationInfo>;
    UpgradeMany(request: InstallationUpgradeManyRequest): Promise<InstallationUpgradeManyResponse>;
    Update(request: InstallationUpdateRequest): Promise<FullInstallationInfo>;
    Remove(request: UUID): Promise<Empty>;
}
interface Rpc {
    request(service: string, method: string, contentType: 'application/json' | 'application/protobuf', data: object | Uint8Array): Promise<object | Uint8Array>;
}
export interface FeedbackClient {
    Create(request: CreateFeedbackRequest): Promise<Empty>;
}
export declare class FeedbackClientJSON implements FeedbackClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    Create(request: CreateFeedbackRequest): Promise<Empty>;
}
export declare class FeedbackClientProtobuf implements FeedbackClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    Create(request: CreateFeedbackRequest): Promise<Empty>;
}
interface Rpc {
    request(service: string, method: string, contentType: 'application/json' | 'application/protobuf', data: object | Uint8Array): Promise<object | Uint8Array>;
}
export interface DataApiAdminClient {
    CreateDataToken(request: CreateDataTokenRequest): Promise<CreateDataTokenResponse>;
    GetDataTokenById(request: GetDataTokenByIdRequest): Promise<GetDataTokenByIdResponse>;
    GetDataTokensByOrganizationName(request: GetDataTokensByOrganizationNameRequest): Promise<GetDataTokensByOrganizationNameResponse>;
    RevokeDataTokenById(request: RevokeDataTokenByIdRequest): Promise<RevokeDataTokenByIdResponse>;
    CreateDataSubscription(request: CreateDataSubscriptionRequest): Promise<CreateDataSubscriptionResponse>;
    GetDataSubscriptionById(request: GetDataSubscriptionByIdRequest): Promise<GetDataSubscriptionByIdResponse>;
    GetDataSubscriptionsByOrganizationName(request: GetDataSubscriptionsByOrganizationNameRequest): Promise<GetDataSubscriptionsByOrganizationNameResponse>;
    UpdateDataSubscription(request: UpdateDataSubscriptionRequest): Promise<UpdateDataSubscriptionResponse>;
    DeleteDataSubscription(request: DeleteDataSubscriptionRequest): Promise<DeleteDataSubscriptionResponse>;
    CreateOrganization(request: CreateOrganizationRequest): Promise<CreateOrganizationResponse>;
    GetOrganizationByName(request: GetOrganizationByNameRequest): Promise<GetOrganizationByNameResponse>;
    GetOrganizations(request: GetOrganizationsRequest): Promise<GetOrganizationsResponse>;
    GetAuditLogEvents(request: GetAuditLogEventsRequest): Promise<GetAuditLogEventsResponse>;
    AddUsersToOrg(request: AddUsersToOrgRequest): Promise<AddUsersToOrgResponse>;
    GetUsersByOrgId(request: GetUsersByOrgIdRequest): Promise<GetUsersByOrgIdResponse>;
    GetUserById(request: GetUserByIdRequest): Promise<GetUserByIdResponse>;
    DeleteUser(request: DeleteUserRequest): Promise<DeleteUserResponse>;
}
export declare class DataApiAdminClientJSON implements DataApiAdminClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    CreateDataToken(request: CreateDataTokenRequest): Promise<CreateDataTokenResponse>;
    GetDataTokenById(request: GetDataTokenByIdRequest): Promise<GetDataTokenByIdResponse>;
    GetDataTokensByOrganizationName(request: GetDataTokensByOrganizationNameRequest): Promise<GetDataTokensByOrganizationNameResponse>;
    RevokeDataTokenById(request: RevokeDataTokenByIdRequest): Promise<RevokeDataTokenByIdResponse>;
    CreateDataSubscription(request: CreateDataSubscriptionRequest): Promise<CreateDataSubscriptionResponse>;
    GetDataSubscriptionById(request: GetDataSubscriptionByIdRequest): Promise<GetDataSubscriptionByIdResponse>;
    GetDataSubscriptionsByOrganizationName(request: GetDataSubscriptionsByOrganizationNameRequest): Promise<GetDataSubscriptionsByOrganizationNameResponse>;
    UpdateDataSubscription(request: UpdateDataSubscriptionRequest): Promise<UpdateDataSubscriptionResponse>;
    DeleteDataSubscription(request: DeleteDataSubscriptionRequest): Promise<DeleteDataSubscriptionResponse>;
    CreateOrganization(request: CreateOrganizationRequest): Promise<CreateOrganizationResponse>;
    GetOrganizationByName(request: GetOrganizationByNameRequest): Promise<GetOrganizationByNameResponse>;
    GetOrganizations(request: GetOrganizationsRequest): Promise<GetOrganizationsResponse>;
    GetAuditLogEvents(request: GetAuditLogEventsRequest): Promise<GetAuditLogEventsResponse>;
    AddUsersToOrg(request: AddUsersToOrgRequest): Promise<AddUsersToOrgResponse>;
    GetUsersByOrgId(request: GetUsersByOrgIdRequest): Promise<GetUsersByOrgIdResponse>;
    GetUserById(request: GetUserByIdRequest): Promise<GetUserByIdResponse>;
    DeleteUser(request: DeleteUserRequest): Promise<DeleteUserResponse>;
}
export declare class DataApiAdminClientProtobuf implements DataApiAdminClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    CreateDataToken(request: CreateDataTokenRequest): Promise<CreateDataTokenResponse>;
    GetDataTokenById(request: GetDataTokenByIdRequest): Promise<GetDataTokenByIdResponse>;
    GetDataTokensByOrganizationName(request: GetDataTokensByOrganizationNameRequest): Promise<GetDataTokensByOrganizationNameResponse>;
    RevokeDataTokenById(request: RevokeDataTokenByIdRequest): Promise<RevokeDataTokenByIdResponse>;
    CreateDataSubscription(request: CreateDataSubscriptionRequest): Promise<CreateDataSubscriptionResponse>;
    GetDataSubscriptionById(request: GetDataSubscriptionByIdRequest): Promise<GetDataSubscriptionByIdResponse>;
    GetDataSubscriptionsByOrganizationName(request: GetDataSubscriptionsByOrganizationNameRequest): Promise<GetDataSubscriptionsByOrganizationNameResponse>;
    UpdateDataSubscription(request: UpdateDataSubscriptionRequest): Promise<UpdateDataSubscriptionResponse>;
    DeleteDataSubscription(request: DeleteDataSubscriptionRequest): Promise<DeleteDataSubscriptionResponse>;
    CreateOrganization(request: CreateOrganizationRequest): Promise<CreateOrganizationResponse>;
    GetOrganizationByName(request: GetOrganizationByNameRequest): Promise<GetOrganizationByNameResponse>;
    GetOrganizations(request: GetOrganizationsRequest): Promise<GetOrganizationsResponse>;
    GetAuditLogEvents(request: GetAuditLogEventsRequest): Promise<GetAuditLogEventsResponse>;
    AddUsersToOrg(request: AddUsersToOrgRequest): Promise<AddUsersToOrgResponse>;
    GetUsersByOrgId(request: GetUsersByOrgIdRequest): Promise<GetUsersByOrgIdResponse>;
    GetUserById(request: GetUserByIdRequest): Promise<GetUserByIdResponse>;
    DeleteUser(request: DeleteUserRequest): Promise<DeleteUserResponse>;
}
interface Rpc {
    request(service: string, method: string, contentType: 'application/json' | 'application/protobuf', data: object | Uint8Array): Promise<object | Uint8Array>;
}
export interface EventsClient {
    SendEvent(request: Value): Promise<Empty>;
}
export declare class EventsClientJSON implements EventsClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    SendEvent(request: Value): Promise<Empty>;
}
export declare class EventsClientProtobuf implements EventsClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    SendEvent(request: Value): Promise<Empty>;
}
interface Rpc {
    request(service: string, method: string, contentType: 'application/json' | 'application/protobuf', data: object | Uint8Array): Promise<object | Uint8Array>;
}
export interface DevPortalInstallationSettingsClient {
    GetForm(request: GetInstallationSettingsFormRequest): Promise<GetInstallationSettingsFormResponse>;
    ValidateForm(request: ValidateInstallationSettingsFormRequest): Promise<ValidateInstallationSettingsFormResponse>;
    GetSettings(request: GetInstallationSettingsRequest): Promise<GetInstallationSettingsResponse>;
    UpdateSettings(request: UpdateInstallationSettingsRequest): Promise<UpdateInstallationSettingsResponse>;
}
export declare class DevPortalInstallationSettingsClientJSON implements DevPortalInstallationSettingsClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    GetForm(request: GetInstallationSettingsFormRequest): Promise<GetInstallationSettingsFormResponse>;
    ValidateForm(request: ValidateInstallationSettingsFormRequest): Promise<ValidateInstallationSettingsFormResponse>;
    GetSettings(request: GetInstallationSettingsRequest): Promise<GetInstallationSettingsResponse>;
    UpdateSettings(request: UpdateInstallationSettingsRequest): Promise<UpdateInstallationSettingsResponse>;
}
export declare class DevPortalInstallationSettingsClientProtobuf implements DevPortalInstallationSettingsClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    GetForm(request: GetInstallationSettingsFormRequest): Promise<GetInstallationSettingsFormResponse>;
    ValidateForm(request: ValidateInstallationSettingsFormRequest): Promise<ValidateInstallationSettingsFormResponse>;
    GetSettings(request: GetInstallationSettingsRequest): Promise<GetInstallationSettingsResponse>;
    UpdateSettings(request: UpdateInstallationSettingsRequest): Promise<UpdateInstallationSettingsResponse>;
}
interface Rpc {
    request(service: string, method: string, contentType: 'application/json' | 'application/protobuf', data: object | Uint8Array): Promise<object | Uint8Array>;
}
export interface DevPortalAppSettingsClient {
    GetForm(request: GetAppSettingsFormRequest): Promise<GetAppSettingsFormResponse>;
    ValidateForm(request: ValidateAppSettingsFormRequest): Promise<ValidateAppSettingsFormResponse>;
    GetSettings(request: GetAppSettingsRequest): Promise<GetAppSettingsResponse>;
    UpdateSettings(request: UpdateAppSettingsRequest): Promise<UpdateAppSettingsResponse>;
}
export declare class DevPortalAppSettingsClientJSON implements DevPortalAppSettingsClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    GetForm(request: GetAppSettingsFormRequest): Promise<GetAppSettingsFormResponse>;
    ValidateForm(request: ValidateAppSettingsFormRequest): Promise<ValidateAppSettingsFormResponse>;
    GetSettings(request: GetAppSettingsRequest): Promise<GetAppSettingsResponse>;
    UpdateSettings(request: UpdateAppSettingsRequest): Promise<UpdateAppSettingsResponse>;
}
export declare class DevPortalAppSettingsClientProtobuf implements DevPortalAppSettingsClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    GetForm(request: GetAppSettingsFormRequest): Promise<GetAppSettingsFormResponse>;
    ValidateForm(request: ValidateAppSettingsFormRequest): Promise<ValidateAppSettingsFormResponse>;
    GetSettings(request: GetAppSettingsRequest): Promise<GetAppSettingsResponse>;
    UpdateSettings(request: UpdateAppSettingsRequest): Promise<UpdateAppSettingsResponse>;
}
interface Rpc {
    request(service: string, method: string, contentType: 'application/json' | 'application/protobuf', data: object | Uint8Array): Promise<object | Uint8Array>;
}
export interface DevPortalAppPublishRequestClient {
    Submit(request: AppPRCreateRequest): Promise<UUID>;
    Update(request: AppPRUpdateRequest): Promise<Empty>;
    Get(request: AppPRGetRequest): Promise<FullPublishRequestInfo>;
    FindMany(request: AppPRFindManyRequest): Promise<MultiplePublishRequestInfos>;
    SetReviewDecision(request: AppPRSetReviewDecisionRequest): Promise<UUID>;
    RemoveReview(request: UUID): Promise<Empty>;
    AddNote(request: AppPRAddNoteRequest): Promise<UUID>;
    UpdateNote(request: AppPRUpdateNoteRequest): Promise<Empty>;
    RemoveNote(request: UUID): Promise<Empty>;
}
export declare class DevPortalAppPublishRequestClientJSON implements DevPortalAppPublishRequestClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    Submit(request: AppPRCreateRequest): Promise<UUID>;
    Update(request: AppPRUpdateRequest): Promise<Empty>;
    Get(request: AppPRGetRequest): Promise<FullPublishRequestInfo>;
    FindMany(request: AppPRFindManyRequest): Promise<MultiplePublishRequestInfos>;
    SetReviewDecision(request: AppPRSetReviewDecisionRequest): Promise<UUID>;
    RemoveReview(request: UUID): Promise<Empty>;
    AddNote(request: AppPRAddNoteRequest): Promise<UUID>;
    UpdateNote(request: AppPRUpdateNoteRequest): Promise<Empty>;
    RemoveNote(request: UUID): Promise<Empty>;
}
export declare class DevPortalAppPublishRequestClientProtobuf implements DevPortalAppPublishRequestClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    Submit(request: AppPRCreateRequest): Promise<UUID>;
    Update(request: AppPRUpdateRequest): Promise<Empty>;
    Get(request: AppPRGetRequest): Promise<FullPublishRequestInfo>;
    FindMany(request: AppPRFindManyRequest): Promise<MultiplePublishRequestInfos>;
    SetReviewDecision(request: AppPRSetReviewDecisionRequest): Promise<UUID>;
    RemoveReview(request: UUID): Promise<Empty>;
    AddNote(request: AppPRAddNoteRequest): Promise<UUID>;
    UpdateNote(request: AppPRUpdateNoteRequest): Promise<Empty>;
    RemoveNote(request: UUID): Promise<Empty>;
}
export {};
//# sourceMappingURL=dev_portal.twirp-client.d.ts.map