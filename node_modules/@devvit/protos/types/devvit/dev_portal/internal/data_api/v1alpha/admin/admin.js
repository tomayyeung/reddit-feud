/**
 * #admin.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { CreateDataTokenResponse, GetDataTokenByIdRequest, GetDataTokenByIdResponse, GetDataTokensByOrganizationNameRequest, GetDataTokensByOrganizationNameResponse, } from "../../../../data_api/admin/auth/auth.js";
import { GetOrganizationByNameRequest, GetOrganizationByNameResponse, } from "../../../../data_api/admin/organization/organization.js";
import { GetDataSubscriptionByIdRequest, GetDataSubscriptionByIdResponse, } from "../../../../data_api/admin/subscription/subscription.js";
import { CreateFirehoseMonitorDataTokenRequest, GetFirehoseMonitorSubscriptionByNameRequest, GetFirehoseMonitorSubscriptionByNameResponse, } from "./firehose_monitor.js";
export const InternalDataApiAdminServiceName = "devvit.dev_portal.internal.data_api.v1alpha.admin.InternalDataApiAdmin";
export class InternalDataApiAdminClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || InternalDataApiAdminServiceName;
        this.rpc = rpc;
        this.GetDataTokenById = this.GetDataTokenById.bind(this);
        this.GetDataTokensByOrganizationName = this.GetDataTokensByOrganizationName.bind(this);
        this.GetDataSubscriptionById = this.GetDataSubscriptionById.bind(this);
        this.CreateFirehoseMonitorDataToken = this.CreateFirehoseMonitorDataToken.bind(this);
        this.GetFirehoseMonitorSubscriptionByName = this.GetFirehoseMonitorSubscriptionByName.bind(this);
        this.GetOrganizationByName = this.GetOrganizationByName.bind(this);
    }
    GetDataTokenById(request, metadata) {
        const data = GetDataTokenByIdRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetDataTokenById", data, metadata);
        return promise.then((data) => GetDataTokenByIdResponse.decode(_m0.Reader.create(data)));
    }
    GetDataTokensByOrganizationName(request, metadata) {
        const data = GetDataTokensByOrganizationNameRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetDataTokensByOrganizationName", data, metadata);
        return promise.then((data) => GetDataTokensByOrganizationNameResponse.decode(_m0.Reader.create(data)));
    }
    GetDataSubscriptionById(request, metadata) {
        const data = GetDataSubscriptionByIdRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetDataSubscriptionById", data, metadata);
        return promise.then((data) => GetDataSubscriptionByIdResponse.decode(_m0.Reader.create(data)));
    }
    CreateFirehoseMonitorDataToken(request, metadata) {
        const data = CreateFirehoseMonitorDataTokenRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "CreateFirehoseMonitorDataToken", data, metadata);
        return promise.then((data) => CreateDataTokenResponse.decode(_m0.Reader.create(data)));
    }
    GetFirehoseMonitorSubscriptionByName(request, metadata) {
        const data = GetFirehoseMonitorSubscriptionByNameRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetFirehoseMonitorSubscriptionByName", data, metadata);
        return promise.then((data) => GetFirehoseMonitorSubscriptionByNameResponse.decode(_m0.Reader.create(data)));
    }
    GetOrganizationByName(request, metadata) {
        const data = GetOrganizationByNameRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetOrganizationByName", data, metadata);
        return promise.then((data) => GetOrganizationByNameResponse.decode(_m0.Reader.create(data)));
    }
}
export const InternalDataApiAdminDefinition = {
    name: "InternalDataApiAdmin",
    fullName: "devvit.dev_portal.internal.data_api.v1alpha.admin.InternalDataApiAdmin",
    methods: {
        /** Data Token */
        getDataTokenById: {
            name: "GetDataTokenById",
            requestType: GetDataTokenByIdRequest,
            requestStream: false,
            responseType: GetDataTokenByIdResponse,
            responseStream: false,
            options: {},
        },
        getDataTokensByOrganizationName: {
            name: "GetDataTokensByOrganizationName",
            requestType: GetDataTokensByOrganizationNameRequest,
            requestStream: false,
            responseType: GetDataTokensByOrganizationNameResponse,
            responseStream: false,
            options: {},
        },
        /** Subscriptions */
        getDataSubscriptionById: {
            name: "GetDataSubscriptionById",
            requestType: GetDataSubscriptionByIdRequest,
            requestStream: false,
            responseType: GetDataSubscriptionByIdResponse,
            responseStream: false,
            options: {},
        },
        /** Firehose monitor utils */
        createFirehoseMonitorDataToken: {
            name: "CreateFirehoseMonitorDataToken",
            requestType: CreateFirehoseMonitorDataTokenRequest,
            requestStream: false,
            responseType: CreateDataTokenResponse,
            responseStream: false,
            options: {},
        },
        getFirehoseMonitorSubscriptionByName: {
            name: "GetFirehoseMonitorSubscriptionByName",
            requestType: GetFirehoseMonitorSubscriptionByNameRequest,
            requestStream: false,
            responseType: GetFirehoseMonitorSubscriptionByNameResponse,
            responseStream: false,
            options: {},
        },
        getOrganizationByName: {
            name: "GetOrganizationByName",
            requestType: GetOrganizationByNameRequest,
            requestStream: false,
            responseType: GetOrganizationByNameResponse,
            responseStream: false,
            options: {},
        },
    },
};
