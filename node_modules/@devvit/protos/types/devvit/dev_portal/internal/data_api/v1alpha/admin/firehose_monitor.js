/**
 * #firehose_monitor.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { Duration } from "../../../../../../google/protobuf/duration.js";
import { messageTypeRegistry } from "../../../../../../typeRegistry.js";
function createBaseCreateFirehoseMonitorDataTokenRequest() {
    return { expiresIn: undefined };
}
export const CreateFirehoseMonitorDataTokenRequest = {
    $type: "devvit.dev_portal.internal.data_api.v1alpha.admin.CreateFirehoseMonitorDataTokenRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.expiresIn !== undefined) {
            Duration.encode(message.expiresIn, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateFirehoseMonitorDataTokenRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.expiresIn = Duration.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { expiresIn: isSet(object.expiresIn) ? Duration.fromJSON(object.expiresIn) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.expiresIn !== undefined) {
            obj.expiresIn = Duration.toJSON(message.expiresIn);
        }
        return obj;
    },
    create(base) {
        return CreateFirehoseMonitorDataTokenRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCreateFirehoseMonitorDataTokenRequest();
        message.expiresIn = (object.expiresIn !== undefined && object.expiresIn !== null)
            ? Duration.fromPartial(object.expiresIn)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set(CreateFirehoseMonitorDataTokenRequest.$type, CreateFirehoseMonitorDataTokenRequest);
function createBaseGetFirehoseMonitorSubscriptionByNameRequest() {
    return { name: "" };
}
export const GetFirehoseMonitorSubscriptionByNameRequest = {
    $type: "devvit.dev_portal.internal.data_api.v1alpha.admin.GetFirehoseMonitorSubscriptionByNameRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetFirehoseMonitorSubscriptionByNameRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        return obj;
    },
    create(base) {
        return GetFirehoseMonitorSubscriptionByNameRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetFirehoseMonitorSubscriptionByNameRequest();
        message.name = object.name ?? "";
        return message;
    },
};
messageTypeRegistry.set(GetFirehoseMonitorSubscriptionByNameRequest.$type, GetFirehoseMonitorSubscriptionByNameRequest);
function createBaseGetFirehoseMonitorSubscriptionByNameResponse() {
    return { id: "" };
}
export const GetFirehoseMonitorSubscriptionByNameResponse = {
    $type: "devvit.dev_portal.internal.data_api.v1alpha.admin.GetFirehoseMonitorSubscriptionByNameResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetFirehoseMonitorSubscriptionByNameResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return GetFirehoseMonitorSubscriptionByNameResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetFirehoseMonitorSubscriptionByNameResponse();
        message.id = object.id ?? "";
        return message;
    },
};
messageTypeRegistry.set(GetFirehoseMonitorSubscriptionByNameResponse.$type, GetFirehoseMonitorSubscriptionByNameResponse);
function isSet(value) {
    return value !== null && value !== undefined;
}
