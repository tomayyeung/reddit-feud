/**
 * #product.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { messageTypeRegistry } from "../../../typeRegistry.js";
import { Product } from "../../payments/v1alpha/product.js";
function createBaseProductList() {
    return { products: [] };
}
export const ProductList = {
    $type: "devvit.dev_portal.payments.ProductList",
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.products) {
            Product.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseProductList();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.products.push(Product.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            products: globalThis.Array.isArray(object?.products) ? object.products.map((e) => Product.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.products?.length) {
            obj.products = message.products.map((e) => Product.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return ProductList.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseProductList();
        message.products = object.products?.map((e) => Product.fromPartial(e)) || [];
        return message;
    },
};
messageTypeRegistry.set(ProductList.$type, ProductList);
