/**
 * #events.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { CommentV2 } from "../../reddit/v2alpha/commentv2.js";
import { PostV2 } from "../../reddit/v2alpha/postv2.js";
import { SubredditV2 } from "../../reddit/v2alpha/subredditv2.js";
import { UserV2 } from "../../reddit/v2alpha/userv2.js";
export declare enum EventSource {
    UNKNOWN_EVENT_SOURCE = 0,
    USER = 1,
    ADMIN = 2,
    MODERATOR = 3,
    UNRECOGNIZED = -1
}
export declare function eventSourceFromJSON(object: any): EventSource;
export declare function eventSourceToJSON(object: EventSource): number;
export declare enum DeletionReason {
    UNSPECIFIED_DELETION_REASON = 0,
    SPAM = 1,
    LEGAL = 2,
    OTHER = 3,
    UNKNOWN = 4,
    EXPLICIT_CONTENT = 5,
    UNRECOGNIZED = -1
}
export declare function deletionReasonFromJSON(object: any): DeletionReason;
export declare function deletionReasonToJSON(object: DeletionReason): number;
export interface PostSubmit {
    post?: PostV2 | undefined;
    author?: UserV2 | undefined;
    subreddit?: SubredditV2 | undefined;
}
export interface PostCreate {
    post?: PostV2 | undefined;
    author?: UserV2 | undefined;
    subreddit?: SubredditV2 | undefined;
}
export interface PostUpdate {
    post?: PostV2 | undefined;
    author?: UserV2 | undefined;
    previousBody: string;
    subreddit?: SubredditV2 | undefined;
}
export interface PostReport {
    post?: PostV2 | undefined;
    subreddit?: SubredditV2 | undefined;
    reason: string;
}
export interface PostFlairUpdate {
    post?: PostV2 | undefined;
    author?: UserV2 | undefined;
    subreddit?: SubredditV2 | undefined;
}
export interface PostDelete {
    postId: string;
    deletedAt?: Date | undefined;
    author?: UserV2 | undefined;
    createdAt?: Date | undefined;
    source: EventSource;
    reason: DeletionReason;
    subreddit?: SubredditV2 | undefined;
}
export interface PostApprove {
    post?: PostV2 | undefined;
    approvedAt?: Date | undefined;
    author?: UserV2 | undefined;
    source: EventSource;
    subreddit?: SubredditV2 | undefined;
}
export interface CommentApprove {
    comment?: CommentV2 | undefined;
    post?: PostV2 | undefined;
    approvedAt?: Date | undefined;
    author?: UserV2 | undefined;
    source: EventSource;
    subreddit?: SubredditV2 | undefined;
}
export interface CommentSubmit {
    comment?: CommentV2 | undefined;
    author?: UserV2 | undefined;
    post?: PostV2 | undefined;
    subreddit?: SubredditV2 | undefined;
}
export interface CommentCreate {
    comment?: CommentV2 | undefined;
    author?: UserV2 | undefined;
    post?: PostV2 | undefined;
    subreddit?: SubredditV2 | undefined;
}
export interface CommentUpdate {
    comment?: CommentV2 | undefined;
    author?: UserV2 | undefined;
    post?: PostV2 | undefined;
    previousBody: string;
    subreddit?: SubredditV2 | undefined;
}
export interface CommentReport {
    comment?: CommentV2 | undefined;
    subreddit?: SubredditV2 | undefined;
    reason: string;
}
export interface CommentDelete {
    commentId: string;
    postId: string;
    parentId: string;
    deletedAt?: Date | undefined;
    author?: UserV2 | undefined;
    createdAt?: Date | undefined;
    source: EventSource;
    reason: DeletionReason;
    subreddit?: SubredditV2 | undefined;
}
export interface SubredditSubscribe {
    subreddit?: SubredditV2 | undefined;
    subscriber?: UserV2 | undefined;
}
export interface AppInstall {
    subreddit?: SubredditV2 | undefined;
    installer?: UserV2 | undefined;
}
export interface AppUpgrade {
    subreddit?: SubredditV2 | undefined;
    installer?: UserV2 | undefined;
}
export interface AccountDelete {
    userId: string;
    deletedAt?: Date | undefined;
    user?: UserV2 | undefined;
}
export interface Vote {
    updatedAt?: Date | undefined;
    comment?: CommentV2 | undefined;
    post?: PostV2 | undefined;
    subreddit?: SubredditV2 | undefined;
    upvoteRatio: number;
    score: number;
}
export interface AutomoderatorFilterPost {
    post?: PostV2 | undefined;
    removedAt?: Date | undefined;
    reason: string;
    author: string;
    subreddit?: SubredditV2 | undefined;
}
export interface AutomoderatorFilterComment {
    comment?: CommentV2 | undefined;
    removedAt?: Date | undefined;
    reason: string;
    author: string;
    subreddit?: SubredditV2 | undefined;
}
export interface PostNsfwUpdate {
    post?: PostV2 | undefined;
    author?: UserV2 | undefined;
    isNsfw: boolean;
    subreddit?: SubredditV2 | undefined;
}
export interface PostSpoilerUpdate {
    post?: PostV2 | undefined;
    author?: UserV2 | undefined;
    isSpoiler: boolean;
    subreddit?: SubredditV2 | undefined;
}
export declare const PostSubmit: {
    $type: "devvit.events.v1alpha.PostSubmit";
    encode(message: PostSubmit, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PostSubmit;
    fromJSON(object: any): PostSubmit;
    toJSON(message: PostSubmit): unknown;
    create(base?: DeepPartial<PostSubmit>): PostSubmit;
    fromPartial(object: DeepPartial<PostSubmit>): PostSubmit;
};
export declare const PostCreate: {
    $type: "devvit.events.v1alpha.PostCreate";
    encode(message: PostCreate, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PostCreate;
    fromJSON(object: any): PostCreate;
    toJSON(message: PostCreate): unknown;
    create(base?: DeepPartial<PostCreate>): PostCreate;
    fromPartial(object: DeepPartial<PostCreate>): PostCreate;
};
export declare const PostUpdate: {
    $type: "devvit.events.v1alpha.PostUpdate";
    encode(message: PostUpdate, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PostUpdate;
    fromJSON(object: any): PostUpdate;
    toJSON(message: PostUpdate): unknown;
    create(base?: DeepPartial<PostUpdate>): PostUpdate;
    fromPartial(object: DeepPartial<PostUpdate>): PostUpdate;
};
export declare const PostReport: {
    $type: "devvit.events.v1alpha.PostReport";
    encode(message: PostReport, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PostReport;
    fromJSON(object: any): PostReport;
    toJSON(message: PostReport): unknown;
    create(base?: DeepPartial<PostReport>): PostReport;
    fromPartial(object: DeepPartial<PostReport>): PostReport;
};
export declare const PostFlairUpdate: {
    $type: "devvit.events.v1alpha.PostFlairUpdate";
    encode(message: PostFlairUpdate, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PostFlairUpdate;
    fromJSON(object: any): PostFlairUpdate;
    toJSON(message: PostFlairUpdate): unknown;
    create(base?: DeepPartial<PostFlairUpdate>): PostFlairUpdate;
    fromPartial(object: DeepPartial<PostFlairUpdate>): PostFlairUpdate;
};
export declare const PostDelete: {
    $type: "devvit.events.v1alpha.PostDelete";
    encode(message: PostDelete, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PostDelete;
    fromJSON(object: any): PostDelete;
    toJSON(message: PostDelete): unknown;
    create(base?: DeepPartial<PostDelete>): PostDelete;
    fromPartial(object: DeepPartial<PostDelete>): PostDelete;
};
export declare const PostApprove: {
    $type: "devvit.events.v1alpha.PostApprove";
    encode(message: PostApprove, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PostApprove;
    fromJSON(object: any): PostApprove;
    toJSON(message: PostApprove): unknown;
    create(base?: DeepPartial<PostApprove>): PostApprove;
    fromPartial(object: DeepPartial<PostApprove>): PostApprove;
};
export declare const CommentApprove: {
    $type: "devvit.events.v1alpha.CommentApprove";
    encode(message: CommentApprove, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CommentApprove;
    fromJSON(object: any): CommentApprove;
    toJSON(message: CommentApprove): unknown;
    create(base?: DeepPartial<CommentApprove>): CommentApprove;
    fromPartial(object: DeepPartial<CommentApprove>): CommentApprove;
};
export declare const CommentSubmit: {
    $type: "devvit.events.v1alpha.CommentSubmit";
    encode(message: CommentSubmit, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CommentSubmit;
    fromJSON(object: any): CommentSubmit;
    toJSON(message: CommentSubmit): unknown;
    create(base?: DeepPartial<CommentSubmit>): CommentSubmit;
    fromPartial(object: DeepPartial<CommentSubmit>): CommentSubmit;
};
export declare const CommentCreate: {
    $type: "devvit.events.v1alpha.CommentCreate";
    encode(message: CommentCreate, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CommentCreate;
    fromJSON(object: any): CommentCreate;
    toJSON(message: CommentCreate): unknown;
    create(base?: DeepPartial<CommentCreate>): CommentCreate;
    fromPartial(object: DeepPartial<CommentCreate>): CommentCreate;
};
export declare const CommentUpdate: {
    $type: "devvit.events.v1alpha.CommentUpdate";
    encode(message: CommentUpdate, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CommentUpdate;
    fromJSON(object: any): CommentUpdate;
    toJSON(message: CommentUpdate): unknown;
    create(base?: DeepPartial<CommentUpdate>): CommentUpdate;
    fromPartial(object: DeepPartial<CommentUpdate>): CommentUpdate;
};
export declare const CommentReport: {
    $type: "devvit.events.v1alpha.CommentReport";
    encode(message: CommentReport, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CommentReport;
    fromJSON(object: any): CommentReport;
    toJSON(message: CommentReport): unknown;
    create(base?: DeepPartial<CommentReport>): CommentReport;
    fromPartial(object: DeepPartial<CommentReport>): CommentReport;
};
export declare const CommentDelete: {
    $type: "devvit.events.v1alpha.CommentDelete";
    encode(message: CommentDelete, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CommentDelete;
    fromJSON(object: any): CommentDelete;
    toJSON(message: CommentDelete): unknown;
    create(base?: DeepPartial<CommentDelete>): CommentDelete;
    fromPartial(object: DeepPartial<CommentDelete>): CommentDelete;
};
export declare const SubredditSubscribe: {
    $type: "devvit.events.v1alpha.SubredditSubscribe";
    encode(message: SubredditSubscribe, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SubredditSubscribe;
    fromJSON(object: any): SubredditSubscribe;
    toJSON(message: SubredditSubscribe): unknown;
    create(base?: DeepPartial<SubredditSubscribe>): SubredditSubscribe;
    fromPartial(object: DeepPartial<SubredditSubscribe>): SubredditSubscribe;
};
export declare const AppInstall: {
    $type: "devvit.events.v1alpha.AppInstall";
    encode(message: AppInstall, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AppInstall;
    fromJSON(object: any): AppInstall;
    toJSON(message: AppInstall): unknown;
    create(base?: DeepPartial<AppInstall>): AppInstall;
    fromPartial(object: DeepPartial<AppInstall>): AppInstall;
};
export declare const AppUpgrade: {
    $type: "devvit.events.v1alpha.AppUpgrade";
    encode(message: AppUpgrade, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AppUpgrade;
    fromJSON(object: any): AppUpgrade;
    toJSON(message: AppUpgrade): unknown;
    create(base?: DeepPartial<AppUpgrade>): AppUpgrade;
    fromPartial(object: DeepPartial<AppUpgrade>): AppUpgrade;
};
export declare const AccountDelete: {
    $type: "devvit.events.v1alpha.AccountDelete";
    encode(message: AccountDelete, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AccountDelete;
    fromJSON(object: any): AccountDelete;
    toJSON(message: AccountDelete): unknown;
    create(base?: DeepPartial<AccountDelete>): AccountDelete;
    fromPartial(object: DeepPartial<AccountDelete>): AccountDelete;
};
export declare const Vote: {
    $type: "devvit.events.v1alpha.Vote";
    encode(message: Vote, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Vote;
    fromJSON(object: any): Vote;
    toJSON(message: Vote): unknown;
    create(base?: DeepPartial<Vote>): Vote;
    fromPartial(object: DeepPartial<Vote>): Vote;
};
export declare const AutomoderatorFilterPost: {
    $type: "devvit.events.v1alpha.AutomoderatorFilterPost";
    encode(message: AutomoderatorFilterPost, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AutomoderatorFilterPost;
    fromJSON(object: any): AutomoderatorFilterPost;
    toJSON(message: AutomoderatorFilterPost): unknown;
    create(base?: DeepPartial<AutomoderatorFilterPost>): AutomoderatorFilterPost;
    fromPartial(object: DeepPartial<AutomoderatorFilterPost>): AutomoderatorFilterPost;
};
export declare const AutomoderatorFilterComment: {
    $type: "devvit.events.v1alpha.AutomoderatorFilterComment";
    encode(message: AutomoderatorFilterComment, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AutomoderatorFilterComment;
    fromJSON(object: any): AutomoderatorFilterComment;
    toJSON(message: AutomoderatorFilterComment): unknown;
    create(base?: DeepPartial<AutomoderatorFilterComment>): AutomoderatorFilterComment;
    fromPartial(object: DeepPartial<AutomoderatorFilterComment>): AutomoderatorFilterComment;
};
export declare const PostNsfwUpdate: {
    $type: "devvit.events.v1alpha.PostNsfwUpdate";
    encode(message: PostNsfwUpdate, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PostNsfwUpdate;
    fromJSON(object: any): PostNsfwUpdate;
    toJSON(message: PostNsfwUpdate): unknown;
    create(base?: DeepPartial<PostNsfwUpdate>): PostNsfwUpdate;
    fromPartial(object: DeepPartial<PostNsfwUpdate>): PostNsfwUpdate;
};
export declare const PostSpoilerUpdate: {
    $type: "devvit.events.v1alpha.PostSpoilerUpdate";
    encode(message: PostSpoilerUpdate, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PostSpoilerUpdate;
    fromJSON(object: any): PostSpoilerUpdate;
    toJSON(message: PostSpoilerUpdate): unknown;
    create(base?: DeepPartial<PostSpoilerUpdate>): PostSpoilerUpdate;
    fromPartial(object: DeepPartial<PostSpoilerUpdate>): PostSpoilerUpdate;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=events.d.ts.map