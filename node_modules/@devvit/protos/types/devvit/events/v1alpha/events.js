/**
 * #events.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { Timestamp } from "../../../google/protobuf/timestamp.js";
import { messageTypeRegistry } from "../../../typeRegistry.js";
import { CommentV2 } from "../../reddit/v2alpha/commentv2.js";
import { PostV2 } from "../../reddit/v2alpha/postv2.js";
import { SubredditV2 } from "../../reddit/v2alpha/subredditv2.js";
import { UserV2 } from "../../reddit/v2alpha/userv2.js";
export var EventSource;
(function (EventSource) {
    EventSource[EventSource["UNKNOWN_EVENT_SOURCE"] = 0] = "UNKNOWN_EVENT_SOURCE";
    EventSource[EventSource["USER"] = 1] = "USER";
    EventSource[EventSource["ADMIN"] = 2] = "ADMIN";
    EventSource[EventSource["MODERATOR"] = 3] = "MODERATOR";
    EventSource[EventSource["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(EventSource || (EventSource = {}));
export function eventSourceFromJSON(object) {
    switch (object) {
        case 0:
        case "UNKNOWN_EVENT_SOURCE":
            return EventSource.UNKNOWN_EVENT_SOURCE;
        case 1:
        case "USER":
            return EventSource.USER;
        case 2:
        case "ADMIN":
            return EventSource.ADMIN;
        case 3:
        case "MODERATOR":
            return EventSource.MODERATOR;
        case -1:
        case "UNRECOGNIZED":
        default:
            return EventSource.UNRECOGNIZED;
    }
}
export function eventSourceToJSON(object) {
    switch (object) {
        case EventSource.UNKNOWN_EVENT_SOURCE:
            return 0;
        case EventSource.USER:
            return 1;
        case EventSource.ADMIN:
            return 2;
        case EventSource.MODERATOR:
            return 3;
        case EventSource.UNRECOGNIZED:
        default:
            return -1;
    }
}
export var DeletionReason;
(function (DeletionReason) {
    DeletionReason[DeletionReason["UNSPECIFIED_DELETION_REASON"] = 0] = "UNSPECIFIED_DELETION_REASON";
    DeletionReason[DeletionReason["SPAM"] = 1] = "SPAM";
    DeletionReason[DeletionReason["LEGAL"] = 2] = "LEGAL";
    DeletionReason[DeletionReason["OTHER"] = 3] = "OTHER";
    DeletionReason[DeletionReason["UNKNOWN"] = 4] = "UNKNOWN";
    DeletionReason[DeletionReason["EXPLICIT_CONTENT"] = 5] = "EXPLICIT_CONTENT";
    DeletionReason[DeletionReason["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(DeletionReason || (DeletionReason = {}));
export function deletionReasonFromJSON(object) {
    switch (object) {
        case 0:
        case "UNSPECIFIED_DELETION_REASON":
            return DeletionReason.UNSPECIFIED_DELETION_REASON;
        case 1:
        case "SPAM":
            return DeletionReason.SPAM;
        case 2:
        case "LEGAL":
            return DeletionReason.LEGAL;
        case 3:
        case "OTHER":
            return DeletionReason.OTHER;
        case 4:
        case "UNKNOWN":
            return DeletionReason.UNKNOWN;
        case 5:
        case "EXPLICIT_CONTENT":
            return DeletionReason.EXPLICIT_CONTENT;
        case -1:
        case "UNRECOGNIZED":
        default:
            return DeletionReason.UNRECOGNIZED;
    }
}
export function deletionReasonToJSON(object) {
    switch (object) {
        case DeletionReason.UNSPECIFIED_DELETION_REASON:
            return 0;
        case DeletionReason.SPAM:
            return 1;
        case DeletionReason.LEGAL:
            return 2;
        case DeletionReason.OTHER:
            return 3;
        case DeletionReason.UNKNOWN:
            return 4;
        case DeletionReason.EXPLICIT_CONTENT:
            return 5;
        case DeletionReason.UNRECOGNIZED:
        default:
            return -1;
    }
}
function createBasePostSubmit() {
    return { post: undefined, author: undefined, subreddit: undefined };
}
export const PostSubmit = {
    $type: "devvit.events.v1alpha.PostSubmit",
    encode(message, writer = _m0.Writer.create()) {
        if (message.post !== undefined) {
            PostV2.encode(message.post, writer.uint32(10).fork()).ldelim();
        }
        if (message.author !== undefined) {
            UserV2.encode(message.author, writer.uint32(18).fork()).ldelim();
        }
        if (message.subreddit !== undefined) {
            SubredditV2.encode(message.subreddit, writer.uint32(82).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePostSubmit();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.post = PostV2.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.author = UserV2.decode(reader, reader.uint32());
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.subreddit = SubredditV2.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            post: isSet(object.post) ? PostV2.fromJSON(object.post) : undefined,
            author: isSet(object.author) ? UserV2.fromJSON(object.author) : undefined,
            subreddit: isSet(object.subreddit) ? SubredditV2.fromJSON(object.subreddit) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.post !== undefined) {
            obj.post = PostV2.toJSON(message.post);
        }
        if (message.author !== undefined) {
            obj.author = UserV2.toJSON(message.author);
        }
        if (message.subreddit !== undefined) {
            obj.subreddit = SubredditV2.toJSON(message.subreddit);
        }
        return obj;
    },
    create(base) {
        return PostSubmit.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePostSubmit();
        message.post = (object.post !== undefined && object.post !== null) ? PostV2.fromPartial(object.post) : undefined;
        message.author = (object.author !== undefined && object.author !== null)
            ? UserV2.fromPartial(object.author)
            : undefined;
        message.subreddit = (object.subreddit !== undefined && object.subreddit !== null)
            ? SubredditV2.fromPartial(object.subreddit)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set(PostSubmit.$type, PostSubmit);
function createBasePostCreate() {
    return { post: undefined, author: undefined, subreddit: undefined };
}
export const PostCreate = {
    $type: "devvit.events.v1alpha.PostCreate",
    encode(message, writer = _m0.Writer.create()) {
        if (message.post !== undefined) {
            PostV2.encode(message.post, writer.uint32(10).fork()).ldelim();
        }
        if (message.author !== undefined) {
            UserV2.encode(message.author, writer.uint32(18).fork()).ldelim();
        }
        if (message.subreddit !== undefined) {
            SubredditV2.encode(message.subreddit, writer.uint32(82).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePostCreate();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.post = PostV2.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.author = UserV2.decode(reader, reader.uint32());
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.subreddit = SubredditV2.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            post: isSet(object.post) ? PostV2.fromJSON(object.post) : undefined,
            author: isSet(object.author) ? UserV2.fromJSON(object.author) : undefined,
            subreddit: isSet(object.subreddit) ? SubredditV2.fromJSON(object.subreddit) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.post !== undefined) {
            obj.post = PostV2.toJSON(message.post);
        }
        if (message.author !== undefined) {
            obj.author = UserV2.toJSON(message.author);
        }
        if (message.subreddit !== undefined) {
            obj.subreddit = SubredditV2.toJSON(message.subreddit);
        }
        return obj;
    },
    create(base) {
        return PostCreate.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePostCreate();
        message.post = (object.post !== undefined && object.post !== null) ? PostV2.fromPartial(object.post) : undefined;
        message.author = (object.author !== undefined && object.author !== null)
            ? UserV2.fromPartial(object.author)
            : undefined;
        message.subreddit = (object.subreddit !== undefined && object.subreddit !== null)
            ? SubredditV2.fromPartial(object.subreddit)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set(PostCreate.$type, PostCreate);
function createBasePostUpdate() {
    return { post: undefined, author: undefined, previousBody: "", subreddit: undefined };
}
export const PostUpdate = {
    $type: "devvit.events.v1alpha.PostUpdate",
    encode(message, writer = _m0.Writer.create()) {
        if (message.post !== undefined) {
            PostV2.encode(message.post, writer.uint32(10).fork()).ldelim();
        }
        if (message.author !== undefined) {
            UserV2.encode(message.author, writer.uint32(18).fork()).ldelim();
        }
        if (message.previousBody !== "") {
            writer.uint32(26).string(message.previousBody);
        }
        if (message.subreddit !== undefined) {
            SubredditV2.encode(message.subreddit, writer.uint32(82).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePostUpdate();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.post = PostV2.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.author = UserV2.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.previousBody = reader.string();
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.subreddit = SubredditV2.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            post: isSet(object.post) ? PostV2.fromJSON(object.post) : undefined,
            author: isSet(object.author) ? UserV2.fromJSON(object.author) : undefined,
            previousBody: isSet(object.previousBody) ? globalThis.String(object.previousBody) : "",
            subreddit: isSet(object.subreddit) ? SubredditV2.fromJSON(object.subreddit) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.post !== undefined) {
            obj.post = PostV2.toJSON(message.post);
        }
        if (message.author !== undefined) {
            obj.author = UserV2.toJSON(message.author);
        }
        if (message.previousBody !== "") {
            obj.previousBody = message.previousBody;
        }
        if (message.subreddit !== undefined) {
            obj.subreddit = SubredditV2.toJSON(message.subreddit);
        }
        return obj;
    },
    create(base) {
        return PostUpdate.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePostUpdate();
        message.post = (object.post !== undefined && object.post !== null) ? PostV2.fromPartial(object.post) : undefined;
        message.author = (object.author !== undefined && object.author !== null)
            ? UserV2.fromPartial(object.author)
            : undefined;
        message.previousBody = object.previousBody ?? "";
        message.subreddit = (object.subreddit !== undefined && object.subreddit !== null)
            ? SubredditV2.fromPartial(object.subreddit)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set(PostUpdate.$type, PostUpdate);
function createBasePostReport() {
    return { post: undefined, subreddit: undefined, reason: "" };
}
export const PostReport = {
    $type: "devvit.events.v1alpha.PostReport",
    encode(message, writer = _m0.Writer.create()) {
        if (message.post !== undefined) {
            PostV2.encode(message.post, writer.uint32(10).fork()).ldelim();
        }
        if (message.subreddit !== undefined) {
            SubredditV2.encode(message.subreddit, writer.uint32(82).fork()).ldelim();
        }
        if (message.reason !== "") {
            writer.uint32(26).string(message.reason);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePostReport();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.post = PostV2.decode(reader, reader.uint32());
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.subreddit = SubredditV2.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.reason = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            post: isSet(object.post) ? PostV2.fromJSON(object.post) : undefined,
            subreddit: isSet(object.subreddit) ? SubredditV2.fromJSON(object.subreddit) : undefined,
            reason: isSet(object.reason) ? globalThis.String(object.reason) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.post !== undefined) {
            obj.post = PostV2.toJSON(message.post);
        }
        if (message.subreddit !== undefined) {
            obj.subreddit = SubredditV2.toJSON(message.subreddit);
        }
        if (message.reason !== "") {
            obj.reason = message.reason;
        }
        return obj;
    },
    create(base) {
        return PostReport.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePostReport();
        message.post = (object.post !== undefined && object.post !== null) ? PostV2.fromPartial(object.post) : undefined;
        message.subreddit = (object.subreddit !== undefined && object.subreddit !== null)
            ? SubredditV2.fromPartial(object.subreddit)
            : undefined;
        message.reason = object.reason ?? "";
        return message;
    },
};
messageTypeRegistry.set(PostReport.$type, PostReport);
function createBasePostFlairUpdate() {
    return { post: undefined, author: undefined, subreddit: undefined };
}
export const PostFlairUpdate = {
    $type: "devvit.events.v1alpha.PostFlairUpdate",
    encode(message, writer = _m0.Writer.create()) {
        if (message.post !== undefined) {
            PostV2.encode(message.post, writer.uint32(10).fork()).ldelim();
        }
        if (message.author !== undefined) {
            UserV2.encode(message.author, writer.uint32(18).fork()).ldelim();
        }
        if (message.subreddit !== undefined) {
            SubredditV2.encode(message.subreddit, writer.uint32(82).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePostFlairUpdate();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.post = PostV2.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.author = UserV2.decode(reader, reader.uint32());
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.subreddit = SubredditV2.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            post: isSet(object.post) ? PostV2.fromJSON(object.post) : undefined,
            author: isSet(object.author) ? UserV2.fromJSON(object.author) : undefined,
            subreddit: isSet(object.subreddit) ? SubredditV2.fromJSON(object.subreddit) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.post !== undefined) {
            obj.post = PostV2.toJSON(message.post);
        }
        if (message.author !== undefined) {
            obj.author = UserV2.toJSON(message.author);
        }
        if (message.subreddit !== undefined) {
            obj.subreddit = SubredditV2.toJSON(message.subreddit);
        }
        return obj;
    },
    create(base) {
        return PostFlairUpdate.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePostFlairUpdate();
        message.post = (object.post !== undefined && object.post !== null) ? PostV2.fromPartial(object.post) : undefined;
        message.author = (object.author !== undefined && object.author !== null)
            ? UserV2.fromPartial(object.author)
            : undefined;
        message.subreddit = (object.subreddit !== undefined && object.subreddit !== null)
            ? SubredditV2.fromPartial(object.subreddit)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set(PostFlairUpdate.$type, PostFlairUpdate);
function createBasePostDelete() {
    return {
        postId: "",
        deletedAt: undefined,
        author: undefined,
        createdAt: undefined,
        source: 0,
        reason: 0,
        subreddit: undefined,
    };
}
export const PostDelete = {
    $type: "devvit.events.v1alpha.PostDelete",
    encode(message, writer = _m0.Writer.create()) {
        if (message.postId !== "") {
            writer.uint32(10).string(message.postId);
        }
        if (message.deletedAt !== undefined) {
            Timestamp.encode(toTimestamp(message.deletedAt), writer.uint32(18).fork()).ldelim();
        }
        if (message.author !== undefined) {
            UserV2.encode(message.author, writer.uint32(26).fork()).ldelim();
        }
        if (message.createdAt !== undefined) {
            Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(34).fork()).ldelim();
        }
        if (message.source !== 0) {
            writer.uint32(40).int32(message.source);
        }
        if (message.reason !== 0) {
            writer.uint32(48).int32(message.reason);
        }
        if (message.subreddit !== undefined) {
            SubredditV2.encode(message.subreddit, writer.uint32(82).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePostDelete();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.postId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.deletedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.author = UserV2.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.source = reader.int32();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.reason = reader.int32();
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.subreddit = SubredditV2.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            postId: isSet(object.postId) ? globalThis.String(object.postId) : "",
            deletedAt: isSet(object.deletedAt) ? fromJsonTimestamp(object.deletedAt) : undefined,
            author: isSet(object.author) ? UserV2.fromJSON(object.author) : undefined,
            createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
            source: isSet(object.source) ? eventSourceFromJSON(object.source) : 0,
            reason: isSet(object.reason) ? deletionReasonFromJSON(object.reason) : 0,
            subreddit: isSet(object.subreddit) ? SubredditV2.fromJSON(object.subreddit) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.postId !== "") {
            obj.postId = message.postId;
        }
        if (message.deletedAt !== undefined) {
            obj.deletedAt = message.deletedAt.toISOString();
        }
        if (message.author !== undefined) {
            obj.author = UserV2.toJSON(message.author);
        }
        if (message.createdAt !== undefined) {
            obj.createdAt = message.createdAt.toISOString();
        }
        if (message.source !== 0) {
            obj.source = eventSourceToJSON(message.source);
        }
        if (message.reason !== 0) {
            obj.reason = deletionReasonToJSON(message.reason);
        }
        if (message.subreddit !== undefined) {
            obj.subreddit = SubredditV2.toJSON(message.subreddit);
        }
        return obj;
    },
    create(base) {
        return PostDelete.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePostDelete();
        message.postId = object.postId ?? "";
        message.deletedAt = object.deletedAt ?? undefined;
        message.author = (object.author !== undefined && object.author !== null)
            ? UserV2.fromPartial(object.author)
            : undefined;
        message.createdAt = object.createdAt ?? undefined;
        message.source = object.source ?? 0;
        message.reason = object.reason ?? 0;
        message.subreddit = (object.subreddit !== undefined && object.subreddit !== null)
            ? SubredditV2.fromPartial(object.subreddit)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set(PostDelete.$type, PostDelete);
function createBasePostApprove() {
    return { post: undefined, approvedAt: undefined, author: undefined, source: 0, subreddit: undefined };
}
export const PostApprove = {
    $type: "devvit.events.v1alpha.PostApprove",
    encode(message, writer = _m0.Writer.create()) {
        if (message.post !== undefined) {
            PostV2.encode(message.post, writer.uint32(10).fork()).ldelim();
        }
        if (message.approvedAt !== undefined) {
            Timestamp.encode(toTimestamp(message.approvedAt), writer.uint32(18).fork()).ldelim();
        }
        if (message.author !== undefined) {
            UserV2.encode(message.author, writer.uint32(26).fork()).ldelim();
        }
        if (message.source !== 0) {
            writer.uint32(40).int32(message.source);
        }
        if (message.subreddit !== undefined) {
            SubredditV2.encode(message.subreddit, writer.uint32(82).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePostApprove();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.post = PostV2.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.approvedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.author = UserV2.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.source = reader.int32();
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.subreddit = SubredditV2.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            post: isSet(object.post) ? PostV2.fromJSON(object.post) : undefined,
            approvedAt: isSet(object.approvedAt) ? fromJsonTimestamp(object.approvedAt) : undefined,
            author: isSet(object.author) ? UserV2.fromJSON(object.author) : undefined,
            source: isSet(object.source) ? eventSourceFromJSON(object.source) : 0,
            subreddit: isSet(object.subreddit) ? SubredditV2.fromJSON(object.subreddit) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.post !== undefined) {
            obj.post = PostV2.toJSON(message.post);
        }
        if (message.approvedAt !== undefined) {
            obj.approvedAt = message.approvedAt.toISOString();
        }
        if (message.author !== undefined) {
            obj.author = UserV2.toJSON(message.author);
        }
        if (message.source !== 0) {
            obj.source = eventSourceToJSON(message.source);
        }
        if (message.subreddit !== undefined) {
            obj.subreddit = SubredditV2.toJSON(message.subreddit);
        }
        return obj;
    },
    create(base) {
        return PostApprove.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePostApprove();
        message.post = (object.post !== undefined && object.post !== null) ? PostV2.fromPartial(object.post) : undefined;
        message.approvedAt = object.approvedAt ?? undefined;
        message.author = (object.author !== undefined && object.author !== null)
            ? UserV2.fromPartial(object.author)
            : undefined;
        message.source = object.source ?? 0;
        message.subreddit = (object.subreddit !== undefined && object.subreddit !== null)
            ? SubredditV2.fromPartial(object.subreddit)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set(PostApprove.$type, PostApprove);
function createBaseCommentApprove() {
    return {
        comment: undefined,
        post: undefined,
        approvedAt: undefined,
        author: undefined,
        source: 0,
        subreddit: undefined,
    };
}
export const CommentApprove = {
    $type: "devvit.events.v1alpha.CommentApprove",
    encode(message, writer = _m0.Writer.create()) {
        if (message.comment !== undefined) {
            CommentV2.encode(message.comment, writer.uint32(10).fork()).ldelim();
        }
        if (message.post !== undefined) {
            PostV2.encode(message.post, writer.uint32(18).fork()).ldelim();
        }
        if (message.approvedAt !== undefined) {
            Timestamp.encode(toTimestamp(message.approvedAt), writer.uint32(26).fork()).ldelim();
        }
        if (message.author !== undefined) {
            UserV2.encode(message.author, writer.uint32(34).fork()).ldelim();
        }
        if (message.source !== 0) {
            writer.uint32(48).int32(message.source);
        }
        if (message.subreddit !== undefined) {
            SubredditV2.encode(message.subreddit, writer.uint32(82).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCommentApprove();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.comment = CommentV2.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.post = PostV2.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.approvedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.author = UserV2.decode(reader, reader.uint32());
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.source = reader.int32();
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.subreddit = SubredditV2.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            comment: isSet(object.comment) ? CommentV2.fromJSON(object.comment) : undefined,
            post: isSet(object.post) ? PostV2.fromJSON(object.post) : undefined,
            approvedAt: isSet(object.approvedAt) ? fromJsonTimestamp(object.approvedAt) : undefined,
            author: isSet(object.author) ? UserV2.fromJSON(object.author) : undefined,
            source: isSet(object.source) ? eventSourceFromJSON(object.source) : 0,
            subreddit: isSet(object.subreddit) ? SubredditV2.fromJSON(object.subreddit) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.comment !== undefined) {
            obj.comment = CommentV2.toJSON(message.comment);
        }
        if (message.post !== undefined) {
            obj.post = PostV2.toJSON(message.post);
        }
        if (message.approvedAt !== undefined) {
            obj.approvedAt = message.approvedAt.toISOString();
        }
        if (message.author !== undefined) {
            obj.author = UserV2.toJSON(message.author);
        }
        if (message.source !== 0) {
            obj.source = eventSourceToJSON(message.source);
        }
        if (message.subreddit !== undefined) {
            obj.subreddit = SubredditV2.toJSON(message.subreddit);
        }
        return obj;
    },
    create(base) {
        return CommentApprove.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCommentApprove();
        message.comment = (object.comment !== undefined && object.comment !== null)
            ? CommentV2.fromPartial(object.comment)
            : undefined;
        message.post = (object.post !== undefined && object.post !== null) ? PostV2.fromPartial(object.post) : undefined;
        message.approvedAt = object.approvedAt ?? undefined;
        message.author = (object.author !== undefined && object.author !== null)
            ? UserV2.fromPartial(object.author)
            : undefined;
        message.source = object.source ?? 0;
        message.subreddit = (object.subreddit !== undefined && object.subreddit !== null)
            ? SubredditV2.fromPartial(object.subreddit)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set(CommentApprove.$type, CommentApprove);
function createBaseCommentSubmit() {
    return { comment: undefined, author: undefined, post: undefined, subreddit: undefined };
}
export const CommentSubmit = {
    $type: "devvit.events.v1alpha.CommentSubmit",
    encode(message, writer = _m0.Writer.create()) {
        if (message.comment !== undefined) {
            CommentV2.encode(message.comment, writer.uint32(10).fork()).ldelim();
        }
        if (message.author !== undefined) {
            UserV2.encode(message.author, writer.uint32(18).fork()).ldelim();
        }
        if (message.post !== undefined) {
            PostV2.encode(message.post, writer.uint32(26).fork()).ldelim();
        }
        if (message.subreddit !== undefined) {
            SubredditV2.encode(message.subreddit, writer.uint32(82).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCommentSubmit();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.comment = CommentV2.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.author = UserV2.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.post = PostV2.decode(reader, reader.uint32());
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.subreddit = SubredditV2.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            comment: isSet(object.comment) ? CommentV2.fromJSON(object.comment) : undefined,
            author: isSet(object.author) ? UserV2.fromJSON(object.author) : undefined,
            post: isSet(object.post) ? PostV2.fromJSON(object.post) : undefined,
            subreddit: isSet(object.subreddit) ? SubredditV2.fromJSON(object.subreddit) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.comment !== undefined) {
            obj.comment = CommentV2.toJSON(message.comment);
        }
        if (message.author !== undefined) {
            obj.author = UserV2.toJSON(message.author);
        }
        if (message.post !== undefined) {
            obj.post = PostV2.toJSON(message.post);
        }
        if (message.subreddit !== undefined) {
            obj.subreddit = SubredditV2.toJSON(message.subreddit);
        }
        return obj;
    },
    create(base) {
        return CommentSubmit.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCommentSubmit();
        message.comment = (object.comment !== undefined && object.comment !== null)
            ? CommentV2.fromPartial(object.comment)
            : undefined;
        message.author = (object.author !== undefined && object.author !== null)
            ? UserV2.fromPartial(object.author)
            : undefined;
        message.post = (object.post !== undefined && object.post !== null) ? PostV2.fromPartial(object.post) : undefined;
        message.subreddit = (object.subreddit !== undefined && object.subreddit !== null)
            ? SubredditV2.fromPartial(object.subreddit)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set(CommentSubmit.$type, CommentSubmit);
function createBaseCommentCreate() {
    return { comment: undefined, author: undefined, post: undefined, subreddit: undefined };
}
export const CommentCreate = {
    $type: "devvit.events.v1alpha.CommentCreate",
    encode(message, writer = _m0.Writer.create()) {
        if (message.comment !== undefined) {
            CommentV2.encode(message.comment, writer.uint32(10).fork()).ldelim();
        }
        if (message.author !== undefined) {
            UserV2.encode(message.author, writer.uint32(18).fork()).ldelim();
        }
        if (message.post !== undefined) {
            PostV2.encode(message.post, writer.uint32(26).fork()).ldelim();
        }
        if (message.subreddit !== undefined) {
            SubredditV2.encode(message.subreddit, writer.uint32(82).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCommentCreate();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.comment = CommentV2.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.author = UserV2.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.post = PostV2.decode(reader, reader.uint32());
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.subreddit = SubredditV2.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            comment: isSet(object.comment) ? CommentV2.fromJSON(object.comment) : undefined,
            author: isSet(object.author) ? UserV2.fromJSON(object.author) : undefined,
            post: isSet(object.post) ? PostV2.fromJSON(object.post) : undefined,
            subreddit: isSet(object.subreddit) ? SubredditV2.fromJSON(object.subreddit) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.comment !== undefined) {
            obj.comment = CommentV2.toJSON(message.comment);
        }
        if (message.author !== undefined) {
            obj.author = UserV2.toJSON(message.author);
        }
        if (message.post !== undefined) {
            obj.post = PostV2.toJSON(message.post);
        }
        if (message.subreddit !== undefined) {
            obj.subreddit = SubredditV2.toJSON(message.subreddit);
        }
        return obj;
    },
    create(base) {
        return CommentCreate.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCommentCreate();
        message.comment = (object.comment !== undefined && object.comment !== null)
            ? CommentV2.fromPartial(object.comment)
            : undefined;
        message.author = (object.author !== undefined && object.author !== null)
            ? UserV2.fromPartial(object.author)
            : undefined;
        message.post = (object.post !== undefined && object.post !== null) ? PostV2.fromPartial(object.post) : undefined;
        message.subreddit = (object.subreddit !== undefined && object.subreddit !== null)
            ? SubredditV2.fromPartial(object.subreddit)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set(CommentCreate.$type, CommentCreate);
function createBaseCommentUpdate() {
    return { comment: undefined, author: undefined, post: undefined, previousBody: "", subreddit: undefined };
}
export const CommentUpdate = {
    $type: "devvit.events.v1alpha.CommentUpdate",
    encode(message, writer = _m0.Writer.create()) {
        if (message.comment !== undefined) {
            CommentV2.encode(message.comment, writer.uint32(10).fork()).ldelim();
        }
        if (message.author !== undefined) {
            UserV2.encode(message.author, writer.uint32(18).fork()).ldelim();
        }
        if (message.post !== undefined) {
            PostV2.encode(message.post, writer.uint32(26).fork()).ldelim();
        }
        if (message.previousBody !== "") {
            writer.uint32(34).string(message.previousBody);
        }
        if (message.subreddit !== undefined) {
            SubredditV2.encode(message.subreddit, writer.uint32(82).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCommentUpdate();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.comment = CommentV2.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.author = UserV2.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.post = PostV2.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.previousBody = reader.string();
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.subreddit = SubredditV2.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            comment: isSet(object.comment) ? CommentV2.fromJSON(object.comment) : undefined,
            author: isSet(object.author) ? UserV2.fromJSON(object.author) : undefined,
            post: isSet(object.post) ? PostV2.fromJSON(object.post) : undefined,
            previousBody: isSet(object.previousBody) ? globalThis.String(object.previousBody) : "",
            subreddit: isSet(object.subreddit) ? SubredditV2.fromJSON(object.subreddit) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.comment !== undefined) {
            obj.comment = CommentV2.toJSON(message.comment);
        }
        if (message.author !== undefined) {
            obj.author = UserV2.toJSON(message.author);
        }
        if (message.post !== undefined) {
            obj.post = PostV2.toJSON(message.post);
        }
        if (message.previousBody !== "") {
            obj.previousBody = message.previousBody;
        }
        if (message.subreddit !== undefined) {
            obj.subreddit = SubredditV2.toJSON(message.subreddit);
        }
        return obj;
    },
    create(base) {
        return CommentUpdate.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCommentUpdate();
        message.comment = (object.comment !== undefined && object.comment !== null)
            ? CommentV2.fromPartial(object.comment)
            : undefined;
        message.author = (object.author !== undefined && object.author !== null)
            ? UserV2.fromPartial(object.author)
            : undefined;
        message.post = (object.post !== undefined && object.post !== null) ? PostV2.fromPartial(object.post) : undefined;
        message.previousBody = object.previousBody ?? "";
        message.subreddit = (object.subreddit !== undefined && object.subreddit !== null)
            ? SubredditV2.fromPartial(object.subreddit)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set(CommentUpdate.$type, CommentUpdate);
function createBaseCommentReport() {
    return { comment: undefined, subreddit: undefined, reason: "" };
}
export const CommentReport = {
    $type: "devvit.events.v1alpha.CommentReport",
    encode(message, writer = _m0.Writer.create()) {
        if (message.comment !== undefined) {
            CommentV2.encode(message.comment, writer.uint32(10).fork()).ldelim();
        }
        if (message.subreddit !== undefined) {
            SubredditV2.encode(message.subreddit, writer.uint32(82).fork()).ldelim();
        }
        if (message.reason !== "") {
            writer.uint32(26).string(message.reason);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCommentReport();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.comment = CommentV2.decode(reader, reader.uint32());
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.subreddit = SubredditV2.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.reason = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            comment: isSet(object.comment) ? CommentV2.fromJSON(object.comment) : undefined,
            subreddit: isSet(object.subreddit) ? SubredditV2.fromJSON(object.subreddit) : undefined,
            reason: isSet(object.reason) ? globalThis.String(object.reason) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.comment !== undefined) {
            obj.comment = CommentV2.toJSON(message.comment);
        }
        if (message.subreddit !== undefined) {
            obj.subreddit = SubredditV2.toJSON(message.subreddit);
        }
        if (message.reason !== "") {
            obj.reason = message.reason;
        }
        return obj;
    },
    create(base) {
        return CommentReport.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCommentReport();
        message.comment = (object.comment !== undefined && object.comment !== null)
            ? CommentV2.fromPartial(object.comment)
            : undefined;
        message.subreddit = (object.subreddit !== undefined && object.subreddit !== null)
            ? SubredditV2.fromPartial(object.subreddit)
            : undefined;
        message.reason = object.reason ?? "";
        return message;
    },
};
messageTypeRegistry.set(CommentReport.$type, CommentReport);
function createBaseCommentDelete() {
    return {
        commentId: "",
        postId: "",
        parentId: "",
        deletedAt: undefined,
        author: undefined,
        createdAt: undefined,
        source: 0,
        reason: 0,
        subreddit: undefined,
    };
}
export const CommentDelete = {
    $type: "devvit.events.v1alpha.CommentDelete",
    encode(message, writer = _m0.Writer.create()) {
        if (message.commentId !== "") {
            writer.uint32(10).string(message.commentId);
        }
        if (message.postId !== "") {
            writer.uint32(18).string(message.postId);
        }
        if (message.parentId !== "") {
            writer.uint32(26).string(message.parentId);
        }
        if (message.deletedAt !== undefined) {
            Timestamp.encode(toTimestamp(message.deletedAt), writer.uint32(34).fork()).ldelim();
        }
        if (message.author !== undefined) {
            UserV2.encode(message.author, writer.uint32(42).fork()).ldelim();
        }
        if (message.createdAt !== undefined) {
            Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(50).fork()).ldelim();
        }
        if (message.source !== 0) {
            writer.uint32(56).int32(message.source);
        }
        if (message.reason !== 0) {
            writer.uint32(64).int32(message.reason);
        }
        if (message.subreddit !== undefined) {
            SubredditV2.encode(message.subreddit, writer.uint32(82).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCommentDelete();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.commentId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.postId = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.parentId = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.deletedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.author = UserV2.decode(reader, reader.uint32());
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.source = reader.int32();
                    continue;
                case 8:
                    if (tag !== 64) {
                        break;
                    }
                    message.reason = reader.int32();
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.subreddit = SubredditV2.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            commentId: isSet(object.commentId) ? globalThis.String(object.commentId) : "",
            postId: isSet(object.postId) ? globalThis.String(object.postId) : "",
            parentId: isSet(object.parentId) ? globalThis.String(object.parentId) : "",
            deletedAt: isSet(object.deletedAt) ? fromJsonTimestamp(object.deletedAt) : undefined,
            author: isSet(object.author) ? UserV2.fromJSON(object.author) : undefined,
            createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
            source: isSet(object.source) ? eventSourceFromJSON(object.source) : 0,
            reason: isSet(object.reason) ? deletionReasonFromJSON(object.reason) : 0,
            subreddit: isSet(object.subreddit) ? SubredditV2.fromJSON(object.subreddit) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.commentId !== "") {
            obj.commentId = message.commentId;
        }
        if (message.postId !== "") {
            obj.postId = message.postId;
        }
        if (message.parentId !== "") {
            obj.parentId = message.parentId;
        }
        if (message.deletedAt !== undefined) {
            obj.deletedAt = message.deletedAt.toISOString();
        }
        if (message.author !== undefined) {
            obj.author = UserV2.toJSON(message.author);
        }
        if (message.createdAt !== undefined) {
            obj.createdAt = message.createdAt.toISOString();
        }
        if (message.source !== 0) {
            obj.source = eventSourceToJSON(message.source);
        }
        if (message.reason !== 0) {
            obj.reason = deletionReasonToJSON(message.reason);
        }
        if (message.subreddit !== undefined) {
            obj.subreddit = SubredditV2.toJSON(message.subreddit);
        }
        return obj;
    },
    create(base) {
        return CommentDelete.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCommentDelete();
        message.commentId = object.commentId ?? "";
        message.postId = object.postId ?? "";
        message.parentId = object.parentId ?? "";
        message.deletedAt = object.deletedAt ?? undefined;
        message.author = (object.author !== undefined && object.author !== null)
            ? UserV2.fromPartial(object.author)
            : undefined;
        message.createdAt = object.createdAt ?? undefined;
        message.source = object.source ?? 0;
        message.reason = object.reason ?? 0;
        message.subreddit = (object.subreddit !== undefined && object.subreddit !== null)
            ? SubredditV2.fromPartial(object.subreddit)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set(CommentDelete.$type, CommentDelete);
function createBaseSubredditSubscribe() {
    return { subreddit: undefined, subscriber: undefined };
}
export const SubredditSubscribe = {
    $type: "devvit.events.v1alpha.SubredditSubscribe",
    encode(message, writer = _m0.Writer.create()) {
        if (message.subreddit !== undefined) {
            SubredditV2.encode(message.subreddit, writer.uint32(10).fork()).ldelim();
        }
        if (message.subscriber !== undefined) {
            UserV2.encode(message.subscriber, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSubredditSubscribe();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.subreddit = SubredditV2.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.subscriber = UserV2.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            subreddit: isSet(object.subreddit) ? SubredditV2.fromJSON(object.subreddit) : undefined,
            subscriber: isSet(object.subscriber) ? UserV2.fromJSON(object.subscriber) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.subreddit !== undefined) {
            obj.subreddit = SubredditV2.toJSON(message.subreddit);
        }
        if (message.subscriber !== undefined) {
            obj.subscriber = UserV2.toJSON(message.subscriber);
        }
        return obj;
    },
    create(base) {
        return SubredditSubscribe.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSubredditSubscribe();
        message.subreddit = (object.subreddit !== undefined && object.subreddit !== null)
            ? SubredditV2.fromPartial(object.subreddit)
            : undefined;
        message.subscriber = (object.subscriber !== undefined && object.subscriber !== null)
            ? UserV2.fromPartial(object.subscriber)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set(SubredditSubscribe.$type, SubredditSubscribe);
function createBaseAppInstall() {
    return { subreddit: undefined, installer: undefined };
}
export const AppInstall = {
    $type: "devvit.events.v1alpha.AppInstall",
    encode(message, writer = _m0.Writer.create()) {
        if (message.subreddit !== undefined) {
            SubredditV2.encode(message.subreddit, writer.uint32(10).fork()).ldelim();
        }
        if (message.installer !== undefined) {
            UserV2.encode(message.installer, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAppInstall();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.subreddit = SubredditV2.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.installer = UserV2.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            subreddit: isSet(object.subreddit) ? SubredditV2.fromJSON(object.subreddit) : undefined,
            installer: isSet(object.installer) ? UserV2.fromJSON(object.installer) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.subreddit !== undefined) {
            obj.subreddit = SubredditV2.toJSON(message.subreddit);
        }
        if (message.installer !== undefined) {
            obj.installer = UserV2.toJSON(message.installer);
        }
        return obj;
    },
    create(base) {
        return AppInstall.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAppInstall();
        message.subreddit = (object.subreddit !== undefined && object.subreddit !== null)
            ? SubredditV2.fromPartial(object.subreddit)
            : undefined;
        message.installer = (object.installer !== undefined && object.installer !== null)
            ? UserV2.fromPartial(object.installer)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set(AppInstall.$type, AppInstall);
function createBaseAppUpgrade() {
    return { subreddit: undefined, installer: undefined };
}
export const AppUpgrade = {
    $type: "devvit.events.v1alpha.AppUpgrade",
    encode(message, writer = _m0.Writer.create()) {
        if (message.subreddit !== undefined) {
            SubredditV2.encode(message.subreddit, writer.uint32(10).fork()).ldelim();
        }
        if (message.installer !== undefined) {
            UserV2.encode(message.installer, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAppUpgrade();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.subreddit = SubredditV2.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.installer = UserV2.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            subreddit: isSet(object.subreddit) ? SubredditV2.fromJSON(object.subreddit) : undefined,
            installer: isSet(object.installer) ? UserV2.fromJSON(object.installer) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.subreddit !== undefined) {
            obj.subreddit = SubredditV2.toJSON(message.subreddit);
        }
        if (message.installer !== undefined) {
            obj.installer = UserV2.toJSON(message.installer);
        }
        return obj;
    },
    create(base) {
        return AppUpgrade.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAppUpgrade();
        message.subreddit = (object.subreddit !== undefined && object.subreddit !== null)
            ? SubredditV2.fromPartial(object.subreddit)
            : undefined;
        message.installer = (object.installer !== undefined && object.installer !== null)
            ? UserV2.fromPartial(object.installer)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set(AppUpgrade.$type, AppUpgrade);
function createBaseAccountDelete() {
    return { userId: "", deletedAt: undefined, user: undefined };
}
export const AccountDelete = {
    $type: "devvit.events.v1alpha.AccountDelete",
    encode(message, writer = _m0.Writer.create()) {
        if (message.userId !== "") {
            writer.uint32(10).string(message.userId);
        }
        if (message.deletedAt !== undefined) {
            Timestamp.encode(toTimestamp(message.deletedAt), writer.uint32(18).fork()).ldelim();
        }
        if (message.user !== undefined) {
            UserV2.encode(message.user, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAccountDelete();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.deletedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.user = UserV2.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
            deletedAt: isSet(object.deletedAt) ? fromJsonTimestamp(object.deletedAt) : undefined,
            user: isSet(object.user) ? UserV2.fromJSON(object.user) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        if (message.deletedAt !== undefined) {
            obj.deletedAt = message.deletedAt.toISOString();
        }
        if (message.user !== undefined) {
            obj.user = UserV2.toJSON(message.user);
        }
        return obj;
    },
    create(base) {
        return AccountDelete.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAccountDelete();
        message.userId = object.userId ?? "";
        message.deletedAt = object.deletedAt ?? undefined;
        message.user = (object.user !== undefined && object.user !== null) ? UserV2.fromPartial(object.user) : undefined;
        return message;
    },
};
messageTypeRegistry.set(AccountDelete.$type, AccountDelete);
function createBaseVote() {
    return { updatedAt: undefined, comment: undefined, post: undefined, subreddit: undefined, upvoteRatio: 0, score: 0 };
}
export const Vote = {
    $type: "devvit.events.v1alpha.Vote",
    encode(message, writer = _m0.Writer.create()) {
        if (message.updatedAt !== undefined) {
            Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(34).fork()).ldelim();
        }
        if (message.comment !== undefined) {
            CommentV2.encode(message.comment, writer.uint32(42).fork()).ldelim();
        }
        if (message.post !== undefined) {
            PostV2.encode(message.post, writer.uint32(50).fork()).ldelim();
        }
        if (message.subreddit !== undefined) {
            SubredditV2.encode(message.subreddit, writer.uint32(58).fork()).ldelim();
        }
        if (message.upvoteRatio !== 0) {
            writer.uint32(69).float(message.upvoteRatio);
        }
        if (message.score !== 0) {
            writer.uint32(72).int32(message.score);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseVote();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.comment = CommentV2.decode(reader, reader.uint32());
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.post = PostV2.decode(reader, reader.uint32());
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.subreddit = SubredditV2.decode(reader, reader.uint32());
                    continue;
                case 8:
                    if (tag !== 69) {
                        break;
                    }
                    message.upvoteRatio = reader.float();
                    continue;
                case 9:
                    if (tag !== 72) {
                        break;
                    }
                    message.score = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
            comment: isSet(object.comment) ? CommentV2.fromJSON(object.comment) : undefined,
            post: isSet(object.post) ? PostV2.fromJSON(object.post) : undefined,
            subreddit: isSet(object.subreddit) ? SubredditV2.fromJSON(object.subreddit) : undefined,
            upvoteRatio: isSet(object.upvoteRatio) ? globalThis.Number(object.upvoteRatio) : 0,
            score: isSet(object.score) ? globalThis.Number(object.score) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.updatedAt !== undefined) {
            obj.updatedAt = message.updatedAt.toISOString();
        }
        if (message.comment !== undefined) {
            obj.comment = CommentV2.toJSON(message.comment);
        }
        if (message.post !== undefined) {
            obj.post = PostV2.toJSON(message.post);
        }
        if (message.subreddit !== undefined) {
            obj.subreddit = SubredditV2.toJSON(message.subreddit);
        }
        if (message.upvoteRatio !== 0) {
            obj.upvoteRatio = message.upvoteRatio;
        }
        if (message.score !== 0) {
            obj.score = Math.round(message.score);
        }
        return obj;
    },
    create(base) {
        return Vote.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseVote();
        message.updatedAt = object.updatedAt ?? undefined;
        message.comment = (object.comment !== undefined && object.comment !== null)
            ? CommentV2.fromPartial(object.comment)
            : undefined;
        message.post = (object.post !== undefined && object.post !== null) ? PostV2.fromPartial(object.post) : undefined;
        message.subreddit = (object.subreddit !== undefined && object.subreddit !== null)
            ? SubredditV2.fromPartial(object.subreddit)
            : undefined;
        message.upvoteRatio = object.upvoteRatio ?? 0;
        message.score = object.score ?? 0;
        return message;
    },
};
messageTypeRegistry.set(Vote.$type, Vote);
function createBaseAutomoderatorFilterPost() {
    return { post: undefined, removedAt: undefined, reason: "", author: "", subreddit: undefined };
}
export const AutomoderatorFilterPost = {
    $type: "devvit.events.v1alpha.AutomoderatorFilterPost",
    encode(message, writer = _m0.Writer.create()) {
        if (message.post !== undefined) {
            PostV2.encode(message.post, writer.uint32(10).fork()).ldelim();
        }
        if (message.removedAt !== undefined) {
            Timestamp.encode(toTimestamp(message.removedAt), writer.uint32(18).fork()).ldelim();
        }
        if (message.reason !== "") {
            writer.uint32(26).string(message.reason);
        }
        if (message.author !== "") {
            writer.uint32(34).string(message.author);
        }
        if (message.subreddit !== undefined) {
            SubredditV2.encode(message.subreddit, writer.uint32(42).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAutomoderatorFilterPost();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.post = PostV2.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.removedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.reason = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.author = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.subreddit = SubredditV2.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            post: isSet(object.post) ? PostV2.fromJSON(object.post) : undefined,
            removedAt: isSet(object.removedAt) ? fromJsonTimestamp(object.removedAt) : undefined,
            reason: isSet(object.reason) ? globalThis.String(object.reason) : "",
            author: isSet(object.author) ? globalThis.String(object.author) : "",
            subreddit: isSet(object.subreddit) ? SubredditV2.fromJSON(object.subreddit) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.post !== undefined) {
            obj.post = PostV2.toJSON(message.post);
        }
        if (message.removedAt !== undefined) {
            obj.removedAt = message.removedAt.toISOString();
        }
        if (message.reason !== "") {
            obj.reason = message.reason;
        }
        if (message.author !== "") {
            obj.author = message.author;
        }
        if (message.subreddit !== undefined) {
            obj.subreddit = SubredditV2.toJSON(message.subreddit);
        }
        return obj;
    },
    create(base) {
        return AutomoderatorFilterPost.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAutomoderatorFilterPost();
        message.post = (object.post !== undefined && object.post !== null) ? PostV2.fromPartial(object.post) : undefined;
        message.removedAt = object.removedAt ?? undefined;
        message.reason = object.reason ?? "";
        message.author = object.author ?? "";
        message.subreddit = (object.subreddit !== undefined && object.subreddit !== null)
            ? SubredditV2.fromPartial(object.subreddit)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set(AutomoderatorFilterPost.$type, AutomoderatorFilterPost);
function createBaseAutomoderatorFilterComment() {
    return { comment: undefined, removedAt: undefined, reason: "", author: "", subreddit: undefined };
}
export const AutomoderatorFilterComment = {
    $type: "devvit.events.v1alpha.AutomoderatorFilterComment",
    encode(message, writer = _m0.Writer.create()) {
        if (message.comment !== undefined) {
            CommentV2.encode(message.comment, writer.uint32(10).fork()).ldelim();
        }
        if (message.removedAt !== undefined) {
            Timestamp.encode(toTimestamp(message.removedAt), writer.uint32(18).fork()).ldelim();
        }
        if (message.reason !== "") {
            writer.uint32(26).string(message.reason);
        }
        if (message.author !== "") {
            writer.uint32(34).string(message.author);
        }
        if (message.subreddit !== undefined) {
            SubredditV2.encode(message.subreddit, writer.uint32(42).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAutomoderatorFilterComment();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.comment = CommentV2.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.removedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.reason = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.author = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.subreddit = SubredditV2.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            comment: isSet(object.comment) ? CommentV2.fromJSON(object.comment) : undefined,
            removedAt: isSet(object.removedAt) ? fromJsonTimestamp(object.removedAt) : undefined,
            reason: isSet(object.reason) ? globalThis.String(object.reason) : "",
            author: isSet(object.author) ? globalThis.String(object.author) : "",
            subreddit: isSet(object.subreddit) ? SubredditV2.fromJSON(object.subreddit) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.comment !== undefined) {
            obj.comment = CommentV2.toJSON(message.comment);
        }
        if (message.removedAt !== undefined) {
            obj.removedAt = message.removedAt.toISOString();
        }
        if (message.reason !== "") {
            obj.reason = message.reason;
        }
        if (message.author !== "") {
            obj.author = message.author;
        }
        if (message.subreddit !== undefined) {
            obj.subreddit = SubredditV2.toJSON(message.subreddit);
        }
        return obj;
    },
    create(base) {
        return AutomoderatorFilterComment.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAutomoderatorFilterComment();
        message.comment = (object.comment !== undefined && object.comment !== null)
            ? CommentV2.fromPartial(object.comment)
            : undefined;
        message.removedAt = object.removedAt ?? undefined;
        message.reason = object.reason ?? "";
        message.author = object.author ?? "";
        message.subreddit = (object.subreddit !== undefined && object.subreddit !== null)
            ? SubredditV2.fromPartial(object.subreddit)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set(AutomoderatorFilterComment.$type, AutomoderatorFilterComment);
function createBasePostNsfwUpdate() {
    return { post: undefined, author: undefined, isNsfw: false, subreddit: undefined };
}
export const PostNsfwUpdate = {
    $type: "devvit.events.v1alpha.PostNsfwUpdate",
    encode(message, writer = _m0.Writer.create()) {
        if (message.post !== undefined) {
            PostV2.encode(message.post, writer.uint32(10).fork()).ldelim();
        }
        if (message.author !== undefined) {
            UserV2.encode(message.author, writer.uint32(18).fork()).ldelim();
        }
        if (message.isNsfw !== false) {
            writer.uint32(24).bool(message.isNsfw);
        }
        if (message.subreddit !== undefined) {
            SubredditV2.encode(message.subreddit, writer.uint32(82).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePostNsfwUpdate();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.post = PostV2.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.author = UserV2.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.isNsfw = reader.bool();
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.subreddit = SubredditV2.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            post: isSet(object.post) ? PostV2.fromJSON(object.post) : undefined,
            author: isSet(object.author) ? UserV2.fromJSON(object.author) : undefined,
            isNsfw: isSet(object.isNsfw) ? globalThis.Boolean(object.isNsfw) : false,
            subreddit: isSet(object.subreddit) ? SubredditV2.fromJSON(object.subreddit) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.post !== undefined) {
            obj.post = PostV2.toJSON(message.post);
        }
        if (message.author !== undefined) {
            obj.author = UserV2.toJSON(message.author);
        }
        if (message.isNsfw !== false) {
            obj.isNsfw = message.isNsfw;
        }
        if (message.subreddit !== undefined) {
            obj.subreddit = SubredditV2.toJSON(message.subreddit);
        }
        return obj;
    },
    create(base) {
        return PostNsfwUpdate.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePostNsfwUpdate();
        message.post = (object.post !== undefined && object.post !== null) ? PostV2.fromPartial(object.post) : undefined;
        message.author = (object.author !== undefined && object.author !== null)
            ? UserV2.fromPartial(object.author)
            : undefined;
        message.isNsfw = object.isNsfw ?? false;
        message.subreddit = (object.subreddit !== undefined && object.subreddit !== null)
            ? SubredditV2.fromPartial(object.subreddit)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set(PostNsfwUpdate.$type, PostNsfwUpdate);
function createBasePostSpoilerUpdate() {
    return { post: undefined, author: undefined, isSpoiler: false, subreddit: undefined };
}
export const PostSpoilerUpdate = {
    $type: "devvit.events.v1alpha.PostSpoilerUpdate",
    encode(message, writer = _m0.Writer.create()) {
        if (message.post !== undefined) {
            PostV2.encode(message.post, writer.uint32(10).fork()).ldelim();
        }
        if (message.author !== undefined) {
            UserV2.encode(message.author, writer.uint32(18).fork()).ldelim();
        }
        if (message.isSpoiler !== false) {
            writer.uint32(32).bool(message.isSpoiler);
        }
        if (message.subreddit !== undefined) {
            SubredditV2.encode(message.subreddit, writer.uint32(82).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePostSpoilerUpdate();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.post = PostV2.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.author = UserV2.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.isSpoiler = reader.bool();
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.subreddit = SubredditV2.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            post: isSet(object.post) ? PostV2.fromJSON(object.post) : undefined,
            author: isSet(object.author) ? UserV2.fromJSON(object.author) : undefined,
            isSpoiler: isSet(object.isSpoiler) ? globalThis.Boolean(object.isSpoiler) : false,
            subreddit: isSet(object.subreddit) ? SubredditV2.fromJSON(object.subreddit) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.post !== undefined) {
            obj.post = PostV2.toJSON(message.post);
        }
        if (message.author !== undefined) {
            obj.author = UserV2.toJSON(message.author);
        }
        if (message.isSpoiler !== false) {
            obj.isSpoiler = message.isSpoiler;
        }
        if (message.subreddit !== undefined) {
            obj.subreddit = SubredditV2.toJSON(message.subreddit);
        }
        return obj;
    },
    create(base) {
        return PostSpoilerUpdate.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePostSpoilerUpdate();
        message.post = (object.post !== undefined && object.post !== null) ? PostV2.fromPartial(object.post) : undefined;
        message.author = (object.author !== undefined && object.author !== null)
            ? UserV2.fromPartial(object.author)
            : undefined;
        message.isSpoiler = object.isSpoiler ?? false;
        message.subreddit = (object.subreddit !== undefined && object.subreddit !== null)
            ? SubredditV2.fromPartial(object.subreddit)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set(PostSpoilerUpdate.$type, PostSpoilerUpdate);
function toTimestamp(date) {
    const seconds = Math.trunc(date.getTime() / 1000);
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (t.seconds || 0) * 1000;
    millis += (t.nanos || 0) / 1000000;
    return new globalThis.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof globalThis.Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new globalThis.Date(o);
    }
    else {
        return fromTimestamp(Timestamp.fromJSON(o));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
