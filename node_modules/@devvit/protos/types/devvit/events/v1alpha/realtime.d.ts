/**
 * #realtime.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { Observable } from "rxjs";
import { Metadata } from "../../../../lib/Types.js";
import { Empty } from "../../../google/protobuf/empty.js";
export interface RealtimeRequest {
    channels: string[];
}
export interface RealtimeEvent {
    /** The channel that received the message */
    channel: string;
    /** The data that was received */
    data?: {
        [key: string]: any;
    } | undefined;
}
export declare const RealtimeRequest: {
    $type: "devvit.events.v1alpha.RealtimeRequest";
    encode(message: RealtimeRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RealtimeRequest;
    fromJSON(object: any): RealtimeRequest;
    toJSON(message: RealtimeRequest): unknown;
    create(base?: DeepPartial<RealtimeRequest>): RealtimeRequest;
    fromPartial(object: DeepPartial<RealtimeRequest>): RealtimeRequest;
};
export declare const RealtimeEvent: {
    $type: "devvit.events.v1alpha.RealtimeEvent";
    encode(message: RealtimeEvent, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RealtimeEvent;
    fromJSON(object: any): RealtimeEvent;
    toJSON(message: RealtimeEvent): unknown;
    create(base?: DeepPartial<RealtimeEvent>): RealtimeEvent;
    fromPartial(object: DeepPartial<RealtimeEvent>): RealtimeEvent;
};
export interface Realtime {
    Subscribe(request: RealtimeRequest, metadata?: Metadata): Observable<RealtimeEvent>;
    Send(request: RealtimeEvent, metadata?: Metadata): Promise<Empty>;
}
export declare const RealtimeServiceName = "devvit.events.v1alpha.Realtime";
export declare class RealtimeClientImpl implements Realtime {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Subscribe(request: RealtimeRequest, metadata?: Metadata): Observable<RealtimeEvent>;
    Send(request: RealtimeEvent, metadata?: Metadata): Promise<Empty>;
}
export type RealtimeDefinition = typeof RealtimeDefinition;
export declare const RealtimeDefinition: {
    readonly name: "Realtime";
    readonly fullName: "devvit.events.v1alpha.Realtime";
    readonly methods: {
        readonly subscribe: {
            readonly name: "Subscribe";
            readonly requestType: {
                $type: "devvit.events.v1alpha.RealtimeRequest";
                encode(message: RealtimeRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): RealtimeRequest;
                fromJSON(object: any): RealtimeRequest;
                toJSON(message: RealtimeRequest): unknown;
                create(base?: DeepPartial<RealtimeRequest>): RealtimeRequest;
                fromPartial(object: DeepPartial<RealtimeRequest>): RealtimeRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.events.v1alpha.RealtimeEvent";
                encode(message: RealtimeEvent, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): RealtimeEvent;
                fromJSON(object: any): RealtimeEvent;
                toJSON(message: RealtimeEvent): unknown;
                create(base?: DeepPartial<RealtimeEvent>): RealtimeEvent;
                fromPartial(object: DeepPartial<RealtimeEvent>): RealtimeEvent;
            };
            readonly responseStream: true;
            readonly options: {};
        };
        readonly send: {
            readonly name: "Send";
            readonly requestType: {
                $type: "devvit.events.v1alpha.RealtimeEvent";
                encode(message: RealtimeEvent, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): RealtimeEvent;
                fromJSON(object: any): RealtimeEvent;
                toJSON(message: RealtimeEvent): unknown;
                create(base?: DeepPartial<RealtimeEvent>): RealtimeEvent;
                fromPartial(object: DeepPartial<RealtimeEvent>): RealtimeEvent;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {} | undefined): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array, metadata?: Metadata): Promise<Uint8Array>;
    clientStreamingRequest(service: string, method: string, data: Observable<Uint8Array>, metadata?: Metadata): Promise<Uint8Array>;
    serverStreamingRequest(service: string, method: string, data: Uint8Array, metadata?: Metadata): Observable<Uint8Array>;
    bidirectionalStreamingRequest(service: string, method: string, data: Observable<Uint8Array>, metadata?: Metadata): Observable<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=realtime.d.ts.map