/**
 * #realtime.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { map } from "rxjs/operators";
import { Empty } from "../../../google/protobuf/empty.js";
import { Struct } from "../../../google/protobuf/struct.js";
import { messageTypeRegistry } from "../../../typeRegistry.js";
function createBaseRealtimeRequest() {
    return { channels: [] };
}
export const RealtimeRequest = {
    $type: "devvit.events.v1alpha.RealtimeRequest",
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.channels) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRealtimeRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.channels.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            channels: globalThis.Array.isArray(object?.channels) ? object.channels.map((e) => globalThis.String(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.channels?.length) {
            obj.channels = message.channels;
        }
        return obj;
    },
    create(base) {
        return RealtimeRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRealtimeRequest();
        message.channels = object.channels?.map((e) => e) || [];
        return message;
    },
};
messageTypeRegistry.set(RealtimeRequest.$type, RealtimeRequest);
function createBaseRealtimeEvent() {
    return { channel: "", data: undefined };
}
export const RealtimeEvent = {
    $type: "devvit.events.v1alpha.RealtimeEvent",
    encode(message, writer = _m0.Writer.create()) {
        if (message.channel !== "") {
            writer.uint32(10).string(message.channel);
        }
        if (message.data !== undefined) {
            Struct.encode(Struct.wrap(message.data), writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRealtimeEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.channel = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.data = Struct.unwrap(Struct.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            channel: isSet(object.channel) ? globalThis.String(object.channel) : "",
            data: isObject(object.data) ? object.data : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.channel !== "") {
            obj.channel = message.channel;
        }
        if (message.data !== undefined) {
            obj.data = message.data;
        }
        return obj;
    },
    create(base) {
        return RealtimeEvent.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRealtimeEvent();
        message.channel = object.channel ?? "";
        message.data = object.data ?? undefined;
        return message;
    },
};
messageTypeRegistry.set(RealtimeEvent.$type, RealtimeEvent);
export const RealtimeServiceName = "devvit.events.v1alpha.Realtime";
export class RealtimeClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || RealtimeServiceName;
        this.rpc = rpc;
        this.Subscribe = this.Subscribe.bind(this);
        this.Send = this.Send.bind(this);
    }
    Subscribe(request, metadata) {
        const data = RealtimeRequest.encode(request).finish();
        const result = this.rpc.serverStreamingRequest(this.service, "Subscribe", data, metadata);
        return result.pipe(map((data) => RealtimeEvent.decode(_m0.Reader.create(data))));
    }
    Send(request, metadata) {
        const data = RealtimeEvent.encode(request).finish();
        const promise = this.rpc.request(this.service, "Send", data, metadata);
        return promise.then((data) => Empty.decode(_m0.Reader.create(data)));
    }
}
export const RealtimeDefinition = {
    name: "Realtime",
    fullName: "devvit.events.v1alpha.Realtime",
    methods: {
        subscribe: {
            name: "Subscribe",
            requestType: RealtimeRequest,
            requestStream: false,
            responseType: RealtimeEvent,
            responseStream: true,
            options: {},
        },
        send: {
            name: "Send",
            requestType: RealtimeEvent,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
    },
};
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
