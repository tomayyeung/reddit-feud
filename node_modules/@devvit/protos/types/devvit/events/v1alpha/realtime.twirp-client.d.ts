import { RealtimeRequest, RealtimeEvent } from './realtime.js';
import { Empty } from '../../../google/protobuf/empty.js';
interface Rpc {
    request(service: string, method: string, contentType: 'application/json' | 'application/protobuf', data: object | Uint8Array): Promise<object | Uint8Array>;
}
export interface RealtimeClient {
    Subscribe(request: RealtimeRequest): Promise<RealtimeEvent>;
    Send(request: RealtimeEvent): Promise<Empty>;
}
export declare class RealtimeClientJSON implements RealtimeClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    Subscribe(request: RealtimeRequest): Promise<RealtimeEvent>;
    Send(request: RealtimeEvent): Promise<Empty>;
}
export declare class RealtimeClientProtobuf implements RealtimeClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    Subscribe(request: RealtimeRequest): Promise<RealtimeEvent>;
    Send(request: RealtimeEvent): Promise<Empty>;
}
export {};
//# sourceMappingURL=realtime.twirp-client.d.ts.map