import { RealtimeRequest, RealtimeEvent } from './realtime.js';
import { Empty } from '../../../google/protobuf/empty.js';
export class RealtimeClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.Subscribe.bind(this);
        this.Send.bind(this);
    }
    Subscribe(request) {
        const data = RealtimeRequest.toJSON(request);
        const promise = this.rpc.request('devvit.events.v1alpha.Realtime', 'Subscribe', 'application/json', data);
        return promise.then((data) => RealtimeEvent.fromJSON(data));
    }
    Send(request) {
        const data = RealtimeEvent.toJSON(request);
        const promise = this.rpc.request('devvit.events.v1alpha.Realtime', 'Send', 'application/json', data);
        return promise.then((data) => Empty.fromJSON(data));
    }
}
export class RealtimeClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.Subscribe.bind(this);
        this.Send.bind(this);
    }
    Subscribe(request) {
        const data = RealtimeRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.events.v1alpha.Realtime', 'Subscribe', 'application/protobuf', data);
        return promise.then((data) => RealtimeEvent.decode(data));
    }
    Send(request) {
        const data = RealtimeEvent.encode(request).finish();
        const promise = this.rpc.request('devvit.events.v1alpha.Realtime', 'Send', 'application/protobuf', data);
        return promise.then((data) => Empty.decode(data));
    }
}
