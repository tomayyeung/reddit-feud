/// <reference types="node" resolution-mode="require"/>
import { TwirpContext, TwirpServer } from 'twirp-ts';
import { RealtimeRequest, RealtimeEvent } from './realtime.js';
import { Empty } from '../../../google/protobuf/empty.js';
export interface RealtimeTwirp<T extends TwirpContext = TwirpContext> {
    Subscribe(ctx: T, request: RealtimeRequest): Promise<RealtimeEvent>;
    Send(ctx: T, request: RealtimeEvent): Promise<Empty>;
}
export declare enum RealtimeMethod {
    Subscribe = "Subscribe",
    Send = "Send"
}
export declare const RealtimeMethodList: RealtimeMethod[];
export declare function createRealtimeServer<T extends TwirpContext = TwirpContext>(service: RealtimeTwirp<T>): TwirpServer<RealtimeTwirp<TwirpContext<import("http").IncomingMessage, import("http").ServerResponse<import("http").IncomingMessage>>>, T>;
//# sourceMappingURL=realtime.twirp.d.ts.map