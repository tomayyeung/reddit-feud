import { TwirpServer, TwirpError, TwirpErrorCode, TwirpContentType, chainInterceptors, } from 'twirp-ts';
import { RealtimeRequest, RealtimeEvent } from './realtime.js';
import { Empty } from '../../../google/protobuf/empty.js';
export var RealtimeMethod;
(function (RealtimeMethod) {
    RealtimeMethod["Subscribe"] = "Subscribe";
    RealtimeMethod["Send"] = "Send";
})(RealtimeMethod || (RealtimeMethod = {}));
export const RealtimeMethodList = [
    RealtimeMethod.Subscribe,
    RealtimeMethod.Send,
];
export function createRealtimeServer(service) {
    return new TwirpServer({
        service,
        packageName: 'devvit.events.v1alpha',
        serviceName: 'Realtime',
        methodList: RealtimeMethodList,
        matchRoute: matchRealtimeRoute,
    });
}
function matchRealtimeRoute(method, events) {
    switch (method) {
        case 'Subscribe':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'Subscribe' };
                await events.onMatch(ctx);
                return handleRealtimeSubscribeRequest(ctx, service, data, interceptors);
            };
        case 'Send':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'Send' };
                await events.onMatch(ctx);
                return handleRealtimeSendRequest(ctx, service, data, interceptors);
            };
        default:
            events.onNotFound();
            const msg = `no handler found`;
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleRealtimeSubscribeRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleRealtimeSubscribeJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleRealtimeSubscribeProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleRealtimeSendRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleRealtimeSendJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleRealtimeSendProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
async function handleRealtimeSubscribeJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = RealtimeRequest.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.Subscribe(ctx, inputReq);
        });
    }
    else {
        response = await service.Subscribe(ctx, request);
    }
    return JSON.stringify(RealtimeEvent.toJSON(response));
}
async function handleRealtimeSendJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = RealtimeEvent.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.Send(ctx, inputReq);
        });
    }
    else {
        response = await service.Send(ctx, request);
    }
    return JSON.stringify(Empty.toJSON(response));
}
async function handleRealtimeSubscribeProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = RealtimeRequest.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.Subscribe(ctx, inputReq);
        });
    }
    else {
        response = await service.Subscribe(ctx, request);
    }
    return Buffer.from(RealtimeEvent.encode(response).finish());
}
async function handleRealtimeSendProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = RealtimeEvent.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.Send(ctx, inputReq);
        });
    }
    else {
        response = await service.Send(ctx, request);
    }
    return Buffer.from(Empty.encode(response).finish());
}
