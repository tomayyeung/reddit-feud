/**
 * #wqcleanup.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal.js";
import { messageTypeRegistry } from "../../../typeRegistry.js";
function createBaseWqCleanup() {
    return { cursor: 0 };
}
export const WqCleanup = {
    $type: "devvit.events.v1alpha.WqCleanup",
    encode(message, writer = _m0.Writer.create()) {
        if (message.cursor !== 0) {
            writer.uint32(8).uint64(message.cursor);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWqCleanup();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.cursor = longToNumber(reader.uint64());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { cursor: isSet(object.cursor) ? globalThis.Number(object.cursor) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.cursor !== 0) {
            obj.cursor = Math.round(message.cursor);
        }
        return obj;
    },
    create(base) {
        return WqCleanup.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseWqCleanup();
        message.cursor = object.cursor ?? 0;
        return message;
    },
};
messageTypeRegistry.set(WqCleanup.$type, WqCleanup);
function longToNumber(long) {
    if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    return long.toNumber();
}
if (_m0.util.Long !== Long) {
    _m0.util.Long = Long;
    _m0.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
