/**
 * #custom_post_snapshot.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { Metadata } from "../../../lib/Types.js";
import { CustomPostSnapshot } from "../gql/snapshot.js";
export interface CustomPostSnapshotRequest {
    snapshotId: string;
}
export declare const CustomPostSnapshotRequest: {
    $type: "devvit.gateway.CustomPostSnapshotRequest";
    encode(message: CustomPostSnapshotRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CustomPostSnapshotRequest;
    fromJSON(object: any): CustomPostSnapshotRequest;
    toJSON(message: CustomPostSnapshotRequest): unknown;
    create(base?: DeepPartial<CustomPostSnapshotRequest>): CustomPostSnapshotRequest;
    fromPartial(object: DeepPartial<CustomPostSnapshotRequest>): CustomPostSnapshotRequest;
};
export interface CustomPostSnapshotResolver {
    GetCustomPostSnapshot(request: CustomPostSnapshotRequest, metadata?: Metadata): Promise<CustomPostSnapshot>;
}
export declare const CustomPostSnapshotResolverServiceName = "devvit.gateway.CustomPostSnapshotResolver";
export declare class CustomPostSnapshotResolverClientImpl implements CustomPostSnapshotResolver {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    GetCustomPostSnapshot(request: CustomPostSnapshotRequest, metadata?: Metadata): Promise<CustomPostSnapshot>;
}
export type CustomPostSnapshotResolverDefinition = typeof CustomPostSnapshotResolverDefinition;
export declare const CustomPostSnapshotResolverDefinition: {
    readonly name: "CustomPostSnapshotResolver";
    readonly fullName: "devvit.gateway.CustomPostSnapshotResolver";
    readonly methods: {
        readonly getCustomPostSnapshot: {
            readonly name: "GetCustomPostSnapshot";
            readonly requestType: {
                $type: "devvit.gateway.CustomPostSnapshotRequest";
                encode(message: CustomPostSnapshotRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): CustomPostSnapshotRequest;
                fromJSON(object: any): CustomPostSnapshotRequest;
                toJSON(message: CustomPostSnapshotRequest): unknown;
                create(base?: DeepPartial<CustomPostSnapshotRequest>): CustomPostSnapshotRequest;
                fromPartial(object: DeepPartial<CustomPostSnapshotRequest>): CustomPostSnapshotRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.gql.CustomPostSnapshot";
                encode(message: CustomPostSnapshot, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): CustomPostSnapshot;
                fromJSON(object: any): CustomPostSnapshot;
                toJSON(message: CustomPostSnapshot): unknown;
                create(base?: {
                    snapshotId?: string;
                    renderConfig?: string;
                } | undefined): CustomPostSnapshot;
                fromPartial(object: {
                    snapshotId?: string;
                    renderConfig?: string;
                }): CustomPostSnapshot;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array, metadata?: Metadata): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=custom_post_snapshot.d.ts.map