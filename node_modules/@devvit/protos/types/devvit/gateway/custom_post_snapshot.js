/**
 * #custom_post_snapshot.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { messageTypeRegistry } from "../../typeRegistry.js";
import { CustomPostSnapshot } from "../gql/snapshot.js";
function createBaseCustomPostSnapshotRequest() {
    return { snapshotId: "" };
}
export const CustomPostSnapshotRequest = {
    $type: "devvit.gateway.CustomPostSnapshotRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.snapshotId !== "") {
            writer.uint32(10).string(message.snapshotId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCustomPostSnapshotRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.snapshotId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { snapshotId: isSet(object.snapshotId) ? globalThis.String(object.snapshotId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.snapshotId !== "") {
            obj.snapshotId = message.snapshotId;
        }
        return obj;
    },
    create(base) {
        return CustomPostSnapshotRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCustomPostSnapshotRequest();
        message.snapshotId = object.snapshotId ?? "";
        return message;
    },
};
messageTypeRegistry.set(CustomPostSnapshotRequest.$type, CustomPostSnapshotRequest);
export const CustomPostSnapshotResolverServiceName = "devvit.gateway.CustomPostSnapshotResolver";
export class CustomPostSnapshotResolverClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || CustomPostSnapshotResolverServiceName;
        this.rpc = rpc;
        this.GetCustomPostSnapshot = this.GetCustomPostSnapshot.bind(this);
    }
    GetCustomPostSnapshot(request, metadata) {
        const data = CustomPostSnapshotRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetCustomPostSnapshot", data, metadata);
        return promise.then((data) => CustomPostSnapshot.decode(_m0.Reader.create(data)));
    }
}
export const CustomPostSnapshotResolverDefinition = {
    name: "CustomPostSnapshotResolver",
    fullName: "devvit.gateway.CustomPostSnapshotResolver",
    methods: {
        getCustomPostSnapshot: {
            name: "GetCustomPostSnapshot",
            requestType: CustomPostSnapshotRequest,
            requestStream: false,
            responseType: CustomPostSnapshot,
            responseStream: false,
            options: {},
        },
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
