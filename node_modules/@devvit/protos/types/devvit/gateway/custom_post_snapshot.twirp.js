import { TwirpServer, TwirpError, TwirpErrorCode, TwirpContentType, chainInterceptors, } from 'twirp-ts';
import { CustomPostSnapshotRequest } from './custom_post_snapshot.js';
import { CustomPostSnapshot } from '../gql/snapshot.js';
export var CustomPostSnapshotResolverMethod;
(function (CustomPostSnapshotResolverMethod) {
    CustomPostSnapshotResolverMethod["GetCustomPostSnapshot"] = "GetCustomPostSnapshot";
})(CustomPostSnapshotResolverMethod || (CustomPostSnapshotResolverMethod = {}));
export const CustomPostSnapshotResolverMethodList = [
    CustomPostSnapshotResolverMethod.GetCustomPostSnapshot,
];
export function createCustomPostSnapshotResolverServer(service) {
    return new TwirpServer({
        service,
        packageName: 'devvit.gateway',
        serviceName: 'CustomPostSnapshotResolver',
        methodList: CustomPostSnapshotResolverMethodList,
        matchRoute: matchCustomPostSnapshotResolverRoute,
    });
}
function matchCustomPostSnapshotResolverRoute(method, events) {
    switch (method) {
        case 'GetCustomPostSnapshot':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'GetCustomPostSnapshot' };
                await events.onMatch(ctx);
                return handleCustomPostSnapshotResolverGetCustomPostSnapshotRequest(ctx, service, data, interceptors);
            };
        default:
            events.onNotFound();
            const msg = `no handler found`;
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleCustomPostSnapshotResolverGetCustomPostSnapshotRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleCustomPostSnapshotResolverGetCustomPostSnapshotJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleCustomPostSnapshotResolverGetCustomPostSnapshotProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
async function handleCustomPostSnapshotResolverGetCustomPostSnapshotJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = CustomPostSnapshotRequest.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.GetCustomPostSnapshot(ctx, inputReq);
        });
    }
    else {
        response = await service.GetCustomPostSnapshot(ctx, request);
    }
    return JSON.stringify(CustomPostSnapshot.toJSON(response));
}
async function handleCustomPostSnapshotResolverGetCustomPostSnapshotProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = CustomPostSnapshotRequest.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.GetCustomPostSnapshot(ctx, inputReq);
        });
    }
    else {
        response = await service.GetCustomPostSnapshot(ctx, request);
    }
    return Buffer.from(CustomPostSnapshot.encode(response).finish());
}
