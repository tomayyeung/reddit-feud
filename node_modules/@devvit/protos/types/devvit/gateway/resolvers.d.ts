/**
 * #resolvers.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { Metadata } from "../../../lib/Types.js";
import { DevvitSubredditMetadata } from "../gql/subreddit_metadata.js";
export interface SubredditMetadataRequest {
    /** t5_ subreddit id */
    subreddit: string;
}
export declare const SubredditMetadataRequest: {
    $type: "devvit.gateway.SubredditMetadataRequest";
    encode(message: SubredditMetadataRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SubredditMetadataRequest;
    fromJSON(object: any): SubredditMetadataRequest;
    toJSON(message: SubredditMetadataRequest): unknown;
    create(base?: DeepPartial<SubredditMetadataRequest>): SubredditMetadataRequest;
    fromPartial(object: DeepPartial<SubredditMetadataRequest>): SubredditMetadataRequest;
};
export interface SubredditMetadataResolver {
    GetSubredditMetadata(request: SubredditMetadataRequest, metadata?: Metadata): Promise<DevvitSubredditMetadata>;
}
export declare const SubredditMetadataResolverServiceName = "devvit.gateway.SubredditMetadataResolver";
export declare class SubredditMetadataResolverClientImpl implements SubredditMetadataResolver {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    GetSubredditMetadata(request: SubredditMetadataRequest, metadata?: Metadata): Promise<DevvitSubredditMetadata>;
}
export type SubredditMetadataResolverDefinition = typeof SubredditMetadataResolverDefinition;
export declare const SubredditMetadataResolverDefinition: {
    readonly name: "SubredditMetadataResolver";
    readonly fullName: "devvit.gateway.SubredditMetadataResolver";
    readonly methods: {
        readonly getSubredditMetadata: {
            readonly name: "GetSubredditMetadata";
            readonly requestType: {
                $type: "devvit.gateway.SubredditMetadataRequest";
                encode(message: SubredditMetadataRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): SubredditMetadataRequest;
                fromJSON(object: any): SubredditMetadataRequest;
                toJSON(message: SubredditMetadataRequest): unknown;
                create(base?: DeepPartial<SubredditMetadataRequest>): SubredditMetadataRequest;
                fromPartial(object: DeepPartial<SubredditMetadataRequest>): SubredditMetadataRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.gql.DevvitSubredditMetadata";
                encode(message: DevvitSubredditMetadata, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): DevvitSubredditMetadata;
                fromJSON(object: any): DevvitSubredditMetadata;
                toJSON(message: DevvitSubredditMetadata): unknown;
                create(base?: {
                    installedRemoteApps?: {
                        actor?: {
                            name?: string;
                            owner?: string;
                            version?: string;
                        } | undefined;
                        code?: string;
                        sourceMap?: string | undefined;
                        hostname?: string;
                        provides?: {
                            fullName?: string;
                            methods?: {
                                fullName?: string;
                                name?: string;
                                requestStream?: boolean;
                                responseStream?: boolean;
                                requestType?: string;
                                responseType?: string;
                            }[];
                            name?: string;
                            version?: string;
                        }[];
                        uses?: any[];
                        buildInfo?: {
                            created?: Date | undefined;
                            dependencies?: {
                                [x: string]: string | undefined;
                            };
                            targetRuntime?: import("../runtime/bundle.js").TargetRuntime;
                        } | undefined;
                        assetsUrl?: string | undefined;
                        assets?: {
                            [x: string]: string | undefined;
                        };
                        webviewAssets?: {
                            [x: string]: string | undefined;
                        };
                        products?: {
                            [x: string]: string | undefined;
                        };
                    }[];
                    contextActions?: {
                        actorHostname?: string;
                        actions?: {
                            actions?: {
                                actionId?: string;
                                name?: string;
                                description?: string;
                                contexts?: {
                                    post?: boolean;
                                    comment?: boolean;
                                    subreddit?: boolean;
                                } | undefined;
                                users?: {
                                    moderator?: boolean;
                                    member?: boolean;
                                    loggedOut?: boolean;
                                } | undefined;
                                userInput?: {
                                    fields?: {
                                        fieldType?: import("../actor/user_configurable/user_configurable.js").ConfigFieldType;
                                        key?: string;
                                        prompt?: string;
                                        response?: string;
                                    }[];
                                } | undefined;
                                postFilters?: {
                                    currentApp?: boolean | undefined;
                                } | undefined;
                            }[];
                        } | undefined;
                    }[];
                    errors?: {
                        message?: string;
                    }[];
                    installedAppsInfo?: {
                        slug?: string;
                        name?: string;
                        ownerId?: string;
                    }[];
                } | undefined): DevvitSubredditMetadata;
                fromPartial(object: {
                    installedRemoteApps?: {
                        actor?: {
                            name?: string;
                            owner?: string;
                            version?: string;
                        } | undefined;
                        code?: string;
                        sourceMap?: string | undefined;
                        hostname?: string;
                        provides?: {
                            fullName?: string;
                            methods?: {
                                fullName?: string;
                                name?: string;
                                requestStream?: boolean;
                                responseStream?: boolean;
                                requestType?: string;
                                responseType?: string;
                            }[];
                            name?: string;
                            version?: string;
                        }[];
                        uses?: any[];
                        buildInfo?: {
                            created?: Date | undefined;
                            dependencies?: {
                                [x: string]: string | undefined;
                            };
                            targetRuntime?: import("../runtime/bundle.js").TargetRuntime;
                        } | undefined;
                        assetsUrl?: string | undefined;
                        assets?: {
                            [x: string]: string | undefined;
                        };
                        webviewAssets?: {
                            [x: string]: string | undefined;
                        };
                        products?: {
                            [x: string]: string | undefined;
                        };
                    }[];
                    contextActions?: {
                        actorHostname?: string;
                        actions?: {
                            actions?: {
                                actionId?: string;
                                name?: string;
                                description?: string;
                                contexts?: {
                                    post?: boolean;
                                    comment?: boolean;
                                    subreddit?: boolean;
                                } | undefined;
                                users?: {
                                    moderator?: boolean;
                                    member?: boolean;
                                    loggedOut?: boolean;
                                } | undefined;
                                userInput?: {
                                    fields?: {
                                        fieldType?: import("../actor/user_configurable/user_configurable.js").ConfigFieldType;
                                        key?: string;
                                        prompt?: string;
                                        response?: string;
                                    }[];
                                } | undefined;
                                postFilters?: {
                                    currentApp?: boolean | undefined;
                                } | undefined;
                            }[];
                        } | undefined;
                    }[];
                    errors?: {
                        message?: string;
                    }[];
                    installedAppsInfo?: {
                        slug?: string;
                        name?: string;
                        ownerId?: string;
                    }[];
                }): DevvitSubredditMetadata;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array, metadata?: Metadata): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=resolvers.d.ts.map