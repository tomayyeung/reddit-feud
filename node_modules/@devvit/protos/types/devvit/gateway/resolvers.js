/**
 * #resolvers.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { messageTypeRegistry } from "../../typeRegistry.js";
import { DevvitSubredditMetadata } from "../gql/subreddit_metadata.js";
function createBaseSubredditMetadataRequest() {
    return { subreddit: "" };
}
export const SubredditMetadataRequest = {
    $type: "devvit.gateway.SubredditMetadataRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.subreddit !== "") {
            writer.uint32(10).string(message.subreddit);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSubredditMetadataRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.subreddit = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { subreddit: isSet(object.subreddit) ? globalThis.String(object.subreddit) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.subreddit !== "") {
            obj.subreddit = message.subreddit;
        }
        return obj;
    },
    create(base) {
        return SubredditMetadataRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSubredditMetadataRequest();
        message.subreddit = object.subreddit ?? "";
        return message;
    },
};
messageTypeRegistry.set(SubredditMetadataRequest.$type, SubredditMetadataRequest);
export const SubredditMetadataResolverServiceName = "devvit.gateway.SubredditMetadataResolver";
export class SubredditMetadataResolverClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || SubredditMetadataResolverServiceName;
        this.rpc = rpc;
        this.GetSubredditMetadata = this.GetSubredditMetadata.bind(this);
    }
    GetSubredditMetadata(request, metadata) {
        const data = SubredditMetadataRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetSubredditMetadata", data, metadata);
        return promise.then((data) => DevvitSubredditMetadata.decode(_m0.Reader.create(data)));
    }
}
export const SubredditMetadataResolverDefinition = {
    name: "SubredditMetadataResolver",
    fullName: "devvit.gateway.SubredditMetadataResolver",
    methods: {
        getSubredditMetadata: {
            name: "GetSubredditMetadata",
            requestType: SubredditMetadataRequest,
            requestStream: false,
            responseType: DevvitSubredditMetadata,
            responseStream: false,
            options: {},
        },
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
