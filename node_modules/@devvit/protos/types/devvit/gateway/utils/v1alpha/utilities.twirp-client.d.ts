import { CacheContextActionsRequest, PurgeResult, AccessKeyPurgeRequest, InstallationsPurgeRequest, InstallationPurgeRequest, AppVersionPurgeRequest, AppPurgeRequest, AcceptInviteRequest, AcceptInviteResponse } from './utilities.js';
interface Rpc {
    request(service: string, method: string, contentType: 'application/json' | 'application/protobuf', data: object | Uint8Array): Promise<object | Uint8Array>;
}
export interface CacheUtilsClient {
    CacheContextActionsInRuntimeDb(request: CacheContextActionsRequest): Promise<PurgeResult>;
    PurgeAccessKey(request: AccessKeyPurgeRequest): Promise<PurgeResult>;
    PurgeInstallations(request: InstallationsPurgeRequest): Promise<PurgeResult>;
    PurgeInstallation(request: InstallationPurgeRequest): Promise<PurgeResult>;
    PurgeAppVersion(request: AppVersionPurgeRequest): Promise<PurgeResult>;
    PurgeApp(request: AppPurgeRequest): Promise<PurgeResult>;
}
export declare class CacheUtilsClientJSON implements CacheUtilsClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    CacheContextActionsInRuntimeDb(request: CacheContextActionsRequest): Promise<PurgeResult>;
    PurgeAccessKey(request: AccessKeyPurgeRequest): Promise<PurgeResult>;
    PurgeInstallations(request: InstallationsPurgeRequest): Promise<PurgeResult>;
    PurgeInstallation(request: InstallationPurgeRequest): Promise<PurgeResult>;
    PurgeAppVersion(request: AppVersionPurgeRequest): Promise<PurgeResult>;
    PurgeApp(request: AppPurgeRequest): Promise<PurgeResult>;
}
export declare class CacheUtilsClientProtobuf implements CacheUtilsClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    CacheContextActionsInRuntimeDb(request: CacheContextActionsRequest): Promise<PurgeResult>;
    PurgeAccessKey(request: AccessKeyPurgeRequest): Promise<PurgeResult>;
    PurgeInstallations(request: InstallationsPurgeRequest): Promise<PurgeResult>;
    PurgeInstallation(request: InstallationPurgeRequest): Promise<PurgeResult>;
    PurgeAppVersion(request: AppVersionPurgeRequest): Promise<PurgeResult>;
    PurgeApp(request: AppPurgeRequest): Promise<PurgeResult>;
}
interface Rpc {
    request(service: string, method: string, contentType: 'application/json' | 'application/protobuf', data: object | Uint8Array): Promise<object | Uint8Array>;
}
export interface ModInviteUtilsClient {
    AcceptInvite(request: AcceptInviteRequest): Promise<AcceptInviteResponse>;
}
export declare class ModInviteUtilsClientJSON implements ModInviteUtilsClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    AcceptInvite(request: AcceptInviteRequest): Promise<AcceptInviteResponse>;
}
export declare class ModInviteUtilsClientProtobuf implements ModInviteUtilsClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    AcceptInvite(request: AcceptInviteRequest): Promise<AcceptInviteResponse>;
}
export {};
//# sourceMappingURL=utilities.twirp-client.d.ts.map