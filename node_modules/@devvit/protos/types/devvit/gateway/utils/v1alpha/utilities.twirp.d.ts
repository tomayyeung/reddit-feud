/// <reference types="node" resolution-mode="require"/>
import { TwirpContext, TwirpServer } from 'twirp-ts';
import { CacheContextActionsRequest, PurgeResult, AccessKeyPurgeRequest, InstallationsPurgeRequest, InstallationPurgeRequest, AppVersionPurgeRequest, AppPurgeRequest, AcceptInviteRequest, AcceptInviteResponse } from './utilities.js';
export interface CacheUtilsTwirp<T extends TwirpContext = TwirpContext> {
    CacheContextActionsInRuntimeDb(ctx: T, request: CacheContextActionsRequest): Promise<PurgeResult>;
    PurgeAccessKey(ctx: T, request: AccessKeyPurgeRequest): Promise<PurgeResult>;
    PurgeInstallations(ctx: T, request: InstallationsPurgeRequest): Promise<PurgeResult>;
    PurgeInstallation(ctx: T, request: InstallationPurgeRequest): Promise<PurgeResult>;
    PurgeAppVersion(ctx: T, request: AppVersionPurgeRequest): Promise<PurgeResult>;
    PurgeApp(ctx: T, request: AppPurgeRequest): Promise<PurgeResult>;
}
export declare enum CacheUtilsMethod {
    CacheContextActionsInRuntimeDb = "CacheContextActionsInRuntimeDb",
    PurgeAccessKey = "PurgeAccessKey",
    PurgeInstallations = "PurgeInstallations",
    PurgeInstallation = "PurgeInstallation",
    PurgeAppVersion = "PurgeAppVersion",
    PurgeApp = "PurgeApp"
}
export declare const CacheUtilsMethodList: CacheUtilsMethod[];
export declare function createCacheUtilsServer<T extends TwirpContext = TwirpContext>(service: CacheUtilsTwirp<T>): TwirpServer<CacheUtilsTwirp<TwirpContext<import("http").IncomingMessage, import("http").ServerResponse<import("http").IncomingMessage>>>, T>;
export interface ModInviteUtilsTwirp<T extends TwirpContext = TwirpContext> {
    AcceptInvite(ctx: T, request: AcceptInviteRequest): Promise<AcceptInviteResponse>;
}
export declare enum ModInviteUtilsMethod {
    AcceptInvite = "AcceptInvite"
}
export declare const ModInviteUtilsMethodList: ModInviteUtilsMethod[];
export declare function createModInviteUtilsServer<T extends TwirpContext = TwirpContext>(service: ModInviteUtilsTwirp<T>): TwirpServer<ModInviteUtilsTwirp<TwirpContext<import("http").IncomingMessage, import("http").ServerResponse<import("http").IncomingMessage>>>, T>;
//# sourceMappingURL=utilities.twirp.d.ts.map