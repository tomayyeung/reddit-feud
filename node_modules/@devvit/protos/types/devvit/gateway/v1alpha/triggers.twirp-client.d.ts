import { TriggerEvent } from '../../triggers/v1alpha/triggers.js';
import { TriggerResponse, TriggerFanOutResponse, TriggerInvocation } from './triggers.js';
import { Empty } from '../../../google/protobuf/empty.js';
import { InstallationInfo } from '../../dev_portal/installation/installation.js';
interface Rpc {
    request(service: string, method: string, contentType: 'application/json' | 'application/protobuf', data: object | Uint8Array): Promise<object | Uint8Array>;
}
export interface TriggersClient {
    OnTrigger(request: TriggerEvent): Promise<TriggerResponse>;
    OnFanOut(request: TriggerEvent): Promise<TriggerFanOutResponse>;
    OnInvoke(request: TriggerInvocation): Promise<Empty>;
    OnInstall(request: InstallationInfo): Promise<Empty>;
    OnUninstall(request: InstallationInfo): Promise<Empty>;
    OnInstallChanged(request: InstallationInfo): Promise<Empty>;
}
export declare class TriggersClientJSON implements TriggersClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    OnTrigger(request: TriggerEvent): Promise<TriggerResponse>;
    OnFanOut(request: TriggerEvent): Promise<TriggerFanOutResponse>;
    OnInvoke(request: TriggerInvocation): Promise<Empty>;
    OnInstall(request: InstallationInfo): Promise<Empty>;
    OnUninstall(request: InstallationInfo): Promise<Empty>;
    OnInstallChanged(request: InstallationInfo): Promise<Empty>;
}
export declare class TriggersClientProtobuf implements TriggersClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    OnTrigger(request: TriggerEvent): Promise<TriggerResponse>;
    OnFanOut(request: TriggerEvent): Promise<TriggerFanOutResponse>;
    OnInvoke(request: TriggerInvocation): Promise<Empty>;
    OnInstall(request: InstallationInfo): Promise<Empty>;
    OnUninstall(request: InstallationInfo): Promise<Empty>;
    OnInstallChanged(request: InstallationInfo): Promise<Empty>;
}
export {};
//# sourceMappingURL=triggers.twirp-client.d.ts.map