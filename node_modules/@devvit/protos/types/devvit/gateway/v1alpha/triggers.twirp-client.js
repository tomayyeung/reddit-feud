import { TriggerEvent } from '../../triggers/v1alpha/triggers.js';
import { TriggerResponse, TriggerFanOutResponse, TriggerInvocation, } from './triggers.js';
import { Empty } from '../../../google/protobuf/empty.js';
import { InstallationInfo } from '../../dev_portal/installation/installation.js';
export class TriggersClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.OnTrigger.bind(this);
        this.OnFanOut.bind(this);
        this.OnInvoke.bind(this);
        this.OnInstall.bind(this);
        this.OnUninstall.bind(this);
        this.OnInstallChanged.bind(this);
    }
    OnTrigger(request) {
        const data = TriggerEvent.toJSON(request);
        const promise = this.rpc.request('devvit.gateway.v1alpha.Triggers', 'OnTrigger', 'application/json', data);
        return promise.then((data) => TriggerResponse.fromJSON(data));
    }
    OnFanOut(request) {
        const data = TriggerEvent.toJSON(request);
        const promise = this.rpc.request('devvit.gateway.v1alpha.Triggers', 'OnFanOut', 'application/json', data);
        return promise.then((data) => TriggerFanOutResponse.fromJSON(data));
    }
    OnInvoke(request) {
        const data = TriggerInvocation.toJSON(request);
        const promise = this.rpc.request('devvit.gateway.v1alpha.Triggers', 'OnInvoke', 'application/json', data);
        return promise.then((data) => Empty.fromJSON(data));
    }
    OnInstall(request) {
        const data = InstallationInfo.toJSON(request);
        const promise = this.rpc.request('devvit.gateway.v1alpha.Triggers', 'OnInstall', 'application/json', data);
        return promise.then((data) => Empty.fromJSON(data));
    }
    OnUninstall(request) {
        const data = InstallationInfo.toJSON(request);
        const promise = this.rpc.request('devvit.gateway.v1alpha.Triggers', 'OnUninstall', 'application/json', data);
        return promise.then((data) => Empty.fromJSON(data));
    }
    OnInstallChanged(request) {
        const data = InstallationInfo.toJSON(request);
        const promise = this.rpc.request('devvit.gateway.v1alpha.Triggers', 'OnInstallChanged', 'application/json', data);
        return promise.then((data) => Empty.fromJSON(data));
    }
}
export class TriggersClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.OnTrigger.bind(this);
        this.OnFanOut.bind(this);
        this.OnInvoke.bind(this);
        this.OnInstall.bind(this);
        this.OnUninstall.bind(this);
        this.OnInstallChanged.bind(this);
    }
    OnTrigger(request) {
        const data = TriggerEvent.encode(request).finish();
        const promise = this.rpc.request('devvit.gateway.v1alpha.Triggers', 'OnTrigger', 'application/protobuf', data);
        return promise.then((data) => TriggerResponse.decode(data));
    }
    OnFanOut(request) {
        const data = TriggerEvent.encode(request).finish();
        const promise = this.rpc.request('devvit.gateway.v1alpha.Triggers', 'OnFanOut', 'application/protobuf', data);
        return promise.then((data) => TriggerFanOutResponse.decode(data));
    }
    OnInvoke(request) {
        const data = TriggerInvocation.encode(request).finish();
        const promise = this.rpc.request('devvit.gateway.v1alpha.Triggers', 'OnInvoke', 'application/protobuf', data);
        return promise.then((data) => Empty.decode(data));
    }
    OnInstall(request) {
        const data = InstallationInfo.encode(request).finish();
        const promise = this.rpc.request('devvit.gateway.v1alpha.Triggers', 'OnInstall', 'application/protobuf', data);
        return promise.then((data) => Empty.decode(data));
    }
    OnUninstall(request) {
        const data = InstallationInfo.encode(request).finish();
        const promise = this.rpc.request('devvit.gateway.v1alpha.Triggers', 'OnUninstall', 'application/protobuf', data);
        return promise.then((data) => Empty.decode(data));
    }
    OnInstallChanged(request) {
        const data = InstallationInfo.encode(request).finish();
        const promise = this.rpc.request('devvit.gateway.v1alpha.Triggers', 'OnInstallChanged', 'application/protobuf', data);
        return promise.then((data) => Empty.decode(data));
    }
}
