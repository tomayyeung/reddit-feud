/// <reference types="node" resolution-mode="require"/>
import { TwirpContext, TwirpServer } from 'twirp-ts';
import { TriggerEvent } from '../../triggers/v1alpha/triggers.js';
import { TriggerResponse, TriggerFanOutResponse, TriggerInvocation } from './triggers.js';
import { Empty } from '../../../google/protobuf/empty.js';
import { InstallationInfo } from '../../dev_portal/installation/installation.js';
export interface TriggersTwirp<T extends TwirpContext = TwirpContext> {
    OnTrigger(ctx: T, request: TriggerEvent): Promise<TriggerResponse>;
    OnFanOut(ctx: T, request: TriggerEvent): Promise<TriggerFanOutResponse>;
    OnInvoke(ctx: T, request: TriggerInvocation): Promise<Empty>;
    OnInstall(ctx: T, request: InstallationInfo): Promise<Empty>;
    OnUninstall(ctx: T, request: InstallationInfo): Promise<Empty>;
    OnInstallChanged(ctx: T, request: InstallationInfo): Promise<Empty>;
}
export declare enum TriggersMethod {
    OnTrigger = "OnTrigger",
    OnFanOut = "OnFanOut",
    OnInvoke = "OnInvoke",
    OnInstall = "OnInstall",
    OnUninstall = "OnUninstall",
    OnInstallChanged = "OnInstallChanged"
}
export declare const TriggersMethodList: TriggersMethod[];
export declare function createTriggersServer<T extends TwirpContext = TwirpContext>(service: TriggersTwirp<T>): TwirpServer<TriggersTwirp<TwirpContext<import("http").IncomingMessage, import("http").ServerResponse<import("http").IncomingMessage>>>, T>;
//# sourceMappingURL=triggers.twirp.d.ts.map