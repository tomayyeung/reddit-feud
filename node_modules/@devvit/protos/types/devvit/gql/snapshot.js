/**
 * #snapshot.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { messageTypeRegistry } from "../../typeRegistry.js";
function createBaseCustomPostSnapshot() {
    return { snapshotId: "", renderConfig: "" };
}
export const CustomPostSnapshot = {
    $type: "devvit.gql.CustomPostSnapshot",
    encode(message, writer = _m0.Writer.create()) {
        if (message.snapshotId !== "") {
            writer.uint32(10).string(message.snapshotId);
        }
        if (message.renderConfig !== "") {
            writer.uint32(18).string(message.renderConfig);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCustomPostSnapshot();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.snapshotId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.renderConfig = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            snapshotId: isSet(object.snapshotId) ? globalThis.String(object.snapshotId) : "",
            renderConfig: isSet(object.renderConfig) ? globalThis.String(object.renderConfig) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.snapshotId !== "") {
            obj.snapshotId = message.snapshotId;
        }
        if (message.renderConfig !== "") {
            obj.renderConfig = message.renderConfig;
        }
        return obj;
    },
    create(base) {
        return CustomPostSnapshot.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCustomPostSnapshot();
        message.snapshotId = object.snapshotId ?? "";
        message.renderConfig = object.renderConfig ?? "";
        return message;
    },
};
messageTypeRegistry.set(CustomPostSnapshot.$type, CustomPostSnapshot);
function isSet(value) {
    return value !== null && value !== undefined;
}
