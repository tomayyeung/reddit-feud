/**
 * #subreddit_manifest.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
export declare enum DevvitContextType {
    POST = 0,
    COMMENT = 1,
    SUBREDDIT = 2,
    UNRECOGNIZED = -1
}
export declare function devvitContextTypeFromJSON(object: any): DevvitContextType;
export declare function devvitContextTypeToJSON(object: DevvitContextType): number;
export declare enum DevvitUserType {
    MODERATOR = 0,
    MEMBER = 1,
    LOGGED_OUT = 2,
    UNRECOGNIZED = -1
}
export declare function devvitUserTypeFromJSON(object: any): DevvitUserType;
export declare function devvitUserTypeToJSON(object: DevvitUserType): number;
export declare enum DevvitAppVisibility {
    PUBLIC = 0,
    PRIVATE = 1,
    UNLISTED = 2,
    UNRECOGNIZED = -1
}
export declare function devvitAppVisibilityFromJSON(object: any): DevvitAppVisibility;
export declare function devvitAppVisibilityToJSON(object: DevvitAppVisibility): number;
/** Type returned by GraphQL when requesting a Subreddit with the `devvit` field */
export interface DevvitSubredditManifest {
    /** List of all context actions available in the Subreddit */
    contextActions: DevvitContextActions[];
    /** List of all app installations in the Subreddit */
    installations: DevvitInstallation[];
}
export interface DevvitContextActions {
    actions: DevvitContextAction[];
    /** Installation hostname these context actions correspond to, e.g. '7c65897c-d3d1-4070-9db3-25402e093d37.sf-local-app.main.devvit-gateway.reddit.com' */
    hostname: string;
}
export interface DevvitContextAction {
    /** Which contexts this action should be displayed in */
    contextTypes: DevvitContextType[];
    /** Short, user-facing secondary text to describe what this action is going to do */
    description: string;
    id: string;
    /** Whether this action should be displayed for only app-created posts */
    isOnlyForAppCreatedPosts: boolean;
    /** User-visible name for the action */
    name: string;
    /** What kind of user can see this action */
    userTypes: DevvitUserType[];
}
export interface DevvitInstallation {
    /** Application config */
    app?: DevvitApp | undefined;
    /** Hostname to invoke this application at, e.g. '7c65897c-d3d1-4070-9db3-25402e093d37.sf-local-app.main.devvit-gateway.reddit.com' */
    hostname: string;
    /** Installation unique identifier as a UUID */
    id: string;
    /** Version of @devvit/public-api this app was built against, e.g. '0.10.24' or '0.11.0-next-2024-08-28-c7054fdb3.0' */
    publicApiVersion: string;
}
export interface DevvitApp {
    /** App unique identifier as a UUID */
    id: string;
    /** Human readable name for the app, e.g. 'My Devvit App' */
    name: string;
    /** Redditor who created this app. */
    owner?: Redditor | undefined;
    /** App slug, e.g. 'my-devvit-app' */
    slug: string;
    /** Developer-provided app version, e.g. '1.0.0' */
    version: string;
    /** Visibility of the app */
    visibility: DevvitAppVisibility;
}
/**
 * Reddit user type from GraphQL. This has more fields in GraphQL, but
 * this represents the ones we're populating from the GQL/Devvit integration.
 */
export interface Redditor {
    /** t2_* userid */
    id: string;
    displayName: string;
}
export declare const DevvitSubredditManifest: {
    $type: "devvit.gql.DevvitSubredditManifest";
    encode(message: DevvitSubredditManifest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DevvitSubredditManifest;
    fromJSON(object: any): DevvitSubredditManifest;
    toJSON(message: DevvitSubredditManifest): unknown;
    create(base?: DeepPartial<DevvitSubredditManifest>): DevvitSubredditManifest;
    fromPartial(object: DeepPartial<DevvitSubredditManifest>): DevvitSubredditManifest;
};
export declare const DevvitContextActions: {
    $type: "devvit.gql.DevvitContextActions";
    encode(message: DevvitContextActions, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DevvitContextActions;
    fromJSON(object: any): DevvitContextActions;
    toJSON(message: DevvitContextActions): unknown;
    create(base?: DeepPartial<DevvitContextActions>): DevvitContextActions;
    fromPartial(object: DeepPartial<DevvitContextActions>): DevvitContextActions;
};
export declare const DevvitContextAction: {
    $type: "devvit.gql.DevvitContextAction";
    encode(message: DevvitContextAction, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DevvitContextAction;
    fromJSON(object: any): DevvitContextAction;
    toJSON(message: DevvitContextAction): unknown;
    create(base?: DeepPartial<DevvitContextAction>): DevvitContextAction;
    fromPartial(object: DeepPartial<DevvitContextAction>): DevvitContextAction;
};
export declare const DevvitInstallation: {
    $type: "devvit.gql.DevvitInstallation";
    encode(message: DevvitInstallation, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DevvitInstallation;
    fromJSON(object: any): DevvitInstallation;
    toJSON(message: DevvitInstallation): unknown;
    create(base?: DeepPartial<DevvitInstallation>): DevvitInstallation;
    fromPartial(object: DeepPartial<DevvitInstallation>): DevvitInstallation;
};
export declare const DevvitApp: {
    $type: "devvit.gql.DevvitApp";
    encode(message: DevvitApp, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DevvitApp;
    fromJSON(object: any): DevvitApp;
    toJSON(message: DevvitApp): unknown;
    create(base?: DeepPartial<DevvitApp>): DevvitApp;
    fromPartial(object: DeepPartial<DevvitApp>): DevvitApp;
};
export declare const Redditor: {
    $type: "devvit.gql.Redditor";
    encode(message: Redditor, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Redditor;
    fromJSON(object: any): Redditor;
    toJSON(message: Redditor): unknown;
    create(base?: DeepPartial<Redditor>): Redditor;
    fromPartial(object: DeepPartial<Redditor>): Redditor;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=subreddit_manifest.d.ts.map