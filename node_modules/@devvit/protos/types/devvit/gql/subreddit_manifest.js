/**
 * #subreddit_manifest.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { messageTypeRegistry } from "../../typeRegistry.js";
export var DevvitContextType;
(function (DevvitContextType) {
    DevvitContextType[DevvitContextType["POST"] = 0] = "POST";
    DevvitContextType[DevvitContextType["COMMENT"] = 1] = "COMMENT";
    DevvitContextType[DevvitContextType["SUBREDDIT"] = 2] = "SUBREDDIT";
    DevvitContextType[DevvitContextType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(DevvitContextType || (DevvitContextType = {}));
export function devvitContextTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "POST":
            return DevvitContextType.POST;
        case 1:
        case "COMMENT":
            return DevvitContextType.COMMENT;
        case 2:
        case "SUBREDDIT":
            return DevvitContextType.SUBREDDIT;
        case -1:
        case "UNRECOGNIZED":
        default:
            return DevvitContextType.UNRECOGNIZED;
    }
}
export function devvitContextTypeToJSON(object) {
    switch (object) {
        case DevvitContextType.POST:
            return 0;
        case DevvitContextType.COMMENT:
            return 1;
        case DevvitContextType.SUBREDDIT:
            return 2;
        case DevvitContextType.UNRECOGNIZED:
        default:
            return -1;
    }
}
export var DevvitUserType;
(function (DevvitUserType) {
    DevvitUserType[DevvitUserType["MODERATOR"] = 0] = "MODERATOR";
    DevvitUserType[DevvitUserType["MEMBER"] = 1] = "MEMBER";
    DevvitUserType[DevvitUserType["LOGGED_OUT"] = 2] = "LOGGED_OUT";
    DevvitUserType[DevvitUserType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(DevvitUserType || (DevvitUserType = {}));
export function devvitUserTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "MODERATOR":
            return DevvitUserType.MODERATOR;
        case 1:
        case "MEMBER":
            return DevvitUserType.MEMBER;
        case 2:
        case "LOGGED_OUT":
            return DevvitUserType.LOGGED_OUT;
        case -1:
        case "UNRECOGNIZED":
        default:
            return DevvitUserType.UNRECOGNIZED;
    }
}
export function devvitUserTypeToJSON(object) {
    switch (object) {
        case DevvitUserType.MODERATOR:
            return 0;
        case DevvitUserType.MEMBER:
            return 1;
        case DevvitUserType.LOGGED_OUT:
            return 2;
        case DevvitUserType.UNRECOGNIZED:
        default:
            return -1;
    }
}
export var DevvitAppVisibility;
(function (DevvitAppVisibility) {
    DevvitAppVisibility[DevvitAppVisibility["PUBLIC"] = 0] = "PUBLIC";
    DevvitAppVisibility[DevvitAppVisibility["PRIVATE"] = 1] = "PRIVATE";
    DevvitAppVisibility[DevvitAppVisibility["UNLISTED"] = 2] = "UNLISTED";
    DevvitAppVisibility[DevvitAppVisibility["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(DevvitAppVisibility || (DevvitAppVisibility = {}));
export function devvitAppVisibilityFromJSON(object) {
    switch (object) {
        case 0:
        case "PUBLIC":
            return DevvitAppVisibility.PUBLIC;
        case 1:
        case "PRIVATE":
            return DevvitAppVisibility.PRIVATE;
        case 2:
        case "UNLISTED":
            return DevvitAppVisibility.UNLISTED;
        case -1:
        case "UNRECOGNIZED":
        default:
            return DevvitAppVisibility.UNRECOGNIZED;
    }
}
export function devvitAppVisibilityToJSON(object) {
    switch (object) {
        case DevvitAppVisibility.PUBLIC:
            return 0;
        case DevvitAppVisibility.PRIVATE:
            return 1;
        case DevvitAppVisibility.UNLISTED:
            return 2;
        case DevvitAppVisibility.UNRECOGNIZED:
        default:
            return -1;
    }
}
function createBaseDevvitSubredditManifest() {
    return { contextActions: [], installations: [] };
}
export const DevvitSubredditManifest = {
    $type: "devvit.gql.DevvitSubredditManifest",
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.contextActions) {
            DevvitContextActions.encode(v, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.installations) {
            DevvitInstallation.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDevvitSubredditManifest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.contextActions.push(DevvitContextActions.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.installations.push(DevvitInstallation.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            contextActions: globalThis.Array.isArray(object?.contextActions)
                ? object.contextActions.map((e) => DevvitContextActions.fromJSON(e))
                : [],
            installations: globalThis.Array.isArray(object?.installations)
                ? object.installations.map((e) => DevvitInstallation.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.contextActions?.length) {
            obj.contextActions = message.contextActions.map((e) => DevvitContextActions.toJSON(e));
        }
        if (message.installations?.length) {
            obj.installations = message.installations.map((e) => DevvitInstallation.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return DevvitSubredditManifest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDevvitSubredditManifest();
        message.contextActions = object.contextActions?.map((e) => DevvitContextActions.fromPartial(e)) || [];
        message.installations = object.installations?.map((e) => DevvitInstallation.fromPartial(e)) || [];
        return message;
    },
};
messageTypeRegistry.set(DevvitSubredditManifest.$type, DevvitSubredditManifest);
function createBaseDevvitContextActions() {
    return { actions: [], hostname: "" };
}
export const DevvitContextActions = {
    $type: "devvit.gql.DevvitContextActions",
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.actions) {
            DevvitContextAction.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.hostname !== "") {
            writer.uint32(18).string(message.hostname);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDevvitContextActions();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.actions.push(DevvitContextAction.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.hostname = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            actions: globalThis.Array.isArray(object?.actions)
                ? object.actions.map((e) => DevvitContextAction.fromJSON(e))
                : [],
            hostname: isSet(object.hostname) ? globalThis.String(object.hostname) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.actions?.length) {
            obj.actions = message.actions.map((e) => DevvitContextAction.toJSON(e));
        }
        if (message.hostname !== "") {
            obj.hostname = message.hostname;
        }
        return obj;
    },
    create(base) {
        return DevvitContextActions.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDevvitContextActions();
        message.actions = object.actions?.map((e) => DevvitContextAction.fromPartial(e)) || [];
        message.hostname = object.hostname ?? "";
        return message;
    },
};
messageTypeRegistry.set(DevvitContextActions.$type, DevvitContextActions);
function createBaseDevvitContextAction() {
    return { contextTypes: [], description: "", id: "", isOnlyForAppCreatedPosts: false, name: "", userTypes: [] };
}
export const DevvitContextAction = {
    $type: "devvit.gql.DevvitContextAction",
    encode(message, writer = _m0.Writer.create()) {
        writer.uint32(10).fork();
        for (const v of message.contextTypes) {
            writer.int32(v);
        }
        writer.ldelim();
        if (message.description !== "") {
            writer.uint32(18).string(message.description);
        }
        if (message.id !== "") {
            writer.uint32(26).string(message.id);
        }
        if (message.isOnlyForAppCreatedPosts !== false) {
            writer.uint32(32).bool(message.isOnlyForAppCreatedPosts);
        }
        if (message.name !== "") {
            writer.uint32(42).string(message.name);
        }
        writer.uint32(50).fork();
        for (const v of message.userTypes) {
            writer.int32(v);
        }
        writer.ldelim();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDevvitContextAction();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag === 8) {
                        message.contextTypes.push(reader.int32());
                        continue;
                    }
                    if (tag === 10) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.contextTypes.push(reader.int32());
                        }
                        continue;
                    }
                    break;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.isOnlyForAppCreatedPosts = reader.bool();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 6:
                    if (tag === 48) {
                        message.userTypes.push(reader.int32());
                        continue;
                    }
                    if (tag === 50) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.userTypes.push(reader.int32());
                        }
                        continue;
                    }
                    break;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            contextTypes: globalThis.Array.isArray(object?.contextTypes)
                ? object.contextTypes.map((e) => devvitContextTypeFromJSON(e))
                : [],
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            isOnlyForAppCreatedPosts: isSet(object.isOnlyForAppCreatedPosts)
                ? globalThis.Boolean(object.isOnlyForAppCreatedPosts)
                : false,
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            userTypes: globalThis.Array.isArray(object?.userTypes)
                ? object.userTypes.map((e) => devvitUserTypeFromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.contextTypes?.length) {
            obj.contextTypes = message.contextTypes.map((e) => devvitContextTypeToJSON(e));
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.isOnlyForAppCreatedPosts !== false) {
            obj.isOnlyForAppCreatedPosts = message.isOnlyForAppCreatedPosts;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.userTypes?.length) {
            obj.userTypes = message.userTypes.map((e) => devvitUserTypeToJSON(e));
        }
        return obj;
    },
    create(base) {
        return DevvitContextAction.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDevvitContextAction();
        message.contextTypes = object.contextTypes?.map((e) => e) || [];
        message.description = object.description ?? "";
        message.id = object.id ?? "";
        message.isOnlyForAppCreatedPosts = object.isOnlyForAppCreatedPosts ?? false;
        message.name = object.name ?? "";
        message.userTypes = object.userTypes?.map((e) => e) || [];
        return message;
    },
};
messageTypeRegistry.set(DevvitContextAction.$type, DevvitContextAction);
function createBaseDevvitInstallation() {
    return { app: undefined, hostname: "", id: "", publicApiVersion: "" };
}
export const DevvitInstallation = {
    $type: "devvit.gql.DevvitInstallation",
    encode(message, writer = _m0.Writer.create()) {
        if (message.app !== undefined) {
            DevvitApp.encode(message.app, writer.uint32(10).fork()).ldelim();
        }
        if (message.hostname !== "") {
            writer.uint32(18).string(message.hostname);
        }
        if (message.id !== "") {
            writer.uint32(26).string(message.id);
        }
        if (message.publicApiVersion !== "") {
            writer.uint32(34).string(message.publicApiVersion);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDevvitInstallation();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.app = DevvitApp.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.hostname = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.publicApiVersion = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            app: isSet(object.app) ? DevvitApp.fromJSON(object.app) : undefined,
            hostname: isSet(object.hostname) ? globalThis.String(object.hostname) : "",
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            publicApiVersion: isSet(object.publicApiVersion) ? globalThis.String(object.publicApiVersion) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.app !== undefined) {
            obj.app = DevvitApp.toJSON(message.app);
        }
        if (message.hostname !== "") {
            obj.hostname = message.hostname;
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.publicApiVersion !== "") {
            obj.publicApiVersion = message.publicApiVersion;
        }
        return obj;
    },
    create(base) {
        return DevvitInstallation.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDevvitInstallation();
        message.app = (object.app !== undefined && object.app !== null) ? DevvitApp.fromPartial(object.app) : undefined;
        message.hostname = object.hostname ?? "";
        message.id = object.id ?? "";
        message.publicApiVersion = object.publicApiVersion ?? "";
        return message;
    },
};
messageTypeRegistry.set(DevvitInstallation.$type, DevvitInstallation);
function createBaseDevvitApp() {
    return { id: "", name: "", owner: undefined, slug: "", version: "", visibility: 0 };
}
export const DevvitApp = {
    $type: "devvit.gql.DevvitApp",
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.owner !== undefined) {
            Redditor.encode(message.owner, writer.uint32(26).fork()).ldelim();
        }
        if (message.slug !== "") {
            writer.uint32(34).string(message.slug);
        }
        if (message.version !== "") {
            writer.uint32(42).string(message.version);
        }
        if (message.visibility !== 0) {
            writer.uint32(48).int32(message.visibility);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDevvitApp();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.owner = Redditor.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.slug = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.version = reader.string();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.visibility = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            owner: isSet(object.owner) ? Redditor.fromJSON(object.owner) : undefined,
            slug: isSet(object.slug) ? globalThis.String(object.slug) : "",
            version: isSet(object.version) ? globalThis.String(object.version) : "",
            visibility: isSet(object.visibility) ? devvitAppVisibilityFromJSON(object.visibility) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.owner !== undefined) {
            obj.owner = Redditor.toJSON(message.owner);
        }
        if (message.slug !== "") {
            obj.slug = message.slug;
        }
        if (message.version !== "") {
            obj.version = message.version;
        }
        if (message.visibility !== 0) {
            obj.visibility = devvitAppVisibilityToJSON(message.visibility);
        }
        return obj;
    },
    create(base) {
        return DevvitApp.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDevvitApp();
        message.id = object.id ?? "";
        message.name = object.name ?? "";
        message.owner = (object.owner !== undefined && object.owner !== null)
            ? Redditor.fromPartial(object.owner)
            : undefined;
        message.slug = object.slug ?? "";
        message.version = object.version ?? "";
        message.visibility = object.visibility ?? 0;
        return message;
    },
};
messageTypeRegistry.set(DevvitApp.$type, DevvitApp);
function createBaseRedditor() {
    return { id: "", displayName: "" };
}
export const Redditor = {
    $type: "devvit.gql.Redditor",
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.displayName !== "") {
            writer.uint32(18).string(message.displayName);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRedditor();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.displayName = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.displayName !== "") {
            obj.displayName = message.displayName;
        }
        return obj;
    },
    create(base) {
        return Redditor.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRedditor();
        message.id = object.id ?? "";
        message.displayName = object.displayName ?? "";
        return message;
    },
};
messageTypeRegistry.set(Redditor.$type, Redditor);
function isSet(value) {
    return value !== null && value !== undefined;
}
