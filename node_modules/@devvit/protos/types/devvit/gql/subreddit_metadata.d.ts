/**
 * #subreddit_metadata.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { ContextActionList } from "../actor/reddit/context_action.js";
import { LinkedBundle } from "../runtime/bundle.js";
/** @deprecated */
export interface SubredditContextActions {
    /** LinkedBundle.hostname */
    actorHostname: string;
    /** Return value from ContextAction.GetActions() */
    actions?: ContextActionList | undefined;
}
/**
 * The subreddit manifest. Nothing to do with gRPC-web or any other kind of
 * metadata.
 * base64-encoded in Subreddit.devPlatformMetadata
 * ([ex](https://gql.reddit.com/?queryGz=eJw1y7EKg0AMANBfKTfpct07dnOoCH5AiU2kES8JXizIcf9eF5e3vZL3aSNE9k5mfR49JGrk5BGyk31JlPFt%2BxTaEmNUuY1XKEi%2FYQWfdUsvckBwaBIn8sPODmYrf8BZ5b5kldDWWv89vSpI&operationName=)).
 *
 * @deprecated
 */
export interface DevvitSubredditMetadata {
    /** List of all installed apps for the loaded Subreddit */
    installedRemoteApps: LinkedBundle[];
    contextActions: SubredditContextActions[];
    errors: ErrorMessage[];
    installedAppsInfo: DevvitSubredditMetadata_AppInfo[];
}
export interface DevvitSubredditMetadata_AppInfo {
    /** Unique identifier */
    slug: string;
    /** Display name */
    name: string;
    /** Owner user ID. Eg, `t2_1w72`. */
    ownerId: string;
}
export interface ErrorMessage {
    message: string;
}
export declare const SubredditContextActions: {
    $type: "devvit.gql.SubredditContextActions";
    encode(message: SubredditContextActions, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SubredditContextActions;
    fromJSON(object: any): SubredditContextActions;
    toJSON(message: SubredditContextActions): unknown;
    create(base?: DeepPartial<SubredditContextActions>): SubredditContextActions;
    fromPartial(object: DeepPartial<SubredditContextActions>): SubredditContextActions;
};
export declare const DevvitSubredditMetadata: {
    $type: "devvit.gql.DevvitSubredditMetadata";
    encode(message: DevvitSubredditMetadata, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DevvitSubredditMetadata;
    fromJSON(object: any): DevvitSubredditMetadata;
    toJSON(message: DevvitSubredditMetadata): unknown;
    create(base?: DeepPartial<DevvitSubredditMetadata>): DevvitSubredditMetadata;
    fromPartial(object: DeepPartial<DevvitSubredditMetadata>): DevvitSubredditMetadata;
};
export declare const DevvitSubredditMetadata_AppInfo: {
    $type: "devvit.gql.DevvitSubredditMetadata.AppInfo";
    encode(message: DevvitSubredditMetadata_AppInfo, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DevvitSubredditMetadata_AppInfo;
    fromJSON(object: any): DevvitSubredditMetadata_AppInfo;
    toJSON(message: DevvitSubredditMetadata_AppInfo): unknown;
    create(base?: DeepPartial<DevvitSubredditMetadata_AppInfo>): DevvitSubredditMetadata_AppInfo;
    fromPartial(object: DeepPartial<DevvitSubredditMetadata_AppInfo>): DevvitSubredditMetadata_AppInfo;
};
export declare const ErrorMessage: {
    $type: "devvit.gql.ErrorMessage";
    encode(message: ErrorMessage, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ErrorMessage;
    fromJSON(object: any): ErrorMessage;
    toJSON(message: ErrorMessage): unknown;
    create(base?: DeepPartial<ErrorMessage>): ErrorMessage;
    fromPartial(object: DeepPartial<ErrorMessage>): ErrorMessage;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=subreddit_metadata.d.ts.map