/**
 * #subreddit_metadata.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { messageTypeRegistry } from "../../typeRegistry.js";
import { ContextActionList } from "../actor/reddit/context_action.js";
import { LinkedBundle } from "../runtime/bundle.js";
function createBaseSubredditContextActions() {
    return { actorHostname: "", actions: undefined };
}
export const SubredditContextActions = {
    $type: "devvit.gql.SubredditContextActions",
    encode(message, writer = _m0.Writer.create()) {
        if (message.actorHostname !== "") {
            writer.uint32(10).string(message.actorHostname);
        }
        if (message.actions !== undefined) {
            ContextActionList.encode(message.actions, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSubredditContextActions();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.actorHostname = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.actions = ContextActionList.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            actorHostname: isSet(object.actorHostname) ? globalThis.String(object.actorHostname) : "",
            actions: isSet(object.actions) ? ContextActionList.fromJSON(object.actions) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.actorHostname !== "") {
            obj.actorHostname = message.actorHostname;
        }
        if (message.actions !== undefined) {
            obj.actions = ContextActionList.toJSON(message.actions);
        }
        return obj;
    },
    create(base) {
        return SubredditContextActions.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSubredditContextActions();
        message.actorHostname = object.actorHostname ?? "";
        message.actions = (object.actions !== undefined && object.actions !== null)
            ? ContextActionList.fromPartial(object.actions)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set(SubredditContextActions.$type, SubredditContextActions);
function createBaseDevvitSubredditMetadata() {
    return { installedRemoteApps: [], contextActions: [], errors: [], installedAppsInfo: [] };
}
export const DevvitSubredditMetadata = {
    $type: "devvit.gql.DevvitSubredditMetadata",
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.installedRemoteApps) {
            LinkedBundle.encode(v, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.contextActions) {
            SubredditContextActions.encode(v, writer.uint32(18).fork()).ldelim();
        }
        for (const v of message.errors) {
            ErrorMessage.encode(v, writer.uint32(26).fork()).ldelim();
        }
        for (const v of message.installedAppsInfo) {
            DevvitSubredditMetadata_AppInfo.encode(v, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDevvitSubredditMetadata();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.installedRemoteApps.push(LinkedBundle.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.contextActions.push(SubredditContextActions.decode(reader, reader.uint32()));
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.errors.push(ErrorMessage.decode(reader, reader.uint32()));
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.installedAppsInfo.push(DevvitSubredditMetadata_AppInfo.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            installedRemoteApps: globalThis.Array.isArray(object?.installedRemoteApps)
                ? object.installedRemoteApps.map((e) => LinkedBundle.fromJSON(e))
                : [],
            contextActions: globalThis.Array.isArray(object?.contextActions)
                ? object.contextActions.map((e) => SubredditContextActions.fromJSON(e))
                : [],
            errors: globalThis.Array.isArray(object?.errors) ? object.errors.map((e) => ErrorMessage.fromJSON(e)) : [],
            installedAppsInfo: globalThis.Array.isArray(object?.installedAppsInfo)
                ? object.installedAppsInfo.map((e) => DevvitSubredditMetadata_AppInfo.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.installedRemoteApps?.length) {
            obj.installedRemoteApps = message.installedRemoteApps.map((e) => LinkedBundle.toJSON(e));
        }
        if (message.contextActions?.length) {
            obj.contextActions = message.contextActions.map((e) => SubredditContextActions.toJSON(e));
        }
        if (message.errors?.length) {
            obj.errors = message.errors.map((e) => ErrorMessage.toJSON(e));
        }
        if (message.installedAppsInfo?.length) {
            obj.installedAppsInfo = message.installedAppsInfo.map((e) => DevvitSubredditMetadata_AppInfo.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return DevvitSubredditMetadata.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDevvitSubredditMetadata();
        message.installedRemoteApps = object.installedRemoteApps?.map((e) => LinkedBundle.fromPartial(e)) || [];
        message.contextActions = object.contextActions?.map((e) => SubredditContextActions.fromPartial(e)) || [];
        message.errors = object.errors?.map((e) => ErrorMessage.fromPartial(e)) || [];
        message.installedAppsInfo = object.installedAppsInfo?.map((e) => DevvitSubredditMetadata_AppInfo.fromPartial(e)) ||
            [];
        return message;
    },
};
messageTypeRegistry.set(DevvitSubredditMetadata.$type, DevvitSubredditMetadata);
function createBaseDevvitSubredditMetadata_AppInfo() {
    return { slug: "", name: "", ownerId: "" };
}
export const DevvitSubredditMetadata_AppInfo = {
    $type: "devvit.gql.DevvitSubredditMetadata.AppInfo",
    encode(message, writer = _m0.Writer.create()) {
        if (message.slug !== "") {
            writer.uint32(10).string(message.slug);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.ownerId !== "") {
            writer.uint32(34).string(message.ownerId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDevvitSubredditMetadata_AppInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.slug = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.ownerId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            slug: isSet(object.slug) ? globalThis.String(object.slug) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            ownerId: isSet(object.ownerId) ? globalThis.String(object.ownerId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.slug !== "") {
            obj.slug = message.slug;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.ownerId !== "") {
            obj.ownerId = message.ownerId;
        }
        return obj;
    },
    create(base) {
        return DevvitSubredditMetadata_AppInfo.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDevvitSubredditMetadata_AppInfo();
        message.slug = object.slug ?? "";
        message.name = object.name ?? "";
        message.ownerId = object.ownerId ?? "";
        return message;
    },
};
messageTypeRegistry.set(DevvitSubredditMetadata_AppInfo.$type, DevvitSubredditMetadata_AppInfo);
function createBaseErrorMessage() {
    return { message: "" };
}
export const ErrorMessage = {
    $type: "devvit.gql.ErrorMessage",
    encode(message, writer = _m0.Writer.create()) {
        if (message.message !== "") {
            writer.uint32(10).string(message.message);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseErrorMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { message: isSet(object.message) ? globalThis.String(object.message) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.message !== "") {
            obj.message = message.message;
        }
        return obj;
    },
    create(base) {
        return ErrorMessage.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseErrorMessage();
        message.message = object.message ?? "";
        return message;
    },
};
messageTypeRegistry.set(ErrorMessage.$type, ErrorMessage);
function isSet(value) {
    return value !== null && value !== undefined;
}
