/**
 * #product.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { Environment } from "./common.js";
export declare enum Currency {
    CURRENCY_UNSPECIFIED = 0,
    /** GOLD - Reddit internal currency */
    GOLD = 200,
    UNRECOGNIZED = -1
}
export declare function currencyFromJSON(object: any): Currency;
export declare function currencyToJSON(object: Currency): number;
export declare enum AccountingType {
    ACCOUNTING_TYPE_UNSPECIFIED = 0,
    /** ACCOUNTING_TYPE_INSTANT - Used immediately as it is purchased. */
    ACCOUNTING_TYPE_INSTANT = 1,
    /** ACCOUNTING_TYPE_DURABLE - It grants access indefinitely. */
    ACCOUNTING_TYPE_DURABLE = 2,
    /** ACCOUNTING_TYPE_CONSUMABLE - User can use the good at any time in the future but it is gone once it's used. */
    ACCOUNTING_TYPE_CONSUMABLE = 3,
    /** ACCOUNTING_TYPE_VALID_FOR_1D - Consumed over a fixed period of time. */
    ACCOUNTING_TYPE_VALID_FOR_1D = 4,
    ACCOUNTING_TYPE_VALID_FOR_7D = 5,
    ACCOUNTING_TYPE_VALID_FOR_30D = 6,
    ACCOUNTING_TYPE_VALID_FOR_1Y = 7,
    UNRECOGNIZED = -1
}
export declare function accountingTypeFromJSON(object: any): AccountingType;
export declare function accountingTypeToJSON(object: AccountingType): number;
/** Mapping from payments API Product : https://github.snooguts.net/reddit/reddit-service-pay-api/blob/main/api/protos/reddit/xpaymentsplatform/payapi/v1/common.proto#L7 */
export interface Product {
    /** the developer defined identifer for the product */
    sku: string;
    /** Human-readable name of the product */
    name: string;
    /** the price of the product */
    price?: ProductPrice | undefined;
    /** whether or not this product is defined for sandbox or production purchases */
    environment: Environment;
    /** Human-readable description of the product */
    description: string;
    /** the accounting treatment of the product */
    accountingType: AccountingType;
    /** tags associated with the product */
    productMetadata: {
        [key: string]: string;
    };
    /**
     * images associated with the product. the key is the image type and the value is the asset path (without asset/ prefix)
     * currently only the "icon" key is supported
     */
    images: {
        [key: string]: string;
    };
}
export interface Product_ProductMetadataEntry {
    key: string;
    value: string;
}
export interface Product_ImagesEntry {
    key: string;
    value: string;
}
export interface ProductPrice {
    amount: number;
    currency: Currency;
}
export declare const Product: {
    $type: "devvit.payments.v1alpha.Product";
    encode(message: Product, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Product;
    fromJSON(object: any): Product;
    toJSON(message: Product): unknown;
    create(base?: DeepPartial<Product>): Product;
    fromPartial(object: DeepPartial<Product>): Product;
};
export declare const Product_ProductMetadataEntry: {
    $type: "devvit.payments.v1alpha.Product.ProductMetadataEntry";
    encode(message: Product_ProductMetadataEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Product_ProductMetadataEntry;
    fromJSON(object: any): Product_ProductMetadataEntry;
    toJSON(message: Product_ProductMetadataEntry): unknown;
    create(base?: DeepPartial<Product_ProductMetadataEntry>): Product_ProductMetadataEntry;
    fromPartial(object: DeepPartial<Product_ProductMetadataEntry>): Product_ProductMetadataEntry;
};
export declare const Product_ImagesEntry: {
    $type: "devvit.payments.v1alpha.Product.ImagesEntry";
    encode(message: Product_ImagesEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Product_ImagesEntry;
    fromJSON(object: any): Product_ImagesEntry;
    toJSON(message: Product_ImagesEntry): unknown;
    create(base?: DeepPartial<Product_ImagesEntry>): Product_ImagesEntry;
    fromPartial(object: DeepPartial<Product_ImagesEntry>): Product_ImagesEntry;
};
export declare const ProductPrice: {
    $type: "devvit.payments.v1alpha.ProductPrice";
    encode(message: ProductPrice, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ProductPrice;
    fromJSON(object: any): ProductPrice;
    toJSON(message: ProductPrice): unknown;
    create(base?: DeepPartial<ProductPrice>): ProductPrice;
    fromPartial(object: DeepPartial<ProductPrice>): ProductPrice;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=product.d.ts.map