/**
 * #assetresolver.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { Metadata } from "../../../../lib/Types.js";
export interface GetAssetURLRequest {
    /** The path to the asset relative to the /assets directory of the project */
    path: string;
    /** If true, look for a webview asset instead of a standard asset */
    webview?: boolean | undefined;
}
export interface GetAssetURLResponse {
    /**
     * The full public URL to the asset (including the protocol); empty string if not found.
     * Example: https://i.redd.it/asdf.png
     */
    url: string;
    /**
     * Whether or not the asset is in the linked bundle. If false, the value in url should
     * be ignored. (It should also be the empty string.)
     */
    found: boolean;
}
export interface GetMultipleAssetURLsRequest {
    /**
     * The paths to the assets relative to the /assets directory of the project
     * could be a mix of file paths, and glob patterns
     */
    paths: string[];
}
export interface GetMultipleAssetURLsResponse {
    /**
     * A map indexed by the paths to the assets relative to the /assets directory of the project
     * whose values are the full public URLs to the assets (including the protocol)
     */
    urls: {
        [key: string]: GetMultipleAssetURLsResponse_GlobResult;
    };
}
export interface GetMultipleAssetURLsResponse_GlobResult {
    /**
     * Whether or not the asset is in the linked bundle. If false, the paths value below should
     * be ignored. (It should also be an empty array.)
     */
    found: boolean;
    /**
     * The full public URL to the asset (including the protocol); empty string if not found.
     * For studio compatability reasons, this is an array.
     * Example: ["https://i.redd.it/asdf.png"]
     */
    paths: string[];
}
export interface GetMultipleAssetURLsResponse_UrlsEntry {
    key: string;
    value?: GetMultipleAssetURLsResponse_GlobResult | undefined;
}
export declare const GetAssetURLRequest: {
    $type: "devvit.plugin.assetresolver.GetAssetURLRequest";
    encode(message: GetAssetURLRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetAssetURLRequest;
    fromJSON(object: any): GetAssetURLRequest;
    toJSON(message: GetAssetURLRequest): unknown;
    create(base?: DeepPartial<GetAssetURLRequest>): GetAssetURLRequest;
    fromPartial(object: DeepPartial<GetAssetURLRequest>): GetAssetURLRequest;
};
export declare const GetAssetURLResponse: {
    $type: "devvit.plugin.assetresolver.GetAssetURLResponse";
    encode(message: GetAssetURLResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetAssetURLResponse;
    fromJSON(object: any): GetAssetURLResponse;
    toJSON(message: GetAssetURLResponse): unknown;
    create(base?: DeepPartial<GetAssetURLResponse>): GetAssetURLResponse;
    fromPartial(object: DeepPartial<GetAssetURLResponse>): GetAssetURLResponse;
};
export declare const GetMultipleAssetURLsRequest: {
    $type: "devvit.plugin.assetresolver.GetMultipleAssetURLsRequest";
    encode(message: GetMultipleAssetURLsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetMultipleAssetURLsRequest;
    fromJSON(object: any): GetMultipleAssetURLsRequest;
    toJSON(message: GetMultipleAssetURLsRequest): unknown;
    create(base?: DeepPartial<GetMultipleAssetURLsRequest>): GetMultipleAssetURLsRequest;
    fromPartial(object: DeepPartial<GetMultipleAssetURLsRequest>): GetMultipleAssetURLsRequest;
};
export declare const GetMultipleAssetURLsResponse: {
    $type: "devvit.plugin.assetresolver.GetMultipleAssetURLsResponse";
    encode(message: GetMultipleAssetURLsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetMultipleAssetURLsResponse;
    fromJSON(object: any): GetMultipleAssetURLsResponse;
    toJSON(message: GetMultipleAssetURLsResponse): unknown;
    create(base?: DeepPartial<GetMultipleAssetURLsResponse>): GetMultipleAssetURLsResponse;
    fromPartial(object: DeepPartial<GetMultipleAssetURLsResponse>): GetMultipleAssetURLsResponse;
};
export declare const GetMultipleAssetURLsResponse_GlobResult: {
    $type: "devvit.plugin.assetresolver.GetMultipleAssetURLsResponse.GlobResult";
    encode(message: GetMultipleAssetURLsResponse_GlobResult, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetMultipleAssetURLsResponse_GlobResult;
    fromJSON(object: any): GetMultipleAssetURLsResponse_GlobResult;
    toJSON(message: GetMultipleAssetURLsResponse_GlobResult): unknown;
    create(base?: DeepPartial<GetMultipleAssetURLsResponse_GlobResult>): GetMultipleAssetURLsResponse_GlobResult;
    fromPartial(object: DeepPartial<GetMultipleAssetURLsResponse_GlobResult>): GetMultipleAssetURLsResponse_GlobResult;
};
export declare const GetMultipleAssetURLsResponse_UrlsEntry: {
    $type: "devvit.plugin.assetresolver.GetMultipleAssetURLsResponse.UrlsEntry";
    encode(message: GetMultipleAssetURLsResponse_UrlsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetMultipleAssetURLsResponse_UrlsEntry;
    fromJSON(object: any): GetMultipleAssetURLsResponse_UrlsEntry;
    toJSON(message: GetMultipleAssetURLsResponse_UrlsEntry): unknown;
    create(base?: DeepPartial<GetMultipleAssetURLsResponse_UrlsEntry>): GetMultipleAssetURLsResponse_UrlsEntry;
    fromPartial(object: DeepPartial<GetMultipleAssetURLsResponse_UrlsEntry>): GetMultipleAssetURLsResponse_UrlsEntry;
};
export interface AssetResolver {
    /** Gets a public URL for a given asset */
    GetAssetURL(request: GetAssetURLRequest, metadata?: Metadata): Promise<GetAssetURLResponse>;
    /** Gets the public URLs for multiple assets at the same time */
    GetAssetURLs(request: GetMultipleAssetURLsRequest, metadata?: Metadata): Promise<GetMultipleAssetURLsResponse>;
}
export declare const AssetResolverServiceName = "devvit.plugin.assetresolver.AssetResolver";
export declare class AssetResolverClientImpl implements AssetResolver {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    GetAssetURL(request: GetAssetURLRequest, metadata?: Metadata): Promise<GetAssetURLResponse>;
    GetAssetURLs(request: GetMultipleAssetURLsRequest, metadata?: Metadata): Promise<GetMultipleAssetURLsResponse>;
}
export type AssetResolverDefinition = typeof AssetResolverDefinition;
export declare const AssetResolverDefinition: {
    readonly name: "AssetResolver";
    readonly fullName: "devvit.plugin.assetresolver.AssetResolver";
    readonly methods: {
        /** Gets a public URL for a given asset */
        readonly getAssetURL: {
            readonly name: "GetAssetURL";
            readonly requestType: {
                $type: "devvit.plugin.assetresolver.GetAssetURLRequest";
                encode(message: GetAssetURLRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): GetAssetURLRequest;
                fromJSON(object: any): GetAssetURLRequest;
                toJSON(message: GetAssetURLRequest): unknown;
                create(base?: DeepPartial<GetAssetURLRequest>): GetAssetURLRequest;
                fromPartial(object: DeepPartial<GetAssetURLRequest>): GetAssetURLRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.assetresolver.GetAssetURLResponse";
                encode(message: GetAssetURLResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): GetAssetURLResponse;
                fromJSON(object: any): GetAssetURLResponse;
                toJSON(message: GetAssetURLResponse): unknown;
                create(base?: DeepPartial<GetAssetURLResponse>): GetAssetURLResponse;
                fromPartial(object: DeepPartial<GetAssetURLResponse>): GetAssetURLResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Gets the public URLs for multiple assets at the same time */
        readonly getAssetURLs: {
            readonly name: "GetAssetURLs";
            readonly requestType: {
                $type: "devvit.plugin.assetresolver.GetMultipleAssetURLsRequest";
                encode(message: GetMultipleAssetURLsRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): GetMultipleAssetURLsRequest;
                fromJSON(object: any): GetMultipleAssetURLsRequest;
                toJSON(message: GetMultipleAssetURLsRequest): unknown;
                create(base?: DeepPartial<GetMultipleAssetURLsRequest>): GetMultipleAssetURLsRequest;
                fromPartial(object: DeepPartial<GetMultipleAssetURLsRequest>): GetMultipleAssetURLsRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.assetresolver.GetMultipleAssetURLsResponse";
                encode(message: GetMultipleAssetURLsResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): GetMultipleAssetURLsResponse;
                fromJSON(object: any): GetMultipleAssetURLsResponse;
                toJSON(message: GetMultipleAssetURLsResponse): unknown;
                create(base?: DeepPartial<GetMultipleAssetURLsResponse>): GetMultipleAssetURLsResponse;
                fromPartial(object: DeepPartial<GetMultipleAssetURLsResponse>): GetMultipleAssetURLsResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array, metadata?: Metadata): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=assetresolver.d.ts.map