/**
 * #assetresolver.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { messageTypeRegistry } from "../../../typeRegistry.js";
function createBaseGetAssetURLRequest() {
    return { path: "", webview: undefined };
}
export const GetAssetURLRequest = {
    $type: "devvit.plugin.assetresolver.GetAssetURLRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.path !== "") {
            writer.uint32(10).string(message.path);
        }
        if (message.webview !== undefined) {
            writer.uint32(16).bool(message.webview);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetAssetURLRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.path = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.webview = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            path: isSet(object.path) ? globalThis.String(object.path) : "",
            webview: isSet(object.webview) ? globalThis.Boolean(object.webview) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.path !== "") {
            obj.path = message.path;
        }
        if (message.webview !== undefined) {
            obj.webview = message.webview;
        }
        return obj;
    },
    create(base) {
        return GetAssetURLRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetAssetURLRequest();
        message.path = object.path ?? "";
        message.webview = object.webview ?? undefined;
        return message;
    },
};
messageTypeRegistry.set(GetAssetURLRequest.$type, GetAssetURLRequest);
function createBaseGetAssetURLResponse() {
    return { url: "", found: false };
}
export const GetAssetURLResponse = {
    $type: "devvit.plugin.assetresolver.GetAssetURLResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.url !== "") {
            writer.uint32(10).string(message.url);
        }
        if (message.found !== false) {
            writer.uint32(16).bool(message.found);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetAssetURLResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.url = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.found = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            url: isSet(object.url) ? globalThis.String(object.url) : "",
            found: isSet(object.found) ? globalThis.Boolean(object.found) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.url !== "") {
            obj.url = message.url;
        }
        if (message.found !== false) {
            obj.found = message.found;
        }
        return obj;
    },
    create(base) {
        return GetAssetURLResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetAssetURLResponse();
        message.url = object.url ?? "";
        message.found = object.found ?? false;
        return message;
    },
};
messageTypeRegistry.set(GetAssetURLResponse.$type, GetAssetURLResponse);
function createBaseGetMultipleAssetURLsRequest() {
    return { paths: [] };
}
export const GetMultipleAssetURLsRequest = {
    $type: "devvit.plugin.assetresolver.GetMultipleAssetURLsRequest",
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.paths) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetMultipleAssetURLsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.paths.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { paths: globalThis.Array.isArray(object?.paths) ? object.paths.map((e) => globalThis.String(e)) : [] };
    },
    toJSON(message) {
        const obj = {};
        if (message.paths?.length) {
            obj.paths = message.paths;
        }
        return obj;
    },
    create(base) {
        return GetMultipleAssetURLsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetMultipleAssetURLsRequest();
        message.paths = object.paths?.map((e) => e) || [];
        return message;
    },
};
messageTypeRegistry.set(GetMultipleAssetURLsRequest.$type, GetMultipleAssetURLsRequest);
function createBaseGetMultipleAssetURLsResponse() {
    return { urls: {} };
}
export const GetMultipleAssetURLsResponse = {
    $type: "devvit.plugin.assetresolver.GetMultipleAssetURLsResponse",
    encode(message, writer = _m0.Writer.create()) {
        Object.entries(message.urls).forEach(([key, value]) => {
            GetMultipleAssetURLsResponse_UrlsEntry.encode({ key: key, value }, writer.uint32(10).fork()).ldelim();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetMultipleAssetURLsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    const entry1 = GetMultipleAssetURLsResponse_UrlsEntry.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.urls[entry1.key] = entry1.value;
                    }
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            urls: isObject(object.urls)
                ? Object.entries(object.urls).reduce((acc, [key, value]) => {
                    acc[key] = GetMultipleAssetURLsResponse_GlobResult.fromJSON(value);
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.urls) {
            const entries = Object.entries(message.urls);
            if (entries.length > 0) {
                obj.urls = {};
                entries.forEach(([k, v]) => {
                    obj.urls[k] = GetMultipleAssetURLsResponse_GlobResult.toJSON(v);
                });
            }
        }
        return obj;
    },
    create(base) {
        return GetMultipleAssetURLsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetMultipleAssetURLsResponse();
        message.urls = Object.entries(object.urls ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = GetMultipleAssetURLsResponse_GlobResult.fromPartial(value);
            }
            return acc;
        }, {});
        return message;
    },
};
messageTypeRegistry.set(GetMultipleAssetURLsResponse.$type, GetMultipleAssetURLsResponse);
function createBaseGetMultipleAssetURLsResponse_GlobResult() {
    return { found: false, paths: [] };
}
export const GetMultipleAssetURLsResponse_GlobResult = {
    $type: "devvit.plugin.assetresolver.GetMultipleAssetURLsResponse.GlobResult",
    encode(message, writer = _m0.Writer.create()) {
        if (message.found !== false) {
            writer.uint32(8).bool(message.found);
        }
        for (const v of message.paths) {
            writer.uint32(18).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetMultipleAssetURLsResponse_GlobResult();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.found = reader.bool();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.paths.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            found: isSet(object.found) ? globalThis.Boolean(object.found) : false,
            paths: globalThis.Array.isArray(object?.paths) ? object.paths.map((e) => globalThis.String(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.found !== false) {
            obj.found = message.found;
        }
        if (message.paths?.length) {
            obj.paths = message.paths;
        }
        return obj;
    },
    create(base) {
        return GetMultipleAssetURLsResponse_GlobResult.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetMultipleAssetURLsResponse_GlobResult();
        message.found = object.found ?? false;
        message.paths = object.paths?.map((e) => e) || [];
        return message;
    },
};
messageTypeRegistry.set(GetMultipleAssetURLsResponse_GlobResult.$type, GetMultipleAssetURLsResponse_GlobResult);
function createBaseGetMultipleAssetURLsResponse_UrlsEntry() {
    return { key: "", value: undefined };
}
export const GetMultipleAssetURLsResponse_UrlsEntry = {
    $type: "devvit.plugin.assetresolver.GetMultipleAssetURLsResponse.UrlsEntry",
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            GetMultipleAssetURLsResponse_GlobResult.encode(message.value, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetMultipleAssetURLsResponse_UrlsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = GetMultipleAssetURLsResponse_GlobResult.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? GetMultipleAssetURLsResponse_GlobResult.fromJSON(object.value) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== undefined) {
            obj.value = GetMultipleAssetURLsResponse_GlobResult.toJSON(message.value);
        }
        return obj;
    },
    create(base) {
        return GetMultipleAssetURLsResponse_UrlsEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetMultipleAssetURLsResponse_UrlsEntry();
        message.key = object.key ?? "";
        message.value = (object.value !== undefined && object.value !== null)
            ? GetMultipleAssetURLsResponse_GlobResult.fromPartial(object.value)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set(GetMultipleAssetURLsResponse_UrlsEntry.$type, GetMultipleAssetURLsResponse_UrlsEntry);
export const AssetResolverServiceName = "devvit.plugin.assetresolver.AssetResolver";
export class AssetResolverClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || AssetResolverServiceName;
        this.rpc = rpc;
        this.GetAssetURL = this.GetAssetURL.bind(this);
        this.GetAssetURLs = this.GetAssetURLs.bind(this);
    }
    GetAssetURL(request, metadata) {
        const data = GetAssetURLRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetAssetURL", data, metadata);
        return promise.then((data) => GetAssetURLResponse.decode(_m0.Reader.create(data)));
    }
    GetAssetURLs(request, metadata) {
        const data = GetMultipleAssetURLsRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetAssetURLs", data, metadata);
        return promise.then((data) => GetMultipleAssetURLsResponse.decode(_m0.Reader.create(data)));
    }
}
export const AssetResolverDefinition = {
    name: "AssetResolver",
    fullName: "devvit.plugin.assetresolver.AssetResolver",
    methods: {
        /** Gets a public URL for a given asset */
        getAssetURL: {
            name: "GetAssetURL",
            requestType: GetAssetURLRequest,
            requestStream: false,
            responseType: GetAssetURLResponse,
            responseStream: false,
            options: {},
        },
        /** Gets the public URLs for multiple assets at the same time */
        getAssetURLs: {
            name: "GetAssetURLs",
            requestType: GetMultipleAssetURLsRequest,
            requestStream: false,
            responseType: GetMultipleAssetURLsResponse,
            responseStream: false,
            options: {},
        },
    },
};
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
