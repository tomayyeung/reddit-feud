/// <reference types="node" resolution-mode="require"/>
import { TwirpContext, TwirpServer } from 'twirp-ts';
import { GetAssetURLRequest, GetAssetURLResponse, GetMultipleAssetURLsRequest, GetMultipleAssetURLsResponse } from './assetresolver.js';
export interface AssetResolverTwirp<T extends TwirpContext = TwirpContext> {
    GetAssetURL(ctx: T, request: GetAssetURLRequest): Promise<GetAssetURLResponse>;
    GetAssetURLs(ctx: T, request: GetMultipleAssetURLsRequest): Promise<GetMultipleAssetURLsResponse>;
}
export declare enum AssetResolverMethod {
    GetAssetURL = "GetAssetURL",
    GetAssetURLs = "GetAssetURLs"
}
export declare const AssetResolverMethodList: AssetResolverMethod[];
export declare function createAssetResolverServer<T extends TwirpContext = TwirpContext>(service: AssetResolverTwirp<T>): TwirpServer<AssetResolverTwirp<TwirpContext<import("http").IncomingMessage, import("http").ServerResponse<import("http").IncomingMessage>>>, T>;
//# sourceMappingURL=assetresolver.twirp.d.ts.map