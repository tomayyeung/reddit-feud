import { TwirpServer, TwirpError, TwirpErrorCode, TwirpContentType, chainInterceptors, } from 'twirp-ts';
import { GetAssetURLRequest, GetAssetURLResponse, GetMultipleAssetURLsRequest, GetMultipleAssetURLsResponse, } from './assetresolver.js';
export var AssetResolverMethod;
(function (AssetResolverMethod) {
    AssetResolverMethod["GetAssetURL"] = "GetAssetURL";
    AssetResolverMethod["GetAssetURLs"] = "GetAssetURLs";
})(AssetResolverMethod || (AssetResolverMethod = {}));
export const AssetResolverMethodList = [
    AssetResolverMethod.GetAssetURL,
    AssetResolverMethod.GetAssetURLs,
];
export function createAssetResolverServer(service) {
    return new TwirpServer({
        service,
        packageName: 'devvit.plugin.assetresolver',
        serviceName: 'AssetResolver',
        methodList: AssetResolverMethodList,
        matchRoute: matchAssetResolverRoute,
    });
}
function matchAssetResolverRoute(method, events) {
    switch (method) {
        case 'GetAssetURL':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'GetAssetURL' };
                await events.onMatch(ctx);
                return handleAssetResolverGetAssetURLRequest(ctx, service, data, interceptors);
            };
        case 'GetAssetURLs':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'GetAssetURLs' };
                await events.onMatch(ctx);
                return handleAssetResolverGetAssetURLsRequest(ctx, service, data, interceptors);
            };
        default:
            events.onNotFound();
            const msg = `no handler found`;
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleAssetResolverGetAssetURLRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleAssetResolverGetAssetURLJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleAssetResolverGetAssetURLProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleAssetResolverGetAssetURLsRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleAssetResolverGetAssetURLsJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleAssetResolverGetAssetURLsProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
async function handleAssetResolverGetAssetURLJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = GetAssetURLRequest.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.GetAssetURL(ctx, inputReq);
        });
    }
    else {
        response = await service.GetAssetURL(ctx, request);
    }
    return JSON.stringify(GetAssetURLResponse.toJSON(response));
}
async function handleAssetResolverGetAssetURLsJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = GetMultipleAssetURLsRequest.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.GetAssetURLs(ctx, inputReq);
        });
    }
    else {
        response = await service.GetAssetURLs(ctx, request);
    }
    return JSON.stringify(GetMultipleAssetURLsResponse.toJSON(response));
}
async function handleAssetResolverGetAssetURLProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = GetAssetURLRequest.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.GetAssetURL(ctx, inputReq);
        });
    }
    else {
        response = await service.GetAssetURL(ctx, request);
    }
    return Buffer.from(GetAssetURLResponse.encode(response).finish());
}
async function handleAssetResolverGetAssetURLsProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = GetMultipleAssetURLsRequest.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.GetAssetURLs(ctx, inputReq);
        });
    }
    else {
        response = await service.GetAssetURLs(ctx, request);
    }
    return Buffer.from(GetMultipleAssetURLsResponse.encode(response).finish());
}
