/**
 * #builder.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { Observable } from "rxjs";
import { Metadata } from "../../../../lib/Types.js";
import { LinkedBundle } from "../../runtime/bundle.js";
import { CompileLog, CompileParams } from "../buildpack/buildpack_common.js";
export interface BuildResponse {
    /** Compiled bundles, differentiated by TargetRuntime */
    bundles: LinkedBundle[];
    errors: CompileLog[];
    warnings: CompileLog[];
}
export declare const BuildResponse: {
    $type: "devvit.plugin.builder.BuildResponse";
    encode(message: BuildResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BuildResponse;
    fromJSON(object: any): BuildResponse;
    toJSON(message: BuildResponse): unknown;
    create(base?: DeepPartial<BuildResponse>): BuildResponse;
    fromPartial(object: DeepPartial<BuildResponse>): BuildResponse;
};
export interface Builder {
    /** Compiles and links user code into an output bundle, including an audit trail, if desired. */
    Build(request: CompileParams, metadata?: Metadata): Promise<BuildResponse>;
    /** Automatically rebuild when input files change. */
    Watch(request: CompileParams, metadata?: Metadata): Observable<BuildResponse>;
}
export declare const BuilderServiceName = "devvit.plugin.builder.Builder";
export declare class BuilderClientImpl implements Builder {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Build(request: CompileParams, metadata?: Metadata): Promise<BuildResponse>;
    Watch(request: CompileParams, metadata?: Metadata): Observable<BuildResponse>;
}
export type BuilderDefinition = typeof BuilderDefinition;
export declare const BuilderDefinition: {
    readonly name: "Builder";
    readonly fullName: "devvit.plugin.builder.Builder";
    readonly methods: {
        /** Compiles and links user code into an output bundle, including an audit trail, if desired. */
        readonly build: {
            readonly name: "Build";
            readonly requestType: {
                $type: "devvit.plugin.buildpack.CompileParams";
                encode(message: CompileParams, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): CompileParams;
                fromJSON(object: any): CompileParams;
                toJSON(message: CompileParams): unknown;
                create(base?: {
                    virtualFileSystem?: {
                        files?: {
                            path?: string;
                            content?: string;
                            isDirectory?: boolean;
                            isBase64?: boolean;
                        }[];
                    } | undefined;
                    filename?: string | undefined;
                    minify?: import("../buildpack/buildpack_common.js").Minify;
                    info?: {
                        name?: string;
                        owner?: string;
                        version?: string;
                    } | undefined;
                    includeAssets?: boolean;
                } | undefined): CompileParams;
                fromPartial(object: {
                    virtualFileSystem?: {
                        files?: {
                            path?: string;
                            content?: string;
                            isDirectory?: boolean;
                            isBase64?: boolean;
                        }[];
                    } | undefined;
                    filename?: string | undefined;
                    minify?: import("../buildpack/buildpack_common.js").Minify;
                    info?: {
                        name?: string;
                        owner?: string;
                        version?: string;
                    } | undefined;
                    includeAssets?: boolean;
                }): CompileParams;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.builder.BuildResponse";
                encode(message: BuildResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): BuildResponse;
                fromJSON(object: any): BuildResponse;
                toJSON(message: BuildResponse): unknown;
                create(base?: DeepPartial<BuildResponse>): BuildResponse;
                fromPartial(object: DeepPartial<BuildResponse>): BuildResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Automatically rebuild when input files change. */
        readonly watch: {
            readonly name: "Watch";
            readonly requestType: {
                $type: "devvit.plugin.buildpack.CompileParams";
                encode(message: CompileParams, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): CompileParams;
                fromJSON(object: any): CompileParams;
                toJSON(message: CompileParams): unknown;
                create(base?: {
                    virtualFileSystem?: {
                        files?: {
                            path?: string;
                            content?: string;
                            isDirectory?: boolean;
                            isBase64?: boolean;
                        }[];
                    } | undefined;
                    filename?: string | undefined;
                    minify?: import("../buildpack/buildpack_common.js").Minify;
                    info?: {
                        name?: string;
                        owner?: string;
                        version?: string;
                    } | undefined;
                    includeAssets?: boolean;
                } | undefined): CompileParams;
                fromPartial(object: {
                    virtualFileSystem?: {
                        files?: {
                            path?: string;
                            content?: string;
                            isDirectory?: boolean;
                            isBase64?: boolean;
                        }[];
                    } | undefined;
                    filename?: string | undefined;
                    minify?: import("../buildpack/buildpack_common.js").Minify;
                    info?: {
                        name?: string;
                        owner?: string;
                        version?: string;
                    } | undefined;
                    includeAssets?: boolean;
                }): CompileParams;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.builder.BuildResponse";
                encode(message: BuildResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): BuildResponse;
                fromJSON(object: any): BuildResponse;
                toJSON(message: BuildResponse): unknown;
                create(base?: DeepPartial<BuildResponse>): BuildResponse;
                fromPartial(object: DeepPartial<BuildResponse>): BuildResponse;
            };
            readonly responseStream: true;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array, metadata?: Metadata): Promise<Uint8Array>;
    clientStreamingRequest(service: string, method: string, data: Observable<Uint8Array>, metadata?: Metadata): Promise<Uint8Array>;
    serverStreamingRequest(service: string, method: string, data: Uint8Array, metadata?: Metadata): Observable<Uint8Array>;
    bidirectionalStreamingRequest(service: string, method: string, data: Observable<Uint8Array>, metadata?: Metadata): Observable<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=builder.d.ts.map