/**
 * #builder.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { map } from "rxjs/operators";
import { messageTypeRegistry } from "../../../typeRegistry.js";
import { LinkedBundle } from "../../runtime/bundle.js";
import { CompileLog, CompileParams } from "../buildpack/buildpack_common.js";
function createBaseBuildResponse() {
    return { bundles: [], errors: [], warnings: [] };
}
export const BuildResponse = {
    $type: "devvit.plugin.builder.BuildResponse",
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.bundles) {
            LinkedBundle.encode(v, writer.uint32(34).fork()).ldelim();
        }
        for (const v of message.errors) {
            CompileLog.encode(v, writer.uint32(18).fork()).ldelim();
        }
        for (const v of message.warnings) {
            CompileLog.encode(v, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBuildResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.bundles.push(LinkedBundle.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.errors.push(CompileLog.decode(reader, reader.uint32()));
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.warnings.push(CompileLog.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            bundles: globalThis.Array.isArray(object?.bundles)
                ? object.bundles.map((e) => LinkedBundle.fromJSON(e))
                : [],
            errors: globalThis.Array.isArray(object?.errors) ? object.errors.map((e) => CompileLog.fromJSON(e)) : [],
            warnings: globalThis.Array.isArray(object?.warnings)
                ? object.warnings.map((e) => CompileLog.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.bundles?.length) {
            obj.bundles = message.bundles.map((e) => LinkedBundle.toJSON(e));
        }
        if (message.errors?.length) {
            obj.errors = message.errors.map((e) => CompileLog.toJSON(e));
        }
        if (message.warnings?.length) {
            obj.warnings = message.warnings.map((e) => CompileLog.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return BuildResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBuildResponse();
        message.bundles = object.bundles?.map((e) => LinkedBundle.fromPartial(e)) || [];
        message.errors = object.errors?.map((e) => CompileLog.fromPartial(e)) || [];
        message.warnings = object.warnings?.map((e) => CompileLog.fromPartial(e)) || [];
        return message;
    },
};
messageTypeRegistry.set(BuildResponse.$type, BuildResponse);
export const BuilderServiceName = "devvit.plugin.builder.Builder";
export class BuilderClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || BuilderServiceName;
        this.rpc = rpc;
        this.Build = this.Build.bind(this);
        this.Watch = this.Watch.bind(this);
    }
    Build(request, metadata) {
        const data = CompileParams.encode(request).finish();
        const promise = this.rpc.request(this.service, "Build", data, metadata);
        return promise.then((data) => BuildResponse.decode(_m0.Reader.create(data)));
    }
    Watch(request, metadata) {
        const data = CompileParams.encode(request).finish();
        const result = this.rpc.serverStreamingRequest(this.service, "Watch", data, metadata);
        return result.pipe(map((data) => BuildResponse.decode(_m0.Reader.create(data))));
    }
}
export const BuilderDefinition = {
    name: "Builder",
    fullName: "devvit.plugin.builder.Builder",
    methods: {
        /** Compiles and links user code into an output bundle, including an audit trail, if desired. */
        build: {
            name: "Build",
            requestType: CompileParams,
            requestStream: false,
            responseType: BuildResponse,
            responseStream: false,
            options: {},
        },
        /** Automatically rebuild when input files change. */
        watch: {
            name: "Watch",
            requestType: CompileParams,
            requestStream: false,
            responseType: BuildResponse,
            responseStream: true,
            options: {},
        },
    },
};
