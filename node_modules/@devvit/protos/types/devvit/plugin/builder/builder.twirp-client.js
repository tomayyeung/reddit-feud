import { CompileParams } from '../buildpack/buildpack_common.js';
import { BuildResponse } from './builder.js';
export class BuilderClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.Build.bind(this);
        this.Watch.bind(this);
    }
    Build(request) {
        const data = CompileParams.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.builder.Builder', 'Build', 'application/json', data);
        return promise.then((data) => BuildResponse.fromJSON(data));
    }
    Watch(request) {
        const data = CompileParams.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.builder.Builder', 'Watch', 'application/json', data);
        return promise.then((data) => BuildResponse.fromJSON(data));
    }
}
export class BuilderClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.Build.bind(this);
        this.Watch.bind(this);
    }
    Build(request) {
        const data = CompileParams.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.builder.Builder', 'Build', 'application/protobuf', data);
        return promise.then((data) => BuildResponse.decode(data));
    }
    Watch(request) {
        const data = CompileParams.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.builder.Builder', 'Watch', 'application/protobuf', data);
        return promise.then((data) => BuildResponse.decode(data));
    }
}
