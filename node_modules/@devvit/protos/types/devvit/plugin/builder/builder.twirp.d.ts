/// <reference types="node" resolution-mode="require"/>
import { TwirpContext, TwirpServer } from 'twirp-ts';
import { CompileParams } from '../buildpack/buildpack_common.js';
import { BuildResponse } from './builder.js';
export interface BuilderTwirp<T extends TwirpContext = TwirpContext> {
    Build(ctx: T, request: CompileParams): Promise<BuildResponse>;
    Watch(ctx: T, request: CompileParams): Promise<BuildResponse>;
}
export declare enum BuilderMethod {
    Build = "Build",
    Watch = "Watch"
}
export declare const BuilderMethodList: BuilderMethod[];
export declare function createBuilderServer<T extends TwirpContext = TwirpContext>(service: BuilderTwirp<T>): TwirpServer<BuilderTwirp<TwirpContext<import("http").IncomingMessage, import("http").ServerResponse<import("http").IncomingMessage>>>, T>;
//# sourceMappingURL=builder.twirp.d.ts.map