import { TwirpServer, TwirpError, TwirpErrorCode, TwirpContentType, chainInterceptors, } from 'twirp-ts';
import { CompileParams } from '../buildpack/buildpack_common.js';
import { BuildResponse } from './builder.js';
export var BuilderMethod;
(function (BuilderMethod) {
    BuilderMethod["Build"] = "Build";
    BuilderMethod["Watch"] = "Watch";
})(BuilderMethod || (BuilderMethod = {}));
export const BuilderMethodList = [BuilderMethod.Build, BuilderMethod.Watch];
export function createBuilderServer(service) {
    return new TwirpServer({
        service,
        packageName: 'devvit.plugin.builder',
        serviceName: 'Builder',
        methodList: BuilderMethodList,
        matchRoute: matchBuilderRoute,
    });
}
function matchBuilderRoute(method, events) {
    switch (method) {
        case 'Build':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'Build' };
                await events.onMatch(ctx);
                return handleBuilderBuildRequest(ctx, service, data, interceptors);
            };
        case 'Watch':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'Watch' };
                await events.onMatch(ctx);
                return handleBuilderWatchRequest(ctx, service, data, interceptors);
            };
        default:
            events.onNotFound();
            const msg = `no handler found`;
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleBuilderBuildRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleBuilderBuildJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleBuilderBuildProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleBuilderWatchRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleBuilderWatchJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleBuilderWatchProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
async function handleBuilderBuildJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = CompileParams.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.Build(ctx, inputReq);
        });
    }
    else {
        response = await service.Build(ctx, request);
    }
    return JSON.stringify(BuildResponse.toJSON(response));
}
async function handleBuilderWatchJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = CompileParams.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.Watch(ctx, inputReq);
        });
    }
    else {
        response = await service.Watch(ctx, request);
    }
    return JSON.stringify(BuildResponse.toJSON(response));
}
async function handleBuilderBuildProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = CompileParams.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.Build(ctx, inputReq);
        });
    }
    else {
        response = await service.Build(ctx, request);
    }
    return Buffer.from(BuildResponse.encode(response).finish());
}
async function handleBuilderWatchProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = CompileParams.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.Watch(ctx, inputReq);
        });
    }
    else {
        response = await service.Watch(ctx, request);
    }
    return Buffer.from(BuildResponse.encode(response).finish());
}
