import { CompileParams, CompileResponse } from './buildpack_common.js';
export class BuildPackClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.Compile.bind(this);
        this.Watch.bind(this);
    }
    Compile(request) {
        const data = CompileParams.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.buildpack.BuildPack', 'Compile', 'application/json', data);
        return promise.then((data) => CompileResponse.fromJSON(data));
    }
    Watch(request) {
        const data = CompileParams.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.buildpack.BuildPack', 'Watch', 'application/json', data);
        return promise.then((data) => CompileResponse.fromJSON(data));
    }
}
export class BuildPackClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.Compile.bind(this);
        this.Watch.bind(this);
    }
    Compile(request) {
        const data = CompileParams.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.buildpack.BuildPack', 'Compile', 'application/protobuf', data);
        return promise.then((data) => CompileResponse.decode(data));
    }
    Watch(request) {
        const data = CompileParams.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.buildpack.BuildPack', 'Watch', 'application/protobuf', data);
        return promise.then((data) => CompileResponse.decode(data));
    }
}
