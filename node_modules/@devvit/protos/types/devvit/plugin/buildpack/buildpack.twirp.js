import { TwirpServer, TwirpError, TwirpErrorCode, TwirpContentType, chainInterceptors, } from 'twirp-ts';
import { CompileParams, CompileResponse } from './buildpack_common.js';
export var BuildPackMethod;
(function (BuildPackMethod) {
    BuildPackMethod["Compile"] = "Compile";
    BuildPackMethod["Watch"] = "Watch";
})(BuildPackMethod || (BuildPackMethod = {}));
export const BuildPackMethodList = [
    BuildPackMethod.Compile,
    BuildPackMethod.Watch,
];
export function createBuildPackServer(service) {
    return new TwirpServer({
        service,
        packageName: 'devvit.plugin.buildpack',
        serviceName: 'BuildPack',
        methodList: BuildPackMethodList,
        matchRoute: matchBuildPackRoute,
    });
}
function matchBuildPackRoute(method, events) {
    switch (method) {
        case 'Compile':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'Compile' };
                await events.onMatch(ctx);
                return handleBuildPackCompileRequest(ctx, service, data, interceptors);
            };
        case 'Watch':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'Watch' };
                await events.onMatch(ctx);
                return handleBuildPackWatchRequest(ctx, service, data, interceptors);
            };
        default:
            events.onNotFound();
            const msg = `no handler found`;
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleBuildPackCompileRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleBuildPackCompileJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleBuildPackCompileProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleBuildPackWatchRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleBuildPackWatchJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleBuildPackWatchProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
async function handleBuildPackCompileJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = CompileParams.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.Compile(ctx, inputReq);
        });
    }
    else {
        response = await service.Compile(ctx, request);
    }
    return JSON.stringify(CompileResponse.toJSON(response));
}
async function handleBuildPackWatchJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = CompileParams.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.Watch(ctx, inputReq);
        });
    }
    else {
        response = await service.Watch(ctx, request);
    }
    return JSON.stringify(CompileResponse.toJSON(response));
}
async function handleBuildPackCompileProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = CompileParams.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.Compile(ctx, inputReq);
        });
    }
    else {
        response = await service.Compile(ctx, request);
    }
    return Buffer.from(CompileResponse.encode(response).finish());
}
async function handleBuildPackWatchProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = CompileParams.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.Watch(ctx, inputReq);
        });
    }
    else {
        response = await service.Watch(ctx, request);
    }
    return Buffer.from(CompileResponse.encode(response).finish());
}
