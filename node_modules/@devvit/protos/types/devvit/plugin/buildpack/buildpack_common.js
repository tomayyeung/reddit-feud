/**
 * #buildpack_common.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { StringValue } from "../../../google/protobuf/wrappers.js";
import { messageTypeRegistry } from "../../../typeRegistry.js";
import { Product } from "../../payments/v1alpha/product.js";
import { ActorSpec, BuildInfo, DependencySpec } from "../../runtime/bundle.js";
import { FileSystem } from "./filesystem.js";
export var Minify;
(function (Minify) {
    /** NONE - Disable minification. The default. */
    Minify[Minify["NONE"] = 0] = "NONE";
    /** ALL - Minify everything. */
    Minify[Minify["ALL"] = 1] = "ALL";
    Minify[Minify["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(Minify || (Minify = {}));
export function minifyFromJSON(object) {
    switch (object) {
        case 0:
        case "NONE":
            return Minify.NONE;
        case 1:
        case "ALL":
            return Minify.ALL;
        case -1:
        case "UNRECOGNIZED":
        default:
            return Minify.UNRECOGNIZED;
    }
}
export function minifyToJSON(object) {
    switch (object) {
        case Minify.NONE:
            return 0;
        case Minify.ALL:
            return 1;
        case Minify.UNRECOGNIZED:
        default:
            return -1;
    }
}
function createBaseBundle() {
    return {
        code: "",
        sourceMap: undefined,
        dependencies: undefined,
        buildInfo: undefined,
        assets: undefined,
        assetIds: {},
        webviewAssetIds: {},
        paymentsConfig: undefined,
    };
}
export const Bundle = {
    $type: "devvit.plugin.buildpack.Bundle",
    encode(message, writer = _m0.Writer.create()) {
        if (message.code !== "") {
            writer.uint32(10).string(message.code);
        }
        if (message.sourceMap !== undefined) {
            StringValue.encode({ value: message.sourceMap }, writer.uint32(58).fork()).ldelim();
        }
        if (message.dependencies !== undefined) {
            DependencySpec.encode(message.dependencies, writer.uint32(18).fork()).ldelim();
        }
        if (message.buildInfo !== undefined) {
            BuildInfo.encode(message.buildInfo, writer.uint32(26).fork()).ldelim();
        }
        if (message.assets !== undefined) {
            FileSystem.encode(message.assets, writer.uint32(34).fork()).ldelim();
        }
        Object.entries(message.assetIds).forEach(([key, value]) => {
            Bundle_AssetIdsEntry.encode({ key: key, value }, writer.uint32(42).fork()).ldelim();
        });
        Object.entries(message.webviewAssetIds).forEach(([key, value]) => {
            Bundle_WebviewAssetIdsEntry.encode({ key: key, value }, writer.uint32(50).fork()).ldelim();
        });
        if (message.paymentsConfig !== undefined) {
            PaymentsConfig.encode(message.paymentsConfig, writer.uint32(66).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBundle();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.code = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.sourceMap = StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.dependencies = DependencySpec.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.buildInfo = BuildInfo.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.assets = FileSystem.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    const entry5 = Bundle_AssetIdsEntry.decode(reader, reader.uint32());
                    if (entry5.value !== undefined) {
                        message.assetIds[entry5.key] = entry5.value;
                    }
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    const entry6 = Bundle_WebviewAssetIdsEntry.decode(reader, reader.uint32());
                    if (entry6.value !== undefined) {
                        message.webviewAssetIds[entry6.key] = entry6.value;
                    }
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.paymentsConfig = PaymentsConfig.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            code: isSet(object.code) ? globalThis.String(object.code) : "",
            sourceMap: isSet(object.sourceMap) ? String(object.sourceMap) : undefined,
            dependencies: isSet(object.dependencies) ? DependencySpec.fromJSON(object.dependencies) : undefined,
            buildInfo: isSet(object.buildInfo) ? BuildInfo.fromJSON(object.buildInfo) : undefined,
            assets: isSet(object.assets) ? FileSystem.fromJSON(object.assets) : undefined,
            assetIds: isObject(object.assetIds)
                ? Object.entries(object.assetIds).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
            webviewAssetIds: isObject(object.webviewAssetIds)
                ? Object.entries(object.webviewAssetIds).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
            paymentsConfig: isSet(object.paymentsConfig) ? PaymentsConfig.fromJSON(object.paymentsConfig) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.code !== "") {
            obj.code = message.code;
        }
        if (message.sourceMap !== undefined) {
            obj.sourceMap = message.sourceMap;
        }
        if (message.dependencies !== undefined) {
            obj.dependencies = DependencySpec.toJSON(message.dependencies);
        }
        if (message.buildInfo !== undefined) {
            obj.buildInfo = BuildInfo.toJSON(message.buildInfo);
        }
        if (message.assets !== undefined) {
            obj.assets = FileSystem.toJSON(message.assets);
        }
        if (message.assetIds) {
            const entries = Object.entries(message.assetIds);
            if (entries.length > 0) {
                obj.assetIds = {};
                entries.forEach(([k, v]) => {
                    obj.assetIds[k] = v;
                });
            }
        }
        if (message.webviewAssetIds) {
            const entries = Object.entries(message.webviewAssetIds);
            if (entries.length > 0) {
                obj.webviewAssetIds = {};
                entries.forEach(([k, v]) => {
                    obj.webviewAssetIds[k] = v;
                });
            }
        }
        if (message.paymentsConfig !== undefined) {
            obj.paymentsConfig = PaymentsConfig.toJSON(message.paymentsConfig);
        }
        return obj;
    },
    create(base) {
        return Bundle.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBundle();
        message.code = object.code ?? "";
        message.sourceMap = object.sourceMap ?? undefined;
        message.dependencies = (object.dependencies !== undefined && object.dependencies !== null)
            ? DependencySpec.fromPartial(object.dependencies)
            : undefined;
        message.buildInfo = (object.buildInfo !== undefined && object.buildInfo !== null)
            ? BuildInfo.fromPartial(object.buildInfo)
            : undefined;
        message.assets = (object.assets !== undefined && object.assets !== null)
            ? FileSystem.fromPartial(object.assets)
            : undefined;
        message.assetIds = Object.entries(object.assetIds ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = globalThis.String(value);
            }
            return acc;
        }, {});
        message.webviewAssetIds = Object.entries(object.webviewAssetIds ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = globalThis.String(value);
            }
            return acc;
        }, {});
        message.paymentsConfig = (object.paymentsConfig !== undefined && object.paymentsConfig !== null)
            ? PaymentsConfig.fromPartial(object.paymentsConfig)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set(Bundle.$type, Bundle);
function createBaseBundle_AssetIdsEntry() {
    return { key: "", value: "" };
}
export const Bundle_AssetIdsEntry = {
    $type: "devvit.plugin.buildpack.Bundle.AssetIdsEntry",
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBundle_AssetIdsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? globalThis.String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return Bundle_AssetIdsEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBundle_AssetIdsEntry();
        message.key = object.key ?? "";
        message.value = object.value ?? "";
        return message;
    },
};
messageTypeRegistry.set(Bundle_AssetIdsEntry.$type, Bundle_AssetIdsEntry);
function createBaseBundle_WebviewAssetIdsEntry() {
    return { key: "", value: "" };
}
export const Bundle_WebviewAssetIdsEntry = {
    $type: "devvit.plugin.buildpack.Bundle.WebviewAssetIdsEntry",
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBundle_WebviewAssetIdsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? globalThis.String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return Bundle_WebviewAssetIdsEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBundle_WebviewAssetIdsEntry();
        message.key = object.key ?? "";
        message.value = object.value ?? "";
        return message;
    },
};
messageTypeRegistry.set(Bundle_WebviewAssetIdsEntry.$type, Bundle_WebviewAssetIdsEntry);
function createBasePaymentsConfig() {
    return { products: {} };
}
export const PaymentsConfig = {
    $type: "devvit.plugin.buildpack.PaymentsConfig",
    encode(message, writer = _m0.Writer.create()) {
        Object.entries(message.products).forEach(([key, value]) => {
            PaymentsConfig_ProductsEntry.encode({ key: key, value }, writer.uint32(10).fork()).ldelim();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePaymentsConfig();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    const entry1 = PaymentsConfig_ProductsEntry.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.products[entry1.key] = entry1.value;
                    }
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            products: isObject(object.products)
                ? Object.entries(object.products).reduce((acc, [key, value]) => {
                    acc[key] = Product.fromJSON(value);
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.products) {
            const entries = Object.entries(message.products);
            if (entries.length > 0) {
                obj.products = {};
                entries.forEach(([k, v]) => {
                    obj.products[k] = Product.toJSON(v);
                });
            }
        }
        return obj;
    },
    create(base) {
        return PaymentsConfig.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePaymentsConfig();
        message.products = Object.entries(object.products ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = Product.fromPartial(value);
            }
            return acc;
        }, {});
        return message;
    },
};
messageTypeRegistry.set(PaymentsConfig.$type, PaymentsConfig);
function createBasePaymentsConfig_ProductsEntry() {
    return { key: "", value: undefined };
}
export const PaymentsConfig_ProductsEntry = {
    $type: "devvit.plugin.buildpack.PaymentsConfig.ProductsEntry",
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            Product.encode(message.value, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePaymentsConfig_ProductsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = Product.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? Product.fromJSON(object.value) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== undefined) {
            obj.value = Product.toJSON(message.value);
        }
        return obj;
    },
    create(base) {
        return PaymentsConfig_ProductsEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePaymentsConfig_ProductsEntry();
        message.key = object.key ?? "";
        message.value = (object.value !== undefined && object.value !== null)
            ? Product.fromPartial(object.value)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set(PaymentsConfig_ProductsEntry.$type, PaymentsConfig_ProductsEntry);
function createBaseCompileParams() {
    return { virtualFileSystem: undefined, filename: undefined, minify: 0, info: undefined, includeAssets: false };
}
export const CompileParams = {
    $type: "devvit.plugin.buildpack.CompileParams",
    encode(message, writer = _m0.Writer.create()) {
        if (message.virtualFileSystem !== undefined) {
            FileSystem.encode(message.virtualFileSystem, writer.uint32(10).fork()).ldelim();
        }
        if (message.filename !== undefined) {
            writer.uint32(18).string(message.filename);
        }
        if (message.minify !== 0) {
            writer.uint32(24).int32(message.minify);
        }
        if (message.info !== undefined) {
            ActorSpec.encode(message.info, writer.uint32(34).fork()).ldelim();
        }
        if (message.includeAssets !== false) {
            writer.uint32(40).bool(message.includeAssets);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCompileParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.virtualFileSystem = FileSystem.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.filename = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.minify = reader.int32();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.info = ActorSpec.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.includeAssets = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            virtualFileSystem: isSet(object.virtualFileSystem) ? FileSystem.fromJSON(object.virtualFileSystem) : undefined,
            filename: isSet(object.filename) ? globalThis.String(object.filename) : undefined,
            minify: isSet(object.minify) ? minifyFromJSON(object.minify) : 0,
            info: isSet(object.info) ? ActorSpec.fromJSON(object.info) : undefined,
            includeAssets: isSet(object.includeAssets) ? globalThis.Boolean(object.includeAssets) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.virtualFileSystem !== undefined) {
            obj.virtualFileSystem = FileSystem.toJSON(message.virtualFileSystem);
        }
        if (message.filename !== undefined) {
            obj.filename = message.filename;
        }
        if (message.minify !== 0) {
            obj.minify = minifyToJSON(message.minify);
        }
        if (message.info !== undefined) {
            obj.info = ActorSpec.toJSON(message.info);
        }
        if (message.includeAssets !== false) {
            obj.includeAssets = message.includeAssets;
        }
        return obj;
    },
    create(base) {
        return CompileParams.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCompileParams();
        message.virtualFileSystem = (object.virtualFileSystem !== undefined && object.virtualFileSystem !== null)
            ? FileSystem.fromPartial(object.virtualFileSystem)
            : undefined;
        message.filename = object.filename ?? undefined;
        message.minify = object.minify ?? 0;
        message.info = (object.info !== undefined && object.info !== null) ? ActorSpec.fromPartial(object.info) : undefined;
        message.includeAssets = object.includeAssets ?? false;
        return message;
    },
};
messageTypeRegistry.set(CompileParams.$type, CompileParams);
function createBaseCompileLog() {
    return { detail: undefined, text: "" };
}
export const CompileLog = {
    $type: "devvit.plugin.buildpack.CompileLog",
    encode(message, writer = _m0.Writer.create()) {
        if (message.detail !== undefined) {
            CompileLogLineDetail.encode(message.detail, writer.uint32(10).fork()).ldelim();
        }
        if (message.text !== "") {
            writer.uint32(18).string(message.text);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCompileLog();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.detail = CompileLogLineDetail.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.text = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            detail: isSet(object.detail) ? CompileLogLineDetail.fromJSON(object.detail) : undefined,
            text: isSet(object.text) ? globalThis.String(object.text) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.detail !== undefined) {
            obj.detail = CompileLogLineDetail.toJSON(message.detail);
        }
        if (message.text !== "") {
            obj.text = message.text;
        }
        return obj;
    },
    create(base) {
        return CompileLog.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCompileLog();
        message.detail = (object.detail !== undefined && object.detail !== null)
            ? CompileLogLineDetail.fromPartial(object.detail)
            : undefined;
        message.text = object.text ?? "";
        return message;
    },
};
messageTypeRegistry.set(CompileLog.$type, CompileLog);
function createBaseCompileLogLineDetail() {
    return { column: 0, filename: "", line: 0, suggestion: "", text: "" };
}
export const CompileLogLineDetail = {
    $type: "devvit.plugin.buildpack.CompileLogLineDetail",
    encode(message, writer = _m0.Writer.create()) {
        if (message.column !== 0) {
            writer.uint32(8).uint32(message.column);
        }
        if (message.filename !== "") {
            writer.uint32(18).string(message.filename);
        }
        if (message.line !== 0) {
            writer.uint32(24).uint32(message.line);
        }
        if (message.suggestion !== "") {
            writer.uint32(34).string(message.suggestion);
        }
        if (message.text !== "") {
            writer.uint32(42).string(message.text);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCompileLogLineDetail();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.column = reader.uint32();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.filename = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.line = reader.uint32();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.suggestion = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.text = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            column: isSet(object.column) ? globalThis.Number(object.column) : 0,
            filename: isSet(object.filename) ? globalThis.String(object.filename) : "",
            line: isSet(object.line) ? globalThis.Number(object.line) : 0,
            suggestion: isSet(object.suggestion) ? globalThis.String(object.suggestion) : "",
            text: isSet(object.text) ? globalThis.String(object.text) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.column !== 0) {
            obj.column = Math.round(message.column);
        }
        if (message.filename !== "") {
            obj.filename = message.filename;
        }
        if (message.line !== 0) {
            obj.line = Math.round(message.line);
        }
        if (message.suggestion !== "") {
            obj.suggestion = message.suggestion;
        }
        if (message.text !== "") {
            obj.text = message.text;
        }
        return obj;
    },
    create(base) {
        return CompileLogLineDetail.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCompileLogLineDetail();
        message.column = object.column ?? 0;
        message.filename = object.filename ?? "";
        message.line = object.line ?? 0;
        message.suggestion = object.suggestion ?? "";
        message.text = object.text ?? "";
        return message;
    },
};
messageTypeRegistry.set(CompileLogLineDetail.$type, CompileLogLineDetail);
function createBaseCompileResponse() {
    return { bundles: [], errors: [], warnings: [] };
}
export const CompileResponse = {
    $type: "devvit.plugin.buildpack.CompileResponse",
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.bundles) {
            Bundle.encode(v, writer.uint32(34).fork()).ldelim();
        }
        for (const v of message.errors) {
            CompileLog.encode(v, writer.uint32(18).fork()).ldelim();
        }
        for (const v of message.warnings) {
            CompileLog.encode(v, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCompileResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.bundles.push(Bundle.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.errors.push(CompileLog.decode(reader, reader.uint32()));
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.warnings.push(CompileLog.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            bundles: globalThis.Array.isArray(object?.bundles) ? object.bundles.map((e) => Bundle.fromJSON(e)) : [],
            errors: globalThis.Array.isArray(object?.errors) ? object.errors.map((e) => CompileLog.fromJSON(e)) : [],
            warnings: globalThis.Array.isArray(object?.warnings)
                ? object.warnings.map((e) => CompileLog.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.bundles?.length) {
            obj.bundles = message.bundles.map((e) => Bundle.toJSON(e));
        }
        if (message.errors?.length) {
            obj.errors = message.errors.map((e) => CompileLog.toJSON(e));
        }
        if (message.warnings?.length) {
            obj.warnings = message.warnings.map((e) => CompileLog.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return CompileResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCompileResponse();
        message.bundles = object.bundles?.map((e) => Bundle.fromPartial(e)) || [];
        message.errors = object.errors?.map((e) => CompileLog.fromPartial(e)) || [];
        message.warnings = object.warnings?.map((e) => CompileLog.fromPartial(e)) || [];
        return message;
    },
};
messageTypeRegistry.set(CompileResponse.$type, CompileResponse);
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
