/**
 * #filesystem.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
/** A file is a single file or directory in a filesystem. */
export interface File {
    /**
     * The name of the file, relative to the root of the filesystem.
     * Please don't start with a slash.
     */
    path: string;
    content: string;
    isDirectory: boolean;
    isBase64: boolean;
}
/**
 * A filesystem is a collection of files and directories.
 * This often will be a git repository.
 */
export interface FileSystem {
    files: File[];
}
export declare const File: {
    $type: "devvit.plugin.buildpack.File";
    encode(message: File, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): File;
    fromJSON(object: any): File;
    toJSON(message: File): unknown;
    create(base?: DeepPartial<File>): File;
    fromPartial(object: DeepPartial<File>): File;
};
export declare const FileSystem: {
    $type: "devvit.plugin.buildpack.FileSystem";
    encode(message: FileSystem, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FileSystem;
    fromJSON(object: any): FileSystem;
    toJSON(message: FileSystem): unknown;
    create(base?: DeepPartial<FileSystem>): FileSystem;
    fromPartial(object: DeepPartial<FileSystem>): FileSystem;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=filesystem.d.ts.map