/**
 * #filesystem.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { messageTypeRegistry } from "../../../typeRegistry.js";
function createBaseFile() {
    return { path: "", content: "", isDirectory: false, isBase64: false };
}
export const File = {
    $type: "devvit.plugin.buildpack.File",
    encode(message, writer = _m0.Writer.create()) {
        if (message.path !== "") {
            writer.uint32(10).string(message.path);
        }
        if (message.content !== "") {
            writer.uint32(18).string(message.content);
        }
        if (message.isDirectory !== false) {
            writer.uint32(24).bool(message.isDirectory);
        }
        if (message.isBase64 !== false) {
            writer.uint32(32).bool(message.isBase64);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFile();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.path = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.content = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.isDirectory = reader.bool();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.isBase64 = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            path: isSet(object.path) ? globalThis.String(object.path) : "",
            content: isSet(object.content) ? globalThis.String(object.content) : "",
            isDirectory: isSet(object.isDirectory) ? globalThis.Boolean(object.isDirectory) : false,
            isBase64: isSet(object.isBase64) ? globalThis.Boolean(object.isBase64) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.path !== "") {
            obj.path = message.path;
        }
        if (message.content !== "") {
            obj.content = message.content;
        }
        if (message.isDirectory !== false) {
            obj.isDirectory = message.isDirectory;
        }
        if (message.isBase64 !== false) {
            obj.isBase64 = message.isBase64;
        }
        return obj;
    },
    create(base) {
        return File.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFile();
        message.path = object.path ?? "";
        message.content = object.content ?? "";
        message.isDirectory = object.isDirectory ?? false;
        message.isBase64 = object.isBase64 ?? false;
        return message;
    },
};
messageTypeRegistry.set(File.$type, File);
function createBaseFileSystem() {
    return { files: [] };
}
export const FileSystem = {
    $type: "devvit.plugin.buildpack.FileSystem",
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.files) {
            File.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFileSystem();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.files.push(File.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { files: globalThis.Array.isArray(object?.files) ? object.files.map((e) => File.fromJSON(e)) : [] };
    },
    toJSON(message) {
        const obj = {};
        if (message.files?.length) {
            obj.files = message.files.map((e) => File.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return FileSystem.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFileSystem();
        message.files = object.files?.map((e) => File.fromPartial(e)) || [];
        return message;
    },
};
messageTypeRegistry.set(FileSystem.$type, FileSystem);
function isSet(value) {
    return value !== null && value !== undefined;
}
