/**
 * #http.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { Metadata } from "../../../../lib/Types.js";
export interface FetchRequest {
    url: string;
    data?: RequestData | undefined;
}
export interface RequestData {
    method: string;
    headers: {
        [key: string]: string;
    };
    body: Uint8Array;
}
export interface RequestData_HeadersEntry {
    key: string;
    value: string;
}
export interface FetchResponse {
    url: string;
    body: Uint8Array;
    status: number;
    headers: {
        [key: string]: string;
    };
}
export interface FetchResponse_HeadersEntry {
    key: string;
    value: string;
}
export declare const FetchRequest: {
    $type: "devvit.plugin.http.FetchRequest";
    encode(message: FetchRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FetchRequest;
    fromJSON(object: any): FetchRequest;
    toJSON(message: FetchRequest): unknown;
    create(base?: DeepPartial<FetchRequest>): FetchRequest;
    fromPartial(object: DeepPartial<FetchRequest>): FetchRequest;
};
export declare const RequestData: {
    $type: "devvit.plugin.http.RequestData";
    encode(message: RequestData, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RequestData;
    fromJSON(object: any): RequestData;
    toJSON(message: RequestData): unknown;
    create(base?: DeepPartial<RequestData>): RequestData;
    fromPartial(object: DeepPartial<RequestData>): RequestData;
};
export declare const RequestData_HeadersEntry: {
    $type: "devvit.plugin.http.RequestData.HeadersEntry";
    encode(message: RequestData_HeadersEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RequestData_HeadersEntry;
    fromJSON(object: any): RequestData_HeadersEntry;
    toJSON(message: RequestData_HeadersEntry): unknown;
    create(base?: DeepPartial<RequestData_HeadersEntry>): RequestData_HeadersEntry;
    fromPartial(object: DeepPartial<RequestData_HeadersEntry>): RequestData_HeadersEntry;
};
export declare const FetchResponse: {
    $type: "devvit.plugin.http.FetchResponse";
    encode(message: FetchResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FetchResponse;
    fromJSON(object: any): FetchResponse;
    toJSON(message: FetchResponse): unknown;
    create(base?: DeepPartial<FetchResponse>): FetchResponse;
    fromPartial(object: DeepPartial<FetchResponse>): FetchResponse;
};
export declare const FetchResponse_HeadersEntry: {
    $type: "devvit.plugin.http.FetchResponse.HeadersEntry";
    encode(message: FetchResponse_HeadersEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FetchResponse_HeadersEntry;
    fromJSON(object: any): FetchResponse_HeadersEntry;
    toJSON(message: FetchResponse_HeadersEntry): unknown;
    create(base?: DeepPartial<FetchResponse_HeadersEntry>): FetchResponse_HeadersEntry;
    fromPartial(object: DeepPartial<FetchResponse_HeadersEntry>): FetchResponse_HeadersEntry;
};
export interface HTTP {
    Fetch(request: FetchRequest, metadata?: Metadata): Promise<FetchResponse>;
}
export declare const HTTPServiceName = "devvit.plugin.http.HTTP";
export declare class HTTPClientImpl implements HTTP {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Fetch(request: FetchRequest, metadata?: Metadata): Promise<FetchResponse>;
}
export type HTTPDefinition = typeof HTTPDefinition;
export declare const HTTPDefinition: {
    readonly name: "HTTP";
    readonly fullName: "devvit.plugin.http.HTTP";
    readonly methods: {
        readonly fetch: {
            readonly name: "Fetch";
            readonly requestType: {
                $type: "devvit.plugin.http.FetchRequest";
                encode(message: FetchRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): FetchRequest;
                fromJSON(object: any): FetchRequest;
                toJSON(message: FetchRequest): unknown;
                create(base?: DeepPartial<FetchRequest>): FetchRequest;
                fromPartial(object: DeepPartial<FetchRequest>): FetchRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.http.FetchResponse";
                encode(message: FetchResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): FetchResponse;
                fromJSON(object: any): FetchResponse;
                toJSON(message: FetchResponse): unknown;
                create(base?: DeepPartial<FetchResponse>): FetchResponse;
                fromPartial(object: DeepPartial<FetchResponse>): FetchResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array, metadata?: Metadata): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=http.d.ts.map