/**
 * #inspector.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { Observable } from "rxjs";
import { Metadata } from "../../../../lib/Types.js";
import { Empty } from "../../../google/protobuf/empty.js";
import { SerializableServiceDefinition } from "../../runtime/serializable.js";
export declare enum InspectorUpdateType {
    ADDED = 0,
    REMOVED = 1,
    CHANGED = 2,
    /** SUBSCRIBED - The client is now a registered subscriber and will receive updates. */
    SUBSCRIBED = 3,
    UNRECOGNIZED = -1
}
export declare function inspectorUpdateTypeFromJSON(object: any): InspectorUpdateType;
export declare function inspectorUpdateTypeToJSON(object: InspectorUpdateType): number;
export interface InspectorQuery {
    type: string;
    hostname: string;
}
export interface InspectorDescription {
    provides: SerializableServiceDefinition[];
    hostname: string;
}
export interface InspectorDescriptions {
    descriptions: InspectorDescription[];
}
export interface InspectorUpdate {
    description?: InspectorDescription | undefined;
    type: InspectorUpdateType;
}
export declare const InspectorQuery: {
    $type: "devvit.plugin.inspector.InspectorQuery";
    encode(message: InspectorQuery, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): InspectorQuery;
    fromJSON(object: any): InspectorQuery;
    toJSON(message: InspectorQuery): unknown;
    create(base?: DeepPartial<InspectorQuery>): InspectorQuery;
    fromPartial(object: DeepPartial<InspectorQuery>): InspectorQuery;
};
export declare const InspectorDescription: {
    $type: "devvit.plugin.inspector.InspectorDescription";
    encode(message: InspectorDescription, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): InspectorDescription;
    fromJSON(object: any): InspectorDescription;
    toJSON(message: InspectorDescription): unknown;
    create(base?: DeepPartial<InspectorDescription>): InspectorDescription;
    fromPartial(object: DeepPartial<InspectorDescription>): InspectorDescription;
};
export declare const InspectorDescriptions: {
    $type: "devvit.plugin.inspector.InspectorDescriptions";
    encode(message: InspectorDescriptions, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): InspectorDescriptions;
    fromJSON(object: any): InspectorDescriptions;
    toJSON(message: InspectorDescriptions): unknown;
    create(base?: DeepPartial<InspectorDescriptions>): InspectorDescriptions;
    fromPartial(object: DeepPartial<InspectorDescriptions>): InspectorDescriptions;
};
export declare const InspectorUpdate: {
    $type: "devvit.plugin.inspector.InspectorUpdate";
    encode(message: InspectorUpdate, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): InspectorUpdate;
    fromJSON(object: any): InspectorUpdate;
    toJSON(message: InspectorUpdate): unknown;
    create(base?: DeepPartial<InspectorUpdate>): InspectorUpdate;
    fromPartial(object: DeepPartial<InspectorUpdate>): InspectorUpdate;
};
export interface Inspector {
    ListActors(request: InspectorQuery, metadata?: Metadata): Promise<InspectorDescriptions>;
    ActorChanges(request: Empty, metadata?: Metadata): Observable<InspectorUpdate>;
}
export declare const InspectorServiceName = "devvit.plugin.inspector.Inspector";
export declare class InspectorClientImpl implements Inspector {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    ListActors(request: InspectorQuery, metadata?: Metadata): Promise<InspectorDescriptions>;
    ActorChanges(request: Empty, metadata?: Metadata): Observable<InspectorUpdate>;
}
export type InspectorDefinition = typeof InspectorDefinition;
export declare const InspectorDefinition: {
    readonly name: "Inspector";
    readonly fullName: "devvit.plugin.inspector.Inspector";
    readonly methods: {
        readonly listActors: {
            readonly name: "ListActors";
            readonly requestType: {
                $type: "devvit.plugin.inspector.InspectorQuery";
                encode(message: InspectorQuery, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): InspectorQuery;
                fromJSON(object: any): InspectorQuery;
                toJSON(message: InspectorQuery): unknown;
                create(base?: DeepPartial<InspectorQuery>): InspectorQuery;
                fromPartial(object: DeepPartial<InspectorQuery>): InspectorQuery;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.inspector.InspectorDescriptions";
                encode(message: InspectorDescriptions, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): InspectorDescriptions;
                fromJSON(object: any): InspectorDescriptions;
                toJSON(message: InspectorDescriptions): unknown;
                create(base?: DeepPartial<InspectorDescriptions>): InspectorDescriptions;
                fromPartial(object: DeepPartial<InspectorDescriptions>): InspectorDescriptions;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly actorChanges: {
            readonly name: "ActorChanges";
            readonly requestType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {} | undefined): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.inspector.InspectorUpdate";
                encode(message: InspectorUpdate, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): InspectorUpdate;
                fromJSON(object: any): InspectorUpdate;
                toJSON(message: InspectorUpdate): unknown;
                create(base?: DeepPartial<InspectorUpdate>): InspectorUpdate;
                fromPartial(object: DeepPartial<InspectorUpdate>): InspectorUpdate;
            };
            readonly responseStream: true;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array, metadata?: Metadata): Promise<Uint8Array>;
    clientStreamingRequest(service: string, method: string, data: Observable<Uint8Array>, metadata?: Metadata): Promise<Uint8Array>;
    serverStreamingRequest(service: string, method: string, data: Uint8Array, metadata?: Metadata): Observable<Uint8Array>;
    bidirectionalStreamingRequest(service: string, method: string, data: Observable<Uint8Array>, metadata?: Metadata): Observable<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=inspector.d.ts.map