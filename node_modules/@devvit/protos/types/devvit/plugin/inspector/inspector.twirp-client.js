import { InspectorQuery, InspectorDescriptions, InspectorUpdate, } from './inspector.js';
import { Empty } from '../../../google/protobuf/empty.js';
export class InspectorClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.ListActors.bind(this);
        this.ActorChanges.bind(this);
    }
    ListActors(request) {
        const data = InspectorQuery.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.inspector.Inspector', 'ListActors', 'application/json', data);
        return promise.then((data) => InspectorDescriptions.fromJSON(data));
    }
    ActorChanges(request) {
        const data = Empty.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.inspector.Inspector', 'ActorChanges', 'application/json', data);
        return promise.then((data) => InspectorUpdate.fromJSON(data));
    }
}
export class InspectorClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.ListActors.bind(this);
        this.ActorChanges.bind(this);
    }
    ListActors(request) {
        const data = InspectorQuery.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.inspector.Inspector', 'ListActors', 'application/protobuf', data);
        return promise.then((data) => InspectorDescriptions.decode(data));
    }
    ActorChanges(request) {
        const data = Empty.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.inspector.Inspector', 'ActorChanges', 'application/protobuf', data);
        return promise.then((data) => InspectorUpdate.decode(data));
    }
}
