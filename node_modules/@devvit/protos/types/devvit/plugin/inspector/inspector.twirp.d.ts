/// <reference types="node" resolution-mode="require"/>
import { TwirpContext, TwirpServer } from 'twirp-ts';
import { InspectorQuery, InspectorDescriptions, InspectorUpdate } from './inspector.js';
import { Empty } from '../../../google/protobuf/empty.js';
export interface InspectorTwirp<T extends TwirpContext = TwirpContext> {
    ListActors(ctx: T, request: InspectorQuery): Promise<InspectorDescriptions>;
    ActorChanges(ctx: T, request: Empty): Promise<InspectorUpdate>;
}
export declare enum InspectorMethod {
    ListActors = "ListActors",
    ActorChanges = "ActorChanges"
}
export declare const InspectorMethodList: InspectorMethod[];
export declare function createInspectorServer<T extends TwirpContext = TwirpContext>(service: InspectorTwirp<T>): TwirpServer<InspectorTwirp<TwirpContext<import("http").IncomingMessage, import("http").ServerResponse<import("http").IncomingMessage>>>, T>;
//# sourceMappingURL=inspector.twirp.d.ts.map