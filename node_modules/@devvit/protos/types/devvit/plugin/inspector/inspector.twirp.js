import { TwirpServer, TwirpError, TwirpErrorCode, TwirpContentType, chainInterceptors, } from 'twirp-ts';
import { InspectorQuery, InspectorDescriptions, InspectorUpdate, } from './inspector.js';
import { Empty } from '../../../google/protobuf/empty.js';
export var InspectorMethod;
(function (InspectorMethod) {
    InspectorMethod["ListActors"] = "ListActors";
    InspectorMethod["ActorChanges"] = "ActorChanges";
})(InspectorMethod || (InspectorMethod = {}));
export const InspectorMethodList = [
    InspectorMethod.ListActors,
    InspectorMethod.ActorChanges,
];
export function createInspectorServer(service) {
    return new TwirpServer({
        service,
        packageName: 'devvit.plugin.inspector',
        serviceName: 'Inspector',
        methodList: InspectorMethodList,
        matchRoute: matchInspectorRoute,
    });
}
function matchInspectorRoute(method, events) {
    switch (method) {
        case 'ListActors':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'ListActors' };
                await events.onMatch(ctx);
                return handleInspectorListActorsRequest(ctx, service, data, interceptors);
            };
        case 'ActorChanges':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'ActorChanges' };
                await events.onMatch(ctx);
                return handleInspectorActorChangesRequest(ctx, service, data, interceptors);
            };
        default:
            events.onNotFound();
            const msg = `no handler found`;
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleInspectorListActorsRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleInspectorListActorsJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleInspectorListActorsProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleInspectorActorChangesRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleInspectorActorChangesJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleInspectorActorChangesProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
async function handleInspectorListActorsJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = InspectorQuery.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.ListActors(ctx, inputReq);
        });
    }
    else {
        response = await service.ListActors(ctx, request);
    }
    return JSON.stringify(InspectorDescriptions.toJSON(response));
}
async function handleInspectorActorChangesJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = Empty.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.ActorChanges(ctx, inputReq);
        });
    }
    else {
        response = await service.ActorChanges(ctx, request);
    }
    return JSON.stringify(InspectorUpdate.toJSON(response));
}
async function handleInspectorListActorsProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = InspectorQuery.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.ListActors(ctx, inputReq);
        });
    }
    else {
        response = await service.ListActors(ctx, request);
    }
    return Buffer.from(InspectorDescriptions.encode(response).finish());
}
async function handleInspectorActorChangesProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = Empty.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.ActorChanges(ctx, inputReq);
        });
    }
    else {
        response = await service.ActorChanges(ctx, request);
    }
    return Buffer.from(InspectorUpdate.encode(response).finish());
}
