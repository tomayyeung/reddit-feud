/**
 * #kvstore.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { Metadata } from "../../../../lib/Types.js";
import { Empty } from "../../../google/protobuf/empty.js";
export interface MessageSet {
    messages: {
        [key: string]: string;
    };
}
export interface MessageSet_MessagesEntry {
    key: string;
    value: string;
}
export interface KeySet {
    keys: string[];
}
export interface ListFilter {
    filter: string;
}
export declare const MessageSet: {
    $type: "devvit.plugin.kvstore.MessageSet";
    encode(message: MessageSet, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MessageSet;
    fromJSON(object: any): MessageSet;
    toJSON(message: MessageSet): unknown;
    create(base?: DeepPartial<MessageSet>): MessageSet;
    fromPartial(object: DeepPartial<MessageSet>): MessageSet;
};
export declare const MessageSet_MessagesEntry: {
    $type: "devvit.plugin.kvstore.MessageSet.MessagesEntry";
    encode(message: MessageSet_MessagesEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MessageSet_MessagesEntry;
    fromJSON(object: any): MessageSet_MessagesEntry;
    toJSON(message: MessageSet_MessagesEntry): unknown;
    create(base?: DeepPartial<MessageSet_MessagesEntry>): MessageSet_MessagesEntry;
    fromPartial(object: DeepPartial<MessageSet_MessagesEntry>): MessageSet_MessagesEntry;
};
export declare const KeySet: {
    $type: "devvit.plugin.kvstore.KeySet";
    encode(message: KeySet, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): KeySet;
    fromJSON(object: any): KeySet;
    toJSON(message: KeySet): unknown;
    create(base?: DeepPartial<KeySet>): KeySet;
    fromPartial(object: DeepPartial<KeySet>): KeySet;
};
export declare const ListFilter: {
    $type: "devvit.plugin.kvstore.ListFilter";
    encode(message: ListFilter, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ListFilter;
    fromJSON(object: any): ListFilter;
    toJSON(message: ListFilter): unknown;
    create(base?: DeepPartial<ListFilter>): ListFilter;
    fromPartial(object: DeepPartial<ListFilter>): ListFilter;
};
export interface KVStore {
    Put(request: MessageSet, metadata?: Metadata): Promise<Empty>;
    Get(request: KeySet, metadata?: Metadata): Promise<MessageSet>;
    Del(request: KeySet, metadata?: Metadata): Promise<Empty>;
    List(request: ListFilter, metadata?: Metadata): Promise<KeySet>;
}
export declare const KVStoreServiceName = "devvit.plugin.kvstore.KVStore";
export declare class KVStoreClientImpl implements KVStore {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Put(request: MessageSet, metadata?: Metadata): Promise<Empty>;
    Get(request: KeySet, metadata?: Metadata): Promise<MessageSet>;
    Del(request: KeySet, metadata?: Metadata): Promise<Empty>;
    List(request: ListFilter, metadata?: Metadata): Promise<KeySet>;
}
export type KVStoreDefinition = typeof KVStoreDefinition;
export declare const KVStoreDefinition: {
    readonly name: "KVStore";
    readonly fullName: "devvit.plugin.kvstore.KVStore";
    readonly methods: {
        readonly put: {
            readonly name: "Put";
            readonly requestType: {
                $type: "devvit.plugin.kvstore.MessageSet";
                encode(message: MessageSet, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): MessageSet;
                fromJSON(object: any): MessageSet;
                toJSON(message: MessageSet): unknown;
                create(base?: DeepPartial<MessageSet>): MessageSet;
                fromPartial(object: DeepPartial<MessageSet>): MessageSet;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {} | undefined): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly get: {
            readonly name: "Get";
            readonly requestType: {
                $type: "devvit.plugin.kvstore.KeySet";
                encode(message: KeySet, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): KeySet;
                fromJSON(object: any): KeySet;
                toJSON(message: KeySet): unknown;
                create(base?: DeepPartial<KeySet>): KeySet;
                fromPartial(object: DeepPartial<KeySet>): KeySet;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.kvstore.MessageSet";
                encode(message: MessageSet, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): MessageSet;
                fromJSON(object: any): MessageSet;
                toJSON(message: MessageSet): unknown;
                create(base?: DeepPartial<MessageSet>): MessageSet;
                fromPartial(object: DeepPartial<MessageSet>): MessageSet;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly del: {
            readonly name: "Del";
            readonly requestType: {
                $type: "devvit.plugin.kvstore.KeySet";
                encode(message: KeySet, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): KeySet;
                fromJSON(object: any): KeySet;
                toJSON(message: KeySet): unknown;
                create(base?: DeepPartial<KeySet>): KeySet;
                fromPartial(object: DeepPartial<KeySet>): KeySet;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {} | undefined): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly list: {
            readonly name: "List";
            readonly requestType: {
                $type: "devvit.plugin.kvstore.ListFilter";
                encode(message: ListFilter, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ListFilter;
                fromJSON(object: any): ListFilter;
                toJSON(message: ListFilter): unknown;
                create(base?: DeepPartial<ListFilter>): ListFilter;
                fromPartial(object: DeepPartial<ListFilter>): ListFilter;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.kvstore.KeySet";
                encode(message: KeySet, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): KeySet;
                fromJSON(object: any): KeySet;
                toJSON(message: KeySet): unknown;
                create(base?: DeepPartial<KeySet>): KeySet;
                fromPartial(object: DeepPartial<KeySet>): KeySet;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array, metadata?: Metadata): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=kvstore.d.ts.map