/**
 * #kvstore.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { Empty } from "../../../google/protobuf/empty.js";
import { messageTypeRegistry } from "../../../typeRegistry.js";
function createBaseMessageSet() {
    return { messages: {} };
}
export const MessageSet = {
    $type: "devvit.plugin.kvstore.MessageSet",
    encode(message, writer = _m0.Writer.create()) {
        Object.entries(message.messages).forEach(([key, value]) => {
            MessageSet_MessagesEntry.encode({ key: key, value }, writer.uint32(10).fork()).ldelim();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMessageSet();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    const entry1 = MessageSet_MessagesEntry.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.messages[entry1.key] = entry1.value;
                    }
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            messages: isObject(object.messages)
                ? Object.entries(object.messages).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.messages) {
            const entries = Object.entries(message.messages);
            if (entries.length > 0) {
                obj.messages = {};
                entries.forEach(([k, v]) => {
                    obj.messages[k] = v;
                });
            }
        }
        return obj;
    },
    create(base) {
        return MessageSet.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMessageSet();
        message.messages = Object.entries(object.messages ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = globalThis.String(value);
            }
            return acc;
        }, {});
        return message;
    },
};
messageTypeRegistry.set(MessageSet.$type, MessageSet);
function createBaseMessageSet_MessagesEntry() {
    return { key: "", value: "" };
}
export const MessageSet_MessagesEntry = {
    $type: "devvit.plugin.kvstore.MessageSet.MessagesEntry",
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMessageSet_MessagesEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? globalThis.String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return MessageSet_MessagesEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMessageSet_MessagesEntry();
        message.key = object.key ?? "";
        message.value = object.value ?? "";
        return message;
    },
};
messageTypeRegistry.set(MessageSet_MessagesEntry.$type, MessageSet_MessagesEntry);
function createBaseKeySet() {
    return { keys: [] };
}
export const KeySet = {
    $type: "devvit.plugin.kvstore.KeySet",
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.keys) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseKeySet();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.keys.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { keys: globalThis.Array.isArray(object?.keys) ? object.keys.map((e) => globalThis.String(e)) : [] };
    },
    toJSON(message) {
        const obj = {};
        if (message.keys?.length) {
            obj.keys = message.keys;
        }
        return obj;
    },
    create(base) {
        return KeySet.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseKeySet();
        message.keys = object.keys?.map((e) => e) || [];
        return message;
    },
};
messageTypeRegistry.set(KeySet.$type, KeySet);
function createBaseListFilter() {
    return { filter: "" };
}
export const ListFilter = {
    $type: "devvit.plugin.kvstore.ListFilter",
    encode(message, writer = _m0.Writer.create()) {
        if (message.filter !== "") {
            writer.uint32(10).string(message.filter);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListFilter();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.filter = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { filter: isSet(object.filter) ? globalThis.String(object.filter) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.filter !== "") {
            obj.filter = message.filter;
        }
        return obj;
    },
    create(base) {
        return ListFilter.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseListFilter();
        message.filter = object.filter ?? "";
        return message;
    },
};
messageTypeRegistry.set(ListFilter.$type, ListFilter);
export const KVStoreServiceName = "devvit.plugin.kvstore.KVStore";
export class KVStoreClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || KVStoreServiceName;
        this.rpc = rpc;
        this.Put = this.Put.bind(this);
        this.Get = this.Get.bind(this);
        this.Del = this.Del.bind(this);
        this.List = this.List.bind(this);
    }
    Put(request, metadata) {
        const data = MessageSet.encode(request).finish();
        const promise = this.rpc.request(this.service, "Put", data, metadata);
        return promise.then((data) => Empty.decode(_m0.Reader.create(data)));
    }
    Get(request, metadata) {
        const data = KeySet.encode(request).finish();
        const promise = this.rpc.request(this.service, "Get", data, metadata);
        return promise.then((data) => MessageSet.decode(_m0.Reader.create(data)));
    }
    Del(request, metadata) {
        const data = KeySet.encode(request).finish();
        const promise = this.rpc.request(this.service, "Del", data, metadata);
        return promise.then((data) => Empty.decode(_m0.Reader.create(data)));
    }
    List(request, metadata) {
        const data = ListFilter.encode(request).finish();
        const promise = this.rpc.request(this.service, "List", data, metadata);
        return promise.then((data) => KeySet.decode(_m0.Reader.create(data)));
    }
}
export const KVStoreDefinition = {
    name: "KVStore",
    fullName: "devvit.plugin.kvstore.KVStore",
    methods: {
        put: {
            name: "Put",
            requestType: MessageSet,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
        get: {
            name: "Get",
            requestType: KeySet,
            requestStream: false,
            responseType: MessageSet,
            responseStream: false,
            options: {},
        },
        del: {
            name: "Del",
            requestType: KeySet,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
        list: {
            name: "List",
            requestType: ListFilter,
            requestStream: false,
            responseType: KeySet,
            responseStream: false,
            options: {},
        },
    },
};
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
