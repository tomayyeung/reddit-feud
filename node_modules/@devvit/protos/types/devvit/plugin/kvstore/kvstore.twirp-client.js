import { MessageSet, KeySet, ListFilter } from './kvstore.js';
import { Empty } from '../../../google/protobuf/empty.js';
export class KVStoreClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.Put.bind(this);
        this.Get.bind(this);
        this.Del.bind(this);
        this.List.bind(this);
    }
    Put(request) {
        const data = MessageSet.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.kvstore.KVStore', 'Put', 'application/json', data);
        return promise.then((data) => Empty.fromJSON(data));
    }
    Get(request) {
        const data = KeySet.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.kvstore.KVStore', 'Get', 'application/json', data);
        return promise.then((data) => MessageSet.fromJSON(data));
    }
    Del(request) {
        const data = KeySet.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.kvstore.KVStore', 'Del', 'application/json', data);
        return promise.then((data) => Empty.fromJSON(data));
    }
    List(request) {
        const data = ListFilter.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.kvstore.KVStore', 'List', 'application/json', data);
        return promise.then((data) => KeySet.fromJSON(data));
    }
}
export class KVStoreClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.Put.bind(this);
        this.Get.bind(this);
        this.Del.bind(this);
        this.List.bind(this);
    }
    Put(request) {
        const data = MessageSet.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.kvstore.KVStore', 'Put', 'application/protobuf', data);
        return promise.then((data) => Empty.decode(data));
    }
    Get(request) {
        const data = KeySet.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.kvstore.KVStore', 'Get', 'application/protobuf', data);
        return promise.then((data) => MessageSet.decode(data));
    }
    Del(request) {
        const data = KeySet.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.kvstore.KVStore', 'Del', 'application/protobuf', data);
        return promise.then((data) => Empty.decode(data));
    }
    List(request) {
        const data = ListFilter.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.kvstore.KVStore', 'List', 'application/protobuf', data);
        return promise.then((data) => KeySet.decode(data));
    }
}
