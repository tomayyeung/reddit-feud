import { TwirpServer, TwirpError, TwirpErrorCode, TwirpContentType, chainInterceptors, } from 'twirp-ts';
import { MessageSet, KeySet, ListFilter } from './kvstore.js';
import { Empty } from '../../../google/protobuf/empty.js';
export var KVStoreMethod;
(function (KVStoreMethod) {
    KVStoreMethod["Put"] = "Put";
    KVStoreMethod["Get"] = "Get";
    KVStoreMethod["Del"] = "Del";
    KVStoreMethod["List"] = "List";
})(KVStoreMethod || (KVStoreMethod = {}));
export const KVStoreMethodList = [
    KVStoreMethod.Put,
    KVStoreMethod.Get,
    KVStoreMethod.Del,
    KVStoreMethod.List,
];
export function createKVStoreServer(service) {
    return new TwirpServer({
        service,
        packageName: 'devvit.plugin.kvstore',
        serviceName: 'KVStore',
        methodList: KVStoreMethodList,
        matchRoute: matchKVStoreRoute,
    });
}
function matchKVStoreRoute(method, events) {
    switch (method) {
        case 'Put':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'Put' };
                await events.onMatch(ctx);
                return handleKVStorePutRequest(ctx, service, data, interceptors);
            };
        case 'Get':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'Get' };
                await events.onMatch(ctx);
                return handleKVStoreGetRequest(ctx, service, data, interceptors);
            };
        case 'Del':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'Del' };
                await events.onMatch(ctx);
                return handleKVStoreDelRequest(ctx, service, data, interceptors);
            };
        case 'List':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'List' };
                await events.onMatch(ctx);
                return handleKVStoreListRequest(ctx, service, data, interceptors);
            };
        default:
            events.onNotFound();
            const msg = `no handler found`;
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleKVStorePutRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleKVStorePutJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleKVStorePutProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleKVStoreGetRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleKVStoreGetJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleKVStoreGetProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleKVStoreDelRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleKVStoreDelJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleKVStoreDelProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleKVStoreListRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleKVStoreListJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleKVStoreListProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
async function handleKVStorePutJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = MessageSet.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.Put(ctx, inputReq);
        });
    }
    else {
        response = await service.Put(ctx, request);
    }
    return JSON.stringify(Empty.toJSON(response));
}
async function handleKVStoreGetJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = KeySet.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.Get(ctx, inputReq);
        });
    }
    else {
        response = await service.Get(ctx, request);
    }
    return JSON.stringify(MessageSet.toJSON(response));
}
async function handleKVStoreDelJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = KeySet.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.Del(ctx, inputReq);
        });
    }
    else {
        response = await service.Del(ctx, request);
    }
    return JSON.stringify(Empty.toJSON(response));
}
async function handleKVStoreListJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = ListFilter.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.List(ctx, inputReq);
        });
    }
    else {
        response = await service.List(ctx, request);
    }
    return JSON.stringify(KeySet.toJSON(response));
}
async function handleKVStorePutProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = MessageSet.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.Put(ctx, inputReq);
        });
    }
    else {
        response = await service.Put(ctx, request);
    }
    return Buffer.from(Empty.encode(response).finish());
}
async function handleKVStoreGetProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = KeySet.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.Get(ctx, inputReq);
        });
    }
    else {
        response = await service.Get(ctx, request);
    }
    return Buffer.from(MessageSet.encode(response).finish());
}
async function handleKVStoreDelProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = KeySet.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.Del(ctx, inputReq);
        });
    }
    else {
        response = await service.Del(ctx, request);
    }
    return Buffer.from(Empty.encode(response).finish());
}
async function handleKVStoreListProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = ListFilter.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.List(ctx, inputReq);
        });
    }
    else {
        response = await service.List(ctx, request);
    }
    return Buffer.from(KeySet.encode(response).finish());
}
