/**
 * #linker.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { Metadata } from "../../../../lib/Types.js";
import { LinkedBundle } from "../../runtime/bundle.js";
import { Bundle } from "../buildpack/buildpack_common.js";
import { ResolutionError } from "./resolver.js";
export interface LinkerResponse {
    bundle?: LinkedBundle | undefined;
    errors: ResolutionError[];
}
export declare const LinkerResponse: {
    $type: "devvit.plugin.linker.LinkerResponse";
    encode(message: LinkerResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): LinkerResponse;
    fromJSON(object: any): LinkerResponse;
    toJSON(message: LinkerResponse): unknown;
    create(base?: DeepPartial<LinkerResponse>): LinkerResponse;
    fromPartial(object: DeepPartial<LinkerResponse>): LinkerResponse;
};
/**
 * Linker makes a BundledApp out of a bundle.  Technically, it could probably
 * make a BundledApp out of a VersionedBundle#uuid, but that would require some
 * refactoring.
 *
 * A Linker implementation will typically coordinate with a Resolver to find all
 * of the other bundles to include.
 */
export interface Linker {
    Link(request: Bundle, metadata?: Metadata): Promise<LinkerResponse>;
}
export declare const LinkerServiceName = "devvit.plugin.linker.Linker";
export declare class LinkerClientImpl implements Linker {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Link(request: Bundle, metadata?: Metadata): Promise<LinkerResponse>;
}
/**
 * Linker makes a BundledApp out of a bundle.  Technically, it could probably
 * make a BundledApp out of a VersionedBundle#uuid, but that would require some
 * refactoring.
 *
 * A Linker implementation will typically coordinate with a Resolver to find all
 * of the other bundles to include.
 */
export type LinkerDefinition = typeof LinkerDefinition;
export declare const LinkerDefinition: {
    readonly name: "Linker";
    readonly fullName: "devvit.plugin.linker.Linker";
    readonly methods: {
        readonly link: {
            readonly name: "Link";
            readonly requestType: {
                $type: "devvit.plugin.buildpack.Bundle";
                encode(message: Bundle, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Bundle;
                fromJSON(object: any): Bundle;
                toJSON(message: Bundle): unknown;
                create(base?: {
                    code?: string;
                    sourceMap?: string | undefined;
                    dependencies?: {
                        actor?: {
                            name?: string;
                            owner?: string;
                            version?: string;
                        } | undefined;
                        hostname?: string;
                        provides?: {
                            actor?: {
                                name?: string;
                                owner?: string;
                                version?: string;
                            } | undefined;
                            definition?: {
                                fullName?: string;
                                methods?: {
                                    fullName?: string;
                                    name?: string;
                                    requestStream?: boolean;
                                    responseStream?: boolean;
                                    requestType?: string;
                                    responseType?: string;
                                }[];
                                name?: string;
                                version?: string;
                            } | undefined;
                            locations?: {
                                allow?: string[];
                                deny?: string[];
                            } | undefined;
                            partitionsBy?: string[];
                        }[];
                        uses?: {
                            name?: string | undefined;
                            owner?: string | undefined;
                            typeName?: string;
                            versions?: string | undefined;
                        }[];
                    } | undefined;
                    buildInfo?: {
                        created?: Date | undefined;
                        dependencies?: {
                            [x: string]: string | undefined;
                        };
                        targetRuntime?: import("../../runtime/bundle.js").TargetRuntime;
                    } | undefined;
                    assets?: {
                        files?: {
                            path?: string;
                            content?: string;
                            isDirectory?: boolean;
                            isBase64?: boolean;
                        }[];
                    } | undefined;
                    assetIds?: {
                        [x: string]: string | undefined;
                    };
                    webviewAssetIds?: {
                        [x: string]: string | undefined;
                    };
                    paymentsConfig?: {
                        products?: {
                            [x: string]: {
                                sku?: string;
                                name?: string;
                                price?: {
                                    amount?: number;
                                    currency?: import("../../payments/v1alpha/product.js").Currency;
                                } | undefined;
                                environment?: import("../../payments/v1alpha/common.js").Environment;
                                description?: string;
                                accountingType?: import("../../payments/v1alpha/product.js").AccountingType;
                                productMetadata?: {
                                    [x: string]: string | undefined;
                                };
                                images?: {
                                    [x: string]: string | undefined;
                                };
                            } | undefined;
                        };
                    } | undefined;
                } | undefined): Bundle;
                fromPartial(object: {
                    code?: string;
                    sourceMap?: string | undefined;
                    dependencies?: {
                        actor?: {
                            name?: string;
                            owner?: string;
                            version?: string;
                        } | undefined;
                        hostname?: string;
                        provides?: {
                            actor?: {
                                name?: string;
                                owner?: string;
                                version?: string;
                            } | undefined;
                            definition?: {
                                fullName?: string;
                                methods?: {
                                    fullName?: string;
                                    name?: string;
                                    requestStream?: boolean;
                                    responseStream?: boolean;
                                    requestType?: string;
                                    responseType?: string;
                                }[];
                                name?: string;
                                version?: string;
                            } | undefined;
                            locations?: {
                                allow?: string[];
                                deny?: string[];
                            } | undefined;
                            partitionsBy?: string[];
                        }[];
                        uses?: {
                            name?: string | undefined;
                            owner?: string | undefined;
                            typeName?: string;
                            versions?: string | undefined;
                        }[];
                    } | undefined;
                    buildInfo?: {
                        created?: Date | undefined;
                        dependencies?: {
                            [x: string]: string | undefined;
                        };
                        targetRuntime?: import("../../runtime/bundle.js").TargetRuntime;
                    } | undefined;
                    assets?: {
                        files?: {
                            path?: string;
                            content?: string;
                            isDirectory?: boolean;
                            isBase64?: boolean;
                        }[];
                    } | undefined;
                    assetIds?: {
                        [x: string]: string | undefined;
                    };
                    webviewAssetIds?: {
                        [x: string]: string | undefined;
                    };
                    paymentsConfig?: {
                        products?: {
                            [x: string]: {
                                sku?: string;
                                name?: string;
                                price?: {
                                    amount?: number;
                                    currency?: import("../../payments/v1alpha/product.js").Currency;
                                } | undefined;
                                environment?: import("../../payments/v1alpha/common.js").Environment;
                                description?: string;
                                accountingType?: import("../../payments/v1alpha/product.js").AccountingType;
                                productMetadata?: {
                                    [x: string]: string | undefined;
                                };
                                images?: {
                                    [x: string]: string | undefined;
                                };
                            } | undefined;
                        };
                    } | undefined;
                }): Bundle;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.linker.LinkerResponse";
                encode(message: LinkerResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): LinkerResponse;
                fromJSON(object: any): LinkerResponse;
                toJSON(message: LinkerResponse): unknown;
                create(base?: DeepPartial<LinkerResponse>): LinkerResponse;
                fromPartial(object: DeepPartial<LinkerResponse>): LinkerResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array, metadata?: Metadata): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=linker.d.ts.map