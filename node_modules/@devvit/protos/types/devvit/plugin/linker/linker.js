/**
 * #linker.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { messageTypeRegistry } from "../../../typeRegistry.js";
import { LinkedBundle } from "../../runtime/bundle.js";
import { Bundle } from "../buildpack/buildpack_common.js";
import { ResolutionError } from "./resolver.js";
function createBaseLinkerResponse() {
    return { bundle: undefined, errors: [] };
}
export const LinkerResponse = {
    $type: "devvit.plugin.linker.LinkerResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.bundle !== undefined) {
            LinkedBundle.encode(message.bundle, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.errors) {
            ResolutionError.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLinkerResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.bundle = LinkedBundle.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.errors.push(ResolutionError.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            bundle: isSet(object.bundle) ? LinkedBundle.fromJSON(object.bundle) : undefined,
            errors: globalThis.Array.isArray(object?.errors)
                ? object.errors.map((e) => ResolutionError.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.bundle !== undefined) {
            obj.bundle = LinkedBundle.toJSON(message.bundle);
        }
        if (message.errors?.length) {
            obj.errors = message.errors.map((e) => ResolutionError.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return LinkerResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseLinkerResponse();
        message.bundle = (object.bundle !== undefined && object.bundle !== null)
            ? LinkedBundle.fromPartial(object.bundle)
            : undefined;
        message.errors = object.errors?.map((e) => ResolutionError.fromPartial(e)) || [];
        return message;
    },
};
messageTypeRegistry.set(LinkerResponse.$type, LinkerResponse);
export const LinkerServiceName = "devvit.plugin.linker.Linker";
export class LinkerClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || LinkerServiceName;
        this.rpc = rpc;
        this.Link = this.Link.bind(this);
    }
    Link(request, metadata) {
        const data = Bundle.encode(request).finish();
        const promise = this.rpc.request(this.service, "Link", data, metadata);
        return promise.then((data) => LinkerResponse.decode(_m0.Reader.create(data)));
    }
}
export const LinkerDefinition = {
    name: "Linker",
    fullName: "devvit.plugin.linker.Linker",
    methods: {
        link: {
            name: "Link",
            requestType: Bundle,
            requestStream: false,
            responseType: LinkerResponse,
            responseStream: false,
            options: {},
        },
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
