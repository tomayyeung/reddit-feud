/**
 * #resolver.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { Metadata } from "../../../../lib/Types.js";
import { Empty } from "../../../google/protobuf/empty.js";
import { PackageQuery } from "../../runtime/bundle.js";
import { Bundle } from "../buildpack/buildpack_common.js";
import { InspectorDescription, InspectorDescriptions } from "../inspector/inspector.js";
/** A PackageQuery resolves to a package backed by a Bundle or a plugin. */
export interface Resolution {
    bundle?: Bundle | undefined;
    error?: ResolutionError | undefined;
    plugin?: InspectorDescription | undefined;
}
export interface ResolutionError {
    /** Failing query. */
    query?: PackageQuery | undefined;
    /** Human readable error message. */
    text: string;
}
export declare const Resolution: {
    $type: "devvit.plugin.linker.Resolution";
    encode(message: Resolution, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Resolution;
    fromJSON(object: any): Resolution;
    toJSON(message: Resolution): unknown;
    create(base?: DeepPartial<Resolution>): Resolution;
    fromPartial(object: DeepPartial<Resolution>): Resolution;
};
export declare const ResolutionError: {
    $type: "devvit.plugin.linker.ResolutionError";
    encode(message: ResolutionError, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ResolutionError;
    fromJSON(object: any): ResolutionError;
    toJSON(message: ResolutionError): unknown;
    create(base?: DeepPartial<ResolutionError>): ResolutionError;
    fromPartial(object: DeepPartial<ResolutionError>): ResolutionError;
};
/**
 * A Resolver tells the Linker what bundles exist, and helps the Linker know
 * which bundle is the best bundle to match a given request or PackageQuery.
 */
export interface Resolver {
    /** What plugins are available to the Resolver? */
    RegisterPlugins(request: InspectorDescriptions, metadata?: Metadata): Promise<Empty>;
    /** What Bundle is best to satisfy the given request? */
    Resolve(request: PackageQuery, metadata?: Metadata): Promise<Resolution>;
    /** Notify the resolver that a bundle exists. Newer Bundles can overwrite older bundles. */
    RegisterBundle(request: Bundle, metadata?: Metadata): Promise<Empty>;
}
export declare const ResolverServiceName = "devvit.plugin.linker.Resolver";
export declare class ResolverClientImpl implements Resolver {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    RegisterPlugins(request: InspectorDescriptions, metadata?: Metadata): Promise<Empty>;
    Resolve(request: PackageQuery, metadata?: Metadata): Promise<Resolution>;
    RegisterBundle(request: Bundle, metadata?: Metadata): Promise<Empty>;
}
/**
 * A Resolver tells the Linker what bundles exist, and helps the Linker know
 * which bundle is the best bundle to match a given request or PackageQuery.
 */
export type ResolverDefinition = typeof ResolverDefinition;
export declare const ResolverDefinition: {
    readonly name: "Resolver";
    readonly fullName: "devvit.plugin.linker.Resolver";
    readonly methods: {
        /** What plugins are available to the Resolver? */
        readonly registerPlugins: {
            readonly name: "RegisterPlugins";
            readonly requestType: {
                $type: "devvit.plugin.inspector.InspectorDescriptions";
                encode(message: InspectorDescriptions, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): InspectorDescriptions;
                fromJSON(object: any): InspectorDescriptions;
                toJSON(message: InspectorDescriptions): unknown;
                create(base?: {
                    descriptions?: {
                        provides?: {
                            fullName?: string;
                            methods?: {
                                fullName?: string;
                                name?: string;
                                requestStream?: boolean;
                                responseStream?: boolean;
                                requestType?: string;
                                responseType?: string;
                            }[];
                            name?: string;
                            version?: string;
                        }[];
                        hostname?: string;
                    }[];
                } | undefined): InspectorDescriptions;
                fromPartial(object: {
                    descriptions?: {
                        provides?: {
                            fullName?: string;
                            methods?: {
                                fullName?: string;
                                name?: string;
                                requestStream?: boolean;
                                responseStream?: boolean;
                                requestType?: string;
                                responseType?: string;
                            }[];
                            name?: string;
                            version?: string;
                        }[];
                        hostname?: string;
                    }[];
                }): InspectorDescriptions;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {} | undefined): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** What Bundle is best to satisfy the given request? */
        readonly resolve: {
            readonly name: "Resolve";
            readonly requestType: {
                $type: "devvit.runtime.PackageQuery";
                encode(message: PackageQuery, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PackageQuery;
                fromJSON(object: any): PackageQuery;
                toJSON(message: PackageQuery): unknown;
                create(base?: {
                    name?: string | undefined;
                    owner?: string | undefined;
                    typeName?: string;
                    versions?: string | undefined;
                } | undefined): PackageQuery;
                fromPartial(object: {
                    name?: string | undefined;
                    owner?: string | undefined;
                    typeName?: string;
                    versions?: string | undefined;
                }): PackageQuery;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.linker.Resolution";
                encode(message: Resolution, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): Resolution;
                fromJSON(object: any): Resolution;
                toJSON(message: Resolution): unknown;
                create(base?: DeepPartial<Resolution>): Resolution;
                fromPartial(object: DeepPartial<Resolution>): Resolution;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Notify the resolver that a bundle exists. Newer Bundles can overwrite older bundles. */
        readonly registerBundle: {
            readonly name: "RegisterBundle";
            readonly requestType: {
                $type: "devvit.plugin.buildpack.Bundle";
                encode(message: Bundle, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Bundle;
                fromJSON(object: any): Bundle;
                toJSON(message: Bundle): unknown;
                create(base?: {
                    code?: string;
                    sourceMap?: string | undefined;
                    dependencies?: {
                        actor?: {
                            name?: string;
                            owner?: string;
                            version?: string;
                        } | undefined;
                        hostname?: string;
                        provides?: {
                            actor?: {
                                name?: string;
                                owner?: string;
                                version?: string;
                            } | undefined;
                            definition?: {
                                fullName?: string;
                                methods?: {
                                    fullName?: string;
                                    name?: string;
                                    requestStream?: boolean;
                                    responseStream?: boolean;
                                    requestType?: string;
                                    responseType?: string;
                                }[];
                                name?: string;
                                version?: string;
                            } | undefined;
                            locations?: {
                                allow?: string[];
                                deny?: string[];
                            } | undefined;
                            partitionsBy?: string[];
                        }[];
                        uses?: {
                            name?: string | undefined;
                            owner?: string | undefined;
                            typeName?: string;
                            versions?: string | undefined;
                        }[];
                    } | undefined;
                    buildInfo?: {
                        created?: Date | undefined;
                        dependencies?: {
                            [x: string]: string | undefined;
                        };
                        targetRuntime?: import("../../runtime/bundle.js").TargetRuntime;
                    } | undefined;
                    assets?: {
                        files?: {
                            path?: string;
                            content?: string;
                            isDirectory?: boolean;
                            isBase64?: boolean;
                        }[];
                    } | undefined;
                    assetIds?: {
                        [x: string]: string | undefined;
                    };
                    webviewAssetIds?: {
                        [x: string]: string | undefined;
                    };
                    paymentsConfig?: {
                        products?: {
                            [x: string]: {
                                sku?: string;
                                name?: string;
                                price?: {
                                    amount?: number;
                                    currency?: import("../../payments/v1alpha/product.js").Currency;
                                } | undefined;
                                environment?: import("../../payments/v1alpha/common.js").Environment;
                                description?: string;
                                accountingType?: import("../../payments/v1alpha/product.js").AccountingType;
                                productMetadata?: {
                                    [x: string]: string | undefined;
                                };
                                images?: {
                                    [x: string]: string | undefined;
                                };
                            } | undefined;
                        };
                    } | undefined;
                } | undefined): Bundle;
                fromPartial(object: {
                    code?: string;
                    sourceMap?: string | undefined;
                    dependencies?: {
                        actor?: {
                            name?: string;
                            owner?: string;
                            version?: string;
                        } | undefined;
                        hostname?: string;
                        provides?: {
                            actor?: {
                                name?: string;
                                owner?: string;
                                version?: string;
                            } | undefined;
                            definition?: {
                                fullName?: string;
                                methods?: {
                                    fullName?: string;
                                    name?: string;
                                    requestStream?: boolean;
                                    responseStream?: boolean;
                                    requestType?: string;
                                    responseType?: string;
                                }[];
                                name?: string;
                                version?: string;
                            } | undefined;
                            locations?: {
                                allow?: string[];
                                deny?: string[];
                            } | undefined;
                            partitionsBy?: string[];
                        }[];
                        uses?: {
                            name?: string | undefined;
                            owner?: string | undefined;
                            typeName?: string;
                            versions?: string | undefined;
                        }[];
                    } | undefined;
                    buildInfo?: {
                        created?: Date | undefined;
                        dependencies?: {
                            [x: string]: string | undefined;
                        };
                        targetRuntime?: import("../../runtime/bundle.js").TargetRuntime;
                    } | undefined;
                    assets?: {
                        files?: {
                            path?: string;
                            content?: string;
                            isDirectory?: boolean;
                            isBase64?: boolean;
                        }[];
                    } | undefined;
                    assetIds?: {
                        [x: string]: string | undefined;
                    };
                    webviewAssetIds?: {
                        [x: string]: string | undefined;
                    };
                    paymentsConfig?: {
                        products?: {
                            [x: string]: {
                                sku?: string;
                                name?: string;
                                price?: {
                                    amount?: number;
                                    currency?: import("../../payments/v1alpha/product.js").Currency;
                                } | undefined;
                                environment?: import("../../payments/v1alpha/common.js").Environment;
                                description?: string;
                                accountingType?: import("../../payments/v1alpha/product.js").AccountingType;
                                productMetadata?: {
                                    [x: string]: string | undefined;
                                };
                                images?: {
                                    [x: string]: string | undefined;
                                };
                            } | undefined;
                        };
                    } | undefined;
                }): Bundle;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {} | undefined): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array, metadata?: Metadata): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=resolver.d.ts.map