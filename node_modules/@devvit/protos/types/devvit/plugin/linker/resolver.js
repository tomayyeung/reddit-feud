/**
 * #resolver.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { Empty } from "../../../google/protobuf/empty.js";
import { messageTypeRegistry } from "../../../typeRegistry.js";
import { PackageQuery } from "../../runtime/bundle.js";
import { Bundle } from "../buildpack/buildpack_common.js";
import { InspectorDescription, InspectorDescriptions } from "../inspector/inspector.js";
function createBaseResolution() {
    return { bundle: undefined, error: undefined, plugin: undefined };
}
export const Resolution = {
    $type: "devvit.plugin.linker.Resolution",
    encode(message, writer = _m0.Writer.create()) {
        if (message.bundle !== undefined) {
            Bundle.encode(message.bundle, writer.uint32(10).fork()).ldelim();
        }
        if (message.error !== undefined) {
            ResolutionError.encode(message.error, writer.uint32(18).fork()).ldelim();
        }
        if (message.plugin !== undefined) {
            InspectorDescription.encode(message.plugin, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResolution();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.bundle = Bundle.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.error = ResolutionError.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.plugin = InspectorDescription.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            bundle: isSet(object.bundle) ? Bundle.fromJSON(object.bundle) : undefined,
            error: isSet(object.error) ? ResolutionError.fromJSON(object.error) : undefined,
            plugin: isSet(object.plugin) ? InspectorDescription.fromJSON(object.plugin) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.bundle !== undefined) {
            obj.bundle = Bundle.toJSON(message.bundle);
        }
        if (message.error !== undefined) {
            obj.error = ResolutionError.toJSON(message.error);
        }
        if (message.plugin !== undefined) {
            obj.plugin = InspectorDescription.toJSON(message.plugin);
        }
        return obj;
    },
    create(base) {
        return Resolution.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseResolution();
        message.bundle = (object.bundle !== undefined && object.bundle !== null)
            ? Bundle.fromPartial(object.bundle)
            : undefined;
        message.error = (object.error !== undefined && object.error !== null)
            ? ResolutionError.fromPartial(object.error)
            : undefined;
        message.plugin = (object.plugin !== undefined && object.plugin !== null)
            ? InspectorDescription.fromPartial(object.plugin)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set(Resolution.$type, Resolution);
function createBaseResolutionError() {
    return { query: undefined, text: "" };
}
export const ResolutionError = {
    $type: "devvit.plugin.linker.ResolutionError",
    encode(message, writer = _m0.Writer.create()) {
        if (message.query !== undefined) {
            PackageQuery.encode(message.query, writer.uint32(10).fork()).ldelim();
        }
        if (message.text !== "") {
            writer.uint32(18).string(message.text);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResolutionError();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.query = PackageQuery.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.text = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            query: isSet(object.query) ? PackageQuery.fromJSON(object.query) : undefined,
            text: isSet(object.text) ? globalThis.String(object.text) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.query !== undefined) {
            obj.query = PackageQuery.toJSON(message.query);
        }
        if (message.text !== "") {
            obj.text = message.text;
        }
        return obj;
    },
    create(base) {
        return ResolutionError.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseResolutionError();
        message.query = (object.query !== undefined && object.query !== null)
            ? PackageQuery.fromPartial(object.query)
            : undefined;
        message.text = object.text ?? "";
        return message;
    },
};
messageTypeRegistry.set(ResolutionError.$type, ResolutionError);
export const ResolverServiceName = "devvit.plugin.linker.Resolver";
export class ResolverClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || ResolverServiceName;
        this.rpc = rpc;
        this.RegisterPlugins = this.RegisterPlugins.bind(this);
        this.Resolve = this.Resolve.bind(this);
        this.RegisterBundle = this.RegisterBundle.bind(this);
    }
    RegisterPlugins(request, metadata) {
        const data = InspectorDescriptions.encode(request).finish();
        const promise = this.rpc.request(this.service, "RegisterPlugins", data, metadata);
        return promise.then((data) => Empty.decode(_m0.Reader.create(data)));
    }
    Resolve(request, metadata) {
        const data = PackageQuery.encode(request).finish();
        const promise = this.rpc.request(this.service, "Resolve", data, metadata);
        return promise.then((data) => Resolution.decode(_m0.Reader.create(data)));
    }
    RegisterBundle(request, metadata) {
        const data = Bundle.encode(request).finish();
        const promise = this.rpc.request(this.service, "RegisterBundle", data, metadata);
        return promise.then((data) => Empty.decode(_m0.Reader.create(data)));
    }
}
export const ResolverDefinition = {
    name: "Resolver",
    fullName: "devvit.plugin.linker.Resolver",
    methods: {
        /** What plugins are available to the Resolver? */
        registerPlugins: {
            name: "RegisterPlugins",
            requestType: InspectorDescriptions,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
        /** What Bundle is best to satisfy the given request? */
        resolve: {
            name: "Resolve",
            requestType: PackageQuery,
            requestStream: false,
            responseType: Resolution,
            responseStream: false,
            options: {},
        },
        /** Notify the resolver that a bundle exists. Newer Bundles can overwrite older bundles. */
        registerBundle: {
            name: "RegisterBundle",
            requestType: Bundle,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
