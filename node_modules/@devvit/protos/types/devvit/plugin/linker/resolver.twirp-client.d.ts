import { InspectorDescriptions } from '../inspector/inspector.js';
import { Empty } from '../../../google/protobuf/empty.js';
import { PackageQuery } from '../../runtime/bundle.js';
import { Resolution } from './resolver.js';
import { Bundle } from '../buildpack/buildpack_common.js';
interface Rpc {
    request(service: string, method: string, contentType: 'application/json' | 'application/protobuf', data: object | Uint8Array): Promise<object | Uint8Array>;
}
export interface ResolverClient {
    RegisterPlugins(request: InspectorDescriptions): Promise<Empty>;
    Resolve(request: PackageQuery): Promise<Resolution>;
    RegisterBundle(request: Bundle): Promise<Empty>;
}
export declare class ResolverClientJSON implements ResolverClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    RegisterPlugins(request: InspectorDescriptions): Promise<Empty>;
    Resolve(request: PackageQuery): Promise<Resolution>;
    RegisterBundle(request: Bundle): Promise<Empty>;
}
export declare class ResolverClientProtobuf implements ResolverClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    RegisterPlugins(request: InspectorDescriptions): Promise<Empty>;
    Resolve(request: PackageQuery): Promise<Resolution>;
    RegisterBundle(request: Bundle): Promise<Empty>;
}
export {};
//# sourceMappingURL=resolver.twirp-client.d.ts.map