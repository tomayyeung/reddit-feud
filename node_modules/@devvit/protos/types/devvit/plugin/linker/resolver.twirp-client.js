import { InspectorDescriptions } from '../inspector/inspector.js';
import { Empty } from '../../../google/protobuf/empty.js';
import { PackageQuery } from '../../runtime/bundle.js';
import { Resolution } from './resolver.js';
import { Bundle } from '../buildpack/buildpack_common.js';
export class ResolverClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.RegisterPlugins.bind(this);
        this.Resolve.bind(this);
        this.RegisterBundle.bind(this);
    }
    RegisterPlugins(request) {
        const data = InspectorDescriptions.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.linker.Resolver', 'RegisterPlugins', 'application/json', data);
        return promise.then((data) => Empty.fromJSON(data));
    }
    Resolve(request) {
        const data = PackageQuery.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.linker.Resolver', 'Resolve', 'application/json', data);
        return promise.then((data) => Resolution.fromJSON(data));
    }
    RegisterBundle(request) {
        const data = Bundle.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.linker.Resolver', 'RegisterBundle', 'application/json', data);
        return promise.then((data) => Empty.fromJSON(data));
    }
}
export class ResolverClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.RegisterPlugins.bind(this);
        this.Resolve.bind(this);
        this.RegisterBundle.bind(this);
    }
    RegisterPlugins(request) {
        const data = InspectorDescriptions.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.linker.Resolver', 'RegisterPlugins', 'application/protobuf', data);
        return promise.then((data) => Empty.decode(data));
    }
    Resolve(request) {
        const data = PackageQuery.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.linker.Resolver', 'Resolve', 'application/protobuf', data);
        return promise.then((data) => Resolution.decode(data));
    }
    RegisterBundle(request) {
        const data = Bundle.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.linker.Resolver', 'RegisterBundle', 'application/protobuf', data);
        return promise.then((data) => Empty.decode(data));
    }
}
