/// <reference types="node" resolution-mode="require"/>
import { TwirpContext, TwirpServer } from 'twirp-ts';
import { InspectorDescriptions } from '../inspector/inspector.js';
import { Empty } from '../../../google/protobuf/empty.js';
import { PackageQuery } from '../../runtime/bundle.js';
import { Resolution } from './resolver.js';
import { Bundle } from '../buildpack/buildpack_common.js';
export interface ResolverTwirp<T extends TwirpContext = TwirpContext> {
    RegisterPlugins(ctx: T, request: InspectorDescriptions): Promise<Empty>;
    Resolve(ctx: T, request: PackageQuery): Promise<Resolution>;
    RegisterBundle(ctx: T, request: Bundle): Promise<Empty>;
}
export declare enum ResolverMethod {
    RegisterPlugins = "RegisterPlugins",
    Resolve = "Resolve",
    RegisterBundle = "RegisterBundle"
}
export declare const ResolverMethodList: ResolverMethod[];
export declare function createResolverServer<T extends TwirpContext = TwirpContext>(service: ResolverTwirp<T>): TwirpServer<ResolverTwirp<TwirpContext<import("http").IncomingMessage, import("http").ServerResponse<import("http").IncomingMessage>>>, T>;
//# sourceMappingURL=resolver.twirp.d.ts.map