import { TwirpServer, TwirpError, TwirpErrorCode, TwirpContentType, chainInterceptors, } from 'twirp-ts';
import { InspectorDescriptions } from '../inspector/inspector.js';
import { Empty } from '../../../google/protobuf/empty.js';
import { PackageQuery } from '../../runtime/bundle.js';
import { Resolution } from './resolver.js';
import { Bundle } from '../buildpack/buildpack_common.js';
export var ResolverMethod;
(function (ResolverMethod) {
    ResolverMethod["RegisterPlugins"] = "RegisterPlugins";
    ResolverMethod["Resolve"] = "Resolve";
    ResolverMethod["RegisterBundle"] = "RegisterBundle";
})(ResolverMethod || (ResolverMethod = {}));
export const ResolverMethodList = [
    ResolverMethod.RegisterPlugins,
    ResolverMethod.Resolve,
    ResolverMethod.RegisterBundle,
];
export function createResolverServer(service) {
    return new TwirpServer({
        service,
        packageName: 'devvit.plugin.linker',
        serviceName: 'Resolver',
        methodList: ResolverMethodList,
        matchRoute: matchResolverRoute,
    });
}
function matchResolverRoute(method, events) {
    switch (method) {
        case 'RegisterPlugins':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'RegisterPlugins' };
                await events.onMatch(ctx);
                return handleResolverRegisterPluginsRequest(ctx, service, data, interceptors);
            };
        case 'Resolve':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'Resolve' };
                await events.onMatch(ctx);
                return handleResolverResolveRequest(ctx, service, data, interceptors);
            };
        case 'RegisterBundle':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'RegisterBundle' };
                await events.onMatch(ctx);
                return handleResolverRegisterBundleRequest(ctx, service, data, interceptors);
            };
        default:
            events.onNotFound();
            const msg = `no handler found`;
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleResolverRegisterPluginsRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleResolverRegisterPluginsJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleResolverRegisterPluginsProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleResolverResolveRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleResolverResolveJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleResolverResolveProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleResolverRegisterBundleRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleResolverRegisterBundleJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleResolverRegisterBundleProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
async function handleResolverRegisterPluginsJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = InspectorDescriptions.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.RegisterPlugins(ctx, inputReq);
        });
    }
    else {
        response = await service.RegisterPlugins(ctx, request);
    }
    return JSON.stringify(Empty.toJSON(response));
}
async function handleResolverResolveJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = PackageQuery.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.Resolve(ctx, inputReq);
        });
    }
    else {
        response = await service.Resolve(ctx, request);
    }
    return JSON.stringify(Resolution.toJSON(response));
}
async function handleResolverRegisterBundleJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = Bundle.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.RegisterBundle(ctx, inputReq);
        });
    }
    else {
        response = await service.RegisterBundle(ctx, request);
    }
    return JSON.stringify(Empty.toJSON(response));
}
async function handleResolverRegisterPluginsProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = InspectorDescriptions.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.RegisterPlugins(ctx, inputReq);
        });
    }
    else {
        response = await service.RegisterPlugins(ctx, request);
    }
    return Buffer.from(Empty.encode(response).finish());
}
async function handleResolverResolveProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = PackageQuery.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.Resolve(ctx, inputReq);
        });
    }
    else {
        response = await service.Resolve(ctx, request);
    }
    return Buffer.from(Resolution.encode(response).finish());
}
async function handleResolverRegisterBundleProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = Bundle.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.RegisterBundle(ctx, inputReq);
        });
    }
    else {
        response = await service.RegisterBundle(ctx, request);
    }
    return Buffer.from(Empty.encode(response).finish());
}
