/**
 * #media.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { Metadata } from "../../../../lib/Types.js";
export interface MediaUploadRequest {
    url: string;
    type: string;
}
export interface MediaUploadResponse {
    mediaId: string;
    mediaUrl: string;
}
export declare const MediaUploadRequest: {
    $type: "devvit.plugin.media.MediaUploadRequest";
    encode(message: MediaUploadRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MediaUploadRequest;
    fromJSON(object: any): MediaUploadRequest;
    toJSON(message: MediaUploadRequest): unknown;
    create(base?: DeepPartial<MediaUploadRequest>): MediaUploadRequest;
    fromPartial(object: DeepPartial<MediaUploadRequest>): MediaUploadRequest;
};
export declare const MediaUploadResponse: {
    $type: "devvit.plugin.media.MediaUploadResponse";
    encode(message: MediaUploadResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MediaUploadResponse;
    fromJSON(object: any): MediaUploadResponse;
    toJSON(message: MediaUploadResponse): unknown;
    create(base?: DeepPartial<MediaUploadResponse>): MediaUploadResponse;
    fromPartial(object: DeepPartial<MediaUploadResponse>): MediaUploadResponse;
};
export interface MediaService {
    Upload(request: MediaUploadRequest, metadata?: Metadata): Promise<MediaUploadResponse>;
}
export declare const MediaServiceServiceName = "devvit.plugin.media.MediaService";
export declare class MediaServiceClientImpl implements MediaService {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Upload(request: MediaUploadRequest, metadata?: Metadata): Promise<MediaUploadResponse>;
}
export type MediaServiceDefinition = typeof MediaServiceDefinition;
export declare const MediaServiceDefinition: {
    readonly name: "MediaService";
    readonly fullName: "devvit.plugin.media.MediaService";
    readonly methods: {
        readonly upload: {
            readonly name: "Upload";
            readonly requestType: {
                $type: "devvit.plugin.media.MediaUploadRequest";
                encode(message: MediaUploadRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): MediaUploadRequest;
                fromJSON(object: any): MediaUploadRequest;
                toJSON(message: MediaUploadRequest): unknown;
                create(base?: DeepPartial<MediaUploadRequest>): MediaUploadRequest;
                fromPartial(object: DeepPartial<MediaUploadRequest>): MediaUploadRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.media.MediaUploadResponse";
                encode(message: MediaUploadResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): MediaUploadResponse;
                fromJSON(object: any): MediaUploadResponse;
                toJSON(message: MediaUploadResponse): unknown;
                create(base?: DeepPartial<MediaUploadResponse>): MediaUploadResponse;
                fromPartial(object: DeepPartial<MediaUploadResponse>): MediaUploadResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array, metadata?: Metadata): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=media.d.ts.map