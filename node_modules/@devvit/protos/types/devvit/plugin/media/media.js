/**
 * #media.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { messageTypeRegistry } from "../../../typeRegistry.js";
function createBaseMediaUploadRequest() {
    return { url: "", type: "" };
}
export const MediaUploadRequest = {
    $type: "devvit.plugin.media.MediaUploadRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.url !== "") {
            writer.uint32(10).string(message.url);
        }
        if (message.type !== "") {
            writer.uint32(18).string(message.type);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMediaUploadRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.url = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.type = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            url: isSet(object.url) ? globalThis.String(object.url) : "",
            type: isSet(object.type) ? globalThis.String(object.type) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.url !== "") {
            obj.url = message.url;
        }
        if (message.type !== "") {
            obj.type = message.type;
        }
        return obj;
    },
    create(base) {
        return MediaUploadRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMediaUploadRequest();
        message.url = object.url ?? "";
        message.type = object.type ?? "";
        return message;
    },
};
messageTypeRegistry.set(MediaUploadRequest.$type, MediaUploadRequest);
function createBaseMediaUploadResponse() {
    return { mediaId: "", mediaUrl: "" };
}
export const MediaUploadResponse = {
    $type: "devvit.plugin.media.MediaUploadResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.mediaId !== "") {
            writer.uint32(10).string(message.mediaId);
        }
        if (message.mediaUrl !== "") {
            writer.uint32(18).string(message.mediaUrl);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMediaUploadResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.mediaId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.mediaUrl = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            mediaId: isSet(object.mediaId) ? globalThis.String(object.mediaId) : "",
            mediaUrl: isSet(object.mediaUrl) ? globalThis.String(object.mediaUrl) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.mediaId !== "") {
            obj.mediaId = message.mediaId;
        }
        if (message.mediaUrl !== "") {
            obj.mediaUrl = message.mediaUrl;
        }
        return obj;
    },
    create(base) {
        return MediaUploadResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMediaUploadResponse();
        message.mediaId = object.mediaId ?? "";
        message.mediaUrl = object.mediaUrl ?? "";
        return message;
    },
};
messageTypeRegistry.set(MediaUploadResponse.$type, MediaUploadResponse);
export const MediaServiceServiceName = "devvit.plugin.media.MediaService";
export class MediaServiceClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || MediaServiceServiceName;
        this.rpc = rpc;
        this.Upload = this.Upload.bind(this);
    }
    Upload(request, metadata) {
        const data = MediaUploadRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Upload", data, metadata);
        return promise.then((data) => MediaUploadResponse.decode(_m0.Reader.create(data)));
    }
}
export const MediaServiceDefinition = {
    name: "MediaService",
    fullName: "devvit.plugin.media.MediaService",
    methods: {
        upload: {
            name: "Upload",
            requestType: MediaUploadRequest,
            requestStream: false,
            responseType: MediaUploadResponse,
            responseStream: false,
            options: {},
        },
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
