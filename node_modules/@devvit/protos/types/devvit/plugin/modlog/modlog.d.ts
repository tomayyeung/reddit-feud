/**
 * #modlog.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { Metadata } from "../../../../lib/Types.js";
export interface ModlogRequest {
    /** The action (available actions here: https://github.snooguts.net/reddit/reddit-public/blob/master/r2/r2/models/modaction.py#L192) */
    action: string;
    /** Optional Details string */
    details?: string | undefined;
    /** Optional Description */
    description?: string | undefined;
    /** Optional Note */
    note?: string | undefined;
    /** Optional action target */
    target?: string | undefined;
}
/** Generic response interface (mimics response from r2) */
export interface ModlogResponse {
    success: boolean;
}
export declare const ModlogRequest: {
    $type: "devvit.plugin.modlog.ModlogRequest";
    encode(message: ModlogRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ModlogRequest;
    fromJSON(object: any): ModlogRequest;
    toJSON(message: ModlogRequest): unknown;
    create(base?: DeepPartial<ModlogRequest>): ModlogRequest;
    fromPartial(object: DeepPartial<ModlogRequest>): ModlogRequest;
};
export declare const ModlogResponse: {
    $type: "devvit.plugin.modlog.ModlogResponse";
    encode(message: ModlogResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ModlogResponse;
    fromJSON(object: any): ModlogResponse;
    toJSON(message: ModlogResponse): unknown;
    create(base?: DeepPartial<ModlogResponse>): ModlogResponse;
    fromPartial(object: DeepPartial<ModlogResponse>): ModlogResponse;
};
/**
 * The Modlog plugin allows an app to insert an arbitrary entry
 * to a subreddit's modlog.
 */
export interface Modlog {
    Add(request: ModlogRequest, metadata?: Metadata): Promise<ModlogResponse>;
}
export declare const ModlogServiceName = "devvit.plugin.modlog.Modlog";
export declare class ModlogClientImpl implements Modlog {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Add(request: ModlogRequest, metadata?: Metadata): Promise<ModlogResponse>;
}
/**
 * The Modlog plugin allows an app to insert an arbitrary entry
 * to a subreddit's modlog.
 */
export type ModlogDefinition = typeof ModlogDefinition;
export declare const ModlogDefinition: {
    readonly name: "Modlog";
    readonly fullName: "devvit.plugin.modlog.Modlog";
    readonly methods: {
        readonly add: {
            readonly name: "Add";
            readonly requestType: {
                $type: "devvit.plugin.modlog.ModlogRequest";
                encode(message: ModlogRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ModlogRequest;
                fromJSON(object: any): ModlogRequest;
                toJSON(message: ModlogRequest): unknown;
                create(base?: DeepPartial<ModlogRequest>): ModlogRequest;
                fromPartial(object: DeepPartial<ModlogRequest>): ModlogRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.modlog.ModlogResponse";
                encode(message: ModlogResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ModlogResponse;
                fromJSON(object: any): ModlogResponse;
                toJSON(message: ModlogResponse): unknown;
                create(base?: DeepPartial<ModlogResponse>): ModlogResponse;
                fromPartial(object: DeepPartial<ModlogResponse>): ModlogResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array, metadata?: Metadata): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=modlog.d.ts.map