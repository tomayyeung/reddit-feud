/**
 * #modlog.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { messageTypeRegistry } from "../../../typeRegistry.js";
function createBaseModlogRequest() {
    return { action: "", details: undefined, description: undefined, note: undefined, target: undefined };
}
export const ModlogRequest = {
    $type: "devvit.plugin.modlog.ModlogRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.action !== "") {
            writer.uint32(10).string(message.action);
        }
        if (message.details !== undefined) {
            writer.uint32(18).string(message.details);
        }
        if (message.description !== undefined) {
            writer.uint32(26).string(message.description);
        }
        if (message.note !== undefined) {
            writer.uint32(34).string(message.note);
        }
        if (message.target !== undefined) {
            writer.uint32(42).string(message.target);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseModlogRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.action = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.details = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.note = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.target = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            action: isSet(object.action) ? globalThis.String(object.action) : "",
            details: isSet(object.details) ? globalThis.String(object.details) : undefined,
            description: isSet(object.description) ? globalThis.String(object.description) : undefined,
            note: isSet(object.note) ? globalThis.String(object.note) : undefined,
            target: isSet(object.target) ? globalThis.String(object.target) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.action !== "") {
            obj.action = message.action;
        }
        if (message.details !== undefined) {
            obj.details = message.details;
        }
        if (message.description !== undefined) {
            obj.description = message.description;
        }
        if (message.note !== undefined) {
            obj.note = message.note;
        }
        if (message.target !== undefined) {
            obj.target = message.target;
        }
        return obj;
    },
    create(base) {
        return ModlogRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseModlogRequest();
        message.action = object.action ?? "";
        message.details = object.details ?? undefined;
        message.description = object.description ?? undefined;
        message.note = object.note ?? undefined;
        message.target = object.target ?? undefined;
        return message;
    },
};
messageTypeRegistry.set(ModlogRequest.$type, ModlogRequest);
function createBaseModlogResponse() {
    return { success: false };
}
export const ModlogResponse = {
    $type: "devvit.plugin.modlog.ModlogResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.success !== false) {
            writer.uint32(8).bool(message.success);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseModlogResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.success = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
    },
    toJSON(message) {
        const obj = {};
        if (message.success !== false) {
            obj.success = message.success;
        }
        return obj;
    },
    create(base) {
        return ModlogResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseModlogResponse();
        message.success = object.success ?? false;
        return message;
    },
};
messageTypeRegistry.set(ModlogResponse.$type, ModlogResponse);
export const ModlogServiceName = "devvit.plugin.modlog.Modlog";
export class ModlogClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || ModlogServiceName;
        this.rpc = rpc;
        this.Add = this.Add.bind(this);
    }
    Add(request, metadata) {
        const data = ModlogRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Add", data, metadata);
        return promise.then((data) => ModlogResponse.decode(_m0.Reader.create(data)));
    }
}
export const ModlogDefinition = {
    name: "Modlog",
    fullName: "devvit.plugin.modlog.Modlog",
    methods: {
        add: {
            name: "Add",
            requestType: ModlogRequest,
            requestStream: false,
            responseType: ModlogResponse,
            responseStream: false,
            options: {},
        },
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
