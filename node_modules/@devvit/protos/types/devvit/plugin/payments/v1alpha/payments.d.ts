/**
 * #payments.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { Metadata } from "../../../../../lib/Types.js";
import { Order, OrderStatus } from "../../../payments/v1alpha/order.js";
import { Product } from "../../../payments/v1alpha/product.js";
export interface GetProductsRequest {
    /** if empty, all products will be returned */
    skus: string[];
    /** metadata to filter on. these values are combined via AND */
    metadata: {
        [key: string]: string;
    };
}
export interface GetProductsRequest_MetadataEntry {
    key: string;
    value: string;
}
export interface GetProductsResponse {
    products: Product[];
}
/**
 * GetOrderRequest allows for filtering which orders are returned
 * all the parameters are optional. If none are provided, all orders are returned
 */
export interface GetOrdersRequest {
    /** start time filter */
    start?: Date | undefined;
    /** end time filter */
    end?: Date | undefined;
    /** number of items to return */
    limit: number;
    /** unique identifier for the product */
    sku: string;
    /** the t2 id of purchasing user */
    buyer: string;
    /** the lifecycle status of the order */
    status: OrderStatus;
    /** metadata to filter on. these values are combined via AND */
    metadata: {
        [key: string]: string;
    };
    /** pagination cursor */
    cursor: string;
}
export interface GetOrdersRequest_MetadataEntry {
    key: string;
    value: string;
}
export interface PageInfo {
    hasNextPage: boolean;
    endCursor: string;
    hasPreviousPage: boolean;
    startCursor: string;
}
export interface GetOrdersResponse {
    orders: Order[];
    pageInfo?: PageInfo | undefined;
}
export interface AcknowledgeOrderDeliveryRequest {
    /** the order that is being acknowledged */
    orderId: string;
}
export interface AcknowledgeOrderDeliveryResponse {
}
export declare const GetProductsRequest: {
    $type: "devvit.plugin.payments.v1alpha.GetProductsRequest";
    encode(message: GetProductsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetProductsRequest;
    fromJSON(object: any): GetProductsRequest;
    toJSON(message: GetProductsRequest): unknown;
    create(base?: DeepPartial<GetProductsRequest>): GetProductsRequest;
    fromPartial(object: DeepPartial<GetProductsRequest>): GetProductsRequest;
};
export declare const GetProductsRequest_MetadataEntry: {
    $type: "devvit.plugin.payments.v1alpha.GetProductsRequest.MetadataEntry";
    encode(message: GetProductsRequest_MetadataEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetProductsRequest_MetadataEntry;
    fromJSON(object: any): GetProductsRequest_MetadataEntry;
    toJSON(message: GetProductsRequest_MetadataEntry): unknown;
    create(base?: DeepPartial<GetProductsRequest_MetadataEntry>): GetProductsRequest_MetadataEntry;
    fromPartial(object: DeepPartial<GetProductsRequest_MetadataEntry>): GetProductsRequest_MetadataEntry;
};
export declare const GetProductsResponse: {
    $type: "devvit.plugin.payments.v1alpha.GetProductsResponse";
    encode(message: GetProductsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetProductsResponse;
    fromJSON(object: any): GetProductsResponse;
    toJSON(message: GetProductsResponse): unknown;
    create(base?: DeepPartial<GetProductsResponse>): GetProductsResponse;
    fromPartial(object: DeepPartial<GetProductsResponse>): GetProductsResponse;
};
export declare const GetOrdersRequest: {
    $type: "devvit.plugin.payments.v1alpha.GetOrdersRequest";
    encode(message: GetOrdersRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetOrdersRequest;
    fromJSON(object: any): GetOrdersRequest;
    toJSON(message: GetOrdersRequest): unknown;
    create(base?: DeepPartial<GetOrdersRequest>): GetOrdersRequest;
    fromPartial(object: DeepPartial<GetOrdersRequest>): GetOrdersRequest;
};
export declare const GetOrdersRequest_MetadataEntry: {
    $type: "devvit.plugin.payments.v1alpha.GetOrdersRequest.MetadataEntry";
    encode(message: GetOrdersRequest_MetadataEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetOrdersRequest_MetadataEntry;
    fromJSON(object: any): GetOrdersRequest_MetadataEntry;
    toJSON(message: GetOrdersRequest_MetadataEntry): unknown;
    create(base?: DeepPartial<GetOrdersRequest_MetadataEntry>): GetOrdersRequest_MetadataEntry;
    fromPartial(object: DeepPartial<GetOrdersRequest_MetadataEntry>): GetOrdersRequest_MetadataEntry;
};
export declare const PageInfo: {
    $type: "devvit.plugin.payments.v1alpha.PageInfo";
    encode(message: PageInfo, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PageInfo;
    fromJSON(object: any): PageInfo;
    toJSON(message: PageInfo): unknown;
    create(base?: DeepPartial<PageInfo>): PageInfo;
    fromPartial(object: DeepPartial<PageInfo>): PageInfo;
};
export declare const GetOrdersResponse: {
    $type: "devvit.plugin.payments.v1alpha.GetOrdersResponse";
    encode(message: GetOrdersResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetOrdersResponse;
    fromJSON(object: any): GetOrdersResponse;
    toJSON(message: GetOrdersResponse): unknown;
    create(base?: DeepPartial<GetOrdersResponse>): GetOrdersResponse;
    fromPartial(object: DeepPartial<GetOrdersResponse>): GetOrdersResponse;
};
export declare const AcknowledgeOrderDeliveryRequest: {
    $type: "devvit.plugin.payments.v1alpha.AcknowledgeOrderDeliveryRequest";
    encode(message: AcknowledgeOrderDeliveryRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AcknowledgeOrderDeliveryRequest;
    fromJSON(object: any): AcknowledgeOrderDeliveryRequest;
    toJSON(message: AcknowledgeOrderDeliveryRequest): unknown;
    create(base?: DeepPartial<AcknowledgeOrderDeliveryRequest>): AcknowledgeOrderDeliveryRequest;
    fromPartial(object: DeepPartial<AcknowledgeOrderDeliveryRequest>): AcknowledgeOrderDeliveryRequest;
};
export declare const AcknowledgeOrderDeliveryResponse: {
    $type: "devvit.plugin.payments.v1alpha.AcknowledgeOrderDeliveryResponse";
    encode(_: AcknowledgeOrderDeliveryResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AcknowledgeOrderDeliveryResponse;
    fromJSON(_: any): AcknowledgeOrderDeliveryResponse;
    toJSON(_: AcknowledgeOrderDeliveryResponse): unknown;
    create(base?: DeepPartial<AcknowledgeOrderDeliveryResponse>): AcknowledgeOrderDeliveryResponse;
    fromPartial(_: DeepPartial<AcknowledgeOrderDeliveryResponse>): AcknowledgeOrderDeliveryResponse;
};
/**
 * PaymentsService provides a plugin for access to devvit's payment platform
 * These functions can be called by your app to get product or order info
 */
export interface PaymentsService {
    /** get all (or filtered) products associated with your app */
    GetProducts(request: GetProductsRequest, metadata?: Metadata): Promise<GetProductsResponse>;
    /** get all (or filtered) orders placed for your app */
    GetOrders(request: GetOrdersRequest, metadata?: Metadata): Promise<GetOrdersResponse>;
    /** acknowledges an order has been fully delivered. This is used for asynchronous order fullfilment like pre-orders */
    AcknowledgeOrderDelivery(request: AcknowledgeOrderDeliveryRequest, metadata?: Metadata): Promise<AcknowledgeOrderDeliveryResponse>;
}
export declare const PaymentsServiceServiceName = "devvit.plugin.payments.v1alpha.PaymentsService";
export declare class PaymentsServiceClientImpl implements PaymentsService {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    GetProducts(request: GetProductsRequest, metadata?: Metadata): Promise<GetProductsResponse>;
    GetOrders(request: GetOrdersRequest, metadata?: Metadata): Promise<GetOrdersResponse>;
    AcknowledgeOrderDelivery(request: AcknowledgeOrderDeliveryRequest, metadata?: Metadata): Promise<AcknowledgeOrderDeliveryResponse>;
}
/**
 * PaymentsService provides a plugin for access to devvit's payment platform
 * These functions can be called by your app to get product or order info
 */
export type PaymentsServiceDefinition = typeof PaymentsServiceDefinition;
export declare const PaymentsServiceDefinition: {
    readonly name: "PaymentsService";
    readonly fullName: "devvit.plugin.payments.v1alpha.PaymentsService";
    readonly methods: {
        /** get all (or filtered) products associated with your app */
        readonly getProducts: {
            readonly name: "GetProducts";
            readonly requestType: {
                $type: "devvit.plugin.payments.v1alpha.GetProductsRequest";
                encode(message: GetProductsRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): GetProductsRequest;
                fromJSON(object: any): GetProductsRequest;
                toJSON(message: GetProductsRequest): unknown;
                create(base?: DeepPartial<GetProductsRequest>): GetProductsRequest;
                fromPartial(object: DeepPartial<GetProductsRequest>): GetProductsRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.payments.v1alpha.GetProductsResponse";
                encode(message: GetProductsResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): GetProductsResponse;
                fromJSON(object: any): GetProductsResponse;
                toJSON(message: GetProductsResponse): unknown;
                create(base?: DeepPartial<GetProductsResponse>): GetProductsResponse;
                fromPartial(object: DeepPartial<GetProductsResponse>): GetProductsResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** get all (or filtered) orders placed for your app */
        readonly getOrders: {
            readonly name: "GetOrders";
            readonly requestType: {
                $type: "devvit.plugin.payments.v1alpha.GetOrdersRequest";
                encode(message: GetOrdersRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): GetOrdersRequest;
                fromJSON(object: any): GetOrdersRequest;
                toJSON(message: GetOrdersRequest): unknown;
                create(base?: DeepPartial<GetOrdersRequest>): GetOrdersRequest;
                fromPartial(object: DeepPartial<GetOrdersRequest>): GetOrdersRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.payments.v1alpha.GetOrdersResponse";
                encode(message: GetOrdersResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): GetOrdersResponse;
                fromJSON(object: any): GetOrdersResponse;
                toJSON(message: GetOrdersResponse): unknown;
                create(base?: DeepPartial<GetOrdersResponse>): GetOrdersResponse;
                fromPartial(object: DeepPartial<GetOrdersResponse>): GetOrdersResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** acknowledges an order has been fully delivered. This is used for asynchronous order fullfilment like pre-orders */
        readonly acknowledgeOrderDelivery: {
            readonly name: "AcknowledgeOrderDelivery";
            readonly requestType: {
                $type: "devvit.plugin.payments.v1alpha.AcknowledgeOrderDeliveryRequest";
                encode(message: AcknowledgeOrderDeliveryRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): AcknowledgeOrderDeliveryRequest;
                fromJSON(object: any): AcknowledgeOrderDeliveryRequest;
                toJSON(message: AcknowledgeOrderDeliveryRequest): unknown;
                create(base?: DeepPartial<AcknowledgeOrderDeliveryRequest>): AcknowledgeOrderDeliveryRequest;
                fromPartial(object: DeepPartial<AcknowledgeOrderDeliveryRequest>): AcknowledgeOrderDeliveryRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.payments.v1alpha.AcknowledgeOrderDeliveryResponse";
                encode(_: AcknowledgeOrderDeliveryResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): AcknowledgeOrderDeliveryResponse;
                fromJSON(_: any): AcknowledgeOrderDeliveryResponse;
                toJSON(_: AcknowledgeOrderDeliveryResponse): unknown;
                create(base?: DeepPartial<AcknowledgeOrderDeliveryResponse>): AcknowledgeOrderDeliveryResponse;
                fromPartial(_: DeepPartial<AcknowledgeOrderDeliveryResponse>): AcknowledgeOrderDeliveryResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array, metadata?: Metadata): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=payments.d.ts.map