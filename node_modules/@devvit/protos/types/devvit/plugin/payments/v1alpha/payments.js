/**
 * #payments.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { Timestamp } from "../../../../google/protobuf/timestamp.js";
import { messageTypeRegistry } from "../../../../typeRegistry.js";
import { Order, orderStatusFromJSON, orderStatusToJSON } from "../../../payments/v1alpha/order.js";
import { Product } from "../../../payments/v1alpha/product.js";
function createBaseGetProductsRequest() {
    return { skus: [], metadata: {} };
}
export const GetProductsRequest = {
    $type: "devvit.plugin.payments.v1alpha.GetProductsRequest",
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.skus) {
            writer.uint32(10).string(v);
        }
        Object.entries(message.metadata).forEach(([key, value]) => {
            GetProductsRequest_MetadataEntry.encode({ key: key, value }, writer.uint32(18).fork()).ldelim();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetProductsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.skus.push(reader.string());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    const entry2 = GetProductsRequest_MetadataEntry.decode(reader, reader.uint32());
                    if (entry2.value !== undefined) {
                        message.metadata[entry2.key] = entry2.value;
                    }
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            skus: globalThis.Array.isArray(object?.skus) ? object.skus.map((e) => globalThis.String(e)) : [],
            metadata: isObject(object.metadata)
                ? Object.entries(object.metadata).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.skus?.length) {
            obj.skus = message.skus;
        }
        if (message.metadata) {
            const entries = Object.entries(message.metadata);
            if (entries.length > 0) {
                obj.metadata = {};
                entries.forEach(([k, v]) => {
                    obj.metadata[k] = v;
                });
            }
        }
        return obj;
    },
    create(base) {
        return GetProductsRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetProductsRequest();
        message.skus = object.skus?.map((e) => e) || [];
        message.metadata = Object.entries(object.metadata ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = globalThis.String(value);
            }
            return acc;
        }, {});
        return message;
    },
};
messageTypeRegistry.set(GetProductsRequest.$type, GetProductsRequest);
function createBaseGetProductsRequest_MetadataEntry() {
    return { key: "", value: "" };
}
export const GetProductsRequest_MetadataEntry = {
    $type: "devvit.plugin.payments.v1alpha.GetProductsRequest.MetadataEntry",
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetProductsRequest_MetadataEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? globalThis.String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return GetProductsRequest_MetadataEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetProductsRequest_MetadataEntry();
        message.key = object.key ?? "";
        message.value = object.value ?? "";
        return message;
    },
};
messageTypeRegistry.set(GetProductsRequest_MetadataEntry.$type, GetProductsRequest_MetadataEntry);
function createBaseGetProductsResponse() {
    return { products: [] };
}
export const GetProductsResponse = {
    $type: "devvit.plugin.payments.v1alpha.GetProductsResponse",
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.products) {
            Product.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetProductsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.products.push(Product.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            products: globalThis.Array.isArray(object?.products) ? object.products.map((e) => Product.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.products?.length) {
            obj.products = message.products.map((e) => Product.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return GetProductsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetProductsResponse();
        message.products = object.products?.map((e) => Product.fromPartial(e)) || [];
        return message;
    },
};
messageTypeRegistry.set(GetProductsResponse.$type, GetProductsResponse);
function createBaseGetOrdersRequest() {
    return { start: undefined, end: undefined, limit: 0, sku: "", buyer: "", status: 0, metadata: {}, cursor: "" };
}
export const GetOrdersRequest = {
    $type: "devvit.plugin.payments.v1alpha.GetOrdersRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.start !== undefined) {
            Timestamp.encode(toTimestamp(message.start), writer.uint32(10).fork()).ldelim();
        }
        if (message.end !== undefined) {
            Timestamp.encode(toTimestamp(message.end), writer.uint32(18).fork()).ldelim();
        }
        if (message.limit !== 0) {
            writer.uint32(24).int32(message.limit);
        }
        if (message.sku !== "") {
            writer.uint32(34).string(message.sku);
        }
        if (message.buyer !== "") {
            writer.uint32(42).string(message.buyer);
        }
        if (message.status !== 0) {
            writer.uint32(48).int32(message.status);
        }
        Object.entries(message.metadata).forEach(([key, value]) => {
            GetOrdersRequest_MetadataEntry.encode({ key: key, value }, writer.uint32(58).fork()).ldelim();
        });
        if (message.cursor !== "") {
            writer.uint32(66).string(message.cursor);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetOrdersRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.start = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.end = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.limit = reader.int32();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.sku = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.buyer = reader.string();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.status = reader.int32();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    const entry7 = GetOrdersRequest_MetadataEntry.decode(reader, reader.uint32());
                    if (entry7.value !== undefined) {
                        message.metadata[entry7.key] = entry7.value;
                    }
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.cursor = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            start: isSet(object.start) ? fromJsonTimestamp(object.start) : undefined,
            end: isSet(object.end) ? fromJsonTimestamp(object.end) : undefined,
            limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
            sku: isSet(object.sku) ? globalThis.String(object.sku) : "",
            buyer: isSet(object.buyer) ? globalThis.String(object.buyer) : "",
            status: isSet(object.status) ? orderStatusFromJSON(object.status) : 0,
            metadata: isObject(object.metadata)
                ? Object.entries(object.metadata).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
            cursor: isSet(object.cursor) ? globalThis.String(object.cursor) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.start !== undefined) {
            obj.start = message.start.toISOString();
        }
        if (message.end !== undefined) {
            obj.end = message.end.toISOString();
        }
        if (message.limit !== 0) {
            obj.limit = Math.round(message.limit);
        }
        if (message.sku !== "") {
            obj.sku = message.sku;
        }
        if (message.buyer !== "") {
            obj.buyer = message.buyer;
        }
        if (message.status !== 0) {
            obj.status = orderStatusToJSON(message.status);
        }
        if (message.metadata) {
            const entries = Object.entries(message.metadata);
            if (entries.length > 0) {
                obj.metadata = {};
                entries.forEach(([k, v]) => {
                    obj.metadata[k] = v;
                });
            }
        }
        if (message.cursor !== "") {
            obj.cursor = message.cursor;
        }
        return obj;
    },
    create(base) {
        return GetOrdersRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetOrdersRequest();
        message.start = object.start ?? undefined;
        message.end = object.end ?? undefined;
        message.limit = object.limit ?? 0;
        message.sku = object.sku ?? "";
        message.buyer = object.buyer ?? "";
        message.status = object.status ?? 0;
        message.metadata = Object.entries(object.metadata ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = globalThis.String(value);
            }
            return acc;
        }, {});
        message.cursor = object.cursor ?? "";
        return message;
    },
};
messageTypeRegistry.set(GetOrdersRequest.$type, GetOrdersRequest);
function createBaseGetOrdersRequest_MetadataEntry() {
    return { key: "", value: "" };
}
export const GetOrdersRequest_MetadataEntry = {
    $type: "devvit.plugin.payments.v1alpha.GetOrdersRequest.MetadataEntry",
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetOrdersRequest_MetadataEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? globalThis.String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return GetOrdersRequest_MetadataEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetOrdersRequest_MetadataEntry();
        message.key = object.key ?? "";
        message.value = object.value ?? "";
        return message;
    },
};
messageTypeRegistry.set(GetOrdersRequest_MetadataEntry.$type, GetOrdersRequest_MetadataEntry);
function createBasePageInfo() {
    return { hasNextPage: false, endCursor: "", hasPreviousPage: false, startCursor: "" };
}
export const PageInfo = {
    $type: "devvit.plugin.payments.v1alpha.PageInfo",
    encode(message, writer = _m0.Writer.create()) {
        if (message.hasNextPage !== false) {
            writer.uint32(8).bool(message.hasNextPage);
        }
        if (message.endCursor !== "") {
            writer.uint32(18).string(message.endCursor);
        }
        if (message.hasPreviousPage !== false) {
            writer.uint32(24).bool(message.hasPreviousPage);
        }
        if (message.startCursor !== "") {
            writer.uint32(34).string(message.startCursor);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePageInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.hasNextPage = reader.bool();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.endCursor = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.hasPreviousPage = reader.bool();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.startCursor = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            hasNextPage: isSet(object.hasNextPage) ? globalThis.Boolean(object.hasNextPage) : false,
            endCursor: isSet(object.endCursor) ? globalThis.String(object.endCursor) : "",
            hasPreviousPage: isSet(object.hasPreviousPage) ? globalThis.Boolean(object.hasPreviousPage) : false,
            startCursor: isSet(object.startCursor) ? globalThis.String(object.startCursor) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.hasNextPage !== false) {
            obj.hasNextPage = message.hasNextPage;
        }
        if (message.endCursor !== "") {
            obj.endCursor = message.endCursor;
        }
        if (message.hasPreviousPage !== false) {
            obj.hasPreviousPage = message.hasPreviousPage;
        }
        if (message.startCursor !== "") {
            obj.startCursor = message.startCursor;
        }
        return obj;
    },
    create(base) {
        return PageInfo.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePageInfo();
        message.hasNextPage = object.hasNextPage ?? false;
        message.endCursor = object.endCursor ?? "";
        message.hasPreviousPage = object.hasPreviousPage ?? false;
        message.startCursor = object.startCursor ?? "";
        return message;
    },
};
messageTypeRegistry.set(PageInfo.$type, PageInfo);
function createBaseGetOrdersResponse() {
    return { orders: [], pageInfo: undefined };
}
export const GetOrdersResponse = {
    $type: "devvit.plugin.payments.v1alpha.GetOrdersResponse",
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.orders) {
            Order.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.pageInfo !== undefined) {
            PageInfo.encode(message.pageInfo, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetOrdersResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.orders.push(Order.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.pageInfo = PageInfo.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            orders: globalThis.Array.isArray(object?.orders) ? object.orders.map((e) => Order.fromJSON(e)) : [],
            pageInfo: isSet(object.pageInfo) ? PageInfo.fromJSON(object.pageInfo) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.orders?.length) {
            obj.orders = message.orders.map((e) => Order.toJSON(e));
        }
        if (message.pageInfo !== undefined) {
            obj.pageInfo = PageInfo.toJSON(message.pageInfo);
        }
        return obj;
    },
    create(base) {
        return GetOrdersResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetOrdersResponse();
        message.orders = object.orders?.map((e) => Order.fromPartial(e)) || [];
        message.pageInfo = (object.pageInfo !== undefined && object.pageInfo !== null)
            ? PageInfo.fromPartial(object.pageInfo)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set(GetOrdersResponse.$type, GetOrdersResponse);
function createBaseAcknowledgeOrderDeliveryRequest() {
    return { orderId: "" };
}
export const AcknowledgeOrderDeliveryRequest = {
    $type: "devvit.plugin.payments.v1alpha.AcknowledgeOrderDeliveryRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.orderId !== "") {
            writer.uint32(10).string(message.orderId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAcknowledgeOrderDeliveryRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.orderId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { orderId: isSet(object.orderId) ? globalThis.String(object.orderId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.orderId !== "") {
            obj.orderId = message.orderId;
        }
        return obj;
    },
    create(base) {
        return AcknowledgeOrderDeliveryRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAcknowledgeOrderDeliveryRequest();
        message.orderId = object.orderId ?? "";
        return message;
    },
};
messageTypeRegistry.set(AcknowledgeOrderDeliveryRequest.$type, AcknowledgeOrderDeliveryRequest);
function createBaseAcknowledgeOrderDeliveryResponse() {
    return {};
}
export const AcknowledgeOrderDeliveryResponse = {
    $type: "devvit.plugin.payments.v1alpha.AcknowledgeOrderDeliveryResponse",
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAcknowledgeOrderDeliveryResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return AcknowledgeOrderDeliveryResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseAcknowledgeOrderDeliveryResponse();
        return message;
    },
};
messageTypeRegistry.set(AcknowledgeOrderDeliveryResponse.$type, AcknowledgeOrderDeliveryResponse);
export const PaymentsServiceServiceName = "devvit.plugin.payments.v1alpha.PaymentsService";
export class PaymentsServiceClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || PaymentsServiceServiceName;
        this.rpc = rpc;
        this.GetProducts = this.GetProducts.bind(this);
        this.GetOrders = this.GetOrders.bind(this);
        this.AcknowledgeOrderDelivery = this.AcknowledgeOrderDelivery.bind(this);
    }
    GetProducts(request, metadata) {
        const data = GetProductsRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetProducts", data, metadata);
        return promise.then((data) => GetProductsResponse.decode(_m0.Reader.create(data)));
    }
    GetOrders(request, metadata) {
        const data = GetOrdersRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetOrders", data, metadata);
        return promise.then((data) => GetOrdersResponse.decode(_m0.Reader.create(data)));
    }
    AcknowledgeOrderDelivery(request, metadata) {
        const data = AcknowledgeOrderDeliveryRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "AcknowledgeOrderDelivery", data, metadata);
        return promise.then((data) => AcknowledgeOrderDeliveryResponse.decode(_m0.Reader.create(data)));
    }
}
export const PaymentsServiceDefinition = {
    name: "PaymentsService",
    fullName: "devvit.plugin.payments.v1alpha.PaymentsService",
    methods: {
        /** get all (or filtered) products associated with your app */
        getProducts: {
            name: "GetProducts",
            requestType: GetProductsRequest,
            requestStream: false,
            responseType: GetProductsResponse,
            responseStream: false,
            options: {},
        },
        /** get all (or filtered) orders placed for your app */
        getOrders: {
            name: "GetOrders",
            requestType: GetOrdersRequest,
            requestStream: false,
            responseType: GetOrdersResponse,
            responseStream: false,
            options: {},
        },
        /** acknowledges an order has been fully delivered. This is used for asynchronous order fullfilment like pre-orders */
        acknowledgeOrderDelivery: {
            name: "AcknowledgeOrderDelivery",
            requestType: AcknowledgeOrderDeliveryRequest,
            requestStream: false,
            responseType: AcknowledgeOrderDeliveryResponse,
            responseStream: false,
            options: {},
        },
    },
};
function toTimestamp(date) {
    const seconds = Math.trunc(date.getTime() / 1000);
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (t.seconds || 0) * 1000;
    millis += (t.nanos || 0) / 1000000;
    return new globalThis.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof globalThis.Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new globalThis.Date(o);
    }
    else {
        return fromTimestamp(Timestamp.fromJSON(o));
    }
}
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
