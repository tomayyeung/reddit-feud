import { GetProductsRequest, GetProductsResponse, GetOrdersRequest, GetOrdersResponse, AcknowledgeOrderDeliveryRequest, AcknowledgeOrderDeliveryResponse, } from './payments.js';
export class PaymentsServiceClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.GetProducts.bind(this);
        this.GetOrders.bind(this);
        this.AcknowledgeOrderDelivery.bind(this);
    }
    GetProducts(request) {
        const data = GetProductsRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.payments.v1alpha.PaymentsService', 'GetProducts', 'application/json', data);
        return promise.then((data) => GetProductsResponse.fromJSON(data));
    }
    GetOrders(request) {
        const data = GetOrdersRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.payments.v1alpha.PaymentsService', 'GetOrders', 'application/json', data);
        return promise.then((data) => GetOrdersResponse.fromJSON(data));
    }
    AcknowledgeOrderDelivery(request) {
        const data = AcknowledgeOrderDeliveryRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.payments.v1alpha.PaymentsService', 'AcknowledgeOrderDelivery', 'application/json', data);
        return promise.then((data) => AcknowledgeOrderDeliveryResponse.fromJSON(data));
    }
}
export class PaymentsServiceClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.GetProducts.bind(this);
        this.GetOrders.bind(this);
        this.AcknowledgeOrderDelivery.bind(this);
    }
    GetProducts(request) {
        const data = GetProductsRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.payments.v1alpha.PaymentsService', 'GetProducts', 'application/protobuf', data);
        return promise.then((data) => GetProductsResponse.decode(data));
    }
    GetOrders(request) {
        const data = GetOrdersRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.payments.v1alpha.PaymentsService', 'GetOrders', 'application/protobuf', data);
        return promise.then((data) => GetOrdersResponse.decode(data));
    }
    AcknowledgeOrderDelivery(request) {
        const data = AcknowledgeOrderDeliveryRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.payments.v1alpha.PaymentsService', 'AcknowledgeOrderDelivery', 'application/protobuf', data);
        return promise.then((data) => AcknowledgeOrderDeliveryResponse.decode(data));
    }
}
