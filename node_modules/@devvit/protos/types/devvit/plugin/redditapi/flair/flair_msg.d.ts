/**
 * #flair_msg.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
export interface ClearFlairTemplatesRequest {
    /** subreddit name without the r/ e.g. 'devvit_test' */
    subreddit: string;
    /** one of (USER_FLAIR, LINK_FLAIR) */
    flairType: string;
}
export interface DeleteFlairRequest {
    /** subreddit name without the r/ e.g. 'devvit_test' */
    subreddit: string;
    /** a user by name */
    name: string;
}
export interface DeleteFlairTemplateRequest {
    /** subreddit name without the r/ e.g. 'devvit_test' */
    subreddit: string;
    flairTemplateId: string;
}
export interface FlairRequest {
    /** subreddit name without the r/ e.g. 'devvit_test' */
    subreddit: string;
    /** a valid subreddit image name */
    cssClass?: string | undefined;
    /** the thing id of a link e.g. t3_15bfi0 */
    link?: string | undefined;
    /** a user by name */
    name?: string | undefined;
    /** a string no longer than 64 characters */
    text?: string | undefined;
}
export interface FlairTemplateOrderRequest {
    /** subreddit name without the r/ e.g. 'devvit_test' */
    subreddit: string;
    /** one of (USER_FLAIR, LINK_FLAIR) */
    flairType: string;
    order: string[];
}
export interface FlairConfigRequest {
    /** subreddit name without the r/ e.g. 'devvit_test' */
    subreddit: string;
    /** is flair enabled? e.g. true/false */
    flairEnabled: boolean;
    /** position of flair e.g. one of (left, right) */
    flairPosition: string;
    /** a boolean value e.g. true/false */
    flairSelfAssignEnabled: boolean;
    /** position of link flair */
    linkFlairPosition: string;
    /** a boolean value e.g. true/false */
    linkFlairSelfAssignEnabled: boolean;
}
export interface FlairCsvRequest {
    /** subreddit name without the r/ e.g. 'devvit_test' */
    subreddit: string;
    /** flair information, separated by commas */
    flairCsv: string;
}
export interface FlairListRequest {
    /** subreddit name without the r/ e.g. 'devvit_test' */
    subreddit: string;
    /** thing id e.g. t3_15bfi0 */
    after?: string | undefined;
    /** thing id e.g. t3_15bfi0 */
    before?: string | undefined;
    /** a positive integer (default: 0) */
    count?: number | undefined;
    /** the maximum number of items desired (default: 25, maximum: 1000) */
    limit?: number | undefined;
    /** a user by name */
    name?: string | undefined;
    /** (optional) the string "all" */
    show?: string | undefined;
}
export interface FlairSelectorRequest {
    /** subreddit name without the r/ e.g. 'devvit_test' */
    subreddit: string;
    /** is it a new link e.g. true/false */
    isNewlink: boolean;
    /** the thing id of a link e.g. t3_15bfi0 */
    link?: string | undefined;
    /** a user by name */
    name: string;
}
export interface FlairTemplateRequest {
    /** subreddit name without the r/ e.g. 'devvit_test' */
    subreddit: string;
    /** one of (all, emoji, text) */
    allowableContent: string;
    /** a 6-digit rgb hex color, e.g. #AABBCC */
    backgroundColor: string;
    /** a valid subreddit image name */
    cssClass: string;
    /** no-op */
    flairTemplateId: string;
    /** one of (USER_FLAIR, LINK_FLAIR) */
    flairType: string;
    /** an integer between 1 and 10 (default: 10) */
    maxEmojis: number;
    /** a boolean value */
    modOnly: boolean;
    /** no-op */
    overrideCss: boolean;
    /** a string no longer than 64 characters */
    text: string;
    /** one of (light, dark) */
    textColor: string;
    /** is this text editable? e.g. true/false */
    textEditable: boolean;
}
export interface LinkFlairRequest {
    /** subreddit name without the r/ e.g. 'devvit_test' */
    subreddit: string;
}
export interface SelectFlairRequest {
    /** subreddit name without the r/ e.g. 'devvit_test' */
    subreddit: string;
    /** a 6-digit rgb hex color, e.g. #AABBCC */
    backgroundColor: string;
    /** a valid subreddit image name */
    cssClass: string;
    /** no-op */
    flairTemplateId: string;
    /** the thing id of a link e.g. t3_15bfi0 */
    link: string;
    /** a user by name */
    name: string;
    /** "all" saves attributes and returns rtjson; "only" only returns rtjson; "none" only saves attributes e.g. [all|only|none] */
    returnRtjson: string;
    /** a string no longer than 64 characters */
    text: string;
    /** one of (light, dark) */
    textColor: string;
}
export interface SetFlairEnabledRequest {
    /** subreddit name without the r/ e.g. 'devvit_test' */
    subreddit: string;
    /** is flair enabled? e.g. true/false */
    flairEnabled: boolean;
}
export interface FlairObject {
    allowableContent?: string | undefined;
    text?: string | undefined;
    textColor?: string | undefined;
    modOnly: boolean;
    backgroundColor?: string | undefined;
    id?: string | undefined;
    cssClass?: string | undefined;
    maxEmojis: number;
    textEditable: boolean;
    overrideCss: boolean;
    type?: string | undefined;
    flairType?: string | undefined;
    richtext: FlairObject_FlairRichText[];
}
/** RichText document for flair */
export interface FlairObject_FlairRichText {
    /** enum of element types.  e.g. emoji or text */
    e?: string | undefined;
    /** text to show up in the flair, e.g. "Need Advice" */
    t?: string | undefined;
    /** emoji references, e.g. ":rainbow:" */
    a?: string | undefined;
    /** url string, e.g. "https://reddit.com/" */
    u?: string | undefined;
}
export interface FlairArray {
    flair: FlairObject[];
}
export interface FlairSelectorResponseOption {
    flairCssClass?: string | undefined;
    flairTemplateId?: string | undefined;
    flairText?: string | undefined;
    flairTextEditable?: boolean | undefined;
    flairPosition?: string | undefined;
}
export interface FlairSelectorResponse {
    current?: FlairSelectorResponseOption | undefined;
    choices: FlairSelectorResponseOption[];
}
export interface UserFlair {
    flairCssClass?: string | undefined;
    user?: string | undefined;
    flairText?: string | undefined;
}
export interface FlairListResponse {
    users: UserFlair[];
    next?: string | undefined;
    prev?: string | undefined;
}
/**
 * options derived from this:
 * https://github.snooguts.net/reddit/reddit-public/blob/ec7d110c0be319e68502828a2662b86caca03a3c/r2/r2/controllers/api.py#L8531
 */
export interface FlairCsvResultError {
    css?: string | undefined;
    row?: string | undefined;
    user?: string | undefined;
}
export interface FlairCsvResultWarning {
    text?: string | undefined;
}
export interface FlairCsvResult {
    status?: string | undefined;
    ok?: boolean | undefined;
    errors?: FlairCsvResultError | undefined;
    warnings?: FlairCsvResultWarning | undefined;
}
export interface FlairCsvResponse {
    result: FlairCsvResult[];
}
export declare const ClearFlairTemplatesRequest: {
    $type: "devvit.plugin.redditapi.flair.ClearFlairTemplatesRequest";
    encode(message: ClearFlairTemplatesRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ClearFlairTemplatesRequest;
    fromJSON(object: any): ClearFlairTemplatesRequest;
    toJSON(message: ClearFlairTemplatesRequest): unknown;
    create(base?: DeepPartial<ClearFlairTemplatesRequest>): ClearFlairTemplatesRequest;
    fromPartial(object: DeepPartial<ClearFlairTemplatesRequest>): ClearFlairTemplatesRequest;
};
export declare const DeleteFlairRequest: {
    $type: "devvit.plugin.redditapi.flair.DeleteFlairRequest";
    encode(message: DeleteFlairRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DeleteFlairRequest;
    fromJSON(object: any): DeleteFlairRequest;
    toJSON(message: DeleteFlairRequest): unknown;
    create(base?: DeepPartial<DeleteFlairRequest>): DeleteFlairRequest;
    fromPartial(object: DeepPartial<DeleteFlairRequest>): DeleteFlairRequest;
};
export declare const DeleteFlairTemplateRequest: {
    $type: "devvit.plugin.redditapi.flair.DeleteFlairTemplateRequest";
    encode(message: DeleteFlairTemplateRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DeleteFlairTemplateRequest;
    fromJSON(object: any): DeleteFlairTemplateRequest;
    toJSON(message: DeleteFlairTemplateRequest): unknown;
    create(base?: DeepPartial<DeleteFlairTemplateRequest>): DeleteFlairTemplateRequest;
    fromPartial(object: DeepPartial<DeleteFlairTemplateRequest>): DeleteFlairTemplateRequest;
};
export declare const FlairRequest: {
    $type: "devvit.plugin.redditapi.flair.FlairRequest";
    encode(message: FlairRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FlairRequest;
    fromJSON(object: any): FlairRequest;
    toJSON(message: FlairRequest): unknown;
    create(base?: DeepPartial<FlairRequest>): FlairRequest;
    fromPartial(object: DeepPartial<FlairRequest>): FlairRequest;
};
export declare const FlairTemplateOrderRequest: {
    $type: "devvit.plugin.redditapi.flair.FlairTemplateOrderRequest";
    encode(message: FlairTemplateOrderRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FlairTemplateOrderRequest;
    fromJSON(object: any): FlairTemplateOrderRequest;
    toJSON(message: FlairTemplateOrderRequest): unknown;
    create(base?: DeepPartial<FlairTemplateOrderRequest>): FlairTemplateOrderRequest;
    fromPartial(object: DeepPartial<FlairTemplateOrderRequest>): FlairTemplateOrderRequest;
};
export declare const FlairConfigRequest: {
    $type: "devvit.plugin.redditapi.flair.FlairConfigRequest";
    encode(message: FlairConfigRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FlairConfigRequest;
    fromJSON(object: any): FlairConfigRequest;
    toJSON(message: FlairConfigRequest): unknown;
    create(base?: DeepPartial<FlairConfigRequest>): FlairConfigRequest;
    fromPartial(object: DeepPartial<FlairConfigRequest>): FlairConfigRequest;
};
export declare const FlairCsvRequest: {
    $type: "devvit.plugin.redditapi.flair.FlairCsvRequest";
    encode(message: FlairCsvRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FlairCsvRequest;
    fromJSON(object: any): FlairCsvRequest;
    toJSON(message: FlairCsvRequest): unknown;
    create(base?: DeepPartial<FlairCsvRequest>): FlairCsvRequest;
    fromPartial(object: DeepPartial<FlairCsvRequest>): FlairCsvRequest;
};
export declare const FlairListRequest: {
    $type: "devvit.plugin.redditapi.flair.FlairListRequest";
    encode(message: FlairListRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FlairListRequest;
    fromJSON(object: any): FlairListRequest;
    toJSON(message: FlairListRequest): unknown;
    create(base?: DeepPartial<FlairListRequest>): FlairListRequest;
    fromPartial(object: DeepPartial<FlairListRequest>): FlairListRequest;
};
export declare const FlairSelectorRequest: {
    $type: "devvit.plugin.redditapi.flair.FlairSelectorRequest";
    encode(message: FlairSelectorRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FlairSelectorRequest;
    fromJSON(object: any): FlairSelectorRequest;
    toJSON(message: FlairSelectorRequest): unknown;
    create(base?: DeepPartial<FlairSelectorRequest>): FlairSelectorRequest;
    fromPartial(object: DeepPartial<FlairSelectorRequest>): FlairSelectorRequest;
};
export declare const FlairTemplateRequest: {
    $type: "devvit.plugin.redditapi.flair.FlairTemplateRequest";
    encode(message: FlairTemplateRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FlairTemplateRequest;
    fromJSON(object: any): FlairTemplateRequest;
    toJSON(message: FlairTemplateRequest): unknown;
    create(base?: DeepPartial<FlairTemplateRequest>): FlairTemplateRequest;
    fromPartial(object: DeepPartial<FlairTemplateRequest>): FlairTemplateRequest;
};
export declare const LinkFlairRequest: {
    $type: "devvit.plugin.redditapi.flair.LinkFlairRequest";
    encode(message: LinkFlairRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): LinkFlairRequest;
    fromJSON(object: any): LinkFlairRequest;
    toJSON(message: LinkFlairRequest): unknown;
    create(base?: DeepPartial<LinkFlairRequest>): LinkFlairRequest;
    fromPartial(object: DeepPartial<LinkFlairRequest>): LinkFlairRequest;
};
export declare const SelectFlairRequest: {
    $type: "devvit.plugin.redditapi.flair.SelectFlairRequest";
    encode(message: SelectFlairRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SelectFlairRequest;
    fromJSON(object: any): SelectFlairRequest;
    toJSON(message: SelectFlairRequest): unknown;
    create(base?: DeepPartial<SelectFlairRequest>): SelectFlairRequest;
    fromPartial(object: DeepPartial<SelectFlairRequest>): SelectFlairRequest;
};
export declare const SetFlairEnabledRequest: {
    $type: "devvit.plugin.redditapi.flair.SetFlairEnabledRequest";
    encode(message: SetFlairEnabledRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SetFlairEnabledRequest;
    fromJSON(object: any): SetFlairEnabledRequest;
    toJSON(message: SetFlairEnabledRequest): unknown;
    create(base?: DeepPartial<SetFlairEnabledRequest>): SetFlairEnabledRequest;
    fromPartial(object: DeepPartial<SetFlairEnabledRequest>): SetFlairEnabledRequest;
};
export declare const FlairObject: {
    $type: "devvit.plugin.redditapi.flair.FlairObject";
    encode(message: FlairObject, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FlairObject;
    fromJSON(object: any): FlairObject;
    toJSON(message: FlairObject): unknown;
    create(base?: DeepPartial<FlairObject>): FlairObject;
    fromPartial(object: DeepPartial<FlairObject>): FlairObject;
};
export declare const FlairObject_FlairRichText: {
    $type: "devvit.plugin.redditapi.flair.FlairObject.FlairRichText";
    encode(message: FlairObject_FlairRichText, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FlairObject_FlairRichText;
    fromJSON(object: any): FlairObject_FlairRichText;
    toJSON(message: FlairObject_FlairRichText): unknown;
    create(base?: DeepPartial<FlairObject_FlairRichText>): FlairObject_FlairRichText;
    fromPartial(object: DeepPartial<FlairObject_FlairRichText>): FlairObject_FlairRichText;
};
export declare const FlairArray: {
    $type: "devvit.plugin.redditapi.flair.FlairArray";
    encode(message: FlairArray, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FlairArray;
    fromJSON(object: any): FlairArray;
    toJSON(message: FlairArray): unknown;
    create(base?: DeepPartial<FlairArray>): FlairArray;
    fromPartial(object: DeepPartial<FlairArray>): FlairArray;
};
export declare const FlairSelectorResponseOption: {
    $type: "devvit.plugin.redditapi.flair.FlairSelectorResponseOption";
    encode(message: FlairSelectorResponseOption, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FlairSelectorResponseOption;
    fromJSON(object: any): FlairSelectorResponseOption;
    toJSON(message: FlairSelectorResponseOption): unknown;
    create(base?: DeepPartial<FlairSelectorResponseOption>): FlairSelectorResponseOption;
    fromPartial(object: DeepPartial<FlairSelectorResponseOption>): FlairSelectorResponseOption;
};
export declare const FlairSelectorResponse: {
    $type: "devvit.plugin.redditapi.flair.FlairSelectorResponse";
    encode(message: FlairSelectorResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FlairSelectorResponse;
    fromJSON(object: any): FlairSelectorResponse;
    toJSON(message: FlairSelectorResponse): unknown;
    create(base?: DeepPartial<FlairSelectorResponse>): FlairSelectorResponse;
    fromPartial(object: DeepPartial<FlairSelectorResponse>): FlairSelectorResponse;
};
export declare const UserFlair: {
    $type: "devvit.plugin.redditapi.flair.UserFlair";
    encode(message: UserFlair, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UserFlair;
    fromJSON(object: any): UserFlair;
    toJSON(message: UserFlair): unknown;
    create(base?: DeepPartial<UserFlair>): UserFlair;
    fromPartial(object: DeepPartial<UserFlair>): UserFlair;
};
export declare const FlairListResponse: {
    $type: "devvit.plugin.redditapi.flair.FlairListResponse";
    encode(message: FlairListResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FlairListResponse;
    fromJSON(object: any): FlairListResponse;
    toJSON(message: FlairListResponse): unknown;
    create(base?: DeepPartial<FlairListResponse>): FlairListResponse;
    fromPartial(object: DeepPartial<FlairListResponse>): FlairListResponse;
};
export declare const FlairCsvResultError: {
    $type: "devvit.plugin.redditapi.flair.FlairCsvResultError";
    encode(message: FlairCsvResultError, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FlairCsvResultError;
    fromJSON(object: any): FlairCsvResultError;
    toJSON(message: FlairCsvResultError): unknown;
    create(base?: DeepPartial<FlairCsvResultError>): FlairCsvResultError;
    fromPartial(object: DeepPartial<FlairCsvResultError>): FlairCsvResultError;
};
export declare const FlairCsvResultWarning: {
    $type: "devvit.plugin.redditapi.flair.FlairCsvResultWarning";
    encode(message: FlairCsvResultWarning, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FlairCsvResultWarning;
    fromJSON(object: any): FlairCsvResultWarning;
    toJSON(message: FlairCsvResultWarning): unknown;
    create(base?: DeepPartial<FlairCsvResultWarning>): FlairCsvResultWarning;
    fromPartial(object: DeepPartial<FlairCsvResultWarning>): FlairCsvResultWarning;
};
export declare const FlairCsvResult: {
    $type: "devvit.plugin.redditapi.flair.FlairCsvResult";
    encode(message: FlairCsvResult, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FlairCsvResult;
    fromJSON(object: any): FlairCsvResult;
    toJSON(message: FlairCsvResult): unknown;
    create(base?: DeepPartial<FlairCsvResult>): FlairCsvResult;
    fromPartial(object: DeepPartial<FlairCsvResult>): FlairCsvResult;
};
export declare const FlairCsvResponse: {
    $type: "devvit.plugin.redditapi.flair.FlairCsvResponse";
    encode(message: FlairCsvResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FlairCsvResponse;
    fromJSON(object: any): FlairCsvResponse;
    toJSON(message: FlairCsvResponse): unknown;
    create(base?: DeepPartial<FlairCsvResponse>): FlairCsvResponse;
    fromPartial(object: DeepPartial<FlairCsvResponse>): FlairCsvResponse;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=flair_msg.d.ts.map