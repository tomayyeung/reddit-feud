import { ClearFlairTemplatesRequest, DeleteFlairRequest, DeleteFlairTemplateRequest, FlairRequest, FlairTemplateOrderRequest, FlairConfigRequest, FlairCsvRequest, FlairCsvResponse, FlairListRequest, FlairListResponse, FlairSelectorRequest, FlairSelectorResponse, FlairTemplateRequest, FlairObject, LinkFlairRequest, FlairArray, SelectFlairRequest, SetFlairEnabledRequest } from './flair_msg.js';
import { JsonStatus } from '../common/common_msg.js';
import { Empty } from '../../../../google/protobuf/empty.js';
interface Rpc {
    request(service: string, method: string, contentType: 'application/json' | 'application/protobuf', data: object | Uint8Array): Promise<object | Uint8Array>;
}
export interface FlairClient {
    ClearFlairTemplates(request: ClearFlairTemplatesRequest): Promise<JsonStatus>;
    DeleteFlair(request: DeleteFlairRequest): Promise<JsonStatus>;
    DeleteFlairTemplate(request: DeleteFlairTemplateRequest): Promise<JsonStatus>;
    Flair(request: FlairRequest): Promise<JsonStatus>;
    FlairTemplateOrder(request: FlairTemplateOrderRequest): Promise<Empty>;
    FlairConfig(request: FlairConfigRequest): Promise<JsonStatus>;
    FlairCsv(request: FlairCsvRequest): Promise<FlairCsvResponse>;
    FlairList(request: FlairListRequest): Promise<FlairListResponse>;
    FlairSelector(request: FlairSelectorRequest): Promise<FlairSelectorResponse>;
    FlairTemplate(request: FlairTemplateRequest): Promise<FlairObject>;
    LinkFlair(request: LinkFlairRequest): Promise<FlairArray>;
    SelectFlair(request: SelectFlairRequest): Promise<JsonStatus>;
    SetFlairEnabled(request: SetFlairEnabledRequest): Promise<JsonStatus>;
    UserFlair(request: LinkFlairRequest): Promise<FlairArray>;
}
export declare class FlairClientJSON implements FlairClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    ClearFlairTemplates(request: ClearFlairTemplatesRequest): Promise<JsonStatus>;
    DeleteFlair(request: DeleteFlairRequest): Promise<JsonStatus>;
    DeleteFlairTemplate(request: DeleteFlairTemplateRequest): Promise<JsonStatus>;
    Flair(request: FlairRequest): Promise<JsonStatus>;
    FlairTemplateOrder(request: FlairTemplateOrderRequest): Promise<Empty>;
    FlairConfig(request: FlairConfigRequest): Promise<JsonStatus>;
    FlairCsv(request: FlairCsvRequest): Promise<FlairCsvResponse>;
    FlairList(request: FlairListRequest): Promise<FlairListResponse>;
    FlairSelector(request: FlairSelectorRequest): Promise<FlairSelectorResponse>;
    FlairTemplate(request: FlairTemplateRequest): Promise<FlairObject>;
    LinkFlair(request: LinkFlairRequest): Promise<FlairArray>;
    SelectFlair(request: SelectFlairRequest): Promise<JsonStatus>;
    SetFlairEnabled(request: SetFlairEnabledRequest): Promise<JsonStatus>;
    UserFlair(request: LinkFlairRequest): Promise<FlairArray>;
}
export declare class FlairClientProtobuf implements FlairClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    ClearFlairTemplates(request: ClearFlairTemplatesRequest): Promise<JsonStatus>;
    DeleteFlair(request: DeleteFlairRequest): Promise<JsonStatus>;
    DeleteFlairTemplate(request: DeleteFlairTemplateRequest): Promise<JsonStatus>;
    Flair(request: FlairRequest): Promise<JsonStatus>;
    FlairTemplateOrder(request: FlairTemplateOrderRequest): Promise<Empty>;
    FlairConfig(request: FlairConfigRequest): Promise<JsonStatus>;
    FlairCsv(request: FlairCsvRequest): Promise<FlairCsvResponse>;
    FlairList(request: FlairListRequest): Promise<FlairListResponse>;
    FlairSelector(request: FlairSelectorRequest): Promise<FlairSelectorResponse>;
    FlairTemplate(request: FlairTemplateRequest): Promise<FlairObject>;
    LinkFlair(request: LinkFlairRequest): Promise<FlairArray>;
    SelectFlair(request: SelectFlairRequest): Promise<JsonStatus>;
    SetFlairEnabled(request: SetFlairEnabledRequest): Promise<JsonStatus>;
    UserFlair(request: LinkFlairRequest): Promise<FlairArray>;
}
export {};
//# sourceMappingURL=flair_svc.twirp-client.d.ts.map