import { ClearFlairTemplatesRequest, DeleteFlairRequest, DeleteFlairTemplateRequest, FlairRequest, FlairTemplateOrderRequest, FlairConfigRequest, FlairCsvRequest, FlairCsvResponse, FlairListRequest, FlairListResponse, FlairSelectorRequest, FlairSelectorResponse, FlairTemplateRequest, FlairObject, LinkFlairRequest, FlairArray, SelectFlairRequest, SetFlairEnabledRequest, } from './flair_msg.js';
import { JsonStatus } from '../common/common_msg.js';
import { Empty } from '../../../../google/protobuf/empty.js';
export class FlairClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.ClearFlairTemplates.bind(this);
        this.DeleteFlair.bind(this);
        this.DeleteFlairTemplate.bind(this);
        this.Flair.bind(this);
        this.FlairTemplateOrder.bind(this);
        this.FlairConfig.bind(this);
        this.FlairCsv.bind(this);
        this.FlairList.bind(this);
        this.FlairSelector.bind(this);
        this.FlairTemplate.bind(this);
        this.LinkFlair.bind(this);
        this.SelectFlair.bind(this);
        this.SetFlairEnabled.bind(this);
        this.UserFlair.bind(this);
    }
    ClearFlairTemplates(request) {
        const data = ClearFlairTemplatesRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.flair.Flair', 'ClearFlairTemplates', 'application/json', data);
        return promise.then((data) => JsonStatus.fromJSON(data));
    }
    DeleteFlair(request) {
        const data = DeleteFlairRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.flair.Flair', 'DeleteFlair', 'application/json', data);
        return promise.then((data) => JsonStatus.fromJSON(data));
    }
    DeleteFlairTemplate(request) {
        const data = DeleteFlairTemplateRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.flair.Flair', 'DeleteFlairTemplate', 'application/json', data);
        return promise.then((data) => JsonStatus.fromJSON(data));
    }
    Flair(request) {
        const data = FlairRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.flair.Flair', 'Flair', 'application/json', data);
        return promise.then((data) => JsonStatus.fromJSON(data));
    }
    FlairTemplateOrder(request) {
        const data = FlairTemplateOrderRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.flair.Flair', 'FlairTemplateOrder', 'application/json', data);
        return promise.then((data) => Empty.fromJSON(data));
    }
    FlairConfig(request) {
        const data = FlairConfigRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.flair.Flair', 'FlairConfig', 'application/json', data);
        return promise.then((data) => JsonStatus.fromJSON(data));
    }
    FlairCsv(request) {
        const data = FlairCsvRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.flair.Flair', 'FlairCsv', 'application/json', data);
        return promise.then((data) => FlairCsvResponse.fromJSON(data));
    }
    FlairList(request) {
        const data = FlairListRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.flair.Flair', 'FlairList', 'application/json', data);
        return promise.then((data) => FlairListResponse.fromJSON(data));
    }
    FlairSelector(request) {
        const data = FlairSelectorRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.flair.Flair', 'FlairSelector', 'application/json', data);
        return promise.then((data) => FlairSelectorResponse.fromJSON(data));
    }
    FlairTemplate(request) {
        const data = FlairTemplateRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.flair.Flair', 'FlairTemplate', 'application/json', data);
        return promise.then((data) => FlairObject.fromJSON(data));
    }
    LinkFlair(request) {
        const data = LinkFlairRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.flair.Flair', 'LinkFlair', 'application/json', data);
        return promise.then((data) => FlairArray.fromJSON(data));
    }
    SelectFlair(request) {
        const data = SelectFlairRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.flair.Flair', 'SelectFlair', 'application/json', data);
        return promise.then((data) => JsonStatus.fromJSON(data));
    }
    SetFlairEnabled(request) {
        const data = SetFlairEnabledRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.flair.Flair', 'SetFlairEnabled', 'application/json', data);
        return promise.then((data) => JsonStatus.fromJSON(data));
    }
    UserFlair(request) {
        const data = LinkFlairRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.flair.Flair', 'UserFlair', 'application/json', data);
        return promise.then((data) => FlairArray.fromJSON(data));
    }
}
export class FlairClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.ClearFlairTemplates.bind(this);
        this.DeleteFlair.bind(this);
        this.DeleteFlairTemplate.bind(this);
        this.Flair.bind(this);
        this.FlairTemplateOrder.bind(this);
        this.FlairConfig.bind(this);
        this.FlairCsv.bind(this);
        this.FlairList.bind(this);
        this.FlairSelector.bind(this);
        this.FlairTemplate.bind(this);
        this.LinkFlair.bind(this);
        this.SelectFlair.bind(this);
        this.SetFlairEnabled.bind(this);
        this.UserFlair.bind(this);
    }
    ClearFlairTemplates(request) {
        const data = ClearFlairTemplatesRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.flair.Flair', 'ClearFlairTemplates', 'application/protobuf', data);
        return promise.then((data) => JsonStatus.decode(data));
    }
    DeleteFlair(request) {
        const data = DeleteFlairRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.flair.Flair', 'DeleteFlair', 'application/protobuf', data);
        return promise.then((data) => JsonStatus.decode(data));
    }
    DeleteFlairTemplate(request) {
        const data = DeleteFlairTemplateRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.flair.Flair', 'DeleteFlairTemplate', 'application/protobuf', data);
        return promise.then((data) => JsonStatus.decode(data));
    }
    Flair(request) {
        const data = FlairRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.flair.Flair', 'Flair', 'application/protobuf', data);
        return promise.then((data) => JsonStatus.decode(data));
    }
    FlairTemplateOrder(request) {
        const data = FlairTemplateOrderRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.flair.Flair', 'FlairTemplateOrder', 'application/protobuf', data);
        return promise.then((data) => Empty.decode(data));
    }
    FlairConfig(request) {
        const data = FlairConfigRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.flair.Flair', 'FlairConfig', 'application/protobuf', data);
        return promise.then((data) => JsonStatus.decode(data));
    }
    FlairCsv(request) {
        const data = FlairCsvRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.flair.Flair', 'FlairCsv', 'application/protobuf', data);
        return promise.then((data) => FlairCsvResponse.decode(data));
    }
    FlairList(request) {
        const data = FlairListRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.flair.Flair', 'FlairList', 'application/protobuf', data);
        return promise.then((data) => FlairListResponse.decode(data));
    }
    FlairSelector(request) {
        const data = FlairSelectorRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.flair.Flair', 'FlairSelector', 'application/protobuf', data);
        return promise.then((data) => FlairSelectorResponse.decode(data));
    }
    FlairTemplate(request) {
        const data = FlairTemplateRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.flair.Flair', 'FlairTemplate', 'application/protobuf', data);
        return promise.then((data) => FlairObject.decode(data));
    }
    LinkFlair(request) {
        const data = LinkFlairRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.flair.Flair', 'LinkFlair', 'application/protobuf', data);
        return promise.then((data) => FlairArray.decode(data));
    }
    SelectFlair(request) {
        const data = SelectFlairRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.flair.Flair', 'SelectFlair', 'application/protobuf', data);
        return promise.then((data) => JsonStatus.decode(data));
    }
    SetFlairEnabled(request) {
        const data = SetFlairEnabledRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.flair.Flair', 'SetFlairEnabled', 'application/protobuf', data);
        return promise.then((data) => JsonStatus.decode(data));
    }
    UserFlair(request) {
        const data = LinkFlairRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.flair.Flair', 'UserFlair', 'application/protobuf', data);
        return promise.then((data) => FlairArray.decode(data));
    }
}
