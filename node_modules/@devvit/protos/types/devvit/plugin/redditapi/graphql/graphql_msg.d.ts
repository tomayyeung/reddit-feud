/**
 * #graphql_msg.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
export interface QueryRequest {
    /** gql query string */
    query: string;
    /** put the variables here */
    variables?: {
        [key: string]: any;
    } | undefined;
}
export interface PersistedQueryRequest {
    /** id of a persisted operation */
    id: string;
    /** put the variables here */
    variables?: {
        [key: string]: any;
    } | undefined;
    /** the name of the persisted operation */
    operationName: string;
}
export interface QueryResponse {
    data?: {
        [key: string]: any;
    } | undefined;
    /** @deprecated */
    errors: GraphQLError[];
    /** @deprecated */
    ok?: boolean | undefined;
}
export interface GraphQLError {
    code: string;
    message: string;
}
export declare const QueryRequest: {
    $type: "devvit.plugin.redditapi.graphql.QueryRequest";
    encode(message: QueryRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryRequest;
    fromJSON(object: any): QueryRequest;
    toJSON(message: QueryRequest): unknown;
    create(base?: DeepPartial<QueryRequest>): QueryRequest;
    fromPartial(object: DeepPartial<QueryRequest>): QueryRequest;
};
export declare const PersistedQueryRequest: {
    $type: "devvit.plugin.redditapi.graphql.PersistedQueryRequest";
    encode(message: PersistedQueryRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PersistedQueryRequest;
    fromJSON(object: any): PersistedQueryRequest;
    toJSON(message: PersistedQueryRequest): unknown;
    create(base?: DeepPartial<PersistedQueryRequest>): PersistedQueryRequest;
    fromPartial(object: DeepPartial<PersistedQueryRequest>): PersistedQueryRequest;
};
export declare const QueryResponse: {
    $type: "devvit.plugin.redditapi.graphql.QueryResponse";
    encode(message: QueryResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryResponse;
    fromJSON(object: any): QueryResponse;
    toJSON(message: QueryResponse): unknown;
    create(base?: DeepPartial<QueryResponse>): QueryResponse;
    fromPartial(object: DeepPartial<QueryResponse>): QueryResponse;
};
export declare const GraphQLError: {
    $type: "devvit.plugin.redditapi.graphql.GraphQLError";
    encode(message: GraphQLError, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GraphQLError;
    fromJSON(object: any): GraphQLError;
    toJSON(message: GraphQLError): unknown;
    create(base?: DeepPartial<GraphQLError>): GraphQLError;
    fromPartial(object: DeepPartial<GraphQLError>): GraphQLError;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=graphql_msg.d.ts.map