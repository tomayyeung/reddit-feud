/**
 * #graphql_msg.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { Struct } from "../../../../google/protobuf/struct.js";
import { messageTypeRegistry } from "../../../../typeRegistry.js";
function createBaseQueryRequest() {
    return { query: "", variables: undefined };
}
export const QueryRequest = {
    $type: "devvit.plugin.redditapi.graphql.QueryRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.query !== "") {
            writer.uint32(10).string(message.query);
        }
        if (message.variables !== undefined) {
            Struct.encode(Struct.wrap(message.variables), writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.query = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.variables = Struct.unwrap(Struct.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            query: isSet(object.query) ? globalThis.String(object.query) : "",
            variables: isObject(object.variables) ? object.variables : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.query !== "") {
            obj.query = message.query;
        }
        if (message.variables !== undefined) {
            obj.variables = message.variables;
        }
        return obj;
    },
    create(base) {
        return QueryRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryRequest();
        message.query = object.query ?? "";
        message.variables = object.variables ?? undefined;
        return message;
    },
};
messageTypeRegistry.set(QueryRequest.$type, QueryRequest);
function createBasePersistedQueryRequest() {
    return { id: "", variables: undefined, operationName: "" };
}
export const PersistedQueryRequest = {
    $type: "devvit.plugin.redditapi.graphql.PersistedQueryRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.variables !== undefined) {
            Struct.encode(Struct.wrap(message.variables), writer.uint32(18).fork()).ldelim();
        }
        if (message.operationName !== "") {
            writer.uint32(26).string(message.operationName);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePersistedQueryRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.variables = Struct.unwrap(Struct.decode(reader, reader.uint32()));
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.operationName = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            variables: isObject(object.variables) ? object.variables : undefined,
            operationName: isSet(object.operationName) ? globalThis.String(object.operationName) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.variables !== undefined) {
            obj.variables = message.variables;
        }
        if (message.operationName !== "") {
            obj.operationName = message.operationName;
        }
        return obj;
    },
    create(base) {
        return PersistedQueryRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePersistedQueryRequest();
        message.id = object.id ?? "";
        message.variables = object.variables ?? undefined;
        message.operationName = object.operationName ?? "";
        return message;
    },
};
messageTypeRegistry.set(PersistedQueryRequest.$type, PersistedQueryRequest);
function createBaseQueryResponse() {
    return { data: undefined, errors: [], ok: undefined };
}
export const QueryResponse = {
    $type: "devvit.plugin.redditapi.graphql.QueryResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.data !== undefined) {
            Struct.encode(Struct.wrap(message.data), writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.errors) {
            GraphQLError.encode(v, writer.uint32(18).fork()).ldelim();
        }
        if (message.ok !== undefined) {
            writer.uint32(24).bool(message.ok);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.data = Struct.unwrap(Struct.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.errors.push(GraphQLError.decode(reader, reader.uint32()));
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.ok = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            data: isObject(object.data) ? object.data : undefined,
            errors: globalThis.Array.isArray(object?.errors) ? object.errors.map((e) => GraphQLError.fromJSON(e)) : [],
            ok: isSet(object.ok) ? globalThis.Boolean(object.ok) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.data !== undefined) {
            obj.data = message.data;
        }
        if (message.errors?.length) {
            obj.errors = message.errors.map((e) => GraphQLError.toJSON(e));
        }
        if (message.ok !== undefined) {
            obj.ok = message.ok;
        }
        return obj;
    },
    create(base) {
        return QueryResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseQueryResponse();
        message.data = object.data ?? undefined;
        message.errors = object.errors?.map((e) => GraphQLError.fromPartial(e)) || [];
        message.ok = object.ok ?? undefined;
        return message;
    },
};
messageTypeRegistry.set(QueryResponse.$type, QueryResponse);
function createBaseGraphQLError() {
    return { code: "", message: "" };
}
export const GraphQLError = {
    $type: "devvit.plugin.redditapi.graphql.GraphQLError",
    encode(message, writer = _m0.Writer.create()) {
        if (message.code !== "") {
            writer.uint32(10).string(message.code);
        }
        if (message.message !== "") {
            writer.uint32(18).string(message.message);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGraphQLError();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.code = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            code: isSet(object.code) ? globalThis.String(object.code) : "",
            message: isSet(object.message) ? globalThis.String(object.message) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.code !== "") {
            obj.code = message.code;
        }
        if (message.message !== "") {
            obj.message = message.message;
        }
        return obj;
    },
    create(base) {
        return GraphQLError.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGraphQLError();
        message.code = object.code ?? "";
        message.message = object.message ?? "";
        return message;
    },
};
messageTypeRegistry.set(GraphQLError.$type, GraphQLError);
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
