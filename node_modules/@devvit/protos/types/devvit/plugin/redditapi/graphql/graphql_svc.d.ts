/**
 * #graphql_svc.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { Metadata } from "../../../../../lib/Types.js";
import { PersistedQueryRequest, QueryRequest, QueryResponse } from "./graphql_msg.js";
export interface GraphQL {
    /** Sending a GraphQL query request using a custom query string */
    Query(request: QueryRequest, metadata?: Metadata): Promise<QueryResponse>;
    /**
     * Sending a GraphQL persisted query request
     *
     * A persisted query is a query string that's cached on the server side,
     * along with its unique identifier (always its SHA-256 hash)
     */
    PersistedQuery(request: PersistedQueryRequest, metadata?: Metadata): Promise<QueryResponse>;
}
export declare const GraphQLServiceName = "devvit.plugin.redditapi.graphql.GraphQL";
export declare class GraphQLClientImpl implements GraphQL {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Query(request: QueryRequest, metadata?: Metadata): Promise<QueryResponse>;
    PersistedQuery(request: PersistedQueryRequest, metadata?: Metadata): Promise<QueryResponse>;
}
export type GraphQLDefinition = typeof GraphQLDefinition;
export declare const GraphQLDefinition: {
    readonly name: "GraphQL";
    readonly fullName: "devvit.plugin.redditapi.graphql.GraphQL";
    readonly methods: {
        /** Sending a GraphQL query request using a custom query string */
        readonly query: {
            readonly name: "Query";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.graphql.QueryRequest";
                encode(message: QueryRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryRequest;
                fromJSON(object: any): QueryRequest;
                toJSON(message: QueryRequest): unknown;
                create(base?: {
                    query?: string;
                    variables?: {
                        [x: string]: any;
                    } | undefined;
                } | undefined): QueryRequest;
                fromPartial(object: {
                    query?: string;
                    variables?: {
                        [x: string]: any;
                    } | undefined;
                }): QueryRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.graphql.QueryResponse";
                encode(message: QueryResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryResponse;
                fromJSON(object: any): QueryResponse;
                toJSON(message: QueryResponse): unknown;
                create(base?: {
                    data?: {
                        [x: string]: any;
                    } | undefined;
                    errors?: {
                        code?: string;
                        message?: string;
                    }[];
                    ok?: boolean | undefined;
                } | undefined): QueryResponse;
                fromPartial(object: {
                    data?: {
                        [x: string]: any;
                    } | undefined;
                    errors?: {
                        code?: string;
                        message?: string;
                    }[];
                    ok?: boolean | undefined;
                }): QueryResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /**
         * Sending a GraphQL persisted query request
         *
         * A persisted query is a query string that's cached on the server side,
         * along with its unique identifier (always its SHA-256 hash)
         */
        readonly persistedQuery: {
            readonly name: "PersistedQuery";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.graphql.PersistedQueryRequest";
                encode(message: PersistedQueryRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PersistedQueryRequest;
                fromJSON(object: any): PersistedQueryRequest;
                toJSON(message: PersistedQueryRequest): unknown;
                create(base?: {
                    id?: string;
                    variables?: {
                        [x: string]: any;
                    } | undefined;
                    operationName?: string;
                } | undefined): PersistedQueryRequest;
                fromPartial(object: {
                    id?: string;
                    variables?: {
                        [x: string]: any;
                    } | undefined;
                    operationName?: string;
                }): PersistedQueryRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.graphql.QueryResponse";
                encode(message: QueryResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryResponse;
                fromJSON(object: any): QueryResponse;
                toJSON(message: QueryResponse): unknown;
                create(base?: {
                    data?: {
                        [x: string]: any;
                    } | undefined;
                    errors?: {
                        code?: string;
                        message?: string;
                    }[];
                    ok?: boolean | undefined;
                } | undefined): QueryResponse;
                fromPartial(object: {
                    data?: {
                        [x: string]: any;
                    } | undefined;
                    errors?: {
                        code?: string;
                        message?: string;
                    }[];
                    ok?: boolean | undefined;
                }): QueryResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array, metadata?: Metadata): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=graphql_svc.d.ts.map