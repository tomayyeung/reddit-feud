import { QueryRequest, QueryResponse, PersistedQueryRequest, } from './graphql_msg.js';
export class GraphQLClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.Query.bind(this);
        this.PersistedQuery.bind(this);
    }
    Query(request) {
        const data = QueryRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.graphql.GraphQL', 'Query', 'application/json', data);
        return promise.then((data) => QueryResponse.fromJSON(data));
    }
    PersistedQuery(request) {
        const data = PersistedQueryRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.graphql.GraphQL', 'PersistedQuery', 'application/json', data);
        return promise.then((data) => QueryResponse.fromJSON(data));
    }
}
export class GraphQLClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.Query.bind(this);
        this.PersistedQuery.bind(this);
    }
    Query(request) {
        const data = QueryRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.graphql.GraphQL', 'Query', 'application/protobuf', data);
        return promise.then((data) => QueryResponse.decode(data));
    }
    PersistedQuery(request) {
        const data = PersistedQueryRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.graphql.GraphQL', 'PersistedQuery', 'application/protobuf', data);
        return promise.then((data) => QueryResponse.decode(data));
    }
}
