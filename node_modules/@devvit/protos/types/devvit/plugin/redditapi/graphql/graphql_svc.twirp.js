import { TwirpServer, TwirpError, TwirpErrorCode, TwirpContentType, chainInterceptors, } from 'twirp-ts';
import { QueryRequest, QueryResponse, PersistedQueryRequest, } from './graphql_msg.js';
export var GraphQLMethod;
(function (GraphQLMethod) {
    GraphQLMethod["Query"] = "Query";
    GraphQLMethod["PersistedQuery"] = "PersistedQuery";
})(GraphQLMethod || (GraphQLMethod = {}));
export const GraphQLMethodList = [
    GraphQLMethod.Query,
    GraphQLMethod.PersistedQuery,
];
export function createGraphQLServer(service) {
    return new TwirpServer({
        service,
        packageName: 'devvit.plugin.redditapi.graphql',
        serviceName: 'GraphQL',
        methodList: GraphQLMethodList,
        matchRoute: matchGraphQLRoute,
    });
}
function matchGraphQLRoute(method, events) {
    switch (method) {
        case 'Query':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'Query' };
                await events.onMatch(ctx);
                return handleGraphQLQueryRequest(ctx, service, data, interceptors);
            };
        case 'PersistedQuery':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'PersistedQuery' };
                await events.onMatch(ctx);
                return handleGraphQLPersistedQueryRequest(ctx, service, data, interceptors);
            };
        default:
            events.onNotFound();
            const msg = `no handler found`;
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleGraphQLQueryRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleGraphQLQueryJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleGraphQLQueryProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleGraphQLPersistedQueryRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleGraphQLPersistedQueryJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleGraphQLPersistedQueryProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
async function handleGraphQLQueryJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = QueryRequest.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.Query(ctx, inputReq);
        });
    }
    else {
        response = await service.Query(ctx, request);
    }
    return JSON.stringify(QueryResponse.toJSON(response));
}
async function handleGraphQLPersistedQueryJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = PersistedQueryRequest.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.PersistedQuery(ctx, inputReq);
        });
    }
    else {
        response = await service.PersistedQuery(ctx, request);
    }
    return JSON.stringify(QueryResponse.toJSON(response));
}
async function handleGraphQLQueryProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = QueryRequest.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.Query(ctx, inputReq);
        });
    }
    else {
        response = await service.Query(ctx, request);
    }
    return Buffer.from(QueryResponse.encode(response).finish());
}
async function handleGraphQLPersistedQueryProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = PersistedQueryRequest.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.PersistedQuery(ctx, inputReq);
        });
    }
    else {
        response = await service.PersistedQuery(ctx, request);
    }
    return Buffer.from(QueryResponse.encode(response).finish());
}
