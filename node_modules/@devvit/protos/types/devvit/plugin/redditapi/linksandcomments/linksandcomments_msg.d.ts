/**
 * #linksandcomments_msg.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { Any } from "../../../../google/protobuf/any.js";
import { Comment } from "../../../reddit/comment.js";
/** Request Types */
export interface CommentRequest {
    /**
     * Rich-text body of the comment. Serialized RTJSON string.
     * Note: If `richtext_json` is provided, `text` is ignored.
     * @example '{"document":[{"e":"par","c":[{"e":"text","t":"Hello, world!","f":[[2, 0, 13]]}]}]}'
     */
    richtextJson?: string | undefined;
    /**
     * Markdown body of the comment
     * @example '_Hello, world!_'
     */
    text: string;
    /**
     * Post or Comment thing ID
     * @example "t3_abc123"
     */
    thingId: string;
}
export interface FollowPostRequest {
    /** `true` to follow; `false` to unfollow */
    follow: boolean;
    /**
     * Post thing ID
     * @example "t3_abc123"
     */
    fullname: string;
}
export interface BasicIdRequest {
    /**
     * Thing ID
     * @example "t1_abc123"
     */
    id: string;
}
export interface InfoRequest {
    /**
     * List of zero or more Subreddit names to fetch
     * @example ["AskReddit", "jokes"]
     */
    subreddits: string[];
    /**
     * List of zero or more thing IDs to fetch
     * Note: Must be a Comment (t1), Post (t3), or Subreddit (t5) ID
     * @example ["t1_abc123", "t3_abc123", "t5_abc123"]
     */
    thingIds: string[];
    /**
     * Any Link Posts that refer to this URL
     * Note: Providing `url` overrides `subreddits` and `thing_ids`
     * @example "https://www.reddit.com/"
     */
    url?: string | undefined;
}
export interface MoreChildrenRequest {
    /**
     * List of Comment thing IDs without their "t1_" prefixes
     * @example ["foo123", "bar456", "baz789"]
     */
    children: string[];
    /** Maximum comment depth */
    depth?: number | undefined;
    /** Only return the comments explicitly listed in `children`, otherwise return as many as available */
    limitChildren?: boolean | undefined;
    /**
     * Post thing ID
     * @example "t3_abc123"
     */
    linkId: string;
    /** Optional, one of: "confidence", "top", "new", "controversial", "old", "random", "qa", "live" */
    sort?: string | undefined;
    /** Optional, id of the associated MoreChildren object */
    id?: string | undefined;
}
export interface ReportRequest {
    /** Additional information attached to the report */
    additionalInfo?: string | undefined;
    /** Additional information attached to the report */
    customText?: string | undefined;
    /** Modmail conversation ID to attach to the report for context */
    modmailConvId?: string | undefined;
    /**
     * Free-form reason explaining this report
     * Note: If reporting Subreddit content the subreddit must have
     *       "allow free-form reports by users" enabled
     * @see {@link Subreddits.SubredditAboutRules}
     */
    otherReason?: string | undefined;
    /** One of: "rule", "site_reason_selected", "other" */
    reason: string;
    /** The Subreddit rule this thing is violating */
    ruleReason?: string | undefined;
    /** The Reddit rule this thing is violating */
    siteReason?: string | undefined;
    /**
     * Subreddit name; set if reporting a Post or Comment
     * @example "AskReddit"
     */
    srName?: string | undefined;
    /**
     * The thing ID being reported. Must be a Post (t3), Comment (t1), or Private Message (t4)
     * @example "t3_abc123"
     */
    thingId: string;
    /**
     * List of comma-separated usernames to associate with this report
     * @example "user1,user2,user3"
     */
    usernames?: string | undefined;
}
export interface ReportAwardRequest {
    /**
     * Award ID from a Post or Comment
     * @example "award_813b473a-4d74-4933-ba79-a7f1b8b285ef"
     */
    awardId: string;
    /** Reason for this report */
    reason?: string | undefined;
}
export interface SaveRequest {
    /**
     * Post or Comment thing ID
     * @example "t1_abc123"
     */
    id: string;
}
export interface SendRepliesRequest {
    /**
     * Post or Comment thing ID
     * @example "t1_abc123"
     */
    id: string;
    /** Boolean to enable reply notifications */
    state: boolean;
}
export interface SetContestModeRequest {
    /**
     * Post thing ID
     * @example "t3_abc123"
     */
    id: string;
    /** Boolean to enable Contest Mode */
    state: boolean;
}
export interface SetSubredditStickyRequest {
    /**
     * Post thing ID
     * @example "t3_abc123"
     */
    id: string;
    /**
     * Which sticky "slot" this Post should take
     * If the slot is empty or `num` is not set the bottom-most slot will be used
     * Valid range for subreddits: 1 - 2
     * Valid range for user profiles: 1 - 4
     */
    num?: number | undefined;
    /** Boolean to set the Post as sticky/pinned */
    state: boolean;
    /**
     * If the Post is owned by the current user set to `true` to pin
     * it to their profile instead of the subreddit it was posted in
     */
    toProfile?: boolean | undefined;
}
export interface SetSuggestedSortRequest {
    /**
     * Post thing ID
     * @example "t3_abc123"
     */
    id: string;
    /**
     * One of: "confidence", "top", "new", "controversial", "old", "random", "qa", "live", ""
     * Note: If left blank the suggested sort order is cleared
     */
    sort: string;
}
export interface SubmitRequest {
    /**
     * UUID of the collection to add this Post to
     * @example "813b473a-4d74-4933-ba79-a7f1b8b285ef"
     */
    collectionId?: string | undefined;
    /**
     * Flair template ID to use for this Post
     * @example "813b473a-4d74-4933-ba79-a7f1b8b285ef"
     */
    flairId?: string | undefined;
    /**
     * Custom text to use in the selected flair template if the template
     * has `text_editable` enabled
     */
    flairText?: string | undefined;
    /**
     * What kind of Post is being created
     * One of: "link", "self", "image", "video", "videogif", "crosspost"
     */
    kind: string;
    /** Boolean to set the Not-Safe-For-Work tag */
    nsfw?: boolean | undefined;
    /**
     * Rich-text body of the Post. Serialized RTJSON string.
     * Note: Only used if `kind` is set to "self"
     * Note: `text` and `richtext_json` cannot both be set
     * @example '{"document":[{"e":"par","c":[{"e":"text","t":"Hello, world!","f":[[2, 0, 13]]}]}]}'
     */
    richtextJson?: string | undefined;
    /** Boolean to enable notifications when a comment is added */
    sendreplies?: boolean | undefined;
    /** Boolean to set the Spoiler tag */
    spoiler?: boolean | undefined;
    /**
     * Subreddit name
     * @example "AskReddit"
     */
    sr: string;
    /**
     * Markdown body of the Post
     * Note: Only used if `kind` is set to "self"
     * Note: `text` and `richtext_json` cannot both be set
     * @example "_Hello, world!_"
     */
    text?: string | undefined;
    /** Post title */
    title: string;
    /**
     * The URL this Post refers to if this is a Link Post
     * Note: If `kind` is "video", "videogif", or "image" this must be set to
     *       the media URL created when the media was uploaded
     * Note: If `kind` is "self" this is ignored
     */
    url?: string | undefined;
    /** If `kind` is "video" or "videogif" this must be set to the thumbnail URL */
    videoPosterUrl?: string | undefined;
    /** If `kind` is "crosspost" this must be set to the ID of the post being crossposted */
    crosspostFullname?: string | undefined;
    /** Fallback option of a developer platform experience as rich-text */
    richtextFallback?: string | undefined;
}
export interface VoteRequest {
    /**
     * One of: -1, 0, 1
     * Where:
     *   1 = Upvote
     *   0 = Cleared
     *  -1 = Downvote
     */
    dir: number;
    /**
     * Post or Comment thing ID
     * @example "t1_abc123"
     */
    id: string;
}
export interface EditCustomPostRequest {
    /**
     * Post or Comment thing ID
     * @example "t3_abc123"
     */
    thingId: string;
    /** Fallback option of a developer custom experience as rich-text */
    richtextFallback?: string | undefined;
}
/** Response Types */
export interface JsonWrappedComment {
    json?: JsonWrappedComment_Json | undefined;
}
export interface JsonWrappedComment_WrappedComment {
    kind: string;
    data?: Comment | undefined;
}
export interface JsonWrappedComment_JsonData {
    things: JsonWrappedComment_WrappedComment[];
}
export interface JsonWrappedComment_Json {
    errors: string[];
    data?: JsonWrappedComment_JsonData | undefined;
}
export interface SubmitResponse {
    json?: SubmitResponse_JsonType | undefined;
}
export interface SubmitResponse_JsonType {
    errors: Any[];
    data?: SubmitResponse_JsonType_JsonData | undefined;
}
export interface SubmitResponse_JsonType_JsonData {
    url?: string | undefined;
    draftsCount?: number | undefined;
    id?: string | undefined;
    name?: string | undefined;
}
export declare const CommentRequest: {
    $type: "devvit.plugin.redditapi.linksandcomments.CommentRequest";
    encode(message: CommentRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CommentRequest;
    fromJSON(object: any): CommentRequest;
    toJSON(message: CommentRequest): unknown;
    create(base?: DeepPartial<CommentRequest>): CommentRequest;
    fromPartial(object: DeepPartial<CommentRequest>): CommentRequest;
};
export declare const FollowPostRequest: {
    $type: "devvit.plugin.redditapi.linksandcomments.FollowPostRequest";
    encode(message: FollowPostRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FollowPostRequest;
    fromJSON(object: any): FollowPostRequest;
    toJSON(message: FollowPostRequest): unknown;
    create(base?: DeepPartial<FollowPostRequest>): FollowPostRequest;
    fromPartial(object: DeepPartial<FollowPostRequest>): FollowPostRequest;
};
export declare const BasicIdRequest: {
    $type: "devvit.plugin.redditapi.linksandcomments.BasicIdRequest";
    encode(message: BasicIdRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BasicIdRequest;
    fromJSON(object: any): BasicIdRequest;
    toJSON(message: BasicIdRequest): unknown;
    create(base?: DeepPartial<BasicIdRequest>): BasicIdRequest;
    fromPartial(object: DeepPartial<BasicIdRequest>): BasicIdRequest;
};
export declare const InfoRequest: {
    $type: "devvit.plugin.redditapi.linksandcomments.InfoRequest";
    encode(message: InfoRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): InfoRequest;
    fromJSON(object: any): InfoRequest;
    toJSON(message: InfoRequest): unknown;
    create(base?: DeepPartial<InfoRequest>): InfoRequest;
    fromPartial(object: DeepPartial<InfoRequest>): InfoRequest;
};
export declare const MoreChildrenRequest: {
    $type: "devvit.plugin.redditapi.linksandcomments.MoreChildrenRequest";
    encode(message: MoreChildrenRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MoreChildrenRequest;
    fromJSON(object: any): MoreChildrenRequest;
    toJSON(message: MoreChildrenRequest): unknown;
    create(base?: DeepPartial<MoreChildrenRequest>): MoreChildrenRequest;
    fromPartial(object: DeepPartial<MoreChildrenRequest>): MoreChildrenRequest;
};
export declare const ReportRequest: {
    $type: "devvit.plugin.redditapi.linksandcomments.ReportRequest";
    encode(message: ReportRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ReportRequest;
    fromJSON(object: any): ReportRequest;
    toJSON(message: ReportRequest): unknown;
    create(base?: DeepPartial<ReportRequest>): ReportRequest;
    fromPartial(object: DeepPartial<ReportRequest>): ReportRequest;
};
export declare const ReportAwardRequest: {
    $type: "devvit.plugin.redditapi.linksandcomments.ReportAwardRequest";
    encode(message: ReportAwardRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ReportAwardRequest;
    fromJSON(object: any): ReportAwardRequest;
    toJSON(message: ReportAwardRequest): unknown;
    create(base?: DeepPartial<ReportAwardRequest>): ReportAwardRequest;
    fromPartial(object: DeepPartial<ReportAwardRequest>): ReportAwardRequest;
};
export declare const SaveRequest: {
    $type: "devvit.plugin.redditapi.linksandcomments.SaveRequest";
    encode(message: SaveRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SaveRequest;
    fromJSON(object: any): SaveRequest;
    toJSON(message: SaveRequest): unknown;
    create(base?: DeepPartial<SaveRequest>): SaveRequest;
    fromPartial(object: DeepPartial<SaveRequest>): SaveRequest;
};
export declare const SendRepliesRequest: {
    $type: "devvit.plugin.redditapi.linksandcomments.SendRepliesRequest";
    encode(message: SendRepliesRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SendRepliesRequest;
    fromJSON(object: any): SendRepliesRequest;
    toJSON(message: SendRepliesRequest): unknown;
    create(base?: DeepPartial<SendRepliesRequest>): SendRepliesRequest;
    fromPartial(object: DeepPartial<SendRepliesRequest>): SendRepliesRequest;
};
export declare const SetContestModeRequest: {
    $type: "devvit.plugin.redditapi.linksandcomments.SetContestModeRequest";
    encode(message: SetContestModeRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SetContestModeRequest;
    fromJSON(object: any): SetContestModeRequest;
    toJSON(message: SetContestModeRequest): unknown;
    create(base?: DeepPartial<SetContestModeRequest>): SetContestModeRequest;
    fromPartial(object: DeepPartial<SetContestModeRequest>): SetContestModeRequest;
};
export declare const SetSubredditStickyRequest: {
    $type: "devvit.plugin.redditapi.linksandcomments.SetSubredditStickyRequest";
    encode(message: SetSubredditStickyRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SetSubredditStickyRequest;
    fromJSON(object: any): SetSubredditStickyRequest;
    toJSON(message: SetSubredditStickyRequest): unknown;
    create(base?: DeepPartial<SetSubredditStickyRequest>): SetSubredditStickyRequest;
    fromPartial(object: DeepPartial<SetSubredditStickyRequest>): SetSubredditStickyRequest;
};
export declare const SetSuggestedSortRequest: {
    $type: "devvit.plugin.redditapi.linksandcomments.SetSuggestedSortRequest";
    encode(message: SetSuggestedSortRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SetSuggestedSortRequest;
    fromJSON(object: any): SetSuggestedSortRequest;
    toJSON(message: SetSuggestedSortRequest): unknown;
    create(base?: DeepPartial<SetSuggestedSortRequest>): SetSuggestedSortRequest;
    fromPartial(object: DeepPartial<SetSuggestedSortRequest>): SetSuggestedSortRequest;
};
export declare const SubmitRequest: {
    $type: "devvit.plugin.redditapi.linksandcomments.SubmitRequest";
    encode(message: SubmitRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SubmitRequest;
    fromJSON(object: any): SubmitRequest;
    toJSON(message: SubmitRequest): unknown;
    create(base?: DeepPartial<SubmitRequest>): SubmitRequest;
    fromPartial(object: DeepPartial<SubmitRequest>): SubmitRequest;
};
export declare const VoteRequest: {
    $type: "devvit.plugin.redditapi.linksandcomments.VoteRequest";
    encode(message: VoteRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): VoteRequest;
    fromJSON(object: any): VoteRequest;
    toJSON(message: VoteRequest): unknown;
    create(base?: DeepPartial<VoteRequest>): VoteRequest;
    fromPartial(object: DeepPartial<VoteRequest>): VoteRequest;
};
export declare const EditCustomPostRequest: {
    $type: "devvit.plugin.redditapi.linksandcomments.EditCustomPostRequest";
    encode(message: EditCustomPostRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EditCustomPostRequest;
    fromJSON(object: any): EditCustomPostRequest;
    toJSON(message: EditCustomPostRequest): unknown;
    create(base?: DeepPartial<EditCustomPostRequest>): EditCustomPostRequest;
    fromPartial(object: DeepPartial<EditCustomPostRequest>): EditCustomPostRequest;
};
export declare const JsonWrappedComment: {
    $type: "devvit.plugin.redditapi.linksandcomments.JsonWrappedComment";
    encode(message: JsonWrappedComment, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): JsonWrappedComment;
    fromJSON(object: any): JsonWrappedComment;
    toJSON(message: JsonWrappedComment): unknown;
    create(base?: DeepPartial<JsonWrappedComment>): JsonWrappedComment;
    fromPartial(object: DeepPartial<JsonWrappedComment>): JsonWrappedComment;
};
export declare const JsonWrappedComment_WrappedComment: {
    $type: "devvit.plugin.redditapi.linksandcomments.JsonWrappedComment.WrappedComment";
    encode(message: JsonWrappedComment_WrappedComment, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): JsonWrappedComment_WrappedComment;
    fromJSON(object: any): JsonWrappedComment_WrappedComment;
    toJSON(message: JsonWrappedComment_WrappedComment): unknown;
    create(base?: DeepPartial<JsonWrappedComment_WrappedComment>): JsonWrappedComment_WrappedComment;
    fromPartial(object: DeepPartial<JsonWrappedComment_WrappedComment>): JsonWrappedComment_WrappedComment;
};
export declare const JsonWrappedComment_JsonData: {
    $type: "devvit.plugin.redditapi.linksandcomments.JsonWrappedComment.JsonData";
    encode(message: JsonWrappedComment_JsonData, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): JsonWrappedComment_JsonData;
    fromJSON(object: any): JsonWrappedComment_JsonData;
    toJSON(message: JsonWrappedComment_JsonData): unknown;
    create(base?: DeepPartial<JsonWrappedComment_JsonData>): JsonWrappedComment_JsonData;
    fromPartial(object: DeepPartial<JsonWrappedComment_JsonData>): JsonWrappedComment_JsonData;
};
export declare const JsonWrappedComment_Json: {
    $type: "devvit.plugin.redditapi.linksandcomments.JsonWrappedComment.Json";
    encode(message: JsonWrappedComment_Json, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): JsonWrappedComment_Json;
    fromJSON(object: any): JsonWrappedComment_Json;
    toJSON(message: JsonWrappedComment_Json): unknown;
    create(base?: DeepPartial<JsonWrappedComment_Json>): JsonWrappedComment_Json;
    fromPartial(object: DeepPartial<JsonWrappedComment_Json>): JsonWrappedComment_Json;
};
export declare const SubmitResponse: {
    $type: "devvit.plugin.redditapi.linksandcomments.SubmitResponse";
    encode(message: SubmitResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SubmitResponse;
    fromJSON(object: any): SubmitResponse;
    toJSON(message: SubmitResponse): unknown;
    create(base?: DeepPartial<SubmitResponse>): SubmitResponse;
    fromPartial(object: DeepPartial<SubmitResponse>): SubmitResponse;
};
export declare const SubmitResponse_JsonType: {
    $type: "devvit.plugin.redditapi.linksandcomments.SubmitResponse.JsonType";
    encode(message: SubmitResponse_JsonType, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SubmitResponse_JsonType;
    fromJSON(object: any): SubmitResponse_JsonType;
    toJSON(message: SubmitResponse_JsonType): unknown;
    create(base?: DeepPartial<SubmitResponse_JsonType>): SubmitResponse_JsonType;
    fromPartial(object: DeepPartial<SubmitResponse_JsonType>): SubmitResponse_JsonType;
};
export declare const SubmitResponse_JsonType_JsonData: {
    $type: "devvit.plugin.redditapi.linksandcomments.SubmitResponse.JsonType.JsonData";
    encode(message: SubmitResponse_JsonType_JsonData, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SubmitResponse_JsonType_JsonData;
    fromJSON(object: any): SubmitResponse_JsonType_JsonData;
    toJSON(message: SubmitResponse_JsonType_JsonData): unknown;
    create(base?: DeepPartial<SubmitResponse_JsonType_JsonData>): SubmitResponse_JsonType_JsonData;
    fromPartial(object: DeepPartial<SubmitResponse_JsonType_JsonData>): SubmitResponse_JsonType_JsonData;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=linksandcomments_msg.d.ts.map