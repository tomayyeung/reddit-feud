/**
 * #linksandcomments_svc.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { Metadata } from "../../../../../lib/Types.js";
import { Empty } from "../../../../google/protobuf/empty.js";
import { JsonRedditObjects, JsonStatus, Listing } from "../common/common_msg.js";
import { BasicIdRequest, CommentRequest, EditCustomPostRequest, FollowPostRequest, InfoRequest, JsonWrappedComment, MoreChildrenRequest, ReportAwardRequest, ReportRequest, SaveRequest, SendRepliesRequest, SetContestModeRequest, SetSubredditStickyRequest, SetSuggestedSortRequest, SubmitRequest, SubmitResponse, VoteRequest } from "./linksandcomments_msg.js";
/**
 * LINKS & COMMENTS - https://www.reddit.com/dev/api#section_links_and_comments
 * Note: all endpoints require oauth
 */
export interface LinksAndComments {
    /**
     * Submit a new Comment
     * Note: `thing_id` refers to the Post or Comment this comment is replying to
     *
     * @see {@link https://www.reddit.com/dev/api#POST_api_comment}
     */
    Comment(request: CommentRequest, metadata?: Metadata): Promise<JsonWrappedComment>;
    /**
     * Delete a Post or Comment
     * Note: `id` must be a single thing ID for a Post or Comment
     *
     * @see {@link https://www.reddit.com/dev/api#POST_api_del}
     */
    Del(request: BasicIdRequest, metadata?: Metadata): Promise<Empty>;
    /**
     * Edit the body text of a Comment or Post
     * Note: `thing_id` refers to the Post or Comment being edited
     *
     * @see {@link https://www.reddit.com/dev/api#POST_api_editusertext}
     */
    EditUserText(request: CommentRequest, metadata?: Metadata): Promise<JsonWrappedComment>;
    /**
     * Follow or unfollow a Post
     *
     * @see {@link https://www.reddit.com/dev/api#POST_api_follow_post}
     */
    FollowPost(request: FollowPostRequest, metadata?: Metadata): Promise<Empty>;
    /**
     * Hide one or more Posts for the user
     * Note: `id` must be one or more comma-separated Post thing IDs
     *
     * @see {@link Unhide}
     * @see {@link https://www.reddit.com/dev/api#POST_api_hide}
     */
    Hide(request: BasicIdRequest, metadata?: Metadata): Promise<Empty>;
    /**
     * Get one or more things by ID, Subreddit name, or Link Post URL
     *
     * @see {@link https://www.reddit.com/dev/api#GET_api_info}
     */
    Info(request: InfoRequest, metadata?: Metadata): Promise<Listing>;
    /**
     * Disable comments for a Post or Comment
     * Note: `id` must be a single thing ID for a Post or Comment
     *
     * @see {@link https://www.reddit.com/dev/api#POST_api_lock}
     */
    Lock(request: BasicIdRequest, metadata?: Metadata): Promise<Empty>;
    /**
     * Marks a Post as Not-Safe-For-Work
     *
     * @see {@link UnmarkNSFW}
     * @see {@link https://www.reddit.com/dev/api#POST_api_marknsfw}
     */
    MarkNSFW(request: BasicIdRequest, metadata?: Metadata): Promise<Empty>;
    /**
     * Get more comments from a truncated Comment tree
     *
     * A comment tree has been truncated if it ends with an entry of kind "more"
     * instead of "t1".  Use this API to fetch the additional comments listed in
     * the "children" array of the "more" entry.
     *
     * @see {@link https://www.reddit.com/dev/api#GET_api_morechildren}
     */
    MoreChildren(request: MoreChildrenRequest, metadata?: Metadata): Promise<JsonWrappedComment>;
    /**
     * Report a Post, Comment, or Private Message
     *
     * If reporting a Post or Comment the report is sent to the moderators of the subreddit for review.
     * If reporting a Private Message the report is sent to Reddit for review.
     *
     * @see {@link https://www.reddit.com/dev/api#POST_api_report}
     */
    Report(request: ReportRequest, metadata?: Metadata): Promise<JsonStatus>;
    /**
     * Report an award to Reddit for review
     *
     * @see {@link https://www.reddit.com/dev/api#POST_api_report_award}
     */
    ReportAward(request: ReportAwardRequest, metadata?: Metadata): Promise<Empty>;
    /**
     * Save a Post or Comment to the user's Saved list
     *
     * @see {@link Unsave}
     * @see {@link https://www.reddit.com/dev/api#POST_api_save}
     */
    Save(request: SaveRequest, metadata?: Metadata): Promise<Empty>;
    /**
     * Enable or disable reply notifications for a Post or Comment
     *
     * @see {@link https://www.reddit.com/dev/api#POST_api_sendreplies}
     */
    SendReplies(request: SendRepliesRequest, metadata?: Metadata): Promise<Empty>;
    /**
     * Toggle Contest Mode for a Post's comments
     *
     * Contest Mode randomizes the sort order and hides the vote score for comments
     *
     * @see {@link https://www.reddit.com/dev/api#POST_api_set_contest_mode}
     */
    SetContestMode(request: SetContestModeRequest, metadata?: Metadata): Promise<JsonStatus>;
    /** Edit or set fields unique to developer platform custom posts */
    EditCustomPost(request: EditCustomPostRequest, metadata?: Metadata): Promise<JsonRedditObjects>;
    /**
     * Set the "sticky" or "pinned" status of a Post
     *
     * If the post was created by the current user they can pin the post
     * to the top of their user profile.  Otherwise they must be a moderator
     * of the subreddit to stick it to the top of the subreddit it was posted in.
     *
     * @see {@link https://www.reddit.com/dev/api#POST_api_set_subreddit_sticky}
     */
    SetSubredditSticky(request: SetSubredditStickyRequest, metadata?: Metadata): Promise<JsonStatus>;
    /**
     * Set the default sort order for comments in the given Post
     *
     * @see {@link https://www.reddit.com/dev/api#POST_api_set_suggested_sort}
     */
    SetSuggestedSort(request: SetSuggestedSortRequest, metadata?: Metadata): Promise<JsonStatus>;
    /**
     * Sets the spoiler tag on a given Post to hide its contents by default
     * Note: `id` must be a single thing ID for a Post
     *
     * @see {@link Unspoiler}
     * @see {@link https://www.reddit.com/dev/api#POST_api_spoiler}
     */
    Spoiler(request: BasicIdRequest, metadata?: Metadata): Promise<Empty>;
    /**
     * Create a new Post
     *
     * @see {@link https://www.reddit.com/dev/api#POST_api_submit}
     *
     * Note: not specifying ApiClientConfig to avoid automatic generation.
     * Submit has extra logic that needs to be manually implemented.
     */
    Submit(request: SubmitRequest, metadata?: Metadata): Promise<SubmitResponse>;
    /** Create a new Custom Post */
    SubmitCustomPost(request: SubmitRequest, metadata?: Metadata): Promise<SubmitResponse>;
    /**
     * Unhide one or more Posts for the user
     * Note: `id` must be one or more comma-separated Post thing IDs
     *
     * @see {@link Hide}
     * @see {@link https://www.reddit.com/dev/api#POST_api_unhide}
     */
    Unhide(request: BasicIdRequest, metadata?: Metadata): Promise<Empty>;
    /**
     * Enable comments for a Post or Comment
     * Note: `id` must be a single thing ID for a Post or Comment
     *
     * @see {@link Lock}
     * @see {@link https://www.reddit.com/dev/api#POST_api_unlock}
     */
    Unlock(request: BasicIdRequest, metadata?: Metadata): Promise<Empty>;
    /**
     * Clears the Not-Safe-For-Work status from a Post
     *
     * @see {@link MarkNSFW}
     * @see {@link https://www.reddit.com/dev/api#POST_api_unmarknsfw}
     */
    UnmarkNSFW(request: BasicIdRequest, metadata?: Metadata): Promise<Empty>;
    /**
     * Remove a Post or Comment from the user's Saved list
     *
     * @see {@link Save}
     * @see {@link https://www.reddit.com/dev/api#POST_api_unsave}
     */
    Unsave(request: BasicIdRequest, metadata?: Metadata): Promise<Empty>;
    /**
     * Clears the spoiler tag on a given Post
     *
     * @see {@link Spoiler}
     * @see {@link https://www.reddit.com/dev/api#POST_api_unspoiler}
     */
    Unspoiler(request: BasicIdRequest, metadata?: Metadata): Promise<Empty>;
    /**
     * Vote or clear a vote on a Post or Comment
     *
     * @see {@link https://www.reddit.com/dev/api#POST_api_vote}
     */
    Vote(request: VoteRequest, metadata?: Metadata): Promise<Empty>;
}
export declare const LinksAndCommentsServiceName = "devvit.plugin.redditapi.linksandcomments.LinksAndComments";
export declare class LinksAndCommentsClientImpl implements LinksAndComments {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Comment(request: CommentRequest, metadata?: Metadata): Promise<JsonWrappedComment>;
    Del(request: BasicIdRequest, metadata?: Metadata): Promise<Empty>;
    EditUserText(request: CommentRequest, metadata?: Metadata): Promise<JsonWrappedComment>;
    FollowPost(request: FollowPostRequest, metadata?: Metadata): Promise<Empty>;
    Hide(request: BasicIdRequest, metadata?: Metadata): Promise<Empty>;
    Info(request: InfoRequest, metadata?: Metadata): Promise<Listing>;
    Lock(request: BasicIdRequest, metadata?: Metadata): Promise<Empty>;
    MarkNSFW(request: BasicIdRequest, metadata?: Metadata): Promise<Empty>;
    MoreChildren(request: MoreChildrenRequest, metadata?: Metadata): Promise<JsonWrappedComment>;
    Report(request: ReportRequest, metadata?: Metadata): Promise<JsonStatus>;
    ReportAward(request: ReportAwardRequest, metadata?: Metadata): Promise<Empty>;
    Save(request: SaveRequest, metadata?: Metadata): Promise<Empty>;
    SendReplies(request: SendRepliesRequest, metadata?: Metadata): Promise<Empty>;
    SetContestMode(request: SetContestModeRequest, metadata?: Metadata): Promise<JsonStatus>;
    EditCustomPost(request: EditCustomPostRequest, metadata?: Metadata): Promise<JsonRedditObjects>;
    SetSubredditSticky(request: SetSubredditStickyRequest, metadata?: Metadata): Promise<JsonStatus>;
    SetSuggestedSort(request: SetSuggestedSortRequest, metadata?: Metadata): Promise<JsonStatus>;
    Spoiler(request: BasicIdRequest, metadata?: Metadata): Promise<Empty>;
    Submit(request: SubmitRequest, metadata?: Metadata): Promise<SubmitResponse>;
    SubmitCustomPost(request: SubmitRequest, metadata?: Metadata): Promise<SubmitResponse>;
    Unhide(request: BasicIdRequest, metadata?: Metadata): Promise<Empty>;
    Unlock(request: BasicIdRequest, metadata?: Metadata): Promise<Empty>;
    UnmarkNSFW(request: BasicIdRequest, metadata?: Metadata): Promise<Empty>;
    Unsave(request: BasicIdRequest, metadata?: Metadata): Promise<Empty>;
    Unspoiler(request: BasicIdRequest, metadata?: Metadata): Promise<Empty>;
    Vote(request: VoteRequest, metadata?: Metadata): Promise<Empty>;
}
/**
 * LINKS & COMMENTS - https://www.reddit.com/dev/api#section_links_and_comments
 * Note: all endpoints require oauth
 */
export type LinksAndCommentsDefinition = typeof LinksAndCommentsDefinition;
export declare const LinksAndCommentsDefinition: {
    readonly name: "LinksAndComments";
    readonly fullName: "devvit.plugin.redditapi.linksandcomments.LinksAndComments";
    readonly methods: {
        /**
         * Submit a new Comment
         * Note: `thing_id` refers to the Post or Comment this comment is replying to
         *
         * @see {@link https://www.reddit.com/dev/api#POST_api_comment}
         */
        readonly comment: {
            readonly name: "Comment";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.linksandcomments.CommentRequest";
                encode(message: CommentRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): CommentRequest;
                fromJSON(object: any): CommentRequest;
                toJSON(message: CommentRequest): unknown;
                create(base?: {
                    richtextJson?: string | undefined;
                    text?: string;
                    thingId?: string;
                } | undefined): CommentRequest;
                fromPartial(object: {
                    richtextJson?: string | undefined;
                    text?: string;
                    thingId?: string;
                }): CommentRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.linksandcomments.JsonWrappedComment";
                encode(message: JsonWrappedComment, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): JsonWrappedComment;
                fromJSON(object: any): JsonWrappedComment;
                toJSON(message: JsonWrappedComment): unknown;
                create(base?: {
                    json?: {
                        errors?: string[];
                        data?: {
                            things?: {
                                kind?: string;
                                data?: {
                                    allAwardings?: {
                                        awardSubType?: string | undefined;
                                        awardType?: string | undefined;
                                        awardingsRequiredToGrantBenefits?: number | undefined;
                                        coinPrice?: number | undefined;
                                        coinReward?: number | undefined;
                                        count?: number | undefined;
                                        daysOfDripExtension?: number | undefined;
                                        daysOfPremium?: number | undefined;
                                        description?: string | undefined;
                                        endDate?: string | undefined;
                                        giverCoinReward?: number | undefined;
                                        iconFormat?: string | undefined;
                                        iconHeight?: number | undefined;
                                        iconUrl?: string | undefined;
                                        iconWidth?: number | undefined;
                                        id?: string | undefined;
                                        isEnabled?: boolean | undefined;
                                        isNew?: boolean | undefined;
                                        name?: string | undefined;
                                        pennyDonate?: number | undefined;
                                        pennyPrice?: number | undefined;
                                        resizedIcons?: {
                                            height?: number | undefined;
                                            url?: string | undefined;
                                            width?: number | undefined;
                                        }[];
                                        resizedStaticIcons?: {
                                            height?: number | undefined;
                                            url?: string | undefined;
                                            width?: number | undefined;
                                        }[];
                                        startDate?: string | undefined;
                                        staticIconHeight?: number | undefined;
                                        staticIconUrl?: string | undefined;
                                        staticIconWidth?: number | undefined;
                                        stickyDurationSeconds?: number | undefined;
                                        subredditCoinReward?: number | undefined;
                                        subredditId?: string | undefined;
                                        tiersByRequiredAwardings?: string | undefined;
                                    }[];
                                    approved?: boolean | undefined;
                                    approvedAtUtc?: number | undefined;
                                    approvedBy?: string | undefined;
                                    archived?: boolean | undefined;
                                    associatedAward?: string | undefined;
                                    author?: string | undefined;
                                    authorFlairBackgroundColor?: string | undefined;
                                    authorFlairCssClass?: string | undefined;
                                    authorFlairRichtext?: {
                                        e?: string | undefined;
                                        t?: string | undefined;
                                    }[];
                                    authorFlairTemplateId?: string | undefined;
                                    authorFlairText?: string | undefined;
                                    authorFlairTextColor?: string | undefined;
                                    authorFlairType?: string | undefined;
                                    authorFullname?: string | undefined;
                                    authorIsBlocked?: boolean | undefined;
                                    authorPatreonFlair?: boolean | undefined;
                                    authorPremium?: boolean | undefined;
                                    awarders?: string[];
                                    bannedAtUtc?: number | undefined;
                                    bannedBy?: string | undefined;
                                    body?: string | undefined;
                                    bodyHtml?: string | undefined;
                                    canGild?: boolean | undefined;
                                    canModPost?: boolean | undefined;
                                    collapsed?: boolean | undefined;
                                    collapsedBecauseCrowdControl?: boolean | undefined;
                                    collapsedReason?: string | undefined;
                                    collapsedReasonCode?: string | undefined;
                                    commentType?: string | undefined;
                                    controversiality?: number | undefined;
                                    created?: number | undefined;
                                    createdUtc?: number | undefined;
                                    depth?: number | undefined;
                                    distinguished?: string | undefined;
                                    downs?: number | undefined;
                                    edited?: boolean | undefined;
                                    gilded?: number | undefined;
                                    gildings?: {
                                        gid1?: number | undefined;
                                        gid2?: number | undefined;
                                        gid3?: number | undefined;
                                    } | undefined;
                                    id?: string | undefined;
                                    ignoreReports?: boolean | undefined;
                                    isSubmitter?: boolean | undefined;
                                    likes?: boolean | undefined;
                                    linkId?: string | undefined;
                                    locked?: boolean | undefined;
                                    modNote?: string | undefined;
                                    modReasonBy?: string | undefined;
                                    modReasonTitle?: string | undefined;
                                    modReports?: any[][];
                                    name?: string | undefined;
                                    noFollow?: boolean | undefined;
                                    numReports?: number | undefined;
                                    parentId?: string | undefined;
                                    permalink?: string | undefined;
                                    removalReason?: string | undefined;
                                    removed?: boolean | undefined;
                                    replies?: string | undefined;
                                    reportReasons?: string[];
                                    rteMode?: string | undefined;
                                    saved?: boolean | undefined;
                                    score?: number | undefined;
                                    scoreHidden?: boolean | undefined;
                                    sendReplies?: boolean | undefined;
                                    spam?: boolean | undefined;
                                    stickied?: boolean | undefined;
                                    subreddit?: string | undefined;
                                    subredditId?: string | undefined;
                                    subredditNamePrefixed?: string | undefined;
                                    subredditType?: string | undefined;
                                    topAwardedType?: string | undefined;
                                    totalAwardsReceived?: number | undefined;
                                    treatmentTags?: string[];
                                    unrepliableReason?: string | undefined;
                                    ups?: number | undefined;
                                    userReports?: any[][];
                                    count?: number | undefined;
                                    children?: string[];
                                    banInfo?: {
                                        auto?: boolean | undefined;
                                        bannedAt?: number | undefined;
                                        banner?: string | undefined;
                                        moderatorBanned?: boolean | undefined;
                                        note?: string | undefined;
                                        unbanner?: string | undefined;
                                        unbannedAt?: number | undefined;
                                        resetUsed?: boolean | undefined;
                                        reasonId?: string | undefined;
                                        reasonTitle?: string | undefined;
                                        reasonMessage?: string | undefined;
                                        reasonBy?: string | undefined;
                                        modNote?: string | undefined;
                                        banAllTriggered?: boolean | undefined;
                                        subredditMessage?: string | undefined;
                                        removeAction?: import("../../../reddit/common.js").BanInfo_BanInfoAction;
                                    } | undefined;
                                    markedSpam?: boolean | undefined;
                                    verdict?: string | undefined;
                                } | undefined;
                            }[];
                        } | undefined;
                    } | undefined;
                } | undefined): JsonWrappedComment;
                fromPartial(object: {
                    json?: {
                        errors?: string[];
                        data?: {
                            things?: {
                                kind?: string;
                                data?: {
                                    allAwardings?: {
                                        awardSubType?: string | undefined;
                                        awardType?: string | undefined;
                                        awardingsRequiredToGrantBenefits?: number | undefined;
                                        coinPrice?: number | undefined;
                                        coinReward?: number | undefined;
                                        count?: number | undefined;
                                        daysOfDripExtension?: number | undefined;
                                        daysOfPremium?: number | undefined;
                                        description?: string | undefined;
                                        endDate?: string | undefined;
                                        giverCoinReward?: number | undefined;
                                        iconFormat?: string | undefined;
                                        iconHeight?: number | undefined;
                                        iconUrl?: string | undefined;
                                        iconWidth?: number | undefined;
                                        id?: string | undefined;
                                        isEnabled?: boolean | undefined;
                                        isNew?: boolean | undefined;
                                        name?: string | undefined;
                                        pennyDonate?: number | undefined;
                                        pennyPrice?: number | undefined;
                                        resizedIcons?: {
                                            height?: number | undefined;
                                            url?: string | undefined;
                                            width?: number | undefined;
                                        }[];
                                        resizedStaticIcons?: {
                                            height?: number | undefined;
                                            url?: string | undefined;
                                            width?: number | undefined;
                                        }[];
                                        startDate?: string | undefined;
                                        staticIconHeight?: number | undefined;
                                        staticIconUrl?: string | undefined;
                                        staticIconWidth?: number | undefined;
                                        stickyDurationSeconds?: number | undefined;
                                        subredditCoinReward?: number | undefined;
                                        subredditId?: string | undefined;
                                        tiersByRequiredAwardings?: string | undefined;
                                    }[];
                                    approved?: boolean | undefined;
                                    approvedAtUtc?: number | undefined;
                                    approvedBy?: string | undefined;
                                    archived?: boolean | undefined;
                                    associatedAward?: string | undefined;
                                    author?: string | undefined;
                                    authorFlairBackgroundColor?: string | undefined;
                                    authorFlairCssClass?: string | undefined;
                                    authorFlairRichtext?: {
                                        e?: string | undefined;
                                        t?: string | undefined;
                                    }[];
                                    authorFlairTemplateId?: string | undefined;
                                    authorFlairText?: string | undefined;
                                    authorFlairTextColor?: string | undefined;
                                    authorFlairType?: string | undefined;
                                    authorFullname?: string | undefined;
                                    authorIsBlocked?: boolean | undefined;
                                    authorPatreonFlair?: boolean | undefined;
                                    authorPremium?: boolean | undefined;
                                    awarders?: string[];
                                    bannedAtUtc?: number | undefined;
                                    bannedBy?: string | undefined;
                                    body?: string | undefined;
                                    bodyHtml?: string | undefined;
                                    canGild?: boolean | undefined;
                                    canModPost?: boolean | undefined;
                                    collapsed?: boolean | undefined;
                                    collapsedBecauseCrowdControl?: boolean | undefined;
                                    collapsedReason?: string | undefined;
                                    collapsedReasonCode?: string | undefined;
                                    commentType?: string | undefined;
                                    controversiality?: number | undefined;
                                    created?: number | undefined;
                                    createdUtc?: number | undefined;
                                    depth?: number | undefined;
                                    distinguished?: string | undefined;
                                    downs?: number | undefined;
                                    edited?: boolean | undefined;
                                    gilded?: number | undefined;
                                    gildings?: {
                                        gid1?: number | undefined;
                                        gid2?: number | undefined;
                                        gid3?: number | undefined;
                                    } | undefined;
                                    id?: string | undefined;
                                    ignoreReports?: boolean | undefined;
                                    isSubmitter?: boolean | undefined;
                                    likes?: boolean | undefined;
                                    linkId?: string | undefined;
                                    locked?: boolean | undefined;
                                    modNote?: string | undefined;
                                    modReasonBy?: string | undefined;
                                    modReasonTitle?: string | undefined;
                                    modReports?: any[][];
                                    name?: string | undefined;
                                    noFollow?: boolean | undefined;
                                    numReports?: number | undefined;
                                    parentId?: string | undefined;
                                    permalink?: string | undefined;
                                    removalReason?: string | undefined;
                                    removed?: boolean | undefined;
                                    replies?: string | undefined;
                                    reportReasons?: string[];
                                    rteMode?: string | undefined;
                                    saved?: boolean | undefined;
                                    score?: number | undefined;
                                    scoreHidden?: boolean | undefined;
                                    sendReplies?: boolean | undefined;
                                    spam?: boolean | undefined;
                                    stickied?: boolean | undefined;
                                    subreddit?: string | undefined;
                                    subredditId?: string | undefined;
                                    subredditNamePrefixed?: string | undefined;
                                    subredditType?: string | undefined;
                                    topAwardedType?: string | undefined;
                                    totalAwardsReceived?: number | undefined;
                                    treatmentTags?: string[];
                                    unrepliableReason?: string | undefined;
                                    ups?: number | undefined;
                                    userReports?: any[][];
                                    count?: number | undefined;
                                    children?: string[];
                                    banInfo?: {
                                        auto?: boolean | undefined;
                                        bannedAt?: number | undefined;
                                        banner?: string | undefined;
                                        moderatorBanned?: boolean | undefined;
                                        note?: string | undefined;
                                        unbanner?: string | undefined;
                                        unbannedAt?: number | undefined;
                                        resetUsed?: boolean | undefined;
                                        reasonId?: string | undefined;
                                        reasonTitle?: string | undefined;
                                        reasonMessage?: string | undefined;
                                        reasonBy?: string | undefined;
                                        modNote?: string | undefined;
                                        banAllTriggered?: boolean | undefined;
                                        subredditMessage?: string | undefined;
                                        removeAction?: import("../../../reddit/common.js").BanInfo_BanInfoAction;
                                    } | undefined;
                                    markedSpam?: boolean | undefined;
                                    verdict?: string | undefined;
                                } | undefined;
                            }[];
                        } | undefined;
                    } | undefined;
                }): JsonWrappedComment;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array];
                };
            };
        };
        /**
         * Delete a Post or Comment
         * Note: `id` must be a single thing ID for a Post or Comment
         *
         * @see {@link https://www.reddit.com/dev/api#POST_api_del}
         */
        readonly del: {
            readonly name: "Del";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.linksandcomments.BasicIdRequest";
                encode(message: BasicIdRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): BasicIdRequest;
                fromJSON(object: any): BasicIdRequest;
                toJSON(message: BasicIdRequest): unknown;
                create(base?: {
                    id?: string;
                } | undefined): BasicIdRequest;
                fromPartial(object: {
                    id?: string;
                }): BasicIdRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {} | undefined): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array, Uint8Array, Uint8Array];
                };
            };
        };
        /**
         * Edit the body text of a Comment or Post
         * Note: `thing_id` refers to the Post or Comment being edited
         *
         * @see {@link https://www.reddit.com/dev/api#POST_api_editusertext}
         */
        readonly editUserText: {
            readonly name: "EditUserText";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.linksandcomments.CommentRequest";
                encode(message: CommentRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): CommentRequest;
                fromJSON(object: any): CommentRequest;
                toJSON(message: CommentRequest): unknown;
                create(base?: {
                    richtextJson?: string | undefined;
                    text?: string;
                    thingId?: string;
                } | undefined): CommentRequest;
                fromPartial(object: {
                    richtextJson?: string | undefined;
                    text?: string;
                    thingId?: string;
                }): CommentRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.linksandcomments.JsonWrappedComment";
                encode(message: JsonWrappedComment, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): JsonWrappedComment;
                fromJSON(object: any): JsonWrappedComment;
                toJSON(message: JsonWrappedComment): unknown;
                create(base?: {
                    json?: {
                        errors?: string[];
                        data?: {
                            things?: {
                                kind?: string;
                                data?: {
                                    allAwardings?: {
                                        awardSubType?: string | undefined;
                                        awardType?: string | undefined;
                                        awardingsRequiredToGrantBenefits?: number | undefined;
                                        coinPrice?: number | undefined;
                                        coinReward?: number | undefined;
                                        count?: number | undefined;
                                        daysOfDripExtension?: number | undefined;
                                        daysOfPremium?: number | undefined;
                                        description?: string | undefined;
                                        endDate?: string | undefined;
                                        giverCoinReward?: number | undefined;
                                        iconFormat?: string | undefined;
                                        iconHeight?: number | undefined;
                                        iconUrl?: string | undefined;
                                        iconWidth?: number | undefined;
                                        id?: string | undefined;
                                        isEnabled?: boolean | undefined;
                                        isNew?: boolean | undefined;
                                        name?: string | undefined;
                                        pennyDonate?: number | undefined;
                                        pennyPrice?: number | undefined;
                                        resizedIcons?: {
                                            height?: number | undefined;
                                            url?: string | undefined;
                                            width?: number | undefined;
                                        }[];
                                        resizedStaticIcons?: {
                                            height?: number | undefined;
                                            url?: string | undefined;
                                            width?: number | undefined;
                                        }[];
                                        startDate?: string | undefined;
                                        staticIconHeight?: number | undefined;
                                        staticIconUrl?: string | undefined;
                                        staticIconWidth?: number | undefined;
                                        stickyDurationSeconds?: number | undefined;
                                        subredditCoinReward?: number | undefined;
                                        subredditId?: string | undefined;
                                        tiersByRequiredAwardings?: string | undefined;
                                    }[];
                                    approved?: boolean | undefined;
                                    approvedAtUtc?: number | undefined;
                                    approvedBy?: string | undefined;
                                    archived?: boolean | undefined;
                                    associatedAward?: string | undefined;
                                    author?: string | undefined;
                                    authorFlairBackgroundColor?: string | undefined;
                                    authorFlairCssClass?: string | undefined;
                                    authorFlairRichtext?: {
                                        e?: string | undefined;
                                        t?: string | undefined;
                                    }[];
                                    authorFlairTemplateId?: string | undefined;
                                    authorFlairText?: string | undefined;
                                    authorFlairTextColor?: string | undefined;
                                    authorFlairType?: string | undefined;
                                    authorFullname?: string | undefined;
                                    authorIsBlocked?: boolean | undefined;
                                    authorPatreonFlair?: boolean | undefined;
                                    authorPremium?: boolean | undefined;
                                    awarders?: string[];
                                    bannedAtUtc?: number | undefined;
                                    bannedBy?: string | undefined;
                                    body?: string | undefined;
                                    bodyHtml?: string | undefined;
                                    canGild?: boolean | undefined;
                                    canModPost?: boolean | undefined;
                                    collapsed?: boolean | undefined;
                                    collapsedBecauseCrowdControl?: boolean | undefined;
                                    collapsedReason?: string | undefined;
                                    collapsedReasonCode?: string | undefined;
                                    commentType?: string | undefined;
                                    controversiality?: number | undefined;
                                    created?: number | undefined;
                                    createdUtc?: number | undefined;
                                    depth?: number | undefined;
                                    distinguished?: string | undefined;
                                    downs?: number | undefined;
                                    edited?: boolean | undefined;
                                    gilded?: number | undefined;
                                    gildings?: {
                                        gid1?: number | undefined;
                                        gid2?: number | undefined;
                                        gid3?: number | undefined;
                                    } | undefined;
                                    id?: string | undefined;
                                    ignoreReports?: boolean | undefined;
                                    isSubmitter?: boolean | undefined;
                                    likes?: boolean | undefined;
                                    linkId?: string | undefined;
                                    locked?: boolean | undefined;
                                    modNote?: string | undefined;
                                    modReasonBy?: string | undefined;
                                    modReasonTitle?: string | undefined;
                                    modReports?: any[][];
                                    name?: string | undefined;
                                    noFollow?: boolean | undefined;
                                    numReports?: number | undefined;
                                    parentId?: string | undefined;
                                    permalink?: string | undefined;
                                    removalReason?: string | undefined;
                                    removed?: boolean | undefined;
                                    replies?: string | undefined;
                                    reportReasons?: string[];
                                    rteMode?: string | undefined;
                                    saved?: boolean | undefined;
                                    score?: number | undefined;
                                    scoreHidden?: boolean | undefined;
                                    sendReplies?: boolean | undefined;
                                    spam?: boolean | undefined;
                                    stickied?: boolean | undefined;
                                    subreddit?: string | undefined;
                                    subredditId?: string | undefined;
                                    subredditNamePrefixed?: string | undefined;
                                    subredditType?: string | undefined;
                                    topAwardedType?: string | undefined;
                                    totalAwardsReceived?: number | undefined;
                                    treatmentTags?: string[];
                                    unrepliableReason?: string | undefined;
                                    ups?: number | undefined;
                                    userReports?: any[][];
                                    count?: number | undefined;
                                    children?: string[];
                                    banInfo?: {
                                        auto?: boolean | undefined;
                                        bannedAt?: number | undefined;
                                        banner?: string | undefined;
                                        moderatorBanned?: boolean | undefined;
                                        note?: string | undefined;
                                        unbanner?: string | undefined;
                                        unbannedAt?: number | undefined;
                                        resetUsed?: boolean | undefined;
                                        reasonId?: string | undefined;
                                        reasonTitle?: string | undefined;
                                        reasonMessage?: string | undefined;
                                        reasonBy?: string | undefined;
                                        modNote?: string | undefined;
                                        banAllTriggered?: boolean | undefined;
                                        subredditMessage?: string | undefined;
                                        removeAction?: import("../../../reddit/common.js").BanInfo_BanInfoAction;
                                    } | undefined;
                                    markedSpam?: boolean | undefined;
                                    verdict?: string | undefined;
                                } | undefined;
                            }[];
                        } | undefined;
                    } | undefined;
                } | undefined): JsonWrappedComment;
                fromPartial(object: {
                    json?: {
                        errors?: string[];
                        data?: {
                            things?: {
                                kind?: string;
                                data?: {
                                    allAwardings?: {
                                        awardSubType?: string | undefined;
                                        awardType?: string | undefined;
                                        awardingsRequiredToGrantBenefits?: number | undefined;
                                        coinPrice?: number | undefined;
                                        coinReward?: number | undefined;
                                        count?: number | undefined;
                                        daysOfDripExtension?: number | undefined;
                                        daysOfPremium?: number | undefined;
                                        description?: string | undefined;
                                        endDate?: string | undefined;
                                        giverCoinReward?: number | undefined;
                                        iconFormat?: string | undefined;
                                        iconHeight?: number | undefined;
                                        iconUrl?: string | undefined;
                                        iconWidth?: number | undefined;
                                        id?: string | undefined;
                                        isEnabled?: boolean | undefined;
                                        isNew?: boolean | undefined;
                                        name?: string | undefined;
                                        pennyDonate?: number | undefined;
                                        pennyPrice?: number | undefined;
                                        resizedIcons?: {
                                            height?: number | undefined;
                                            url?: string | undefined;
                                            width?: number | undefined;
                                        }[];
                                        resizedStaticIcons?: {
                                            height?: number | undefined;
                                            url?: string | undefined;
                                            width?: number | undefined;
                                        }[];
                                        startDate?: string | undefined;
                                        staticIconHeight?: number | undefined;
                                        staticIconUrl?: string | undefined;
                                        staticIconWidth?: number | undefined;
                                        stickyDurationSeconds?: number | undefined;
                                        subredditCoinReward?: number | undefined;
                                        subredditId?: string | undefined;
                                        tiersByRequiredAwardings?: string | undefined;
                                    }[];
                                    approved?: boolean | undefined;
                                    approvedAtUtc?: number | undefined;
                                    approvedBy?: string | undefined;
                                    archived?: boolean | undefined;
                                    associatedAward?: string | undefined;
                                    author?: string | undefined;
                                    authorFlairBackgroundColor?: string | undefined;
                                    authorFlairCssClass?: string | undefined;
                                    authorFlairRichtext?: {
                                        e?: string | undefined;
                                        t?: string | undefined;
                                    }[];
                                    authorFlairTemplateId?: string | undefined;
                                    authorFlairText?: string | undefined;
                                    authorFlairTextColor?: string | undefined;
                                    authorFlairType?: string | undefined;
                                    authorFullname?: string | undefined;
                                    authorIsBlocked?: boolean | undefined;
                                    authorPatreonFlair?: boolean | undefined;
                                    authorPremium?: boolean | undefined;
                                    awarders?: string[];
                                    bannedAtUtc?: number | undefined;
                                    bannedBy?: string | undefined;
                                    body?: string | undefined;
                                    bodyHtml?: string | undefined;
                                    canGild?: boolean | undefined;
                                    canModPost?: boolean | undefined;
                                    collapsed?: boolean | undefined;
                                    collapsedBecauseCrowdControl?: boolean | undefined;
                                    collapsedReason?: string | undefined;
                                    collapsedReasonCode?: string | undefined;
                                    commentType?: string | undefined;
                                    controversiality?: number | undefined;
                                    created?: number | undefined;
                                    createdUtc?: number | undefined;
                                    depth?: number | undefined;
                                    distinguished?: string | undefined;
                                    downs?: number | undefined;
                                    edited?: boolean | undefined;
                                    gilded?: number | undefined;
                                    gildings?: {
                                        gid1?: number | undefined;
                                        gid2?: number | undefined;
                                        gid3?: number | undefined;
                                    } | undefined;
                                    id?: string | undefined;
                                    ignoreReports?: boolean | undefined;
                                    isSubmitter?: boolean | undefined;
                                    likes?: boolean | undefined;
                                    linkId?: string | undefined;
                                    locked?: boolean | undefined;
                                    modNote?: string | undefined;
                                    modReasonBy?: string | undefined;
                                    modReasonTitle?: string | undefined;
                                    modReports?: any[][];
                                    name?: string | undefined;
                                    noFollow?: boolean | undefined;
                                    numReports?: number | undefined;
                                    parentId?: string | undefined;
                                    permalink?: string | undefined;
                                    removalReason?: string | undefined;
                                    removed?: boolean | undefined;
                                    replies?: string | undefined;
                                    reportReasons?: string[];
                                    rteMode?: string | undefined;
                                    saved?: boolean | undefined;
                                    score?: number | undefined;
                                    scoreHidden?: boolean | undefined;
                                    sendReplies?: boolean | undefined;
                                    spam?: boolean | undefined;
                                    stickied?: boolean | undefined;
                                    subreddit?: string | undefined;
                                    subredditId?: string | undefined;
                                    subredditNamePrefixed?: string | undefined;
                                    subredditType?: string | undefined;
                                    topAwardedType?: string | undefined;
                                    totalAwardsReceived?: number | undefined;
                                    treatmentTags?: string[];
                                    unrepliableReason?: string | undefined;
                                    ups?: number | undefined;
                                    userReports?: any[][];
                                    count?: number | undefined;
                                    children?: string[];
                                    banInfo?: {
                                        auto?: boolean | undefined;
                                        bannedAt?: number | undefined;
                                        banner?: string | undefined;
                                        moderatorBanned?: boolean | undefined;
                                        note?: string | undefined;
                                        unbanner?: string | undefined;
                                        unbannedAt?: number | undefined;
                                        resetUsed?: boolean | undefined;
                                        reasonId?: string | undefined;
                                        reasonTitle?: string | undefined;
                                        reasonMessage?: string | undefined;
                                        reasonBy?: string | undefined;
                                        modNote?: string | undefined;
                                        banAllTriggered?: boolean | undefined;
                                        subredditMessage?: string | undefined;
                                        removeAction?: import("../../../reddit/common.js").BanInfo_BanInfoAction;
                                    } | undefined;
                                    markedSpam?: boolean | undefined;
                                    verdict?: string | undefined;
                                } | undefined;
                            }[];
                        } | undefined;
                    } | undefined;
                }): JsonWrappedComment;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array];
                };
            };
        };
        /**
         * Follow or unfollow a Post
         *
         * @see {@link https://www.reddit.com/dev/api#POST_api_follow_post}
         */
        readonly followPost: {
            readonly name: "FollowPost";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.linksandcomments.FollowPostRequest";
                encode(message: FollowPostRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): FollowPostRequest;
                fromJSON(object: any): FollowPostRequest;
                toJSON(message: FollowPostRequest): unknown;
                create(base?: {
                    follow?: boolean;
                    fullname?: string;
                } | undefined): FollowPostRequest;
                fromPartial(object: {
                    follow?: boolean;
                    fullname?: string;
                }): FollowPostRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {} | undefined): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array, Uint8Array, Uint8Array];
                };
            };
        };
        /**
         * Hide one or more Posts for the user
         * Note: `id` must be one or more comma-separated Post thing IDs
         *
         * @see {@link Unhide}
         * @see {@link https://www.reddit.com/dev/api#POST_api_hide}
         */
        readonly hide: {
            readonly name: "Hide";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.linksandcomments.BasicIdRequest";
                encode(message: BasicIdRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): BasicIdRequest;
                fromJSON(object: any): BasicIdRequest;
                toJSON(message: BasicIdRequest): unknown;
                create(base?: {
                    id?: string;
                } | undefined): BasicIdRequest;
                fromPartial(object: {
                    id?: string;
                }): BasicIdRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {} | undefined): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array, Uint8Array, Uint8Array];
                };
            };
        };
        /**
         * Get one or more things by ID, Subreddit name, or Link Post URL
         *
         * @see {@link https://www.reddit.com/dev/api#GET_api_info}
         */
        readonly info: {
            readonly name: "Info";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.linksandcomments.InfoRequest";
                encode(message: InfoRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): InfoRequest;
                fromJSON(object: any): InfoRequest;
                toJSON(message: InfoRequest): unknown;
                create(base?: {
                    subreddits?: string[];
                    thingIds?: string[];
                    url?: string | undefined;
                } | undefined): InfoRequest;
                fromPartial(object: {
                    subreddits?: string[];
                    thingIds?: string[];
                    url?: string | undefined;
                }): InfoRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.common.Listing";
                encode(message: Listing, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Listing;
                fromJSON(object: any): Listing;
                toJSON(message: Listing): unknown;
                create(base?: {
                    kind?: string;
                    data?: {
                        after?: string | undefined;
                        before?: string | undefined;
                        children?: {
                            kind?: string;
                            data?: {
                                allAwardings?: {
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                }[];
                                approved?: boolean | undefined;
                                approvedAtUtc?: number | undefined;
                                approvedBy?: string | undefined;
                                archived?: boolean | undefined;
                                associatedAward?: string | undefined;
                                author?: string | undefined;
                                authorFlairBackgroundColor?: string | undefined;
                                authorFlairCssClass?: string | undefined;
                                authorFlairRichtext?: {
                                    e?: string | undefined;
                                    t?: string | undefined;
                                    a?: string | undefined;
                                    u?: string | undefined;
                                }[];
                                authorFlairTemplateId?: string | undefined;
                                authorFlairText?: string | undefined;
                                authorFlairTextColor?: string | undefined;
                                authorFlairType?: string | undefined;
                                authorFullname?: string | undefined;
                                authorIsBlocked?: boolean | undefined;
                                authorPatreonFlair?: boolean | undefined;
                                authorPremium?: boolean | undefined;
                                awarders?: string[];
                                bannedAtUtc?: number | undefined;
                                bannedBy?: string | undefined;
                                body?: string | undefined;
                                bodyHtml?: string | undefined;
                                canGild?: boolean | undefined;
                                canModPost?: boolean | undefined;
                                collapsed?: boolean | undefined;
                                collapsedBecauseCrowdControl?: boolean | undefined;
                                collapsedReason?: string | undefined;
                                collapsedReasonCode?: string | undefined;
                                commentType?: string | undefined;
                                controversiality?: number | undefined;
                                created?: number | undefined;
                                createdUtc?: number | undefined;
                                distinguished?: string | undefined;
                                downs?: number | undefined;
                                edited?: boolean | undefined;
                                gilded?: number | undefined;
                                gildings?: {
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                } | undefined;
                                id?: string | undefined;
                                ignoreReports?: boolean | undefined;
                                isSubmitter?: boolean | undefined;
                                likes?: boolean | undefined;
                                linkId?: string | undefined;
                                locked?: boolean | undefined;
                                modNote?: string | undefined;
                                modReasonBy?: string | undefined;
                                modReasonTitle?: string | undefined;
                                name?: string | undefined;
                                noFollow?: boolean | undefined;
                                numReports?: number | undefined;
                                parentId?: string | undefined;
                                permalink?: string | undefined;
                                removalReason?: string | undefined;
                                removed?: boolean | undefined;
                                replies?: string | undefined;
                                reportReasons?: any[] | undefined;
                                rteMode?: string | undefined;
                                saved?: boolean | undefined;
                                score?: number | undefined;
                                scoreHidden?: boolean | undefined;
                                sendReplies?: boolean | undefined;
                                spam?: boolean | undefined;
                                stickied?: boolean | undefined;
                                subreddit?: string | undefined;
                                subredditId?: string | undefined;
                                subredditNamePrefixed?: string | undefined;
                                subredditType?: string | undefined;
                                topAwardedType?: string | undefined;
                                totalAwardsReceived?: number | undefined;
                                treatmentTags?: {
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                }[];
                                unrepliableReason?: string | undefined;
                                ups?: number | undefined;
                                depth?: number | undefined;
                                linkTitle?: string | undefined;
                                linkAuthor?: string | undefined;
                                numComments?: number | undefined;
                                over18?: boolean | undefined;
                                linkPermalink?: string | undefined;
                                quarantine?: boolean | undefined;
                                linkUrl?: string | undefined;
                                selftext?: string | undefined;
                                selftextHtml?: string | undefined;
                                thumbnail?: string | undefined;
                                thumbnailWidth?: number | undefined;
                                thumbnailHeight?: number | undefined;
                                title?: string | undefined;
                                url?: string | undefined;
                                displayName?: string | undefined;
                                modPermissions?: string[];
                                count?: number | undefined;
                                children?: any[] | undefined;
                                replyList?: any | undefined;
                                hidden?: boolean | undefined;
                                linkFlairBackgroundColor?: string | undefined;
                                linkFlairCssClass?: string | undefined;
                                linkFlairRichtext?: {
                                    e?: string | undefined;
                                    t?: string | undefined;
                                    a?: string | undefined;
                                    u?: string | undefined;
                                }[];
                                linkFlairTemplateId?: string | undefined;
                                linkFlairText?: string | undefined;
                                linkFlairTextColor?: string | undefined;
                                linkFlairType?: string | undefined;
                                secureMedia?: {
                                    type?: string;
                                    oembed?: {
                                        type?: string;
                                        title?: string | undefined;
                                        providerName?: string | undefined;
                                        providerUrl?: string | undefined;
                                        version?: string;
                                        thumbnailWidth?: number | undefined;
                                        thumbnailHeight?: number | undefined;
                                        thumbnailUrl?: string | undefined;
                                        html?: string;
                                        height?: number | undefined;
                                        width?: number | undefined;
                                        authorUrl?: string | undefined;
                                        authorName?: string | undefined;
                                    } | undefined;
                                    redditVideo?: {
                                        bitrateKbps?: number | undefined;
                                        dashUrl?: string | undefined;
                                        duration?: number | undefined;
                                        fallbackUrl?: string | undefined;
                                        height?: number | undefined;
                                        hlsUrl?: string | undefined;
                                        isGif?: boolean | undefined;
                                        scrubberMediaUrl?: string | undefined;
                                        transcodingStatus?: string | undefined;
                                        width?: number | undefined;
                                    } | undefined;
                                } | undefined;
                                spoiler?: boolean;
                                modReports?: any[][];
                                userReports?: any[][];
                                removedBy?: string | undefined;
                                removedByCategory?: string | undefined;
                            } | undefined;
                        }[];
                        dist?: number | undefined;
                    } | undefined;
                } | undefined): Listing;
                fromPartial(object: {
                    kind?: string;
                    data?: {
                        after?: string | undefined;
                        before?: string | undefined;
                        children?: {
                            kind?: string;
                            data?: {
                                allAwardings?: {
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                }[];
                                approved?: boolean | undefined;
                                approvedAtUtc?: number | undefined;
                                approvedBy?: string | undefined;
                                archived?: boolean | undefined;
                                associatedAward?: string | undefined;
                                author?: string | undefined;
                                authorFlairBackgroundColor?: string | undefined;
                                authorFlairCssClass?: string | undefined;
                                authorFlairRichtext?: {
                                    e?: string | undefined;
                                    t?: string | undefined;
                                    a?: string | undefined;
                                    u?: string | undefined;
                                }[];
                                authorFlairTemplateId?: string | undefined;
                                authorFlairText?: string | undefined;
                                authorFlairTextColor?: string | undefined;
                                authorFlairType?: string | undefined;
                                authorFullname?: string | undefined;
                                authorIsBlocked?: boolean | undefined;
                                authorPatreonFlair?: boolean | undefined;
                                authorPremium?: boolean | undefined;
                                awarders?: string[];
                                bannedAtUtc?: number | undefined;
                                bannedBy?: string | undefined;
                                body?: string | undefined;
                                bodyHtml?: string | undefined;
                                canGild?: boolean | undefined;
                                canModPost?: boolean | undefined;
                                collapsed?: boolean | undefined;
                                collapsedBecauseCrowdControl?: boolean | undefined;
                                collapsedReason?: string | undefined;
                                collapsedReasonCode?: string | undefined;
                                commentType?: string | undefined;
                                controversiality?: number | undefined;
                                created?: number | undefined;
                                createdUtc?: number | undefined;
                                distinguished?: string | undefined;
                                downs?: number | undefined;
                                edited?: boolean | undefined;
                                gilded?: number | undefined;
                                gildings?: {
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                } | undefined;
                                id?: string | undefined;
                                ignoreReports?: boolean | undefined;
                                isSubmitter?: boolean | undefined;
                                likes?: boolean | undefined;
                                linkId?: string | undefined;
                                locked?: boolean | undefined;
                                modNote?: string | undefined;
                                modReasonBy?: string | undefined;
                                modReasonTitle?: string | undefined;
                                name?: string | undefined;
                                noFollow?: boolean | undefined;
                                numReports?: number | undefined;
                                parentId?: string | undefined;
                                permalink?: string | undefined;
                                removalReason?: string | undefined;
                                removed?: boolean | undefined;
                                replies?: string | undefined;
                                reportReasons?: any[] | undefined;
                                rteMode?: string | undefined;
                                saved?: boolean | undefined;
                                score?: number | undefined;
                                scoreHidden?: boolean | undefined;
                                sendReplies?: boolean | undefined;
                                spam?: boolean | undefined;
                                stickied?: boolean | undefined;
                                subreddit?: string | undefined;
                                subredditId?: string | undefined;
                                subredditNamePrefixed?: string | undefined;
                                subredditType?: string | undefined;
                                topAwardedType?: string | undefined;
                                totalAwardsReceived?: number | undefined;
                                treatmentTags?: {
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                }[];
                                unrepliableReason?: string | undefined;
                                ups?: number | undefined;
                                depth?: number | undefined;
                                linkTitle?: string | undefined;
                                linkAuthor?: string | undefined;
                                numComments?: number | undefined;
                                over18?: boolean | undefined;
                                linkPermalink?: string | undefined;
                                quarantine?: boolean | undefined;
                                linkUrl?: string | undefined;
                                selftext?: string | undefined;
                                selftextHtml?: string | undefined;
                                thumbnail?: string | undefined;
                                thumbnailWidth?: number | undefined;
                                thumbnailHeight?: number | undefined;
                                title?: string | undefined;
                                url?: string | undefined;
                                displayName?: string | undefined;
                                modPermissions?: string[];
                                count?: number | undefined;
                                children?: any[] | undefined;
                                replyList?: any | undefined;
                                hidden?: boolean | undefined;
                                linkFlairBackgroundColor?: string | undefined;
                                linkFlairCssClass?: string | undefined;
                                linkFlairRichtext?: {
                                    e?: string | undefined;
                                    t?: string | undefined;
                                    a?: string | undefined;
                                    u?: string | undefined;
                                }[];
                                linkFlairTemplateId?: string | undefined;
                                linkFlairText?: string | undefined;
                                linkFlairTextColor?: string | undefined;
                                linkFlairType?: string | undefined;
                                secureMedia?: {
                                    type?: string;
                                    oembed?: {
                                        type?: string;
                                        title?: string | undefined;
                                        providerName?: string | undefined;
                                        providerUrl?: string | undefined;
                                        version?: string;
                                        thumbnailWidth?: number | undefined;
                                        thumbnailHeight?: number | undefined;
                                        thumbnailUrl?: string | undefined;
                                        html?: string;
                                        height?: number | undefined;
                                        width?: number | undefined;
                                        authorUrl?: string | undefined;
                                        authorName?: string | undefined;
                                    } | undefined;
                                    redditVideo?: {
                                        bitrateKbps?: number | undefined;
                                        dashUrl?: string | undefined;
                                        duration?: number | undefined;
                                        fallbackUrl?: string | undefined;
                                        height?: number | undefined;
                                        hlsUrl?: string | undefined;
                                        isGif?: boolean | undefined;
                                        scrubberMediaUrl?: string | undefined;
                                        transcodingStatus?: string | undefined;
                                        width?: number | undefined;
                                    } | undefined;
                                } | undefined;
                                spoiler?: boolean;
                                modReports?: any[][];
                                userReports?: any[][];
                                removedBy?: string | undefined;
                                removedByCategory?: string | undefined;
                            } | undefined;
                        }[];
                        dist?: number | undefined;
                    } | undefined;
                }): Listing;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array, Uint8Array];
                };
            };
        };
        /**
         * Disable comments for a Post or Comment
         * Note: `id` must be a single thing ID for a Post or Comment
         *
         * @see {@link https://www.reddit.com/dev/api#POST_api_lock}
         */
        readonly lock: {
            readonly name: "Lock";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.linksandcomments.BasicIdRequest";
                encode(message: BasicIdRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): BasicIdRequest;
                fromJSON(object: any): BasicIdRequest;
                toJSON(message: BasicIdRequest): unknown;
                create(base?: {
                    id?: string;
                } | undefined): BasicIdRequest;
                fromPartial(object: {
                    id?: string;
                }): BasicIdRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {} | undefined): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array, Uint8Array, Uint8Array];
                };
            };
        };
        /**
         * Marks a Post as Not-Safe-For-Work
         *
         * @see {@link UnmarkNSFW}
         * @see {@link https://www.reddit.com/dev/api#POST_api_marknsfw}
         */
        readonly markNSFW: {
            readonly name: "MarkNSFW";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.linksandcomments.BasicIdRequest";
                encode(message: BasicIdRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): BasicIdRequest;
                fromJSON(object: any): BasicIdRequest;
                toJSON(message: BasicIdRequest): unknown;
                create(base?: {
                    id?: string;
                } | undefined): BasicIdRequest;
                fromPartial(object: {
                    id?: string;
                }): BasicIdRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {} | undefined): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array, Uint8Array, Uint8Array];
                };
            };
        };
        /**
         * Get more comments from a truncated Comment tree
         *
         * A comment tree has been truncated if it ends with an entry of kind "more"
         * instead of "t1".  Use this API to fetch the additional comments listed in
         * the "children" array of the "more" entry.
         *
         * @see {@link https://www.reddit.com/dev/api#GET_api_morechildren}
         */
        readonly moreChildren: {
            readonly name: "MoreChildren";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.linksandcomments.MoreChildrenRequest";
                encode(message: MoreChildrenRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MoreChildrenRequest;
                fromJSON(object: any): MoreChildrenRequest;
                toJSON(message: MoreChildrenRequest): unknown;
                create(base?: {
                    children?: string[];
                    depth?: number | undefined;
                    limitChildren?: boolean | undefined;
                    linkId?: string;
                    sort?: string | undefined;
                    id?: string | undefined;
                } | undefined): MoreChildrenRequest;
                fromPartial(object: {
                    children?: string[];
                    depth?: number | undefined;
                    limitChildren?: boolean | undefined;
                    linkId?: string;
                    sort?: string | undefined;
                    id?: string | undefined;
                }): MoreChildrenRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.linksandcomments.JsonWrappedComment";
                encode(message: JsonWrappedComment, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): JsonWrappedComment;
                fromJSON(object: any): JsonWrappedComment;
                toJSON(message: JsonWrappedComment): unknown;
                create(base?: {
                    json?: {
                        errors?: string[];
                        data?: {
                            things?: {
                                kind?: string;
                                data?: {
                                    allAwardings?: {
                                        awardSubType?: string | undefined;
                                        awardType?: string | undefined;
                                        awardingsRequiredToGrantBenefits?: number | undefined;
                                        coinPrice?: number | undefined;
                                        coinReward?: number | undefined;
                                        count?: number | undefined;
                                        daysOfDripExtension?: number | undefined;
                                        daysOfPremium?: number | undefined;
                                        description?: string | undefined;
                                        endDate?: string | undefined;
                                        giverCoinReward?: number | undefined;
                                        iconFormat?: string | undefined;
                                        iconHeight?: number | undefined;
                                        iconUrl?: string | undefined;
                                        iconWidth?: number | undefined;
                                        id?: string | undefined;
                                        isEnabled?: boolean | undefined;
                                        isNew?: boolean | undefined;
                                        name?: string | undefined;
                                        pennyDonate?: number | undefined;
                                        pennyPrice?: number | undefined;
                                        resizedIcons?: {
                                            height?: number | undefined;
                                            url?: string | undefined;
                                            width?: number | undefined;
                                        }[];
                                        resizedStaticIcons?: {
                                            height?: number | undefined;
                                            url?: string | undefined;
                                            width?: number | undefined;
                                        }[];
                                        startDate?: string | undefined;
                                        staticIconHeight?: number | undefined;
                                        staticIconUrl?: string | undefined;
                                        staticIconWidth?: number | undefined;
                                        stickyDurationSeconds?: number | undefined;
                                        subredditCoinReward?: number | undefined;
                                        subredditId?: string | undefined;
                                        tiersByRequiredAwardings?: string | undefined;
                                    }[];
                                    approved?: boolean | undefined;
                                    approvedAtUtc?: number | undefined;
                                    approvedBy?: string | undefined;
                                    archived?: boolean | undefined;
                                    associatedAward?: string | undefined;
                                    author?: string | undefined;
                                    authorFlairBackgroundColor?: string | undefined;
                                    authorFlairCssClass?: string | undefined;
                                    authorFlairRichtext?: {
                                        e?: string | undefined;
                                        t?: string | undefined;
                                    }[];
                                    authorFlairTemplateId?: string | undefined;
                                    authorFlairText?: string | undefined;
                                    authorFlairTextColor?: string | undefined;
                                    authorFlairType?: string | undefined;
                                    authorFullname?: string | undefined;
                                    authorIsBlocked?: boolean | undefined;
                                    authorPatreonFlair?: boolean | undefined;
                                    authorPremium?: boolean | undefined;
                                    awarders?: string[];
                                    bannedAtUtc?: number | undefined;
                                    bannedBy?: string | undefined;
                                    body?: string | undefined;
                                    bodyHtml?: string | undefined;
                                    canGild?: boolean | undefined;
                                    canModPost?: boolean | undefined;
                                    collapsed?: boolean | undefined;
                                    collapsedBecauseCrowdControl?: boolean | undefined;
                                    collapsedReason?: string | undefined;
                                    collapsedReasonCode?: string | undefined;
                                    commentType?: string | undefined;
                                    controversiality?: number | undefined;
                                    created?: number | undefined;
                                    createdUtc?: number | undefined;
                                    depth?: number | undefined;
                                    distinguished?: string | undefined;
                                    downs?: number | undefined;
                                    edited?: boolean | undefined;
                                    gilded?: number | undefined;
                                    gildings?: {
                                        gid1?: number | undefined;
                                        gid2?: number | undefined;
                                        gid3?: number | undefined;
                                    } | undefined;
                                    id?: string | undefined;
                                    ignoreReports?: boolean | undefined;
                                    isSubmitter?: boolean | undefined;
                                    likes?: boolean | undefined;
                                    linkId?: string | undefined;
                                    locked?: boolean | undefined;
                                    modNote?: string | undefined;
                                    modReasonBy?: string | undefined;
                                    modReasonTitle?: string | undefined;
                                    modReports?: any[][];
                                    name?: string | undefined;
                                    noFollow?: boolean | undefined;
                                    numReports?: number | undefined;
                                    parentId?: string | undefined;
                                    permalink?: string | undefined;
                                    removalReason?: string | undefined;
                                    removed?: boolean | undefined;
                                    replies?: string | undefined;
                                    reportReasons?: string[];
                                    rteMode?: string | undefined;
                                    saved?: boolean | undefined;
                                    score?: number | undefined;
                                    scoreHidden?: boolean | undefined;
                                    sendReplies?: boolean | undefined;
                                    spam?: boolean | undefined;
                                    stickied?: boolean | undefined;
                                    subreddit?: string | undefined;
                                    subredditId?: string | undefined;
                                    subredditNamePrefixed?: string | undefined;
                                    subredditType?: string | undefined;
                                    topAwardedType?: string | undefined;
                                    totalAwardsReceived?: number | undefined;
                                    treatmentTags?: string[];
                                    unrepliableReason?: string | undefined;
                                    ups?: number | undefined;
                                    userReports?: any[][];
                                    count?: number | undefined;
                                    children?: string[];
                                    banInfo?: {
                                        auto?: boolean | undefined;
                                        bannedAt?: number | undefined;
                                        banner?: string | undefined;
                                        moderatorBanned?: boolean | undefined;
                                        note?: string | undefined;
                                        unbanner?: string | undefined;
                                        unbannedAt?: number | undefined;
                                        resetUsed?: boolean | undefined;
                                        reasonId?: string | undefined;
                                        reasonTitle?: string | undefined;
                                        reasonMessage?: string | undefined;
                                        reasonBy?: string | undefined;
                                        modNote?: string | undefined;
                                        banAllTriggered?: boolean | undefined;
                                        subredditMessage?: string | undefined;
                                        removeAction?: import("../../../reddit/common.js").BanInfo_BanInfoAction;
                                    } | undefined;
                                    markedSpam?: boolean | undefined;
                                    verdict?: string | undefined;
                                } | undefined;
                            }[];
                        } | undefined;
                    } | undefined;
                } | undefined): JsonWrappedComment;
                fromPartial(object: {
                    json?: {
                        errors?: string[];
                        data?: {
                            things?: {
                                kind?: string;
                                data?: {
                                    allAwardings?: {
                                        awardSubType?: string | undefined;
                                        awardType?: string | undefined;
                                        awardingsRequiredToGrantBenefits?: number | undefined;
                                        coinPrice?: number | undefined;
                                        coinReward?: number | undefined;
                                        count?: number | undefined;
                                        daysOfDripExtension?: number | undefined;
                                        daysOfPremium?: number | undefined;
                                        description?: string | undefined;
                                        endDate?: string | undefined;
                                        giverCoinReward?: number | undefined;
                                        iconFormat?: string | undefined;
                                        iconHeight?: number | undefined;
                                        iconUrl?: string | undefined;
                                        iconWidth?: number | undefined;
                                        id?: string | undefined;
                                        isEnabled?: boolean | undefined;
                                        isNew?: boolean | undefined;
                                        name?: string | undefined;
                                        pennyDonate?: number | undefined;
                                        pennyPrice?: number | undefined;
                                        resizedIcons?: {
                                            height?: number | undefined;
                                            url?: string | undefined;
                                            width?: number | undefined;
                                        }[];
                                        resizedStaticIcons?: {
                                            height?: number | undefined;
                                            url?: string | undefined;
                                            width?: number | undefined;
                                        }[];
                                        startDate?: string | undefined;
                                        staticIconHeight?: number | undefined;
                                        staticIconUrl?: string | undefined;
                                        staticIconWidth?: number | undefined;
                                        stickyDurationSeconds?: number | undefined;
                                        subredditCoinReward?: number | undefined;
                                        subredditId?: string | undefined;
                                        tiersByRequiredAwardings?: string | undefined;
                                    }[];
                                    approved?: boolean | undefined;
                                    approvedAtUtc?: number | undefined;
                                    approvedBy?: string | undefined;
                                    archived?: boolean | undefined;
                                    associatedAward?: string | undefined;
                                    author?: string | undefined;
                                    authorFlairBackgroundColor?: string | undefined;
                                    authorFlairCssClass?: string | undefined;
                                    authorFlairRichtext?: {
                                        e?: string | undefined;
                                        t?: string | undefined;
                                    }[];
                                    authorFlairTemplateId?: string | undefined;
                                    authorFlairText?: string | undefined;
                                    authorFlairTextColor?: string | undefined;
                                    authorFlairType?: string | undefined;
                                    authorFullname?: string | undefined;
                                    authorIsBlocked?: boolean | undefined;
                                    authorPatreonFlair?: boolean | undefined;
                                    authorPremium?: boolean | undefined;
                                    awarders?: string[];
                                    bannedAtUtc?: number | undefined;
                                    bannedBy?: string | undefined;
                                    body?: string | undefined;
                                    bodyHtml?: string | undefined;
                                    canGild?: boolean | undefined;
                                    canModPost?: boolean | undefined;
                                    collapsed?: boolean | undefined;
                                    collapsedBecauseCrowdControl?: boolean | undefined;
                                    collapsedReason?: string | undefined;
                                    collapsedReasonCode?: string | undefined;
                                    commentType?: string | undefined;
                                    controversiality?: number | undefined;
                                    created?: number | undefined;
                                    createdUtc?: number | undefined;
                                    depth?: number | undefined;
                                    distinguished?: string | undefined;
                                    downs?: number | undefined;
                                    edited?: boolean | undefined;
                                    gilded?: number | undefined;
                                    gildings?: {
                                        gid1?: number | undefined;
                                        gid2?: number | undefined;
                                        gid3?: number | undefined;
                                    } | undefined;
                                    id?: string | undefined;
                                    ignoreReports?: boolean | undefined;
                                    isSubmitter?: boolean | undefined;
                                    likes?: boolean | undefined;
                                    linkId?: string | undefined;
                                    locked?: boolean | undefined;
                                    modNote?: string | undefined;
                                    modReasonBy?: string | undefined;
                                    modReasonTitle?: string | undefined;
                                    modReports?: any[][];
                                    name?: string | undefined;
                                    noFollow?: boolean | undefined;
                                    numReports?: number | undefined;
                                    parentId?: string | undefined;
                                    permalink?: string | undefined;
                                    removalReason?: string | undefined;
                                    removed?: boolean | undefined;
                                    replies?: string | undefined;
                                    reportReasons?: string[];
                                    rteMode?: string | undefined;
                                    saved?: boolean | undefined;
                                    score?: number | undefined;
                                    scoreHidden?: boolean | undefined;
                                    sendReplies?: boolean | undefined;
                                    spam?: boolean | undefined;
                                    stickied?: boolean | undefined;
                                    subreddit?: string | undefined;
                                    subredditId?: string | undefined;
                                    subredditNamePrefixed?: string | undefined;
                                    subredditType?: string | undefined;
                                    topAwardedType?: string | undefined;
                                    totalAwardsReceived?: number | undefined;
                                    treatmentTags?: string[];
                                    unrepliableReason?: string | undefined;
                                    ups?: number | undefined;
                                    userReports?: any[][];
                                    count?: number | undefined;
                                    children?: string[];
                                    banInfo?: {
                                        auto?: boolean | undefined;
                                        bannedAt?: number | undefined;
                                        banner?: string | undefined;
                                        moderatorBanned?: boolean | undefined;
                                        note?: string | undefined;
                                        unbanner?: string | undefined;
                                        unbannedAt?: number | undefined;
                                        resetUsed?: boolean | undefined;
                                        reasonId?: string | undefined;
                                        reasonTitle?: string | undefined;
                                        reasonMessage?: string | undefined;
                                        reasonBy?: string | undefined;
                                        modNote?: string | undefined;
                                        banAllTriggered?: boolean | undefined;
                                        subredditMessage?: string | undefined;
                                        removeAction?: import("../../../reddit/common.js").BanInfo_BanInfoAction;
                                    } | undefined;
                                    markedSpam?: boolean | undefined;
                                    verdict?: string | undefined;
                                } | undefined;
                            }[];
                        } | undefined;
                    } | undefined;
                }): JsonWrappedComment;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array, Uint8Array, Uint8Array];
                };
            };
        };
        /**
         * Report a Post, Comment, or Private Message
         *
         * If reporting a Post or Comment the report is sent to the moderators of the subreddit for review.
         * If reporting a Private Message the report is sent to Reddit for review.
         *
         * @see {@link https://www.reddit.com/dev/api#POST_api_report}
         */
        readonly report: {
            readonly name: "Report";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.linksandcomments.ReportRequest";
                encode(message: ReportRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ReportRequest;
                fromJSON(object: any): ReportRequest;
                toJSON(message: ReportRequest): unknown;
                create(base?: {
                    additionalInfo?: string | undefined;
                    customText?: string | undefined;
                    modmailConvId?: string | undefined;
                    otherReason?: string | undefined;
                    reason?: string;
                    ruleReason?: string | undefined;
                    siteReason?: string | undefined;
                    srName?: string | undefined;
                    thingId?: string;
                    usernames?: string | undefined;
                } | undefined): ReportRequest;
                fromPartial(object: {
                    additionalInfo?: string | undefined;
                    customText?: string | undefined;
                    modmailConvId?: string | undefined;
                    otherReason?: string | undefined;
                    reason?: string;
                    ruleReason?: string | undefined;
                    siteReason?: string | undefined;
                    srName?: string | undefined;
                    thingId?: string;
                    usernames?: string | undefined;
                }): ReportRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.common.JsonStatus";
                encode(message: JsonStatus, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): JsonStatus;
                fromJSON(object: any): JsonStatus;
                toJSON(message: JsonStatus): unknown;
                create(base?: {
                    json?: {
                        errors?: string[];
                    } | undefined;
                } | undefined): JsonStatus;
                fromPartial(object: {
                    json?: {
                        errors?: string[];
                    } | undefined;
                }): JsonStatus;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array, Uint8Array, Uint8Array, Uint8Array];
                };
            };
        };
        /**
         * Report an award to Reddit for review
         *
         * @see {@link https://www.reddit.com/dev/api#POST_api_report_award}
         */
        readonly reportAward: {
            readonly name: "ReportAward";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.linksandcomments.ReportAwardRequest";
                encode(message: ReportAwardRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ReportAwardRequest;
                fromJSON(object: any): ReportAwardRequest;
                toJSON(message: ReportAwardRequest): unknown;
                create(base?: {
                    awardId?: string;
                    reason?: string | undefined;
                } | undefined): ReportAwardRequest;
                fromPartial(object: {
                    awardId?: string;
                    reason?: string | undefined;
                }): ReportAwardRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {} | undefined): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array, Uint8Array, Uint8Array];
                };
            };
        };
        /**
         * Save a Post or Comment to the user's Saved list
         *
         * @see {@link Unsave}
         * @see {@link https://www.reddit.com/dev/api#POST_api_save}
         */
        readonly save: {
            readonly name: "Save";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.linksandcomments.SaveRequest";
                encode(message: SaveRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): SaveRequest;
                fromJSON(object: any): SaveRequest;
                toJSON(message: SaveRequest): unknown;
                create(base?: {
                    id?: string;
                } | undefined): SaveRequest;
                fromPartial(object: {
                    id?: string;
                }): SaveRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {} | undefined): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array, Uint8Array, Uint8Array];
                };
            };
        };
        /**
         * Enable or disable reply notifications for a Post or Comment
         *
         * @see {@link https://www.reddit.com/dev/api#POST_api_sendreplies}
         */
        readonly sendReplies: {
            readonly name: "SendReplies";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.linksandcomments.SendRepliesRequest";
                encode(message: SendRepliesRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): SendRepliesRequest;
                fromJSON(object: any): SendRepliesRequest;
                toJSON(message: SendRepliesRequest): unknown;
                create(base?: {
                    id?: string;
                    state?: boolean;
                } | undefined): SendRepliesRequest;
                fromPartial(object: {
                    id?: string;
                    state?: boolean;
                }): SendRepliesRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {} | undefined): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array, Uint8Array, Uint8Array];
                };
            };
        };
        /**
         * Toggle Contest Mode for a Post's comments
         *
         * Contest Mode randomizes the sort order and hides the vote score for comments
         *
         * @see {@link https://www.reddit.com/dev/api#POST_api_set_contest_mode}
         */
        readonly setContestMode: {
            readonly name: "SetContestMode";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.linksandcomments.SetContestModeRequest";
                encode(message: SetContestModeRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): SetContestModeRequest;
                fromJSON(object: any): SetContestModeRequest; /**
                 * Clears the Not-Safe-For-Work status from a Post
                 *
                 * @see {@link MarkNSFW}
                 * @see {@link https://www.reddit.com/dev/api#POST_api_unmarknsfw}
                 */
                toJSON(message: SetContestModeRequest): unknown;
                create(base?: {
                    id?: string;
                    state?: boolean;
                } | undefined): SetContestModeRequest;
                fromPartial(object: {
                    id?: string;
                    state?: boolean;
                }): SetContestModeRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.common.JsonStatus";
                encode(message: JsonStatus, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): JsonStatus;
                fromJSON(object: any): JsonStatus;
                toJSON(message: JsonStatus): unknown;
                create(base?: {
                    json?: {
                        errors?: string[];
                    } | undefined;
                } | undefined): JsonStatus;
                fromPartial(object: {
                    json?: {
                        errors?: string[];
                    } | undefined;
                }): JsonStatus;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array, Uint8Array, Uint8Array, Uint8Array];
                };
            };
        };
        /** Edit or set fields unique to developer platform custom posts */
        readonly editCustomPost: {
            readonly name: "EditCustomPost";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.linksandcomments.EditCustomPostRequest";
                encode(message: EditCustomPostRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): EditCustomPostRequest;
                fromJSON(object: any): EditCustomPostRequest;
                toJSON(message: EditCustomPostRequest): unknown;
                create(base?: {
                    thingId?: string;
                    richtextFallback?: string | undefined;
                } | undefined): EditCustomPostRequest;
                fromPartial(object: {
                    thingId?: string;
                    richtextFallback?: string | undefined;
                }): EditCustomPostRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.common.JsonRedditObjects";
                encode(message: JsonRedditObjects, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): JsonRedditObjects;
                fromJSON(object: any): JsonRedditObjects;
                toJSON(message: JsonRedditObjects): unknown;
                create(base?: {
                    json?: {
                        errors?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[];
                        data?: {
                            things?: {
                                kind?: string;
                                data?: {
                                    allAwardings?: {
                                        typeUrl?: string;
                                        value?: Uint8Array;
                                    }[];
                                    approved?: boolean | undefined;
                                    approvedAtUtc?: number | undefined;
                                    approvedBy?: string | undefined;
                                    archived?: boolean | undefined;
                                    associatedAward?: string | undefined;
                                    author?: string | undefined;
                                    authorFlairBackgroundColor?: string | undefined;
                                    authorFlairCssClass?: string | undefined;
                                    authorFlairRichtext?: {
                                        e?: string | undefined;
                                        t?: string | undefined;
                                        a?: string | undefined;
                                        u?: string | undefined;
                                    }[];
                                    authorFlairTemplateId?: string | undefined;
                                    authorFlairText?: string | undefined;
                                    authorFlairTextColor?: string | undefined;
                                    authorFlairType?: string | undefined;
                                    authorFullname?: string | undefined;
                                    authorIsBlocked?: boolean | undefined;
                                    authorPatreonFlair?: boolean | undefined;
                                    authorPremium?: boolean | undefined;
                                    awarders?: string[];
                                    bannedAtUtc?: number | undefined;
                                    bannedBy?: string | undefined;
                                    body?: string | undefined;
                                    bodyHtml?: string | undefined;
                                    canGild?: boolean | undefined;
                                    canModPost?: boolean | undefined;
                                    collapsed?: boolean | undefined;
                                    collapsedBecauseCrowdControl?: boolean | undefined;
                                    collapsedReason?: string | undefined;
                                    collapsedReasonCode?: string | undefined;
                                    commentType?: string | undefined;
                                    controversiality?: number | undefined;
                                    created?: number | undefined;
                                    createdUtc?: number | undefined;
                                    distinguished?: string | undefined;
                                    downs?: number | undefined;
                                    edited?: boolean | undefined;
                                    gilded?: number | undefined;
                                    gildings?: {
                                        typeUrl?: string;
                                        value?: Uint8Array;
                                    } | undefined;
                                    id?: string | undefined;
                                    ignoreReports?: boolean | undefined;
                                    isSubmitter?: boolean | undefined;
                                    likes?: boolean | undefined;
                                    linkId?: string | undefined;
                                    locked?: boolean | undefined;
                                    modNote?: string | undefined;
                                    modReasonBy?: string | undefined;
                                    modReasonTitle?: string | undefined;
                                    name?: string | undefined;
                                    noFollow?: boolean | undefined;
                                    numReports?: number | undefined;
                                    parentId?: string | undefined;
                                    permalink?: string | undefined;
                                    removalReason?: string | undefined;
                                    removed?: boolean | undefined;
                                    replies?: string | undefined;
                                    reportReasons?: any[] | undefined;
                                    rteMode?: string | undefined;
                                    saved?: boolean | undefined;
                                    score?: number | undefined;
                                    scoreHidden?: boolean | undefined;
                                    sendReplies?: boolean | undefined;
                                    spam?: boolean | undefined;
                                    stickied?: boolean | undefined;
                                    subreddit?: string | undefined;
                                    subredditId?: string | undefined;
                                    subredditNamePrefixed?: string | undefined;
                                    subredditType?: string | undefined;
                                    topAwardedType?: string | undefined;
                                    totalAwardsReceived?: number | undefined;
                                    treatmentTags?: {
                                        typeUrl?: string;
                                        value?: Uint8Array;
                                    }[];
                                    unrepliableReason?: string | undefined;
                                    ups?: number | undefined;
                                    depth?: number | undefined;
                                    linkTitle?: string | undefined;
                                    linkAuthor?: string | undefined;
                                    numComments?: number | undefined;
                                    over18?: boolean | undefined;
                                    linkPermalink?: string | undefined;
                                    quarantine?: boolean | undefined;
                                    linkUrl?: string | undefined;
                                    selftext?: string | undefined;
                                    selftextHtml?: string | undefined;
                                    thumbnail?: string | undefined;
                                    thumbnailWidth?: number | undefined;
                                    thumbnailHeight?: number | undefined;
                                    title?: string | undefined;
                                    url?: string | undefined;
                                    displayName?: string | undefined;
                                    modPermissions?: string[];
                                    count?: number | undefined;
                                    children?: any[] | undefined;
                                    replyList?: {
                                        kind?: string;
                                        data?: {
                                            after?: string | undefined;
                                            before?: string | undefined;
                                            children?: any[];
                                            dist?: number | undefined;
                                        } | undefined;
                                    } | undefined;
                                    hidden?: boolean | undefined;
                                    linkFlairBackgroundColor?: string | undefined;
                                    linkFlairCssClass?: string | undefined;
                                    linkFlairRichtext?: {
                                        e?: string | undefined;
                                        t?: string | undefined;
                                        a?: string | undefined;
                                        u?: string | undefined;
                                    }[];
                                    linkFlairTemplateId?: string | undefined;
                                    linkFlairText?: string | undefined;
                                    linkFlairTextColor?: string | undefined;
                                    linkFlairType?: string | undefined;
                                    secureMedia?: {
                                        type?: string;
                                        oembed?: {
                                            type?: string;
                                            title?: string | undefined;
                                            providerName?: string | undefined;
                                            providerUrl?: string | undefined;
                                            version?: string;
                                            thumbnailWidth?: number | undefined;
                                            thumbnailHeight?: number | undefined;
                                            thumbnailUrl?: string | undefined;
                                            html?: string;
                                            height?: number | undefined;
                                            width?: number | undefined;
                                            authorUrl?: string | undefined;
                                            authorName?: string | undefined;
                                        } | undefined;
                                        redditVideo?: {
                                            bitrateKbps?: number | undefined;
                                            dashUrl?: string | undefined;
                                            duration?: number | undefined;
                                            fallbackUrl?: string | undefined;
                                            height?: number | undefined;
                                            hlsUrl?: string | undefined;
                                            isGif?: boolean | undefined;
                                            scrubberMediaUrl?: string | undefined;
                                            transcodingStatus?: string | undefined;
                                            width?: number | undefined;
                                        } | undefined;
                                    } | undefined;
                                    spoiler?: boolean;
                                    modReports?: any[][];
                                    userReports?: any[][];
                                    removedBy?: string | undefined;
                                    removedByCategory?: string | undefined;
                                } | undefined;
                            }[];
                        } | undefined;
                    } | undefined;
                } | undefined): JsonRedditObjects;
                fromPartial(object: {
                    json?: {
                        errors?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[];
                        data?: {
                            things?: {
                                kind?: string;
                                data?: {
                                    allAwardings?: {
                                        typeUrl?: string;
                                        value?: Uint8Array;
                                    }[];
                                    approved?: boolean | undefined;
                                    approvedAtUtc?: number | undefined;
                                    approvedBy?: string | undefined;
                                    archived?: boolean | undefined;
                                    associatedAward?: string | undefined;
                                    author?: string | undefined;
                                    authorFlairBackgroundColor?: string | undefined;
                                    authorFlairCssClass?: string | undefined;
                                    authorFlairRichtext?: {
                                        e?: string | undefined;
                                        t?: string | undefined;
                                        a?: string | undefined;
                                        u?: string | undefined;
                                    }[];
                                    authorFlairTemplateId?: string | undefined;
                                    authorFlairText?: string | undefined;
                                    authorFlairTextColor?: string | undefined;
                                    authorFlairType?: string | undefined;
                                    authorFullname?: string | undefined;
                                    authorIsBlocked?: boolean | undefined;
                                    authorPatreonFlair?: boolean | undefined;
                                    authorPremium?: boolean | undefined;
                                    awarders?: string[];
                                    bannedAtUtc?: number | undefined;
                                    bannedBy?: string | undefined;
                                    body?: string | undefined;
                                    bodyHtml?: string | undefined;
                                    canGild?: boolean | undefined;
                                    canModPost?: boolean | undefined;
                                    collapsed?: boolean | undefined;
                                    collapsedBecauseCrowdControl?: boolean | undefined;
                                    collapsedReason?: string | undefined;
                                    collapsedReasonCode?: string | undefined;
                                    commentType?: string | undefined;
                                    controversiality?: number | undefined;
                                    created?: number | undefined;
                                    createdUtc?: number | undefined;
                                    distinguished?: string | undefined;
                                    downs?: number | undefined;
                                    edited?: boolean | undefined;
                                    gilded?: number | undefined;
                                    gildings?: {
                                        typeUrl?: string;
                                        value?: Uint8Array;
                                    } | undefined;
                                    id?: string | undefined;
                                    ignoreReports?: boolean | undefined;
                                    isSubmitter?: boolean | undefined;
                                    likes?: boolean | undefined;
                                    linkId?: string | undefined;
                                    locked?: boolean | undefined;
                                    modNote?: string | undefined;
                                    modReasonBy?: string | undefined;
                                    modReasonTitle?: string | undefined;
                                    name?: string | undefined;
                                    noFollow?: boolean | undefined;
                                    numReports?: number | undefined;
                                    parentId?: string | undefined;
                                    permalink?: string | undefined;
                                    removalReason?: string | undefined;
                                    removed?: boolean | undefined;
                                    replies?: string | undefined;
                                    reportReasons?: any[] | undefined;
                                    rteMode?: string | undefined;
                                    saved?: boolean | undefined;
                                    score?: number | undefined;
                                    scoreHidden?: boolean | undefined;
                                    sendReplies?: boolean | undefined;
                                    spam?: boolean | undefined;
                                    stickied?: boolean | undefined;
                                    subreddit?: string | undefined;
                                    subredditId?: string | undefined;
                                    subredditNamePrefixed?: string | undefined;
                                    subredditType?: string | undefined;
                                    topAwardedType?: string | undefined;
                                    totalAwardsReceived?: number | undefined;
                                    treatmentTags?: {
                                        typeUrl?: string;
                                        value?: Uint8Array;
                                    }[];
                                    unrepliableReason?: string | undefined;
                                    ups?: number | undefined;
                                    depth?: number | undefined;
                                    linkTitle?: string | undefined;
                                    linkAuthor?: string | undefined;
                                    numComments?: number | undefined;
                                    over18?: boolean | undefined;
                                    linkPermalink?: string | undefined;
                                    quarantine?: boolean | undefined;
                                    linkUrl?: string | undefined;
                                    selftext?: string | undefined;
                                    selftextHtml?: string | undefined;
                                    thumbnail?: string | undefined;
                                    thumbnailWidth?: number | undefined;
                                    thumbnailHeight?: number | undefined;
                                    title?: string | undefined;
                                    url?: string | undefined;
                                    displayName?: string | undefined;
                                    modPermissions?: string[];
                                    count?: number | undefined;
                                    children?: any[] | undefined;
                                    replyList?: {
                                        kind?: string;
                                        data?: {
                                            after?: string | undefined;
                                            before?: string | undefined;
                                            children?: any[];
                                            dist?: number | undefined;
                                        } | undefined;
                                    } | undefined;
                                    hidden?: boolean | undefined;
                                    linkFlairBackgroundColor?: string | undefined;
                                    linkFlairCssClass?: string | undefined;
                                    linkFlairRichtext?: {
                                        e?: string | undefined;
                                        t?: string | undefined;
                                        a?: string | undefined;
                                        u?: string | undefined;
                                    }[];
                                    linkFlairTemplateId?: string | undefined;
                                    linkFlairText?: string | undefined;
                                    linkFlairTextColor?: string | undefined;
                                    linkFlairType?: string | undefined;
                                    secureMedia?: {
                                        type?: string;
                                        oembed?: {
                                            type?: string;
                                            title?: string | undefined;
                                            providerName?: string | undefined;
                                            providerUrl?: string | undefined;
                                            version?: string;
                                            thumbnailWidth?: number | undefined;
                                            thumbnailHeight?: number | undefined;
                                            thumbnailUrl?: string | undefined;
                                            html?: string;
                                            height?: number | undefined;
                                            width?: number | undefined;
                                            authorUrl?: string | undefined;
                                            authorName?: string | undefined;
                                        } | undefined;
                                        redditVideo?: {
                                            bitrateKbps?: number | undefined;
                                            dashUrl?: string | undefined;
                                            duration?: number | undefined;
                                            fallbackUrl?: string | undefined;
                                            height?: number | undefined;
                                            hlsUrl?: string | undefined;
                                            isGif?: boolean | undefined;
                                            scrubberMediaUrl?: string | undefined;
                                            transcodingStatus?: string | undefined;
                                            width?: number | undefined;
                                        } | undefined;
                                    } | undefined;
                                    spoiler?: boolean;
                                    modReports?: any[][];
                                    userReports?: any[][];
                                    removedBy?: string | undefined;
                                    removedByCategory?: string | undefined;
                                } | undefined;
                            }[];
                        } | undefined;
                    } | undefined;
                }): JsonRedditObjects;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /**
         * Set the "sticky" or "pinned" status of a Post
         *
         * If the post was created by the current user they can pin the post
         * to the top of their user profile.  Otherwise they must be a moderator
         * of the subreddit to stick it to the top of the subreddit it was posted in.
         *
         * @see {@link https://www.reddit.com/dev/api#POST_api_set_subreddit_sticky}
         */
        readonly setSubredditSticky: {
            readonly name: "SetSubredditSticky";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.linksandcomments.SetSubredditStickyRequest";
                encode(message: SetSubredditStickyRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): SetSubredditStickyRequest;
                fromJSON(object: any): SetSubredditStickyRequest;
                toJSON(message: SetSubredditStickyRequest): unknown;
                create(base?: {
                    id?: string;
                    num?: number | undefined;
                    state?: boolean;
                    toProfile?: boolean | undefined;
                } | undefined): SetSubredditStickyRequest;
                fromPartial(object: {
                    id?: string;
                    num?: number | undefined;
                    state?: boolean;
                    toProfile?: boolean | undefined;
                }): SetSubredditStickyRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.common.JsonStatus";
                encode(message: JsonStatus, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): JsonStatus;
                fromJSON(object: any): JsonStatus;
                toJSON(message: JsonStatus): unknown;
                create(base?: {
                    json?: {
                        errors?: string[];
                    } | undefined;
                } | undefined): JsonStatus;
                fromPartial(object: {
                    json?: {
                        errors?: string[];
                    } | undefined;
                }): JsonStatus;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array, Uint8Array, Uint8Array, Uint8Array];
                };
            };
        };
        /**
         * Set the default sort order for comments in the given Post
         *
         * @see {@link https://www.reddit.com/dev/api#POST_api_set_suggested_sort}
         */
        readonly setSuggestedSort: {
            readonly name: "SetSuggestedSort";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.linksandcomments.SetSuggestedSortRequest";
                encode(message: SetSuggestedSortRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): SetSuggestedSortRequest;
                fromJSON(object: any): SetSuggestedSortRequest;
                toJSON(message: SetSuggestedSortRequest): unknown;
                create(base?: {
                    id?: string;
                    sort?: string;
                } | undefined): SetSuggestedSortRequest;
                fromPartial(object: {
                    id?: string;
                    sort?: string;
                }): SetSuggestedSortRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.common.JsonStatus";
                encode(message: JsonStatus, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): JsonStatus;
                fromJSON(object: any): JsonStatus;
                toJSON(message: JsonStatus): unknown;
                create(base?: {
                    json?: {
                        errors?: string[];
                    } | undefined;
                } | undefined): JsonStatus;
                fromPartial(object: {
                    json?: {
                        errors?: string[];
                    } | undefined;
                }): JsonStatus;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array, Uint8Array, Uint8Array, Uint8Array];
                };
            };
        };
        /**
         * Sets the spoiler tag on a given Post to hide its contents by default
         * Note: `id` must be a single thing ID for a Post
         *
         * @see {@link Unspoiler}
         * @see {@link https://www.reddit.com/dev/api#POST_api_spoiler}
         */
        readonly spoiler: {
            readonly name: "Spoiler";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.linksandcomments.BasicIdRequest";
                encode(message: BasicIdRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): BasicIdRequest;
                fromJSON(object: any): BasicIdRequest;
                toJSON(message: BasicIdRequest): unknown;
                create(base?: {
                    id?: string;
                } | undefined): BasicIdRequest;
                fromPartial(object: {
                    id?: string;
                }): BasicIdRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {} | undefined): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array, Uint8Array, Uint8Array];
                };
            };
        };
        /**
         * Create a new Post
         *
         * @see {@link https://www.reddit.com/dev/api#POST_api_submit}
         *
         * Note: not specifying ApiClientConfig to avoid automatic generation.
         * Submit has extra logic that needs to be manually implemented.
         */
        readonly submit: {
            readonly name: "Submit";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.linksandcomments.SubmitRequest";
                encode(message: SubmitRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): SubmitRequest;
                fromJSON(object: any): SubmitRequest;
                toJSON(message: SubmitRequest): unknown;
                create(base?: {
                    collectionId?: string | undefined;
                    flairId?: string | undefined;
                    flairText?: string | undefined;
                    kind?: string;
                    nsfw?: boolean | undefined;
                    richtextJson?: string | undefined;
                    sendreplies?: boolean | undefined;
                    spoiler?: boolean | undefined;
                    sr?: string;
                    text?: string | undefined;
                    title?: string;
                    url?: string | undefined;
                    videoPosterUrl?: string | undefined;
                    crosspostFullname?: string | undefined;
                    richtextFallback?: string | undefined;
                } | undefined): SubmitRequest;
                fromPartial(object: {
                    collectionId?: string | undefined;
                    flairId?: string | undefined;
                    flairText?: string | undefined;
                    kind?: string;
                    nsfw?: boolean | undefined;
                    richtextJson?: string | undefined;
                    sendreplies?: boolean | undefined;
                    spoiler?: boolean | undefined;
                    sr?: string;
                    text?: string | undefined;
                    title?: string;
                    url?: string | undefined;
                    videoPosterUrl?: string | undefined;
                    crosspostFullname?: string | undefined;
                    richtextFallback?: string | undefined;
                }): SubmitRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.linksandcomments.SubmitResponse";
                encode(message: SubmitResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): SubmitResponse;
                fromJSON(object: any): SubmitResponse;
                toJSON(message: SubmitResponse): unknown;
                create(base?: {
                    json?: {
                        errors?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[];
                        data?: {
                            url?: string | undefined;
                            draftsCount?: number | undefined;
                            id?: string | undefined;
                            name?: string | undefined;
                        } | undefined;
                    } | undefined;
                } | undefined): SubmitResponse;
                fromPartial(object: {
                    json?: {
                        errors?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[];
                        data?: {
                            url?: string | undefined;
                            draftsCount?: number | undefined;
                            id?: string | undefined;
                            name?: string | undefined;
                        } | undefined;
                    } | undefined;
                }): SubmitResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Create a new Custom Post */
        readonly submitCustomPost: {
            readonly name: "SubmitCustomPost";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.linksandcomments.SubmitRequest";
                encode(message: SubmitRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): SubmitRequest;
                fromJSON(object: any): SubmitRequest;
                toJSON(message: SubmitRequest): unknown;
                create(base?: {
                    collectionId?: string | undefined;
                    flairId?: string | undefined;
                    flairText?: string | undefined;
                    kind?: string;
                    nsfw?: boolean | undefined;
                    richtextJson?: string | undefined;
                    sendreplies?: boolean | undefined;
                    spoiler?: boolean | undefined;
                    sr?: string;
                    text?: string | undefined;
                    title?: string;
                    url?: string | undefined;
                    videoPosterUrl?: string | undefined;
                    crosspostFullname?: string | undefined;
                    richtextFallback?: string | undefined;
                } | undefined): SubmitRequest;
                fromPartial(object: {
                    collectionId?: string | undefined;
                    flairId?: string | undefined;
                    flairText?: string | undefined;
                    kind?: string;
                    nsfw?: boolean | undefined;
                    richtextJson?: string | undefined;
                    sendreplies?: boolean | undefined;
                    spoiler?: boolean | undefined;
                    sr?: string;
                    text?: string | undefined;
                    title?: string;
                    url?: string | undefined;
                    videoPosterUrl?: string | undefined;
                    crosspostFullname?: string | undefined;
                    richtextFallback?: string | undefined;
                }): SubmitRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.linksandcomments.SubmitResponse";
                encode(message: SubmitResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): SubmitResponse;
                fromJSON(object: any): SubmitResponse;
                toJSON(message: SubmitResponse): unknown;
                create(base?: {
                    json?: {
                        errors?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[];
                        data?: {
                            url?: string | undefined;
                            draftsCount?: number | undefined;
                            id?: string | undefined;
                            name?: string | undefined;
                        } | undefined;
                    } | undefined;
                } | undefined): SubmitResponse;
                fromPartial(object: {
                    json?: {
                        errors?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[];
                        data?: {
                            url?: string | undefined;
                            draftsCount?: number | undefined;
                            id?: string | undefined;
                            name?: string | undefined;
                        } | undefined;
                    } | undefined;
                }): SubmitResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /**
         * Unhide one or more Posts for the user
         * Note: `id` must be one or more comma-separated Post thing IDs
         *
         * @see {@link Hide}
         * @see {@link https://www.reddit.com/dev/api#POST_api_unhide}
         */
        readonly unhide: {
            readonly name: "Unhide";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.linksandcomments.BasicIdRequest";
                encode(message: BasicIdRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): BasicIdRequest;
                fromJSON(object: any): BasicIdRequest;
                toJSON(message: BasicIdRequest): unknown;
                create(base?: {
                    id?: string;
                } | undefined): BasicIdRequest;
                fromPartial(object: {
                    id?: string;
                }): BasicIdRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {} | undefined): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array, Uint8Array, Uint8Array];
                };
            };
        };
        /**
         * Enable comments for a Post or Comment
         * Note: `id` must be a single thing ID for a Post or Comment
         *
         * @see {@link Lock}
         * @see {@link https://www.reddit.com/dev/api#POST_api_unlock}
         */
        readonly unlock: {
            readonly name: "Unlock";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.linksandcomments.BasicIdRequest";
                encode(message: BasicIdRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): BasicIdRequest;
                fromJSON(object: any): BasicIdRequest;
                toJSON(message: BasicIdRequest): unknown;
                create(base?: {
                    id?: string;
                } | undefined): BasicIdRequest;
                fromPartial(object: {
                    id?: string;
                }): BasicIdRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {} | undefined): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array, Uint8Array, Uint8Array];
                };
            };
        };
        /**
         * Clears the Not-Safe-For-Work status from a Post
         *
         * @see {@link MarkNSFW}
         * @see {@link https://www.reddit.com/dev/api#POST_api_unmarknsfw}
         */
        readonly unmarkNSFW: {
            readonly name: "UnmarkNSFW";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.linksandcomments.BasicIdRequest";
                encode(message: BasicIdRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): BasicIdRequest;
                fromJSON(object: any): BasicIdRequest;
                toJSON(message: BasicIdRequest): unknown;
                create(base?: {
                    id?: string;
                } | undefined): BasicIdRequest;
                fromPartial(object: {
                    id?: string;
                }): BasicIdRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {} | undefined): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array, Uint8Array, Uint8Array];
                };
            };
        };
        /**
         * Remove a Post or Comment from the user's Saved list
         *
         * @see {@link Save}
         * @see {@link https://www.reddit.com/dev/api#POST_api_unsave}
         */
        readonly unsave: {
            readonly name: "Unsave";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.linksandcomments.BasicIdRequest";
                encode(message: BasicIdRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): BasicIdRequest;
                fromJSON(object: any): BasicIdRequest;
                toJSON(message: BasicIdRequest): unknown;
                create(base?: {
                    id?: string;
                } | undefined): BasicIdRequest;
                fromPartial(object: {
                    id?: string;
                }): BasicIdRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {} | undefined): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array, Uint8Array, Uint8Array];
                };
            };
        };
        /**
         * Clears the spoiler tag on a given Post
         *
         * @see {@link Spoiler}
         * @see {@link https://www.reddit.com/dev/api#POST_api_unspoiler}
         */
        readonly unspoiler: {
            readonly name: "Unspoiler";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.linksandcomments.BasicIdRequest";
                encode(message: BasicIdRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): BasicIdRequest;
                fromJSON(object: any): BasicIdRequest;
                toJSON(message: BasicIdRequest): unknown;
                create(base?: {
                    id?: string;
                } | undefined): BasicIdRequest;
                fromPartial(object: {
                    id?: string;
                }): BasicIdRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {} | undefined): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array, Uint8Array, Uint8Array];
                };
            };
        };
        /**
         * Vote or clear a vote on a Post or Comment
         *
         * @see {@link https://www.reddit.com/dev/api#POST_api_vote}
         */
        readonly vote: {
            readonly name: "Vote";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.linksandcomments.VoteRequest";
                encode(message: VoteRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): VoteRequest;
                fromJSON(object: any): VoteRequest;
                toJSON(message: VoteRequest): unknown;
                create(base?: {
                    dir?: number;
                    id?: string;
                } | undefined): VoteRequest;
                fromPartial(object: {
                    dir?: number;
                    id?: string;
                }): VoteRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {} | undefined): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array, Uint8Array, Uint8Array];
                };
            };
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array, metadata?: Metadata): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=linksandcomments_svc.d.ts.map