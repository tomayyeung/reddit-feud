/// <reference types="node" resolution-mode="require"/>
import { TwirpContext, TwirpServer } from 'twirp-ts';
import { CommentRequest, JsonWrappedComment, BasicIdRequest, FollowPostRequest, InfoRequest, MoreChildrenRequest, ReportRequest, ReportAwardRequest, SaveRequest, SendRepliesRequest, SetContestModeRequest, EditCustomPostRequest, SetSubredditStickyRequest, SetSuggestedSortRequest, SubmitRequest, SubmitResponse, VoteRequest } from './linksandcomments_msg.js';
import { Empty } from '../../../../google/protobuf/empty.js';
import { Listing, JsonStatus, JsonRedditObjects } from '../common/common_msg.js';
export interface LinksAndCommentsTwirp<T extends TwirpContext = TwirpContext> {
    Comment(ctx: T, request: CommentRequest): Promise<JsonWrappedComment>;
    Del(ctx: T, request: BasicIdRequest): Promise<Empty>;
    EditUserText(ctx: T, request: CommentRequest): Promise<JsonWrappedComment>;
    FollowPost(ctx: T, request: FollowPostRequest): Promise<Empty>;
    Hide(ctx: T, request: BasicIdRequest): Promise<Empty>;
    Info(ctx: T, request: InfoRequest): Promise<Listing>;
    Lock(ctx: T, request: BasicIdRequest): Promise<Empty>;
    MarkNSFW(ctx: T, request: BasicIdRequest): Promise<Empty>;
    MoreChildren(ctx: T, request: MoreChildrenRequest): Promise<JsonWrappedComment>;
    Report(ctx: T, request: ReportRequest): Promise<JsonStatus>;
    ReportAward(ctx: T, request: ReportAwardRequest): Promise<Empty>;
    Save(ctx: T, request: SaveRequest): Promise<Empty>;
    SendReplies(ctx: T, request: SendRepliesRequest): Promise<Empty>;
    SetContestMode(ctx: T, request: SetContestModeRequest): Promise<JsonStatus>;
    EditCustomPost(ctx: T, request: EditCustomPostRequest): Promise<JsonRedditObjects>;
    SetSubredditSticky(ctx: T, request: SetSubredditStickyRequest): Promise<JsonStatus>;
    SetSuggestedSort(ctx: T, request: SetSuggestedSortRequest): Promise<JsonStatus>;
    Spoiler(ctx: T, request: BasicIdRequest): Promise<Empty>;
    Submit(ctx: T, request: SubmitRequest): Promise<SubmitResponse>;
    SubmitCustomPost(ctx: T, request: SubmitRequest): Promise<SubmitResponse>;
    Unhide(ctx: T, request: BasicIdRequest): Promise<Empty>;
    Unlock(ctx: T, request: BasicIdRequest): Promise<Empty>;
    UnmarkNSFW(ctx: T, request: BasicIdRequest): Promise<Empty>;
    Unsave(ctx: T, request: BasicIdRequest): Promise<Empty>;
    Unspoiler(ctx: T, request: BasicIdRequest): Promise<Empty>;
    Vote(ctx: T, request: VoteRequest): Promise<Empty>;
}
export declare enum LinksAndCommentsMethod {
    Comment = "Comment",
    Del = "Del",
    EditUserText = "EditUserText",
    FollowPost = "FollowPost",
    Hide = "Hide",
    Info = "Info",
    Lock = "Lock",
    MarkNSFW = "MarkNSFW",
    MoreChildren = "MoreChildren",
    Report = "Report",
    ReportAward = "ReportAward",
    Save = "Save",
    SendReplies = "SendReplies",
    SetContestMode = "SetContestMode",
    EditCustomPost = "EditCustomPost",
    SetSubredditSticky = "SetSubredditSticky",
    SetSuggestedSort = "SetSuggestedSort",
    Spoiler = "Spoiler",
    Submit = "Submit",
    SubmitCustomPost = "SubmitCustomPost",
    Unhide = "Unhide",
    Unlock = "Unlock",
    UnmarkNSFW = "UnmarkNSFW",
    Unsave = "Unsave",
    Unspoiler = "Unspoiler",
    Vote = "Vote"
}
export declare const LinksAndCommentsMethodList: LinksAndCommentsMethod[];
export declare function createLinksAndCommentsServer<T extends TwirpContext = TwirpContext>(service: LinksAndCommentsTwirp<T>): TwirpServer<LinksAndCommentsTwirp<TwirpContext<import("http").IncomingMessage, import("http").ServerResponse<import("http").IncomingMessage>>>, T>;
//# sourceMappingURL=linksandcomments_svc.twirp.d.ts.map