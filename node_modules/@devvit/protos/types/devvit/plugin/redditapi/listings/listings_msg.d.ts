/**
 * #listings_msg.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { Listing } from "../common/common_msg.js";
export interface GetBestRequest {
    /**
     * Post thing ID
     * Return Posts in the listing up to this Post (non-inclusive)
     * Note: Do not use `before` and `after` in the same request
     * @example "t3_abc123"
     */
    after?: string | undefined;
    /**
     * Post thing ID
     * Return Posts in the listing starting after this Post (non-inclusive)
     * Note: Do not use `before` and `after` in the same request
     * @example "t3_abc123"
     */
    before?: string | undefined;
    /**
     * The number of items seen so far.
     * Use when fetching subsequent pages with `before` or `after`.
     */
    count?: number | undefined;
    /** The maximum number of items desired (default: 25, maximum: 100) */
    limit?: number | undefined;
    /** Adding the string "all" will show all results regardless of user preferences */
    show?: string | undefined;
}
export interface GetSortRequest {
    /**
     * Fetch posts from this subreddit.
     * Note: If omitted Home is used
     * @example "AskReddit"
     */
    subreddit?: string | undefined;
    /**
     * Sort method
     * One of: "top", "controversial"
     */
    sort: string;
    /**
     * Post thing ID
     * Return Posts in the listing up to this Post (non-inclusive)
     * Note: Do not use `before` and `after` in the same request
     * @example "t3_abc123"
     */
    after?: string | undefined;
    /**
     * Post thing ID
     * Return Posts in the listing starting after this Post (non-inclusive)
     * Note: Do not use `before` and `after` in the same request
     * @example "t3_abc123"
     */
    before?: string | undefined;
    /** One of: "num_comments", "new" */
    limit?: number | undefined;
    /**
     * The number of items seen so far.
     * Use when fetching subsequent pages with `before` or `after`, defaults to 0
     */
    count?: number | undefined;
    /** Adding the string "all" will show all results regardless of user preferences */
    show?: string | undefined;
    /**
     * Show results within the given timeframe (default: "day")
     * One of: "hour", "day", "week", "month", "year", "all"
     */
    t?: string | undefined;
}
export interface GetCommentsRequest {
    /**
     * Post thing ID without t3_ prefix
     * @example "abc123" // for: t3_abc123
     */
    article: string;
    /**
     * Comment thing ID without t1_ prefix
     * Note: If provided this will be the only sub-tree in the listing
     * @example "def456" // for: t1_def456
     */
    comment?: string | undefined;
    /**
     * If `comment` is provided and is not a top-level comment include
     * up to this amount of parent comments. Range: 0-8
     */
    context?: number | undefined;
    /** Maximum depth of any comment tree in the listing */
    depth?: number | undefined;
    /**
     * Maximum comments to include in each sub-tree
     * Note: This limit is applied to each level of the comment tree
     */
    limit?: number | undefined;
    /** One of: "confidence", "top", "new", "controversial", "old", "random", "qa", "live" */
    sort?: string | undefined;
    /** If `false` the comment tree is flattened instead of nesting sub-trees in `replies` */
    threaded?: boolean | undefined;
    /**
     * Limit the total number of comments returned to this amount. Range: 0-50
     * Note: While `limit` sets the maximum comments per sub-tree, `truncate`
     *       counts each comment and its descendents toward the maximum
     */
    truncate?: number | undefined;
}
export interface GetByIdRequest {
    /**
     * Comma-separated list of Post thing IDs
     * @example "t3_abc123,t3_def456"
     */
    postIds: string;
}
export interface GetDuplicatesRequest {
    /**
     * Post thing ID without t3_ prefix
     * @example "abc123" // for: t3_abc123
     */
    article: string;
    /**
     * Post thing ID
     * Return Posts in the listing starting after this Post (non-inclusive)
     * Note: Do not use `before` and `after` in the same request
     * @example "t3_abc123"
     */
    before?: string | undefined;
    /**
     * Post thing ID
     * Return Posts in the listing up to this Post (non-inclusive)
     * Note: Do not use `before` and `after` in the same request
     * @example "t3_abc123"
     */
    after?: string | undefined;
    /** Maximum number of items to include in the response */
    limit?: number | undefined;
    /** One of: "num_comments", "new" */
    sort?: string | undefined;
    /**
     * Limit search to the given subreddit name
     * @example "AskReddit"
     */
    sr?: string | undefined;
    /**
     * The number of items seen so far.
     * Use when fetching subsequent pages with `before` or `after`.
     */
    count?: number | undefined;
    /** Only return duplicates that are crossposting this post */
    crosspostsOnly?: boolean | undefined;
    /** Adding the string "all" will show all results regardless of user preferences */
    show?: string | undefined;
}
export interface GetHotRequest {
    /**
     * Fetch posts from this subreddit.
     * Note: If omitted Home is used
     * @example "AskReddit"
     */
    subreddit?: string | undefined;
    /**
     * Post thing ID
     * Return Posts in the listing starting after this Post (non-inclusive)
     * Note: Do not use `before` and `after` in the same request
     * @example "t3_abc123"
     */
    before?: string | undefined;
    /**
     * Post thing ID
     * Return Posts in the listing up to this Post (non-inclusive)
     * Note: Do not use `before` and `after` in the same request
     * @example "t3_abc123"
     */
    after?: string | undefined;
    /** The maximum number of items desired (default: 25, maximum: 100) */
    limit?: number | undefined;
    /**
     * The number of items seen so far.
     * Use when fetching subsequent pages with `before` or `after`.
     */
    count?: number | undefined;
    /** Adding the string "all" will show all results regardless of user preferences */
    show?: string | undefined;
    /**
     * If provided filter the results by geographic location
     * One of: GLOBAL, US, AR, AU, BG, CA, CL, CO, HR, CZ, FI, FR,
     *         DE, GR, HU, IS, IN, IE, IT, JP, MY, MX, NZ, PH, PL,
     *         PT, PR, RO, RS, SG, ES, SE, TW, TH, TR, GB,
     *         US_WA, US_DE, US_DC, US_WI, US_WV, US_HI, US_FL, US_WY,
     *         US_NH, US_NJ, US_NM, US_TX, US_LA, US_NC, US_ND, US_NE,
     *         US_TN, US_NY, US_PA, US_CA, US_NV, US_VA, US_CO, US_AK,
     *         US_AL, US_AR, US_VT, US_IL, US_GA, US_IN, US_IA, US_OK,
     *         US_AZ, US_ID, US_CT, US_ME, US_MD, US_MA, US_OH, US_UT,
     *         US_MO, US_MN, US_MI, US_RI, US_KS, US_MT, US_MS, US_SC,
     *         US_KY, US_OR, US_SD
     */
    g?: string | undefined;
}
export interface GetNewRequest {
    /**
     * Fetch posts from this subreddit.
     * Note: If omitted Home is used
     * @example "AskReddit"
     */
    subreddit?: string | undefined;
    /**
     * Post thing ID
     * Return Posts in the listing starting after this Post (non-inclusive)
     * Note: Do not use `before` and `after` in the same request
     * @example "t3_abc123"
     */
    before?: string | undefined;
    /**
     * Post thing ID
     * Return Posts in the listing up to this Post (non-inclusive)
     * Note: Do not use `before` and `after` in the same request
     * @example "t3_abc123"
     */
    after?: string | undefined;
    /** The maximum number of items desired (default: 25, maximum: 100) */
    limit?: number | undefined;
    /**
     * The number of items seen so far.
     * Use when fetching subsequent pages with `before` or `after`.
     */
    count?: number | undefined;
    /**
     * The number of items seen so far.
     * Use when fetching subsequent pages with `before` or `after`.
     */
    show?: string | undefined;
}
export interface GetRisingRequest {
    /**
     * Fetch posts from this subreddit.
     * Note: If omitted Home is used
     * @example "AskReddit"
     */
    subreddit?: string | undefined;
    /**
     * Post thing ID
     * Return Posts in the listing up to this Post (non-inclusive)
     * Note: Do not use `before` and `after` in the same request
     * @example "t3_abc123"
     */
    after?: string | undefined;
    /**
     * Post thing ID
     * Return Posts in the listing starting after this Post (non-inclusive)
     * Note: Do not use `before` and `after` in the same request
     * @example "t3_abc123"
     */
    before?: string | undefined;
    /**
     * The number of items seen so far.
     * Use when fetching subsequent pages with `before` or `after`.
     */
    count?: number | undefined;
    /** The maximum number of items desired (default: 25, maximum: 100) */
    limit?: number | undefined;
    /**
     * The number of items seen so far.
     * Use when fetching subsequent pages with `before` or `after`.
     */
    show?: string | undefined;
}
/** Responses */
export interface ListingResponse {
    listings: Listing[];
}
export declare const GetBestRequest: {
    $type: "devvit.plugin.redditapi.listings.GetBestRequest";
    encode(message: GetBestRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetBestRequest;
    fromJSON(object: any): GetBestRequest;
    toJSON(message: GetBestRequest): unknown;
    create(base?: DeepPartial<GetBestRequest>): GetBestRequest;
    fromPartial(object: DeepPartial<GetBestRequest>): GetBestRequest;
};
export declare const GetSortRequest: {
    $type: "devvit.plugin.redditapi.listings.GetSortRequest";
    encode(message: GetSortRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetSortRequest;
    fromJSON(object: any): GetSortRequest;
    toJSON(message: GetSortRequest): unknown;
    create(base?: DeepPartial<GetSortRequest>): GetSortRequest;
    fromPartial(object: DeepPartial<GetSortRequest>): GetSortRequest;
};
export declare const GetCommentsRequest: {
    $type: "devvit.plugin.redditapi.listings.GetCommentsRequest";
    encode(message: GetCommentsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetCommentsRequest;
    fromJSON(object: any): GetCommentsRequest;
    toJSON(message: GetCommentsRequest): unknown;
    create(base?: DeepPartial<GetCommentsRequest>): GetCommentsRequest;
    fromPartial(object: DeepPartial<GetCommentsRequest>): GetCommentsRequest;
};
export declare const GetByIdRequest: {
    $type: "devvit.plugin.redditapi.listings.GetByIdRequest";
    encode(message: GetByIdRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetByIdRequest;
    fromJSON(object: any): GetByIdRequest;
    toJSON(message: GetByIdRequest): unknown;
    create(base?: DeepPartial<GetByIdRequest>): GetByIdRequest;
    fromPartial(object: DeepPartial<GetByIdRequest>): GetByIdRequest;
};
export declare const GetDuplicatesRequest: {
    $type: "devvit.plugin.redditapi.listings.GetDuplicatesRequest";
    encode(message: GetDuplicatesRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetDuplicatesRequest;
    fromJSON(object: any): GetDuplicatesRequest;
    toJSON(message: GetDuplicatesRequest): unknown;
    create(base?: DeepPartial<GetDuplicatesRequest>): GetDuplicatesRequest;
    fromPartial(object: DeepPartial<GetDuplicatesRequest>): GetDuplicatesRequest;
};
export declare const GetHotRequest: {
    $type: "devvit.plugin.redditapi.listings.GetHotRequest";
    encode(message: GetHotRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetHotRequest;
    fromJSON(object: any): GetHotRequest;
    toJSON(message: GetHotRequest): unknown;
    create(base?: DeepPartial<GetHotRequest>): GetHotRequest;
    fromPartial(object: DeepPartial<GetHotRequest>): GetHotRequest;
};
export declare const GetNewRequest: {
    $type: "devvit.plugin.redditapi.listings.GetNewRequest";
    encode(message: GetNewRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetNewRequest;
    fromJSON(object: any): GetNewRequest;
    toJSON(message: GetNewRequest): unknown;
    create(base?: DeepPartial<GetNewRequest>): GetNewRequest;
    fromPartial(object: DeepPartial<GetNewRequest>): GetNewRequest;
};
export declare const GetRisingRequest: {
    $type: "devvit.plugin.redditapi.listings.GetRisingRequest";
    encode(message: GetRisingRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetRisingRequest;
    fromJSON(object: any): GetRisingRequest;
    toJSON(message: GetRisingRequest): unknown;
    create(base?: DeepPartial<GetRisingRequest>): GetRisingRequest;
    fromPartial(object: DeepPartial<GetRisingRequest>): GetRisingRequest;
};
export declare const ListingResponse: {
    $type: "devvit.plugin.redditapi.listings.ListingResponse";
    encode(message: ListingResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ListingResponse;
    fromJSON(object: any): ListingResponse;
    toJSON(message: ListingResponse): unknown;
    create(base?: DeepPartial<ListingResponse>): ListingResponse;
    fromPartial(object: DeepPartial<ListingResponse>): ListingResponse;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=listings_msg.d.ts.map