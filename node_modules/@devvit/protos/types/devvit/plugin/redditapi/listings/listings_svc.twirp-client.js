import { GetBestRequest, GetByIdRequest, GetCommentsRequest, ListingResponse, GetDuplicatesRequest, GetHotRequest, GetNewRequest, GetRisingRequest, GetSortRequest, } from './listings_msg.js';
import { Listing } from '../common/common_msg.js';
export class ListingsClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.Best.bind(this);
        this.ById.bind(this);
        this.Comments.bind(this);
        this.Duplicates.bind(this);
        this.Hot.bind(this);
        this.New.bind(this);
        this.Rising.bind(this);
        this.Sort.bind(this);
    }
    Best(request) {
        const data = GetBestRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.listings.Listings', 'Best', 'application/json', data);
        return promise.then((data) => Listing.fromJSON(data));
    }
    ById(request) {
        const data = GetByIdRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.listings.Listings', 'ById', 'application/json', data);
        return promise.then((data) => Listing.fromJSON(data));
    }
    Comments(request) {
        const data = GetCommentsRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.listings.Listings', 'Comments', 'application/json', data);
        return promise.then((data) => ListingResponse.fromJSON(data));
    }
    Duplicates(request) {
        const data = GetDuplicatesRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.listings.Listings', 'Duplicates', 'application/json', data);
        return promise.then((data) => ListingResponse.fromJSON(data));
    }
    Hot(request) {
        const data = GetHotRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.listings.Listings', 'Hot', 'application/json', data);
        return promise.then((data) => Listing.fromJSON(data));
    }
    New(request) {
        const data = GetNewRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.listings.Listings', 'New', 'application/json', data);
        return promise.then((data) => Listing.fromJSON(data));
    }
    Rising(request) {
        const data = GetRisingRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.listings.Listings', 'Rising', 'application/json', data);
        return promise.then((data) => Listing.fromJSON(data));
    }
    Sort(request) {
        const data = GetSortRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.listings.Listings', 'Sort', 'application/json', data);
        return promise.then((data) => Listing.fromJSON(data));
    }
}
export class ListingsClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.Best.bind(this);
        this.ById.bind(this);
        this.Comments.bind(this);
        this.Duplicates.bind(this);
        this.Hot.bind(this);
        this.New.bind(this);
        this.Rising.bind(this);
        this.Sort.bind(this);
    }
    Best(request) {
        const data = GetBestRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.listings.Listings', 'Best', 'application/protobuf', data);
        return promise.then((data) => Listing.decode(data));
    }
    ById(request) {
        const data = GetByIdRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.listings.Listings', 'ById', 'application/protobuf', data);
        return promise.then((data) => Listing.decode(data));
    }
    Comments(request) {
        const data = GetCommentsRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.listings.Listings', 'Comments', 'application/protobuf', data);
        return promise.then((data) => ListingResponse.decode(data));
    }
    Duplicates(request) {
        const data = GetDuplicatesRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.listings.Listings', 'Duplicates', 'application/protobuf', data);
        return promise.then((data) => ListingResponse.decode(data));
    }
    Hot(request) {
        const data = GetHotRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.listings.Listings', 'Hot', 'application/protobuf', data);
        return promise.then((data) => Listing.decode(data));
    }
    New(request) {
        const data = GetNewRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.listings.Listings', 'New', 'application/protobuf', data);
        return promise.then((data) => Listing.decode(data));
    }
    Rising(request) {
        const data = GetRisingRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.listings.Listings', 'Rising', 'application/protobuf', data);
        return promise.then((data) => Listing.decode(data));
    }
    Sort(request) {
        const data = GetSortRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.listings.Listings', 'Sort', 'application/protobuf', data);
        return promise.then((data) => Listing.decode(data));
    }
}
