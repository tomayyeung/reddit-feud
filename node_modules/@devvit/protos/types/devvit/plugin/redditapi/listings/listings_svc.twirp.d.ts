/// <reference types="node" resolution-mode="require"/>
import { TwirpContext, TwirpServer } from 'twirp-ts';
import { GetBestRequest, GetByIdRequest, GetCommentsRequest, ListingResponse, GetDuplicatesRequest, GetHotRequest, GetNewRequest, GetRisingRequest, GetSortRequest } from './listings_msg.js';
import { Listing } from '../common/common_msg.js';
export interface ListingsTwirp<T extends TwirpContext = TwirpContext> {
    Best(ctx: T, request: GetBestRequest): Promise<Listing>;
    ById(ctx: T, request: GetByIdRequest): Promise<Listing>;
    Comments(ctx: T, request: GetCommentsRequest): Promise<ListingResponse>;
    Duplicates(ctx: T, request: GetDuplicatesRequest): Promise<ListingResponse>;
    Hot(ctx: T, request: GetHotRequest): Promise<Listing>;
    New(ctx: T, request: GetNewRequest): Promise<Listing>;
    Rising(ctx: T, request: GetRisingRequest): Promise<Listing>;
    Sort(ctx: T, request: GetSortRequest): Promise<Listing>;
}
export declare enum ListingsMethod {
    Best = "Best",
    ById = "ById",
    Comments = "Comments",
    Duplicates = "Duplicates",
    Hot = "Hot",
    New = "New",
    Rising = "Rising",
    Sort = "Sort"
}
export declare const ListingsMethodList: ListingsMethod[];
export declare function createListingsServer<T extends TwirpContext = TwirpContext>(service: ListingsTwirp<T>): TwirpServer<ListingsTwirp<TwirpContext<import("http").IncomingMessage, import("http").ServerResponse<import("http").IncomingMessage>>>, T>;
//# sourceMappingURL=listings_svc.twirp.d.ts.map