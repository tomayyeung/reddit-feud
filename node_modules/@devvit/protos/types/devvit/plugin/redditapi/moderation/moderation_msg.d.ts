/**
 * #moderation_msg.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
/** Requests */
export interface AboutLogRequest {
    /** a modaction thing uuid */
    after?: string | undefined;
    /** a modaction thing uuid */
    before?: string | undefined;
    count?: number | undefined;
    /** the maximum number of items desired (default: 25, maximum: 500) */
    limit?: number | undefined;
    /** (optional) the string all */
    show?: string | undefined;
    /** (optional) a moderator filter */
    mod?: string | undefined;
    /**
     * one of (banuser, unbanuser, spamlink, removelink, approvelink, spamcomment, removecomment,
     * approvecomment, addmoderator, showcomment, invitemoderator, uninvitemoderator,
     * acceptmoderatorinvite, removemoderator, addcontributor, removecontributor, editsettings,
     * editflair, distinguish, marknsfw, wikibanned, wikicontributor, wikiunbanned, wikipagelisted,
     * removewikicontributor, wikirevise, wikipermlevel, ignorereports, unignorereports,
     * setpermissions, setsuggestedsort, sticky, unsticky, setcontestmode, unsetcontestmode, lock,
     * unlock, muteuser, unmuteuser, createrule, editrule, reorderrules, deleterule, spoiler,
     * unspoiler, modmail_enrollment, community_styling, community_widgets, markoriginalcontent,
     * collections, events, hidden_award, add_community_topics, remove_community_topics,
     * create_scheduled_post, edit_scheduled_post, delete_scheduled_post, submit_scheduled_post,
     * edit_post_requirements, invitesubscriber, submit_content_rating_survey,
     * adjust_post_crowd_control_level, enable_post_crowd_control_filter,
     * disable_post_crowd_control_filter, deleteoverriddenclassification, overrideclassification,
     * reordermoderators, snoozereports, unsnoozereports, addnote, deletenote, addremovalreason,
     * createremovalreason, updateremovalreason, deleteremovalreason)
     */
    type?: string | undefined;
    /** subreddit name without the r/ */
    subreddit?: string | undefined;
}
export interface AboutLocationRequest {
    /** thing id (e.g t1_15bfi0) */
    after?: string | undefined;
    /** thing id (e.g t1_15bfi0) */
    before?: string | undefined;
    count?: number | undefined;
    /** the maximum number of items desired (default: 25, maximum: 100) */
    limit?: number | undefined;
    location: string;
    /** one of (links, comments, chat_comments) */
    only?: string | undefined;
    /** (optional) the string all */
    show?: string | undefined;
    /** subreddit name without the r/ */
    subreddit: string;
}
export interface AcceptModeratorInviteRequest {
    /** subreddit name without the r/ */
    subreddit: string;
}
export interface BasicModerationIdRequest {
    id: string;
}
export interface DistinguishRequest {
    /** one of (yes, no, admin, special) */
    how: string;
    /** thing id (e.g t1_15bfi0) */
    id: string;
    /** stick the distinguished comment to the top of all comments threads */
    sticky: boolean;
}
export interface RemoveRequest {
    /** thing id (e.g t1_15bfi0) */
    id: string;
    /** is it spam? */
    spam: boolean;
}
export interface SnoozeReportsRequest {
    /** thing id (e.g t1_15bfi0) */
    id: string;
    /** report reason */
    reason: string;
}
export interface UpdateCrowdControlLevelRequest {
    /** thing id (e.g t1_15bfi0) */
    id: string;
    /** an integer between 0 and 3 */
    level: number;
}
export interface StylesheetRequest {
    /** subreddit name without the r/ */
    subreddit: string;
}
/** Responses */
export interface AboutLogResponse {
    kind: string;
    data?: AboutLogResponse_AboutLogListing | undefined;
}
export interface AboutLogResponse_LogObject {
    description?: string | undefined;
    targetBody?: string | undefined;
    modId36?: string | undefined;
    createdUtc?: number | undefined;
    subreddit?: string | undefined;
    targetTitle?: string | undefined;
    targetPermalink?: string | undefined;
    subredditNamePrefixed?: string | undefined;
    details?: string | undefined;
    action?: string | undefined;
    targetAuthor?: string | undefined;
    targetFullname?: string | undefined;
    srId36?: string | undefined;
    id?: string | undefined;
    mod?: string | undefined;
}
export interface AboutLogResponse_AboutLogListing {
    after?: string | undefined;
    before?: string | undefined;
    children: AboutLogResponse_AboutLogListing_WrappedLogObject[];
    dist?: number | undefined;
}
export interface AboutLogResponse_AboutLogListing_WrappedLogObject {
    kind: string;
    data?: AboutLogResponse_LogObject | undefined;
}
export declare const AboutLogRequest: {
    $type: "devvit.plugin.redditapi.moderation.AboutLogRequest";
    encode(message: AboutLogRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AboutLogRequest;
    fromJSON(object: any): AboutLogRequest;
    toJSON(message: AboutLogRequest): unknown;
    create(base?: DeepPartial<AboutLogRequest>): AboutLogRequest;
    fromPartial(object: DeepPartial<AboutLogRequest>): AboutLogRequest;
};
export declare const AboutLocationRequest: {
    $type: "devvit.plugin.redditapi.moderation.AboutLocationRequest";
    encode(message: AboutLocationRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AboutLocationRequest;
    fromJSON(object: any): AboutLocationRequest;
    toJSON(message: AboutLocationRequest): unknown;
    create(base?: DeepPartial<AboutLocationRequest>): AboutLocationRequest;
    fromPartial(object: DeepPartial<AboutLocationRequest>): AboutLocationRequest;
};
export declare const AcceptModeratorInviteRequest: {
    $type: "devvit.plugin.redditapi.moderation.AcceptModeratorInviteRequest";
    encode(message: AcceptModeratorInviteRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AcceptModeratorInviteRequest;
    fromJSON(object: any): AcceptModeratorInviteRequest;
    toJSON(message: AcceptModeratorInviteRequest): unknown;
    create(base?: DeepPartial<AcceptModeratorInviteRequest>): AcceptModeratorInviteRequest;
    fromPartial(object: DeepPartial<AcceptModeratorInviteRequest>): AcceptModeratorInviteRequest;
};
export declare const BasicModerationIdRequest: {
    $type: "devvit.plugin.redditapi.moderation.BasicModerationIdRequest";
    encode(message: BasicModerationIdRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BasicModerationIdRequest;
    fromJSON(object: any): BasicModerationIdRequest;
    toJSON(message: BasicModerationIdRequest): unknown;
    create(base?: DeepPartial<BasicModerationIdRequest>): BasicModerationIdRequest;
    fromPartial(object: DeepPartial<BasicModerationIdRequest>): BasicModerationIdRequest;
};
export declare const DistinguishRequest: {
    $type: "devvit.plugin.redditapi.moderation.DistinguishRequest";
    encode(message: DistinguishRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DistinguishRequest;
    fromJSON(object: any): DistinguishRequest;
    toJSON(message: DistinguishRequest): unknown;
    create(base?: DeepPartial<DistinguishRequest>): DistinguishRequest;
    fromPartial(object: DeepPartial<DistinguishRequest>): DistinguishRequest;
};
export declare const RemoveRequest: {
    $type: "devvit.plugin.redditapi.moderation.RemoveRequest";
    encode(message: RemoveRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RemoveRequest;
    fromJSON(object: any): RemoveRequest;
    toJSON(message: RemoveRequest): unknown;
    create(base?: DeepPartial<RemoveRequest>): RemoveRequest;
    fromPartial(object: DeepPartial<RemoveRequest>): RemoveRequest;
};
export declare const SnoozeReportsRequest: {
    $type: "devvit.plugin.redditapi.moderation.SnoozeReportsRequest";
    encode(message: SnoozeReportsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SnoozeReportsRequest;
    fromJSON(object: any): SnoozeReportsRequest;
    toJSON(message: SnoozeReportsRequest): unknown;
    create(base?: DeepPartial<SnoozeReportsRequest>): SnoozeReportsRequest;
    fromPartial(object: DeepPartial<SnoozeReportsRequest>): SnoozeReportsRequest;
};
export declare const UpdateCrowdControlLevelRequest: {
    $type: "devvit.plugin.redditapi.moderation.UpdateCrowdControlLevelRequest";
    encode(message: UpdateCrowdControlLevelRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UpdateCrowdControlLevelRequest;
    fromJSON(object: any): UpdateCrowdControlLevelRequest;
    toJSON(message: UpdateCrowdControlLevelRequest): unknown;
    create(base?: DeepPartial<UpdateCrowdControlLevelRequest>): UpdateCrowdControlLevelRequest;
    fromPartial(object: DeepPartial<UpdateCrowdControlLevelRequest>): UpdateCrowdControlLevelRequest;
};
export declare const StylesheetRequest: {
    $type: "devvit.plugin.redditapi.moderation.StylesheetRequest";
    encode(message: StylesheetRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): StylesheetRequest;
    fromJSON(object: any): StylesheetRequest;
    toJSON(message: StylesheetRequest): unknown;
    create(base?: DeepPartial<StylesheetRequest>): StylesheetRequest;
    fromPartial(object: DeepPartial<StylesheetRequest>): StylesheetRequest;
};
export declare const AboutLogResponse: {
    $type: "devvit.plugin.redditapi.moderation.AboutLogResponse";
    encode(message: AboutLogResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AboutLogResponse;
    fromJSON(object: any): AboutLogResponse;
    toJSON(message: AboutLogResponse): unknown;
    create(base?: DeepPartial<AboutLogResponse>): AboutLogResponse;
    fromPartial(object: DeepPartial<AboutLogResponse>): AboutLogResponse;
};
export declare const AboutLogResponse_LogObject: {
    $type: "devvit.plugin.redditapi.moderation.AboutLogResponse.LogObject";
    encode(message: AboutLogResponse_LogObject, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AboutLogResponse_LogObject;
    fromJSON(object: any): AboutLogResponse_LogObject;
    toJSON(message: AboutLogResponse_LogObject): unknown;
    create(base?: DeepPartial<AboutLogResponse_LogObject>): AboutLogResponse_LogObject;
    fromPartial(object: DeepPartial<AboutLogResponse_LogObject>): AboutLogResponse_LogObject;
};
export declare const AboutLogResponse_AboutLogListing: {
    $type: "devvit.plugin.redditapi.moderation.AboutLogResponse.AboutLogListing";
    encode(message: AboutLogResponse_AboutLogListing, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AboutLogResponse_AboutLogListing;
    fromJSON(object: any): AboutLogResponse_AboutLogListing;
    toJSON(message: AboutLogResponse_AboutLogListing): unknown;
    create(base?: DeepPartial<AboutLogResponse_AboutLogListing>): AboutLogResponse_AboutLogListing;
    fromPartial(object: DeepPartial<AboutLogResponse_AboutLogListing>): AboutLogResponse_AboutLogListing;
};
export declare const AboutLogResponse_AboutLogListing_WrappedLogObject: {
    $type: "devvit.plugin.redditapi.moderation.AboutLogResponse.AboutLogListing.WrappedLogObject";
    encode(message: AboutLogResponse_AboutLogListing_WrappedLogObject, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AboutLogResponse_AboutLogListing_WrappedLogObject;
    fromJSON(object: any): AboutLogResponse_AboutLogListing_WrappedLogObject;
    toJSON(message: AboutLogResponse_AboutLogListing_WrappedLogObject): unknown;
    create(base?: DeepPartial<AboutLogResponse_AboutLogListing_WrappedLogObject>): AboutLogResponse_AboutLogListing_WrappedLogObject;
    fromPartial(object: DeepPartial<AboutLogResponse_AboutLogListing_WrappedLogObject>): AboutLogResponse_AboutLogListing_WrappedLogObject;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=moderation_msg.d.ts.map