import { AboutLogRequest, AboutLogResponse, AboutLocationRequest, AcceptModeratorInviteRequest, BasicModerationIdRequest, DistinguishRequest, RemoveRequest, SnoozeReportsRequest, UpdateCrowdControlLevelRequest, StylesheetRequest } from './moderation_msg.js';
import { Listing, JsonStatus, JsonRedditObjects } from '../common/common_msg.js';
import { Empty } from '../../../../google/protobuf/empty.js';
import { StringValue } from '../../../../google/protobuf/wrappers.js';
interface Rpc {
    request(service: string, method: string, contentType: 'application/json' | 'application/protobuf', data: object | Uint8Array): Promise<object | Uint8Array>;
}
export interface ModerationClient {
    AboutLog(request: AboutLogRequest): Promise<AboutLogResponse>;
    AboutLocation(request: AboutLocationRequest): Promise<Listing>;
    AboutReports(request: AboutLocationRequest): Promise<Listing>;
    AboutSpam(request: AboutLocationRequest): Promise<Listing>;
    AboutModqueue(request: AboutLocationRequest): Promise<Listing>;
    AboutUnmoderated(request: AboutLocationRequest): Promise<Listing>;
    AboutEdited(request: AboutLocationRequest): Promise<Listing>;
    AcceptModeratorInvite(request: AcceptModeratorInviteRequest): Promise<JsonStatus>;
    Approve(request: BasicModerationIdRequest): Promise<Empty>;
    Distinguish(request: DistinguishRequest): Promise<JsonRedditObjects>;
    IgnoreReports(request: BasicModerationIdRequest): Promise<Empty>;
    LeaveContributor(request: BasicModerationIdRequest): Promise<Empty>;
    LeaveModerator(request: BasicModerationIdRequest): Promise<Empty>;
    MuteMessageAuthor(request: BasicModerationIdRequest): Promise<Empty>;
    Remove(request: RemoveRequest): Promise<Empty>;
    ShowComment(request: BasicModerationIdRequest): Promise<Empty>;
    SnoozeReports(request: SnoozeReportsRequest): Promise<Empty>;
    UnignoreReports(request: BasicModerationIdRequest): Promise<Empty>;
    UnmuteMessageAuthor(request: BasicModerationIdRequest): Promise<Empty>;
    UnsnoozeReports(request: SnoozeReportsRequest): Promise<Empty>;
    UpdateCrowdControlLevel(request: UpdateCrowdControlLevelRequest): Promise<Empty>;
    Stylesheet(request: StylesheetRequest): Promise<StringValue>;
}
export declare class ModerationClientJSON implements ModerationClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    AboutLog(request: AboutLogRequest): Promise<AboutLogResponse>;
    AboutLocation(request: AboutLocationRequest): Promise<Listing>;
    AboutReports(request: AboutLocationRequest): Promise<Listing>;
    AboutSpam(request: AboutLocationRequest): Promise<Listing>;
    AboutModqueue(request: AboutLocationRequest): Promise<Listing>;
    AboutUnmoderated(request: AboutLocationRequest): Promise<Listing>;
    AboutEdited(request: AboutLocationRequest): Promise<Listing>;
    AcceptModeratorInvite(request: AcceptModeratorInviteRequest): Promise<JsonStatus>;
    Approve(request: BasicModerationIdRequest): Promise<Empty>;
    Distinguish(request: DistinguishRequest): Promise<JsonRedditObjects>;
    IgnoreReports(request: BasicModerationIdRequest): Promise<Empty>;
    LeaveContributor(request: BasicModerationIdRequest): Promise<Empty>;
    LeaveModerator(request: BasicModerationIdRequest): Promise<Empty>;
    MuteMessageAuthor(request: BasicModerationIdRequest): Promise<Empty>;
    Remove(request: RemoveRequest): Promise<Empty>;
    ShowComment(request: BasicModerationIdRequest): Promise<Empty>;
    SnoozeReports(request: SnoozeReportsRequest): Promise<Empty>;
    UnignoreReports(request: BasicModerationIdRequest): Promise<Empty>;
    UnmuteMessageAuthor(request: BasicModerationIdRequest): Promise<Empty>;
    UnsnoozeReports(request: SnoozeReportsRequest): Promise<Empty>;
    UpdateCrowdControlLevel(request: UpdateCrowdControlLevelRequest): Promise<Empty>;
    Stylesheet(request: StylesheetRequest): Promise<StringValue>;
}
export declare class ModerationClientProtobuf implements ModerationClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    AboutLog(request: AboutLogRequest): Promise<AboutLogResponse>;
    AboutLocation(request: AboutLocationRequest): Promise<Listing>;
    AboutReports(request: AboutLocationRequest): Promise<Listing>;
    AboutSpam(request: AboutLocationRequest): Promise<Listing>;
    AboutModqueue(request: AboutLocationRequest): Promise<Listing>;
    AboutUnmoderated(request: AboutLocationRequest): Promise<Listing>;
    AboutEdited(request: AboutLocationRequest): Promise<Listing>;
    AcceptModeratorInvite(request: AcceptModeratorInviteRequest): Promise<JsonStatus>;
    Approve(request: BasicModerationIdRequest): Promise<Empty>;
    Distinguish(request: DistinguishRequest): Promise<JsonRedditObjects>;
    IgnoreReports(request: BasicModerationIdRequest): Promise<Empty>;
    LeaveContributor(request: BasicModerationIdRequest): Promise<Empty>;
    LeaveModerator(request: BasicModerationIdRequest): Promise<Empty>;
    MuteMessageAuthor(request: BasicModerationIdRequest): Promise<Empty>;
    Remove(request: RemoveRequest): Promise<Empty>;
    ShowComment(request: BasicModerationIdRequest): Promise<Empty>;
    SnoozeReports(request: SnoozeReportsRequest): Promise<Empty>;
    UnignoreReports(request: BasicModerationIdRequest): Promise<Empty>;
    UnmuteMessageAuthor(request: BasicModerationIdRequest): Promise<Empty>;
    UnsnoozeReports(request: SnoozeReportsRequest): Promise<Empty>;
    UpdateCrowdControlLevel(request: UpdateCrowdControlLevelRequest): Promise<Empty>;
    Stylesheet(request: StylesheetRequest): Promise<StringValue>;
}
export {};
//# sourceMappingURL=moderation_svc.twirp-client.d.ts.map