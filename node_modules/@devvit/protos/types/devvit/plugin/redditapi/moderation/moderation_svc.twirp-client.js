import { AboutLogRequest, AboutLogResponse, AboutLocationRequest, AcceptModeratorInviteRequest, BasicModerationIdRequest, DistinguishRequest, RemoveRequest, SnoozeReportsRequest, UpdateCrowdControlLevelRequest, StylesheetRequest, } from './moderation_msg.js';
import { Listing, JsonStatus, JsonRedditObjects } from '../common/common_msg.js';
import { Empty } from '../../../../google/protobuf/empty.js';
import { StringValue } from '../../../../google/protobuf/wrappers.js';
export class ModerationClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.AboutLog.bind(this);
        this.AboutLocation.bind(this);
        this.AboutReports.bind(this);
        this.AboutSpam.bind(this);
        this.AboutModqueue.bind(this);
        this.AboutUnmoderated.bind(this);
        this.AboutEdited.bind(this);
        this.AcceptModeratorInvite.bind(this);
        this.Approve.bind(this);
        this.Distinguish.bind(this);
        this.IgnoreReports.bind(this);
        this.LeaveContributor.bind(this);
        this.LeaveModerator.bind(this);
        this.MuteMessageAuthor.bind(this);
        this.Remove.bind(this);
        this.ShowComment.bind(this);
        this.SnoozeReports.bind(this);
        this.UnignoreReports.bind(this);
        this.UnmuteMessageAuthor.bind(this);
        this.UnsnoozeReports.bind(this);
        this.UpdateCrowdControlLevel.bind(this);
        this.Stylesheet.bind(this);
    }
    AboutLog(request) {
        const data = AboutLogRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.moderation.Moderation', 'AboutLog', 'application/json', data);
        return promise.then((data) => AboutLogResponse.fromJSON(data));
    }
    AboutLocation(request) {
        const data = AboutLocationRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.moderation.Moderation', 'AboutLocation', 'application/json', data);
        return promise.then((data) => Listing.fromJSON(data));
    }
    AboutReports(request) {
        const data = AboutLocationRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.moderation.Moderation', 'AboutReports', 'application/json', data);
        return promise.then((data) => Listing.fromJSON(data));
    }
    AboutSpam(request) {
        const data = AboutLocationRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.moderation.Moderation', 'AboutSpam', 'application/json', data);
        return promise.then((data) => Listing.fromJSON(data));
    }
    AboutModqueue(request) {
        const data = AboutLocationRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.moderation.Moderation', 'AboutModqueue', 'application/json', data);
        return promise.then((data) => Listing.fromJSON(data));
    }
    AboutUnmoderated(request) {
        const data = AboutLocationRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.moderation.Moderation', 'AboutUnmoderated', 'application/json', data);
        return promise.then((data) => Listing.fromJSON(data));
    }
    AboutEdited(request) {
        const data = AboutLocationRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.moderation.Moderation', 'AboutEdited', 'application/json', data);
        return promise.then((data) => Listing.fromJSON(data));
    }
    AcceptModeratorInvite(request) {
        const data = AcceptModeratorInviteRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.moderation.Moderation', 'AcceptModeratorInvite', 'application/json', data);
        return promise.then((data) => JsonStatus.fromJSON(data));
    }
    Approve(request) {
        const data = BasicModerationIdRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.moderation.Moderation', 'Approve', 'application/json', data);
        return promise.then((data) => Empty.fromJSON(data));
    }
    Distinguish(request) {
        const data = DistinguishRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.moderation.Moderation', 'Distinguish', 'application/json', data);
        return promise.then((data) => JsonRedditObjects.fromJSON(data));
    }
    IgnoreReports(request) {
        const data = BasicModerationIdRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.moderation.Moderation', 'IgnoreReports', 'application/json', data);
        return promise.then((data) => Empty.fromJSON(data));
    }
    LeaveContributor(request) {
        const data = BasicModerationIdRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.moderation.Moderation', 'LeaveContributor', 'application/json', data);
        return promise.then((data) => Empty.fromJSON(data));
    }
    LeaveModerator(request) {
        const data = BasicModerationIdRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.moderation.Moderation', 'LeaveModerator', 'application/json', data);
        return promise.then((data) => Empty.fromJSON(data));
    }
    MuteMessageAuthor(request) {
        const data = BasicModerationIdRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.moderation.Moderation', 'MuteMessageAuthor', 'application/json', data);
        return promise.then((data) => Empty.fromJSON(data));
    }
    Remove(request) {
        const data = RemoveRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.moderation.Moderation', 'Remove', 'application/json', data);
        return promise.then((data) => Empty.fromJSON(data));
    }
    ShowComment(request) {
        const data = BasicModerationIdRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.moderation.Moderation', 'ShowComment', 'application/json', data);
        return promise.then((data) => Empty.fromJSON(data));
    }
    SnoozeReports(request) {
        const data = SnoozeReportsRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.moderation.Moderation', 'SnoozeReports', 'application/json', data);
        return promise.then((data) => Empty.fromJSON(data));
    }
    UnignoreReports(request) {
        const data = BasicModerationIdRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.moderation.Moderation', 'UnignoreReports', 'application/json', data);
        return promise.then((data) => Empty.fromJSON(data));
    }
    UnmuteMessageAuthor(request) {
        const data = BasicModerationIdRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.moderation.Moderation', 'UnmuteMessageAuthor', 'application/json', data);
        return promise.then((data) => Empty.fromJSON(data));
    }
    UnsnoozeReports(request) {
        const data = SnoozeReportsRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.moderation.Moderation', 'UnsnoozeReports', 'application/json', data);
        return promise.then((data) => Empty.fromJSON(data));
    }
    UpdateCrowdControlLevel(request) {
        const data = UpdateCrowdControlLevelRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.moderation.Moderation', 'UpdateCrowdControlLevel', 'application/json', data);
        return promise.then((data) => Empty.fromJSON(data));
    }
    Stylesheet(request) {
        const data = StylesheetRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.moderation.Moderation', 'Stylesheet', 'application/json', data);
        return promise.then((data) => StringValue.fromJSON(data));
    }
}
export class ModerationClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.AboutLog.bind(this);
        this.AboutLocation.bind(this);
        this.AboutReports.bind(this);
        this.AboutSpam.bind(this);
        this.AboutModqueue.bind(this);
        this.AboutUnmoderated.bind(this);
        this.AboutEdited.bind(this);
        this.AcceptModeratorInvite.bind(this);
        this.Approve.bind(this);
        this.Distinguish.bind(this);
        this.IgnoreReports.bind(this);
        this.LeaveContributor.bind(this);
        this.LeaveModerator.bind(this);
        this.MuteMessageAuthor.bind(this);
        this.Remove.bind(this);
        this.ShowComment.bind(this);
        this.SnoozeReports.bind(this);
        this.UnignoreReports.bind(this);
        this.UnmuteMessageAuthor.bind(this);
        this.UnsnoozeReports.bind(this);
        this.UpdateCrowdControlLevel.bind(this);
        this.Stylesheet.bind(this);
    }
    AboutLog(request) {
        const data = AboutLogRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.moderation.Moderation', 'AboutLog', 'application/protobuf', data);
        return promise.then((data) => AboutLogResponse.decode(data));
    }
    AboutLocation(request) {
        const data = AboutLocationRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.moderation.Moderation', 'AboutLocation', 'application/protobuf', data);
        return promise.then((data) => Listing.decode(data));
    }
    AboutReports(request) {
        const data = AboutLocationRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.moderation.Moderation', 'AboutReports', 'application/protobuf', data);
        return promise.then((data) => Listing.decode(data));
    }
    AboutSpam(request) {
        const data = AboutLocationRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.moderation.Moderation', 'AboutSpam', 'application/protobuf', data);
        return promise.then((data) => Listing.decode(data));
    }
    AboutModqueue(request) {
        const data = AboutLocationRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.moderation.Moderation', 'AboutModqueue', 'application/protobuf', data);
        return promise.then((data) => Listing.decode(data));
    }
    AboutUnmoderated(request) {
        const data = AboutLocationRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.moderation.Moderation', 'AboutUnmoderated', 'application/protobuf', data);
        return promise.then((data) => Listing.decode(data));
    }
    AboutEdited(request) {
        const data = AboutLocationRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.moderation.Moderation', 'AboutEdited', 'application/protobuf', data);
        return promise.then((data) => Listing.decode(data));
    }
    AcceptModeratorInvite(request) {
        const data = AcceptModeratorInviteRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.moderation.Moderation', 'AcceptModeratorInvite', 'application/protobuf', data);
        return promise.then((data) => JsonStatus.decode(data));
    }
    Approve(request) {
        const data = BasicModerationIdRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.moderation.Moderation', 'Approve', 'application/protobuf', data);
        return promise.then((data) => Empty.decode(data));
    }
    Distinguish(request) {
        const data = DistinguishRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.moderation.Moderation', 'Distinguish', 'application/protobuf', data);
        return promise.then((data) => JsonRedditObjects.decode(data));
    }
    IgnoreReports(request) {
        const data = BasicModerationIdRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.moderation.Moderation', 'IgnoreReports', 'application/protobuf', data);
        return promise.then((data) => Empty.decode(data));
    }
    LeaveContributor(request) {
        const data = BasicModerationIdRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.moderation.Moderation', 'LeaveContributor', 'application/protobuf', data);
        return promise.then((data) => Empty.decode(data));
    }
    LeaveModerator(request) {
        const data = BasicModerationIdRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.moderation.Moderation', 'LeaveModerator', 'application/protobuf', data);
        return promise.then((data) => Empty.decode(data));
    }
    MuteMessageAuthor(request) {
        const data = BasicModerationIdRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.moderation.Moderation', 'MuteMessageAuthor', 'application/protobuf', data);
        return promise.then((data) => Empty.decode(data));
    }
    Remove(request) {
        const data = RemoveRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.moderation.Moderation', 'Remove', 'application/protobuf', data);
        return promise.then((data) => Empty.decode(data));
    }
    ShowComment(request) {
        const data = BasicModerationIdRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.moderation.Moderation', 'ShowComment', 'application/protobuf', data);
        return promise.then((data) => Empty.decode(data));
    }
    SnoozeReports(request) {
        const data = SnoozeReportsRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.moderation.Moderation', 'SnoozeReports', 'application/protobuf', data);
        return promise.then((data) => Empty.decode(data));
    }
    UnignoreReports(request) {
        const data = BasicModerationIdRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.moderation.Moderation', 'UnignoreReports', 'application/protobuf', data);
        return promise.then((data) => Empty.decode(data));
    }
    UnmuteMessageAuthor(request) {
        const data = BasicModerationIdRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.moderation.Moderation', 'UnmuteMessageAuthor', 'application/protobuf', data);
        return promise.then((data) => Empty.decode(data));
    }
    UnsnoozeReports(request) {
        const data = SnoozeReportsRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.moderation.Moderation', 'UnsnoozeReports', 'application/protobuf', data);
        return promise.then((data) => Empty.decode(data));
    }
    UpdateCrowdControlLevel(request) {
        const data = UpdateCrowdControlLevelRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.moderation.Moderation', 'UpdateCrowdControlLevel', 'application/protobuf', data);
        return promise.then((data) => Empty.decode(data));
    }
    Stylesheet(request) {
        const data = StylesheetRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.moderation.Moderation', 'Stylesheet', 'application/protobuf', data);
        return promise.then((data) => StringValue.decode(data));
    }
}
