/// <reference types="node" resolution-mode="require"/>
import { TwirpContext, TwirpServer } from 'twirp-ts';
import { AboutLogRequest, AboutLogResponse, AboutLocationRequest, AcceptModeratorInviteRequest, BasicModerationIdRequest, DistinguishRequest, RemoveRequest, SnoozeReportsRequest, UpdateCrowdControlLevelRequest, StylesheetRequest } from './moderation_msg.js';
import { Listing, JsonStatus, JsonRedditObjects } from '../common/common_msg.js';
import { Empty } from '../../../../google/protobuf/empty.js';
import { StringValue } from '../../../../google/protobuf/wrappers.js';
export interface ModerationTwirp<T extends TwirpContext = TwirpContext> {
    AboutLog(ctx: T, request: AboutLogRequest): Promise<AboutLogResponse>;
    AboutLocation(ctx: T, request: AboutLocationRequest): Promise<Listing>;
    AboutReports(ctx: T, request: AboutLocationRequest): Promise<Listing>;
    AboutSpam(ctx: T, request: AboutLocationRequest): Promise<Listing>;
    AboutModqueue(ctx: T, request: AboutLocationRequest): Promise<Listing>;
    AboutUnmoderated(ctx: T, request: AboutLocationRequest): Promise<Listing>;
    AboutEdited(ctx: T, request: AboutLocationRequest): Promise<Listing>;
    AcceptModeratorInvite(ctx: T, request: AcceptModeratorInviteRequest): Promise<JsonStatus>;
    Approve(ctx: T, request: BasicModerationIdRequest): Promise<Empty>;
    Distinguish(ctx: T, request: DistinguishRequest): Promise<JsonRedditObjects>;
    IgnoreReports(ctx: T, request: BasicModerationIdRequest): Promise<Empty>;
    LeaveContributor(ctx: T, request: BasicModerationIdRequest): Promise<Empty>;
    LeaveModerator(ctx: T, request: BasicModerationIdRequest): Promise<Empty>;
    MuteMessageAuthor(ctx: T, request: BasicModerationIdRequest): Promise<Empty>;
    Remove(ctx: T, request: RemoveRequest): Promise<Empty>;
    ShowComment(ctx: T, request: BasicModerationIdRequest): Promise<Empty>;
    SnoozeReports(ctx: T, request: SnoozeReportsRequest): Promise<Empty>;
    UnignoreReports(ctx: T, request: BasicModerationIdRequest): Promise<Empty>;
    UnmuteMessageAuthor(ctx: T, request: BasicModerationIdRequest): Promise<Empty>;
    UnsnoozeReports(ctx: T, request: SnoozeReportsRequest): Promise<Empty>;
    UpdateCrowdControlLevel(ctx: T, request: UpdateCrowdControlLevelRequest): Promise<Empty>;
    Stylesheet(ctx: T, request: StylesheetRequest): Promise<StringValue>;
}
export declare enum ModerationMethod {
    AboutLog = "AboutLog",
    AboutLocation = "AboutLocation",
    AboutReports = "AboutReports",
    AboutSpam = "AboutSpam",
    AboutModqueue = "AboutModqueue",
    AboutUnmoderated = "AboutUnmoderated",
    AboutEdited = "AboutEdited",
    AcceptModeratorInvite = "AcceptModeratorInvite",
    Approve = "Approve",
    Distinguish = "Distinguish",
    IgnoreReports = "IgnoreReports",
    LeaveContributor = "LeaveContributor",
    LeaveModerator = "LeaveModerator",
    MuteMessageAuthor = "MuteMessageAuthor",
    Remove = "Remove",
    ShowComment = "ShowComment",
    SnoozeReports = "SnoozeReports",
    UnignoreReports = "UnignoreReports",
    UnmuteMessageAuthor = "UnmuteMessageAuthor",
    UnsnoozeReports = "UnsnoozeReports",
    UpdateCrowdControlLevel = "UpdateCrowdControlLevel",
    Stylesheet = "Stylesheet"
}
export declare const ModerationMethodList: ModerationMethod[];
export declare function createModerationServer<T extends TwirpContext = TwirpContext>(service: ModerationTwirp<T>): TwirpServer<ModerationTwirp<TwirpContext<import("http").IncomingMessage, import("http").ServerResponse<import("http").IncomingMessage>>>, T>;
//# sourceMappingURL=moderation_svc.twirp.d.ts.map