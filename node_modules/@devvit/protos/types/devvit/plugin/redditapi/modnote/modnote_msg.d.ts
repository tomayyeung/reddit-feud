/**
 * #modnote_msg.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
/** Requests */
export interface DeleteNotesRequest {
    /** subreddit name without the r/ */
    subreddit: string;
    /** a unique ID for the note to be deleted (should have a ModNote_ prefix) */
    noteId: string;
    /** account username */
    user: string;
}
export interface GetNotesRequest {
    /** subreddit name without the r/ */
    subreddit: string;
    /** (optional) an encoded string used for pagination with mod notes */
    before?: string | undefined;
    /**
     * (optional) one of (NOTE, APPROVAL, REMOVAL, BAN, MUTE, INVITE, SPAM, CONTENT_CHANGE,
     * MOD_ACTION, ALL), to be used for querying specific types of mod notes (default: all)
     */
    filter?: string | undefined;
    /** (optional) the number of mod notes to return in the response payload (default: 25, max: 100) */
    limit?: number | undefined;
    /** account username */
    user: string;
}
export interface PostNotesRequest {
    subreddit: string;
    /** (optional) one of (BOT_BAN, PERMA_BAN, BAN, ABUSE_WARNING, SPAM_WARNING, SPAM_WATCH, SOLID_CONTRIBUTOR, HELPFUL_USER) */
    label?: string | undefined;
    /** Content of the note, should be a string with a maximum character limit of 250 */
    note: string;
    /** (optional) a fullname of a comment or post (should have either a t1 or t3 prefix) */
    redditId?: string | undefined;
    /** account username */
    user: string;
}
export interface RecentNotesRequest {
    /** a comma delimited list of subreddits by name (e.g. 'pics,worldnews') */
    subreddits: string;
    /** a comma delimited list of usernames (e.g. 'foo,bar') */
    users: string;
}
export interface PostRemovalNoteRequest {
    /** list of thing ids */
    itemIds: string[];
    /** id of a Removal Reason - you can leave this as an empty string if you don't have one */
    reasonId: string;
    /** the reason for removal (maximum 100 characters) */
    modNote?: string | undefined;
}
/** Responses */
export interface ModNotesResponse {
    modNotes: ModNoteObject[];
    startCursor?: string | undefined;
    endCursor?: string | undefined;
    hasNextPage?: boolean | undefined;
}
export interface DeleteNotesResponse {
    deleted?: boolean | undefined;
}
export interface ModNoteObject {
    subredditId?: string | undefined;
    operatorId?: string | undefined;
    modActionData?: ModNoteObject_ModActionData | undefined;
    userNoteData?: ModNoteObject_UserNoteData | undefined;
    subreddit?: string | undefined;
    user?: string | undefined;
    operator?: string | undefined;
    id?: string | undefined;
    userId?: string | undefined;
    createdAt?: number | undefined;
    cursor?: string | undefined;
    type?: string | undefined;
}
export interface ModNoteObject_ModActionData {
    action?: string | undefined;
    redditId?: string | undefined;
    details?: string | undefined;
    description?: string | undefined;
}
export interface ModNoteObject_UserNoteData {
    note?: string | undefined;
    redditId?: string | undefined;
    label?: string | undefined;
}
export interface PostModNotesResponse {
    created?: ModNoteObject | undefined;
}
export declare const DeleteNotesRequest: {
    $type: "devvit.plugin.redditapi.modnote.DeleteNotesRequest";
    encode(message: DeleteNotesRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DeleteNotesRequest;
    fromJSON(object: any): DeleteNotesRequest;
    toJSON(message: DeleteNotesRequest): unknown;
    create(base?: DeepPartial<DeleteNotesRequest>): DeleteNotesRequest;
    fromPartial(object: DeepPartial<DeleteNotesRequest>): DeleteNotesRequest;
};
export declare const GetNotesRequest: {
    $type: "devvit.plugin.redditapi.modnote.GetNotesRequest";
    encode(message: GetNotesRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetNotesRequest;
    fromJSON(object: any): GetNotesRequest;
    toJSON(message: GetNotesRequest): unknown;
    create(base?: DeepPartial<GetNotesRequest>): GetNotesRequest;
    fromPartial(object: DeepPartial<GetNotesRequest>): GetNotesRequest;
};
export declare const PostNotesRequest: {
    $type: "devvit.plugin.redditapi.modnote.PostNotesRequest";
    encode(message: PostNotesRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PostNotesRequest;
    fromJSON(object: any): PostNotesRequest;
    toJSON(message: PostNotesRequest): unknown;
    create(base?: DeepPartial<PostNotesRequest>): PostNotesRequest;
    fromPartial(object: DeepPartial<PostNotesRequest>): PostNotesRequest;
};
export declare const RecentNotesRequest: {
    $type: "devvit.plugin.redditapi.modnote.RecentNotesRequest";
    encode(message: RecentNotesRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RecentNotesRequest;
    fromJSON(object: any): RecentNotesRequest;
    toJSON(message: RecentNotesRequest): unknown;
    create(base?: DeepPartial<RecentNotesRequest>): RecentNotesRequest;
    fromPartial(object: DeepPartial<RecentNotesRequest>): RecentNotesRequest;
};
export declare const PostRemovalNoteRequest: {
    $type: "devvit.plugin.redditapi.modnote.PostRemovalNoteRequest";
    encode(message: PostRemovalNoteRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PostRemovalNoteRequest;
    fromJSON(object: any): PostRemovalNoteRequest;
    toJSON(message: PostRemovalNoteRequest): unknown;
    create(base?: DeepPartial<PostRemovalNoteRequest>): PostRemovalNoteRequest;
    fromPartial(object: DeepPartial<PostRemovalNoteRequest>): PostRemovalNoteRequest;
};
export declare const ModNotesResponse: {
    $type: "devvit.plugin.redditapi.modnote.ModNotesResponse";
    encode(message: ModNotesResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ModNotesResponse;
    fromJSON(object: any): ModNotesResponse;
    toJSON(message: ModNotesResponse): unknown;
    create(base?: DeepPartial<ModNotesResponse>): ModNotesResponse;
    fromPartial(object: DeepPartial<ModNotesResponse>): ModNotesResponse;
};
export declare const DeleteNotesResponse: {
    $type: "devvit.plugin.redditapi.modnote.DeleteNotesResponse";
    encode(message: DeleteNotesResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DeleteNotesResponse;
    fromJSON(object: any): DeleteNotesResponse;
    toJSON(message: DeleteNotesResponse): unknown;
    create(base?: DeepPartial<DeleteNotesResponse>): DeleteNotesResponse;
    fromPartial(object: DeepPartial<DeleteNotesResponse>): DeleteNotesResponse;
};
export declare const ModNoteObject: {
    $type: "devvit.plugin.redditapi.modnote.ModNoteObject";
    encode(message: ModNoteObject, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ModNoteObject;
    fromJSON(object: any): ModNoteObject;
    toJSON(message: ModNoteObject): unknown;
    create(base?: DeepPartial<ModNoteObject>): ModNoteObject;
    fromPartial(object: DeepPartial<ModNoteObject>): ModNoteObject;
};
export declare const ModNoteObject_ModActionData: {
    $type: "devvit.plugin.redditapi.modnote.ModNoteObject.ModActionData";
    encode(message: ModNoteObject_ModActionData, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ModNoteObject_ModActionData;
    fromJSON(object: any): ModNoteObject_ModActionData;
    toJSON(message: ModNoteObject_ModActionData): unknown;
    create(base?: DeepPartial<ModNoteObject_ModActionData>): ModNoteObject_ModActionData;
    fromPartial(object: DeepPartial<ModNoteObject_ModActionData>): ModNoteObject_ModActionData;
};
export declare const ModNoteObject_UserNoteData: {
    $type: "devvit.plugin.redditapi.modnote.ModNoteObject.UserNoteData";
    encode(message: ModNoteObject_UserNoteData, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ModNoteObject_UserNoteData;
    fromJSON(object: any): ModNoteObject_UserNoteData;
    toJSON(message: ModNoteObject_UserNoteData): unknown;
    create(base?: DeepPartial<ModNoteObject_UserNoteData>): ModNoteObject_UserNoteData;
    fromPartial(object: DeepPartial<ModNoteObject_UserNoteData>): ModNoteObject_UserNoteData;
};
export declare const PostModNotesResponse: {
    $type: "devvit.plugin.redditapi.modnote.PostModNotesResponse";
    encode(message: PostModNotesResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PostModNotesResponse;
    fromJSON(object: any): PostModNotesResponse;
    toJSON(message: PostModNotesResponse): unknown;
    create(base?: DeepPartial<PostModNotesResponse>): PostModNotesResponse;
    fromPartial(object: DeepPartial<PostModNotesResponse>): PostModNotesResponse;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=modnote_msg.d.ts.map