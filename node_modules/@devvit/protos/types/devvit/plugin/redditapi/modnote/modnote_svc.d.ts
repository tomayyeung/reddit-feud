/**
 * #modnote_svc.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { Metadata } from "../../../../../lib/Types.js";
import { Empty } from "../../../../google/protobuf/empty.js";
import { DeleteNotesRequest, DeleteNotesResponse, GetNotesRequest, ModNotesResponse, PostModNotesResponse, PostNotesRequest, PostRemovalNoteRequest, RecentNotesRequest } from "./modnote_msg.js";
/** MODNOTE - https://www.reddit.com/dev/api#section_modnote */
export interface ModNote {
    /** @see {@link https://www.reddit.com/dev/api#GET_api_mod_notes} */
    GetNotes(request: GetNotesRequest, metadata?: Metadata): Promise<ModNotesResponse>;
    /** @see {@link https://www.reddit.com/dev/api/#DELETE_api_mod_notes} */
    DeleteNotes(request: DeleteNotesRequest, metadata?: Metadata): Promise<DeleteNotesResponse>;
    /** @see {@link https://www.reddit.com/dev/api#POST_api_mod_notes} */
    PostNotes(request: PostNotesRequest, metadata?: Metadata): Promise<PostModNotesResponse>;
    /** Add a mod note for why a post or comment was removed */
    PostRemovalNote(request: PostRemovalNoteRequest, metadata?: Metadata): Promise<Empty>;
    /** @see {@link https://www.reddit.com/dev/api#GET_api_mod_notes_recent} */
    RecentNotes(request: RecentNotesRequest, metadata?: Metadata): Promise<ModNotesResponse>;
}
export declare const ModNoteServiceName = "devvit.plugin.redditapi.modnote.ModNote";
export declare class ModNoteClientImpl implements ModNote {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    GetNotes(request: GetNotesRequest, metadata?: Metadata): Promise<ModNotesResponse>;
    DeleteNotes(request: DeleteNotesRequest, metadata?: Metadata): Promise<DeleteNotesResponse>;
    PostNotes(request: PostNotesRequest, metadata?: Metadata): Promise<PostModNotesResponse>;
    PostRemovalNote(request: PostRemovalNoteRequest, metadata?: Metadata): Promise<Empty>;
    RecentNotes(request: RecentNotesRequest, metadata?: Metadata): Promise<ModNotesResponse>;
}
/** MODNOTE - https://www.reddit.com/dev/api#section_modnote */
export type ModNoteDefinition = typeof ModNoteDefinition;
export declare const ModNoteDefinition: {
    readonly name: "ModNote";
    readonly fullName: "devvit.plugin.redditapi.modnote.ModNote";
    readonly methods: {
        /** @see {@link https://www.reddit.com/dev/api#GET_api_mod_notes} */
        readonly getNotes: {
            readonly name: "GetNotes";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.modnote.GetNotesRequest";
                encode(message: GetNotesRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GetNotesRequest;
                fromJSON(object: any): GetNotesRequest;
                toJSON(message: GetNotesRequest): unknown;
                create(base?: {
                    subreddit?: string;
                    before?: string | undefined;
                    filter?: string | undefined;
                    limit?: number | undefined;
                    user?: string;
                } | undefined): GetNotesRequest;
                fromPartial(object: {
                    subreddit?: string;
                    before?: string | undefined;
                    filter?: string | undefined;
                    limit?: number | undefined;
                    user?: string;
                }): GetNotesRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.modnote.ModNotesResponse";
                encode(message: ModNotesResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ModNotesResponse;
                fromJSON(object: any): ModNotesResponse;
                toJSON(message: ModNotesResponse): unknown;
                create(base?: {
                    modNotes?: {
                        subredditId?: string | undefined;
                        operatorId?: string | undefined;
                        modActionData?: {
                            action?: string | undefined;
                            redditId?: string | undefined;
                            details?: string | undefined;
                            description?: string | undefined;
                        } | undefined;
                        userNoteData?: {
                            note?: string | undefined;
                            redditId?: string | undefined;
                            label?: string | undefined;
                        } | undefined;
                        subreddit?: string | undefined;
                        user?: string | undefined;
                        operator?: string | undefined;
                        id?: string | undefined;
                        userId?: string | undefined;
                        createdAt?: number | undefined;
                        cursor?: string | undefined;
                        type?: string | undefined;
                    }[];
                    startCursor?: string | undefined;
                    endCursor?: string | undefined;
                    hasNextPage?: boolean | undefined;
                } | undefined): ModNotesResponse;
                fromPartial(object: {
                    modNotes?: {
                        subredditId?: string | undefined;
                        operatorId?: string | undefined;
                        modActionData?: {
                            action?: string | undefined;
                            redditId?: string | undefined;
                            details?: string | undefined;
                            description?: string | undefined;
                        } | undefined;
                        userNoteData?: {
                            note?: string | undefined;
                            redditId?: string | undefined;
                            label?: string | undefined;
                        } | undefined;
                        subreddit?: string | undefined;
                        user?: string | undefined;
                        operator?: string | undefined;
                        id?: string | undefined;
                        userId?: string | undefined;
                        createdAt?: number | undefined;
                        cursor?: string | undefined;
                        type?: string | undefined;
                    }[];
                    startCursor?: string | undefined;
                    endCursor?: string | undefined;
                    hasNextPage?: boolean | undefined;
                }): ModNotesResponse;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array, Uint8Array];
                };
            };
        };
        /** @see {@link https://www.reddit.com/dev/api/#DELETE_api_mod_notes} */
        readonly deleteNotes: {
            readonly name: "DeleteNotes";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.modnote.DeleteNotesRequest";
                encode(message: DeleteNotesRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): DeleteNotesRequest;
                fromJSON(object: any): DeleteNotesRequest;
                toJSON(message: DeleteNotesRequest): unknown;
                create(base?: {
                    subreddit?: string;
                    noteId?: string;
                    user?: string;
                } | undefined): DeleteNotesRequest;
                fromPartial(object: {
                    subreddit?: string;
                    noteId?: string;
                    user?: string;
                }): DeleteNotesRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.modnote.DeleteNotesResponse";
                encode(message: DeleteNotesResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): DeleteNotesResponse;
                fromJSON(object: any): DeleteNotesResponse;
                toJSON(message: DeleteNotesResponse): unknown;
                create(base?: {
                    deleted?: boolean | undefined;
                } | undefined): DeleteNotesResponse;
                fromPartial(object: {
                    deleted?: boolean | undefined;
                }): DeleteNotesResponse;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array, Uint8Array];
                };
            };
        };
        /** @see {@link https://www.reddit.com/dev/api#POST_api_mod_notes} */
        readonly postNotes: {
            readonly name: "PostNotes";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.modnote.PostNotesRequest";
                encode(message: PostNotesRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PostNotesRequest;
                fromJSON(object: any): PostNotesRequest;
                toJSON(message: PostNotesRequest): unknown;
                create(base?: {
                    subreddit?: string;
                    label?: string | undefined;
                    note?: string;
                    redditId?: string | undefined;
                    user?: string;
                } | undefined): PostNotesRequest;
                fromPartial(object: {
                    subreddit?: string;
                    label?: string | undefined;
                    note?: string;
                    redditId?: string | undefined;
                    user?: string;
                }): PostNotesRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.modnote.PostModNotesResponse";
                encode(message: PostModNotesResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PostModNotesResponse;
                fromJSON(object: any): PostModNotesResponse;
                toJSON(message: PostModNotesResponse): unknown;
                create(base?: {
                    created?: {
                        subredditId?: string | undefined;
                        operatorId?: string | undefined;
                        modActionData?: {
                            action?: string | undefined;
                            redditId?: string | undefined;
                            details?: string | undefined;
                            description?: string | undefined;
                        } | undefined;
                        userNoteData?: {
                            note?: string | undefined;
                            redditId?: string | undefined;
                            label?: string | undefined;
                        } | undefined;
                        subreddit?: string | undefined;
                        user?: string | undefined;
                        operator?: string | undefined;
                        id?: string | undefined;
                        userId?: string | undefined;
                        createdAt?: number | undefined;
                        cursor?: string | undefined;
                        type?: string | undefined;
                    } | undefined;
                } | undefined): PostModNotesResponse;
                fromPartial(object: {
                    created?: {
                        subredditId?: string | undefined;
                        operatorId?: string | undefined;
                        modActionData?: {
                            action?: string | undefined;
                            redditId?: string | undefined;
                            details?: string | undefined;
                            description?: string | undefined;
                        } | undefined;
                        userNoteData?: {
                            note?: string | undefined;
                            redditId?: string | undefined;
                            label?: string | undefined;
                        } | undefined;
                        subreddit?: string | undefined;
                        user?: string | undefined;
                        operator?: string | undefined;
                        id?: string | undefined;
                        userId?: string | undefined;
                        createdAt?: number | undefined;
                        cursor?: string | undefined;
                        type?: string | undefined;
                    } | undefined;
                }): PostModNotesResponse;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array, Uint8Array, Uint8Array];
                };
            };
        };
        /** Add a mod note for why a post or comment was removed */
        readonly postRemovalNote: {
            readonly name: "PostRemovalNote";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.modnote.PostRemovalNoteRequest";
                encode(message: PostRemovalNoteRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): PostRemovalNoteRequest;
                fromJSON(object: any): PostRemovalNoteRequest;
                toJSON(message: PostRemovalNoteRequest): unknown;
                create(base?: {
                    itemIds?: string[];
                    reasonId?: string;
                    modNote?: string | undefined;
                } | undefined): PostRemovalNoteRequest;
                fromPartial(object: {
                    itemIds?: string[];
                    reasonId?: string;
                    modNote?: string | undefined;
                }): PostRemovalNoteRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {} | undefined): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array, Uint8Array, Uint8Array];
                };
            };
        };
        /** @see {@link https://www.reddit.com/dev/api#GET_api_mod_notes_recent} */
        readonly recentNotes: {
            readonly name: "RecentNotes";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.modnote.RecentNotesRequest";
                encode(message: RecentNotesRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): RecentNotesRequest;
                fromJSON(object: any): RecentNotesRequest;
                toJSON(message: RecentNotesRequest): unknown;
                create(base?: {
                    subreddits?: string;
                    users?: string;
                } | undefined): RecentNotesRequest;
                fromPartial(object: {
                    subreddits?: string;
                    users?: string;
                }): RecentNotesRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.modnote.ModNotesResponse";
                encode(message: ModNotesResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ModNotesResponse;
                fromJSON(object: any): ModNotesResponse;
                toJSON(message: ModNotesResponse): unknown;
                create(base?: {
                    modNotes?: {
                        subredditId?: string | undefined;
                        operatorId?: string | undefined;
                        modActionData?: {
                            action?: string | undefined;
                            redditId?: string | undefined;
                            details?: string | undefined;
                            description?: string | undefined;
                        } | undefined;
                        userNoteData?: {
                            note?: string | undefined;
                            redditId?: string | undefined;
                            label?: string | undefined;
                        } | undefined;
                        subreddit?: string | undefined;
                        user?: string | undefined;
                        operator?: string | undefined;
                        id?: string | undefined;
                        userId?: string | undefined;
                        createdAt?: number | undefined;
                        cursor?: string | undefined;
                        type?: string | undefined;
                    }[];
                    startCursor?: string | undefined;
                    endCursor?: string | undefined;
                    hasNextPage?: boolean | undefined;
                } | undefined): ModNotesResponse;
                fromPartial(object: {
                    modNotes?: {
                        subredditId?: string | undefined;
                        operatorId?: string | undefined;
                        modActionData?: {
                            action?: string | undefined;
                            redditId?: string | undefined;
                            details?: string | undefined;
                            description?: string | undefined;
                        } | undefined;
                        userNoteData?: {
                            note?: string | undefined;
                            redditId?: string | undefined;
                            label?: string | undefined;
                        } | undefined;
                        subreddit?: string | undefined;
                        user?: string | undefined;
                        operator?: string | undefined;
                        id?: string | undefined;
                        userId?: string | undefined;
                        createdAt?: number | undefined;
                        cursor?: string | undefined;
                        type?: string | undefined;
                    }[];
                    startCursor?: string | undefined;
                    endCursor?: string | undefined;
                    hasNextPage?: boolean | undefined;
                }): ModNotesResponse;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array, Uint8Array];
                };
            };
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array, metadata?: Metadata): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=modnote_svc.d.ts.map