import { GetNotesRequest, ModNotesResponse, DeleteNotesRequest, DeleteNotesResponse, PostNotesRequest, PostModNotesResponse, PostRemovalNoteRequest, RecentNotesRequest } from './modnote_msg.js';
import { Empty } from '../../../../google/protobuf/empty.js';
interface Rpc {
    request(service: string, method: string, contentType: 'application/json' | 'application/protobuf', data: object | Uint8Array): Promise<object | Uint8Array>;
}
export interface ModNoteClient {
    GetNotes(request: GetNotesRequest): Promise<ModNotesResponse>;
    DeleteNotes(request: DeleteNotesRequest): Promise<DeleteNotesResponse>;
    PostNotes(request: PostNotesRequest): Promise<PostModNotesResponse>;
    PostRemovalNote(request: PostRemovalNoteRequest): Promise<Empty>;
    RecentNotes(request: RecentNotesRequest): Promise<ModNotesResponse>;
}
export declare class ModNoteClientJSON implements ModNoteClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    GetNotes(request: GetNotesRequest): Promise<ModNotesResponse>;
    DeleteNotes(request: DeleteNotesRequest): Promise<DeleteNotesResponse>;
    PostNotes(request: PostNotesRequest): Promise<PostModNotesResponse>;
    PostRemovalNote(request: PostRemovalNoteRequest): Promise<Empty>;
    RecentNotes(request: RecentNotesRequest): Promise<ModNotesResponse>;
}
export declare class ModNoteClientProtobuf implements ModNoteClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    GetNotes(request: GetNotesRequest): Promise<ModNotesResponse>;
    DeleteNotes(request: DeleteNotesRequest): Promise<DeleteNotesResponse>;
    PostNotes(request: PostNotesRequest): Promise<PostModNotesResponse>;
    PostRemovalNote(request: PostRemovalNoteRequest): Promise<Empty>;
    RecentNotes(request: RecentNotesRequest): Promise<ModNotesResponse>;
}
export {};
//# sourceMappingURL=modnote_svc.twirp-client.d.ts.map