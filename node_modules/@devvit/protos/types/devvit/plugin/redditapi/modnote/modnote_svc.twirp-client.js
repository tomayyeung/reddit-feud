import { GetNotesRequest, ModNotesResponse, DeleteNotesRequest, DeleteNotesResponse, PostNotesRequest, PostModNotesResponse, PostRemovalNoteRequest, RecentNotesRequest, } from './modnote_msg.js';
import { Empty } from '../../../../google/protobuf/empty.js';
export class ModNoteClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.GetNotes.bind(this);
        this.DeleteNotes.bind(this);
        this.PostNotes.bind(this);
        this.PostRemovalNote.bind(this);
        this.RecentNotes.bind(this);
    }
    GetNotes(request) {
        const data = GetNotesRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.modnote.ModNote', 'GetNotes', 'application/json', data);
        return promise.then((data) => ModNotesResponse.fromJSON(data));
    }
    DeleteNotes(request) {
        const data = DeleteNotesRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.modnote.ModNote', 'DeleteNotes', 'application/json', data);
        return promise.then((data) => DeleteNotesResponse.fromJSON(data));
    }
    PostNotes(request) {
        const data = PostNotesRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.modnote.ModNote', 'PostNotes', 'application/json', data);
        return promise.then((data) => PostModNotesResponse.fromJSON(data));
    }
    PostRemovalNote(request) {
        const data = PostRemovalNoteRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.modnote.ModNote', 'PostRemovalNote', 'application/json', data);
        return promise.then((data) => Empty.fromJSON(data));
    }
    RecentNotes(request) {
        const data = RecentNotesRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.modnote.ModNote', 'RecentNotes', 'application/json', data);
        return promise.then((data) => ModNotesResponse.fromJSON(data));
    }
}
export class ModNoteClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.GetNotes.bind(this);
        this.DeleteNotes.bind(this);
        this.PostNotes.bind(this);
        this.PostRemovalNote.bind(this);
        this.RecentNotes.bind(this);
    }
    GetNotes(request) {
        const data = GetNotesRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.modnote.ModNote', 'GetNotes', 'application/protobuf', data);
        return promise.then((data) => ModNotesResponse.decode(data));
    }
    DeleteNotes(request) {
        const data = DeleteNotesRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.modnote.ModNote', 'DeleteNotes', 'application/protobuf', data);
        return promise.then((data) => DeleteNotesResponse.decode(data));
    }
    PostNotes(request) {
        const data = PostNotesRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.modnote.ModNote', 'PostNotes', 'application/protobuf', data);
        return promise.then((data) => PostModNotesResponse.decode(data));
    }
    PostRemovalNote(request) {
        const data = PostRemovalNoteRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.modnote.ModNote', 'PostRemovalNote', 'application/protobuf', data);
        return promise.then((data) => Empty.decode(data));
    }
    RecentNotes(request) {
        const data = RecentNotesRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.modnote.ModNote', 'RecentNotes', 'application/protobuf', data);
        return promise.then((data) => ModNotesResponse.decode(data));
    }
}
