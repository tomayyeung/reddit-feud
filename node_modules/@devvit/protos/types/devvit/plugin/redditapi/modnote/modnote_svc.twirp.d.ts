/// <reference types="node" resolution-mode="require"/>
import { TwirpContext, TwirpServer } from 'twirp-ts';
import { GetNotesRequest, ModNotesResponse, DeleteNotesRequest, DeleteNotesResponse, PostNotesRequest, PostModNotesResponse, PostRemovalNoteRequest, RecentNotesRequest } from './modnote_msg.js';
import { Empty } from '../../../../google/protobuf/empty.js';
export interface ModNoteTwirp<T extends TwirpContext = TwirpContext> {
    GetNotes(ctx: T, request: GetNotesRequest): Promise<ModNotesResponse>;
    DeleteNotes(ctx: T, request: DeleteNotesRequest): Promise<DeleteNotesResponse>;
    PostNotes(ctx: T, request: PostNotesRequest): Promise<PostModNotesResponse>;
    PostRemovalNote(ctx: T, request: PostRemovalNoteRequest): Promise<Empty>;
    RecentNotes(ctx: T, request: RecentNotesRequest): Promise<ModNotesResponse>;
}
export declare enum ModNoteMethod {
    GetNotes = "GetNotes",
    DeleteNotes = "DeleteNotes",
    PostNotes = "PostNotes",
    PostRemovalNote = "PostRemovalNote",
    RecentNotes = "RecentNotes"
}
export declare const ModNoteMethodList: ModNoteMethod[];
export declare function createModNoteServer<T extends TwirpContext = TwirpContext>(service: ModNoteTwirp<T>): TwirpServer<ModNoteTwirp<TwirpContext<import("http").IncomingMessage, import("http").ServerResponse<import("http").IncomingMessage>>>, T>;
//# sourceMappingURL=modnote_svc.twirp.d.ts.map