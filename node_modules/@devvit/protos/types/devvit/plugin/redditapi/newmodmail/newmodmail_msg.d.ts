/**
 * #newmodmail_msg.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { Any } from "../../../../google/protobuf/any.js";
/** Shared Objects */
export interface ConversationData {
    /** Is the conversation automatically generated e.g. from automod, u/reddit */
    isAuto?: boolean | undefined;
    /** Participant. Is absent for mod discussions */
    participant?: Participant | undefined;
    /** List of object ids (denormalized). E.g. [{id: 'qwer42', key: 'messages'}, {id: 'abcd33', key: 'modActions'}] */
    objIds: ConversationData_ObjId[];
    /** NOTE: is_repliable will always be true currently (at the time of writing this comment) */
    isRepliable?: boolean | undefined;
    /** The last datetime a user made any interaction with the conversation */
    lastUserUpdate?: string | undefined;
    /** Is the conversation internal (i.e. mod only) */
    isInternal?: boolean | undefined;
    /**
     * The last datetime a mod from the owning subreddit made any interaction with the conversation.
     * (Note that if this is a subreddit to subreddit conversation, the mods of
     * the participant subreddit are irrelevant and do not affect this field.)
     */
    lastModUpdate?: string | undefined;
    authors: Participant[];
    /** The last time the conversation was updated (includes actions) */
    lastUpdated?: string | undefined;
    /** Id of the first corresponding message in the legacy message system */
    legacyFirstMessageId?: string | undefined;
    state?: number | undefined;
    /**
     * Type of conversation:
     * - `internal` (mod discussion)
     * - `sr_user` (between a subreddit and user)
     * - `sr_sr` (between two subreddits)
     */
    conversationType?: string | undefined;
    /** The datetime of the last unread message within this conversation for the current viewer. */
    lastUnread?: string | undefined;
    /** The subreddit that owns the conversation. */
    owner?: ConversationData_Owner | undefined;
    /** Suject of the conversation */
    subject?: string | undefined;
    /** Conversation ID */
    id?: string | undefined;
    /** Is the conversation highlighted */
    isHighlighted?: boolean | undefined;
    /** Number of messages (not actions) in the conversation */
    numMessages?: number | undefined;
    /** from createconversationmessageresponse */
    modActions: {
        [key: string]: ModActionData;
    };
}
export interface ConversationData_ObjId {
    /** Id of an object (e.g. message ID or modAction ID) */
    id?: string | undefined;
    /** Property name of the object collection (e.g. 'messages' or 'modActions') */
    key?: string | undefined;
}
export interface ConversationData_Owner {
    /** Subreddit display name */
    displayName?: string | undefined;
    /** always 'subreddit' */
    type?: string | undefined;
    /** Subreddit id */
    id?: string | undefined;
}
export interface ConversationData_ModActionsEntry {
    key: string;
    value?: ModActionData | undefined;
}
export interface MessageData {
    body?: string | undefined;
    author?: Participant | undefined;
    isInternal?: boolean | undefined;
    date?: string | undefined;
    bodyMarkdown?: string | undefined;
    id?: string | undefined;
    participatingAs?: string | undefined;
}
export interface ConversationUserData {
    recentComments: {
        [key: string]: ConversationUserData_CommentData;
    };
    muteStatus?: ConversationUserData_MuteStatus | undefined;
    name?: string | undefined;
    created?: string | undefined;
    banStatus?: ConversationUserData_BanStatus | undefined;
    isSuspended?: boolean | undefined;
    approveStatus?: ConversationUserData_ApproveStatus | undefined;
    isShadowBanned?: boolean | undefined;
    recentPosts: {
        [key: string]: ConversationUserData_PostData;
    };
    recentConvos: {
        [key: string]: ConversationUserData_ConvoData;
    };
    id?: string | undefined;
}
export interface ConversationUserData_CommentData {
    comment?: string | undefined;
    date?: string | undefined;
    permalink?: string | undefined;
    title?: string | undefined;
}
export interface ConversationUserData_MuteStatus {
    muteCount?: number | undefined;
    isMuted?: boolean | undefined;
    endDate?: string | undefined;
    reason?: string | undefined;
}
export interface ConversationUserData_BanStatus {
    isBanned?: boolean | undefined;
    isPermanent?: boolean | undefined;
    endDate?: string | undefined;
    reason?: string | undefined;
}
export interface ConversationUserData_ApproveStatus {
    isApproved?: boolean | undefined;
}
export interface ConversationUserData_PostData {
    date?: string | undefined;
    permalink?: string | undefined;
    title?: string | undefined;
}
export interface ConversationUserData_ConvoData {
    date?: string | undefined;
    permalink?: string | undefined;
    id?: string | undefined;
    subject?: string | undefined;
}
export interface ConversationUserData_RecentCommentsEntry {
    key: string;
    value?: ConversationUserData_CommentData | undefined;
}
export interface ConversationUserData_RecentPostsEntry {
    key: string;
    value?: ConversationUserData_PostData | undefined;
}
export interface ConversationUserData_RecentConvosEntry {
    key: string;
    value?: ConversationUserData_ConvoData | undefined;
}
export interface Participant {
    isMod?: boolean | undefined;
    isAdmin?: boolean | undefined;
    name?: string | undefined;
    isOp?: boolean | undefined;
    isParticipant?: boolean | undefined;
    isApproved?: boolean | undefined;
    isHidden?: boolean | undefined;
    id?: number | undefined;
    isDeleted?: boolean | undefined;
}
export interface ModActionData {
    date?: string | undefined;
    actionTypeId?: number | undefined;
    id?: string | undefined;
    author?: ModActionData_ModActionAuthor | undefined;
}
export interface ModActionData_ModActionAuthor {
    isMod?: boolean | undefined;
    isAdmin?: boolean | undefined;
    name?: string | undefined;
    isHidden?: boolean | undefined;
    id?: number | undefined;
    isDeleted?: boolean | undefined;
}
/** Requests */
export interface BulkReadConversationsRequest {
    /** comma-delimited list of subreddit names (e.g. 'pics,worldnews' */
    entity: string;
    /**
     * one of (all, appeals, notifications, inbox, filtered, inprogress, mod, archived, default,
     * highlighted, join_requests, new)
     */
    state: string;
}
export interface GetConversationsRequest {
    /** id36 of a modmail */
    after?: string | undefined;
    /** comma-delimited list of subreddit names */
    entity?: string | undefined;
    /** an integer between 1 and 100 (default: 25) */
    limit?: number | undefined;
    /** one of (recent, mod, user, unread) */
    sort?: string | undefined;
    /**
     * one of (all, appeals, notifications, inbox, filtered, inprogress, mod, archived, default,
     * highlighted, join_requests, new)
     */
    state?: string | undefined;
}
export interface CreateConversationRequest {
    /** raw markdown text */
    body: string;
    /** is author hidden? */
    isAuthorHidden: boolean;
    /** subreddit name */
    srName: string;
    /** subject of the conversation. max 100 characters. */
    subject: string;
    /** a user (e.g. u/username), a subreddit (e.g. r/subreddit) or null */
    to?: string | undefined;
}
export interface GetConversationRequest {
    /** id36 of a modmail conversation id */
    conversationId: string;
    /** mark read? */
    markRead: boolean;
}
export interface CreateConversationMessageRequest {
    /** markdown text */
    body: string;
    isAuthorHidden: boolean;
    isInternal: boolean;
    /** id36 of a modmail conversation id */
    conversationId: string;
}
export interface BasicConversationRequest {
    /** id36 of a modmail conversation id */
    conversationId: string;
}
export interface BasicConversationsRequest {
    /** comma seperated list of id36 of a modmail conversation ids */
    conversationIds: string;
}
export interface MuteConversationRequest {
    /** id36 of a modmail conversation id */
    conversationId: string;
    /** how long? one of (72, 168, 672) */
    numHours: number;
}
export interface TempBanRequest {
    /** id36 of a modmail conversation id */
    conversationId: string;
    /** duration in days, max 999 */
    duration: number;
}
/** Responses */
export interface BulkReadConversationsResponse {
    conversationIds: string[];
}
export interface GetConversationsResponse {
    conversations: {
        [key: string]: ConversationData;
    };
    messages: {
        [key: string]: MessageData;
    };
    viewerId?: string | undefined;
    conversationIds: string[];
}
export interface GetConversationsResponse_ConversationsEntry {
    key: string;
    value?: ConversationData | undefined;
}
export interface GetConversationsResponse_MessagesEntry {
    key: string;
    value?: MessageData | undefined;
}
export interface CreateConversationResponse {
    conversation?: ConversationData | undefined;
    messages: {
        [key: string]: MessageData;
    };
    modActions: {
        [key: string]: ModActionData;
    };
    /** error case */
    fields: string[];
    reason?: string | undefined;
    message?: string | undefined;
    explanation?: string | undefined;
    user?: ConversationUserData | undefined;
}
export interface CreateConversationResponse_MessagesEntry {
    key: string;
    value?: MessageData | undefined;
}
export interface CreateConversationResponse_ModActionsEntry {
    key: string;
    value?: ModActionData | undefined;
}
export interface GetConversationResponse {
    conversation?: ConversationData | undefined;
    messages: {
        [key: string]: MessageData;
    };
    modActions: {
        [key: string]: ModActionData;
    };
    participantSubreddit?: Any | undefined;
    user?: ConversationUserData | undefined;
}
export interface GetConversationResponse_MessagesEntry {
    key: string;
    value?: MessageData | undefined;
}
export interface GetConversationResponse_ModActionsEntry {
    key: string;
    value?: ModActionData | undefined;
}
export interface CreateConversationMessageResponse {
    conversation?: ConversationData | undefined;
    messages: {
        [key: string]: MessageData;
    };
    user?: ConversationUserData | undefined;
}
export interface CreateConversationMessageResponse_MessagesEntry {
    key: string;
    value?: MessageData | undefined;
}
export interface ApproveConversationResponse {
    conversations?: ConversationData | undefined;
    messages: {
        [key: string]: MessageData;
    };
    user?: ConversationUserData | undefined;
    modActions: {
        [key: string]: ModActionData;
    };
    /** error case */
    fields: string[];
    reason?: string | undefined;
    message?: string | undefined;
    explanation?: string | undefined;
}
export interface ApproveConversationResponse_MessagesEntry {
    key: string;
    value?: MessageData | undefined;
}
export interface ApproveConversationResponse_ModActionsEntry {
    key: string;
    value?: ModActionData | undefined;
}
export interface ArchiveConversationResponse {
    /** @deprecated use `conversation` */
    conversations?: ConversationData | undefined;
    messages: {
        [key: string]: MessageData;
    };
    modActions: {
        [key: string]: ModActionData;
    };
    conversation?: ConversationData | undefined;
}
export interface ArchiveConversationResponse_MessagesEntry {
    key: string;
    value?: MessageData | undefined;
}
export interface ArchiveConversationResponse_ModActionsEntry {
    key: string;
    value?: ModActionData | undefined;
}
export interface HighlightConversationResponse {
    /** @deprecated use `conversation` */
    conversations?: ConversationData | undefined;
    messages: {
        [key: string]: MessageData;
    };
    modActions: {
        [key: string]: ModActionData;
    };
    conversation?: ConversationData | undefined;
}
export interface HighlightConversationResponse_MessagesEntry {
    key: string;
    value?: MessageData | undefined;
}
export interface HighlightConversationResponse_ModActionsEntry {
    key: string;
    value?: ModActionData | undefined;
}
export interface MuteConversationResponse {
    conversations?: ConversationData | undefined;
    messages: {
        [key: string]: MessageData;
    };
    user?: ConversationUserData | undefined;
    modActions: {
        [key: string]: ModActionData;
    };
}
export interface MuteConversationResponse_MessagesEntry {
    key: string;
    value?: MessageData | undefined;
}
export interface MuteConversationResponse_ModActionsEntry {
    key: string;
    value?: ModActionData | undefined;
}
export interface TempBanResponse {
    conversations?: ConversationData | undefined;
    messages: {
        [key: string]: MessageData;
    };
    user?: ConversationUserData | undefined;
    modActions: {
        [key: string]: ModActionData;
    };
    /** error case */
    fields: string[];
    reason?: string | undefined;
    message?: string | undefined;
}
export interface TempBanResponse_MessagesEntry {
    key: string;
    value?: MessageData | undefined;
}
export interface TempBanResponse_ModActionsEntry {
    key: string;
    value?: ModActionData | undefined;
}
export interface SubredditsResponse {
    subreddits: {
        [key: string]: SubredditsResponse_SubredditData;
    };
}
export interface SubredditsResponse_SubredditData {
    communityIcon?: string | undefined;
    keyColor?: string | undefined;
    displayName?: string | undefined;
    name?: string | undefined;
    subscribers?: number | undefined;
    primaryColor?: string | undefined;
    id?: string | undefined;
    lastUpdated?: string | undefined;
    icon?: string | undefined;
}
export interface SubredditsResponse_SubredditsEntry {
    key: string;
    value?: SubredditsResponse_SubredditData | undefined;
}
export interface UnreadCountResponse {
    archived?: number | undefined;
    appeals?: number | undefined;
    highlighted?: number | undefined;
    notifications?: number | undefined;
    joinRequests?: number | undefined;
    filtered?: number | undefined;
    new?: number | undefined;
    inprogress?: number | undefined;
    mod?: number | undefined;
}
export declare const ConversationData: {
    $type: "devvit.plugin.redditapi.newmodmail.ConversationData";
    encode(message: ConversationData, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ConversationData;
    fromJSON(object: any): ConversationData;
    toJSON(message: ConversationData): unknown;
    create(base?: DeepPartial<ConversationData>): ConversationData;
    fromPartial(object: DeepPartial<ConversationData>): ConversationData;
};
export declare const ConversationData_ObjId: {
    $type: "devvit.plugin.redditapi.newmodmail.ConversationData.ObjId";
    encode(message: ConversationData_ObjId, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ConversationData_ObjId;
    fromJSON(object: any): ConversationData_ObjId;
    toJSON(message: ConversationData_ObjId): unknown;
    create(base?: DeepPartial<ConversationData_ObjId>): ConversationData_ObjId;
    fromPartial(object: DeepPartial<ConversationData_ObjId>): ConversationData_ObjId;
};
export declare const ConversationData_Owner: {
    $type: "devvit.plugin.redditapi.newmodmail.ConversationData.Owner";
    encode(message: ConversationData_Owner, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ConversationData_Owner;
    fromJSON(object: any): ConversationData_Owner;
    toJSON(message: ConversationData_Owner): unknown;
    create(base?: DeepPartial<ConversationData_Owner>): ConversationData_Owner;
    fromPartial(object: DeepPartial<ConversationData_Owner>): ConversationData_Owner;
};
export declare const ConversationData_ModActionsEntry: {
    $type: "devvit.plugin.redditapi.newmodmail.ConversationData.ModActionsEntry";
    encode(message: ConversationData_ModActionsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ConversationData_ModActionsEntry;
    fromJSON(object: any): ConversationData_ModActionsEntry;
    toJSON(message: ConversationData_ModActionsEntry): unknown;
    create(base?: DeepPartial<ConversationData_ModActionsEntry>): ConversationData_ModActionsEntry;
    fromPartial(object: DeepPartial<ConversationData_ModActionsEntry>): ConversationData_ModActionsEntry;
};
export declare const MessageData: {
    $type: "devvit.plugin.redditapi.newmodmail.MessageData";
    encode(message: MessageData, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MessageData;
    fromJSON(object: any): MessageData;
    toJSON(message: MessageData): unknown;
    create(base?: DeepPartial<MessageData>): MessageData;
    fromPartial(object: DeepPartial<MessageData>): MessageData;
};
export declare const ConversationUserData: {
    $type: "devvit.plugin.redditapi.newmodmail.ConversationUserData";
    encode(message: ConversationUserData, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ConversationUserData;
    fromJSON(object: any): ConversationUserData;
    toJSON(message: ConversationUserData): unknown;
    create(base?: DeepPartial<ConversationUserData>): ConversationUserData;
    fromPartial(object: DeepPartial<ConversationUserData>): ConversationUserData;
};
export declare const ConversationUserData_CommentData: {
    $type: "devvit.plugin.redditapi.newmodmail.ConversationUserData.CommentData";
    encode(message: ConversationUserData_CommentData, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ConversationUserData_CommentData;
    fromJSON(object: any): ConversationUserData_CommentData;
    toJSON(message: ConversationUserData_CommentData): unknown;
    create(base?: DeepPartial<ConversationUserData_CommentData>): ConversationUserData_CommentData;
    fromPartial(object: DeepPartial<ConversationUserData_CommentData>): ConversationUserData_CommentData;
};
export declare const ConversationUserData_MuteStatus: {
    $type: "devvit.plugin.redditapi.newmodmail.ConversationUserData.MuteStatus";
    encode(message: ConversationUserData_MuteStatus, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ConversationUserData_MuteStatus;
    fromJSON(object: any): ConversationUserData_MuteStatus;
    toJSON(message: ConversationUserData_MuteStatus): unknown;
    create(base?: DeepPartial<ConversationUserData_MuteStatus>): ConversationUserData_MuteStatus;
    fromPartial(object: DeepPartial<ConversationUserData_MuteStatus>): ConversationUserData_MuteStatus;
};
export declare const ConversationUserData_BanStatus: {
    $type: "devvit.plugin.redditapi.newmodmail.ConversationUserData.BanStatus";
    encode(message: ConversationUserData_BanStatus, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ConversationUserData_BanStatus;
    fromJSON(object: any): ConversationUserData_BanStatus;
    toJSON(message: ConversationUserData_BanStatus): unknown;
    create(base?: DeepPartial<ConversationUserData_BanStatus>): ConversationUserData_BanStatus;
    fromPartial(object: DeepPartial<ConversationUserData_BanStatus>): ConversationUserData_BanStatus;
};
export declare const ConversationUserData_ApproveStatus: {
    $type: "devvit.plugin.redditapi.newmodmail.ConversationUserData.ApproveStatus";
    encode(message: ConversationUserData_ApproveStatus, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ConversationUserData_ApproveStatus;
    fromJSON(object: any): ConversationUserData_ApproveStatus;
    toJSON(message: ConversationUserData_ApproveStatus): unknown;
    create(base?: DeepPartial<ConversationUserData_ApproveStatus>): ConversationUserData_ApproveStatus;
    fromPartial(object: DeepPartial<ConversationUserData_ApproveStatus>): ConversationUserData_ApproveStatus;
};
export declare const ConversationUserData_PostData: {
    $type: "devvit.plugin.redditapi.newmodmail.ConversationUserData.PostData";
    encode(message: ConversationUserData_PostData, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ConversationUserData_PostData;
    fromJSON(object: any): ConversationUserData_PostData;
    toJSON(message: ConversationUserData_PostData): unknown;
    create(base?: DeepPartial<ConversationUserData_PostData>): ConversationUserData_PostData;
    fromPartial(object: DeepPartial<ConversationUserData_PostData>): ConversationUserData_PostData;
};
export declare const ConversationUserData_ConvoData: {
    $type: "devvit.plugin.redditapi.newmodmail.ConversationUserData.ConvoData";
    encode(message: ConversationUserData_ConvoData, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ConversationUserData_ConvoData;
    fromJSON(object: any): ConversationUserData_ConvoData;
    toJSON(message: ConversationUserData_ConvoData): unknown;
    create(base?: DeepPartial<ConversationUserData_ConvoData>): ConversationUserData_ConvoData;
    fromPartial(object: DeepPartial<ConversationUserData_ConvoData>): ConversationUserData_ConvoData;
};
export declare const ConversationUserData_RecentCommentsEntry: {
    $type: "devvit.plugin.redditapi.newmodmail.ConversationUserData.RecentCommentsEntry";
    encode(message: ConversationUserData_RecentCommentsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ConversationUserData_RecentCommentsEntry;
    fromJSON(object: any): ConversationUserData_RecentCommentsEntry;
    toJSON(message: ConversationUserData_RecentCommentsEntry): unknown;
    create(base?: DeepPartial<ConversationUserData_RecentCommentsEntry>): ConversationUserData_RecentCommentsEntry;
    fromPartial(object: DeepPartial<ConversationUserData_RecentCommentsEntry>): ConversationUserData_RecentCommentsEntry;
};
export declare const ConversationUserData_RecentPostsEntry: {
    $type: "devvit.plugin.redditapi.newmodmail.ConversationUserData.RecentPostsEntry";
    encode(message: ConversationUserData_RecentPostsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ConversationUserData_RecentPostsEntry;
    fromJSON(object: any): ConversationUserData_RecentPostsEntry;
    toJSON(message: ConversationUserData_RecentPostsEntry): unknown;
    create(base?: DeepPartial<ConversationUserData_RecentPostsEntry>): ConversationUserData_RecentPostsEntry;
    fromPartial(object: DeepPartial<ConversationUserData_RecentPostsEntry>): ConversationUserData_RecentPostsEntry;
};
export declare const ConversationUserData_RecentConvosEntry: {
    $type: "devvit.plugin.redditapi.newmodmail.ConversationUserData.RecentConvosEntry";
    encode(message: ConversationUserData_RecentConvosEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ConversationUserData_RecentConvosEntry;
    fromJSON(object: any): ConversationUserData_RecentConvosEntry;
    toJSON(message: ConversationUserData_RecentConvosEntry): unknown;
    create(base?: DeepPartial<ConversationUserData_RecentConvosEntry>): ConversationUserData_RecentConvosEntry;
    fromPartial(object: DeepPartial<ConversationUserData_RecentConvosEntry>): ConversationUserData_RecentConvosEntry;
};
export declare const Participant: {
    $type: "devvit.plugin.redditapi.newmodmail.Participant";
    encode(message: Participant, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Participant;
    fromJSON(object: any): Participant;
    toJSON(message: Participant): unknown;
    create(base?: DeepPartial<Participant>): Participant;
    fromPartial(object: DeepPartial<Participant>): Participant;
};
export declare const ModActionData: {
    $type: "devvit.plugin.redditapi.newmodmail.ModActionData";
    encode(message: ModActionData, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ModActionData;
    fromJSON(object: any): ModActionData;
    toJSON(message: ModActionData): unknown;
    create(base?: DeepPartial<ModActionData>): ModActionData;
    fromPartial(object: DeepPartial<ModActionData>): ModActionData;
};
export declare const ModActionData_ModActionAuthor: {
    $type: "devvit.plugin.redditapi.newmodmail.ModActionData.ModActionAuthor";
    encode(message: ModActionData_ModActionAuthor, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ModActionData_ModActionAuthor;
    fromJSON(object: any): ModActionData_ModActionAuthor;
    toJSON(message: ModActionData_ModActionAuthor): unknown;
    create(base?: DeepPartial<ModActionData_ModActionAuthor>): ModActionData_ModActionAuthor;
    fromPartial(object: DeepPartial<ModActionData_ModActionAuthor>): ModActionData_ModActionAuthor;
};
export declare const BulkReadConversationsRequest: {
    $type: "devvit.plugin.redditapi.newmodmail.BulkReadConversationsRequest";
    encode(message: BulkReadConversationsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BulkReadConversationsRequest;
    fromJSON(object: any): BulkReadConversationsRequest;
    toJSON(message: BulkReadConversationsRequest): unknown;
    create(base?: DeepPartial<BulkReadConversationsRequest>): BulkReadConversationsRequest;
    fromPartial(object: DeepPartial<BulkReadConversationsRequest>): BulkReadConversationsRequest;
};
export declare const GetConversationsRequest: {
    $type: "devvit.plugin.redditapi.newmodmail.GetConversationsRequest";
    encode(message: GetConversationsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetConversationsRequest;
    fromJSON(object: any): GetConversationsRequest;
    toJSON(message: GetConversationsRequest): unknown;
    create(base?: DeepPartial<GetConversationsRequest>): GetConversationsRequest;
    fromPartial(object: DeepPartial<GetConversationsRequest>): GetConversationsRequest;
};
export declare const CreateConversationRequest: {
    $type: "devvit.plugin.redditapi.newmodmail.CreateConversationRequest";
    encode(message: CreateConversationRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CreateConversationRequest;
    fromJSON(object: any): CreateConversationRequest;
    toJSON(message: CreateConversationRequest): unknown;
    create(base?: DeepPartial<CreateConversationRequest>): CreateConversationRequest;
    fromPartial(object: DeepPartial<CreateConversationRequest>): CreateConversationRequest;
};
export declare const GetConversationRequest: {
    $type: "devvit.plugin.redditapi.newmodmail.GetConversationRequest";
    encode(message: GetConversationRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetConversationRequest;
    fromJSON(object: any): GetConversationRequest;
    toJSON(message: GetConversationRequest): unknown;
    create(base?: DeepPartial<GetConversationRequest>): GetConversationRequest;
    fromPartial(object: DeepPartial<GetConversationRequest>): GetConversationRequest;
};
export declare const CreateConversationMessageRequest: {
    $type: "devvit.plugin.redditapi.newmodmail.CreateConversationMessageRequest";
    encode(message: CreateConversationMessageRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CreateConversationMessageRequest;
    fromJSON(object: any): CreateConversationMessageRequest;
    toJSON(message: CreateConversationMessageRequest): unknown;
    create(base?: DeepPartial<CreateConversationMessageRequest>): CreateConversationMessageRequest;
    fromPartial(object: DeepPartial<CreateConversationMessageRequest>): CreateConversationMessageRequest;
};
export declare const BasicConversationRequest: {
    $type: "devvit.plugin.redditapi.newmodmail.BasicConversationRequest";
    encode(message: BasicConversationRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BasicConversationRequest;
    fromJSON(object: any): BasicConversationRequest;
    toJSON(message: BasicConversationRequest): unknown;
    create(base?: DeepPartial<BasicConversationRequest>): BasicConversationRequest;
    fromPartial(object: DeepPartial<BasicConversationRequest>): BasicConversationRequest;
};
export declare const BasicConversationsRequest: {
    $type: "devvit.plugin.redditapi.newmodmail.BasicConversationsRequest";
    encode(message: BasicConversationsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BasicConversationsRequest;
    fromJSON(object: any): BasicConversationsRequest;
    toJSON(message: BasicConversationsRequest): unknown;
    create(base?: DeepPartial<BasicConversationsRequest>): BasicConversationsRequest;
    fromPartial(object: DeepPartial<BasicConversationsRequest>): BasicConversationsRequest;
};
export declare const MuteConversationRequest: {
    $type: "devvit.plugin.redditapi.newmodmail.MuteConversationRequest";
    encode(message: MuteConversationRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MuteConversationRequest;
    fromJSON(object: any): MuteConversationRequest;
    toJSON(message: MuteConversationRequest): unknown;
    create(base?: DeepPartial<MuteConversationRequest>): MuteConversationRequest;
    fromPartial(object: DeepPartial<MuteConversationRequest>): MuteConversationRequest;
};
export declare const TempBanRequest: {
    $type: "devvit.plugin.redditapi.newmodmail.TempBanRequest";
    encode(message: TempBanRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TempBanRequest;
    fromJSON(object: any): TempBanRequest;
    toJSON(message: TempBanRequest): unknown;
    create(base?: DeepPartial<TempBanRequest>): TempBanRequest;
    fromPartial(object: DeepPartial<TempBanRequest>): TempBanRequest;
};
export declare const BulkReadConversationsResponse: {
    $type: "devvit.plugin.redditapi.newmodmail.BulkReadConversationsResponse";
    encode(message: BulkReadConversationsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BulkReadConversationsResponse;
    fromJSON(object: any): BulkReadConversationsResponse;
    toJSON(message: BulkReadConversationsResponse): unknown;
    create(base?: DeepPartial<BulkReadConversationsResponse>): BulkReadConversationsResponse;
    fromPartial(object: DeepPartial<BulkReadConversationsResponse>): BulkReadConversationsResponse;
};
export declare const GetConversationsResponse: {
    $type: "devvit.plugin.redditapi.newmodmail.GetConversationsResponse";
    encode(message: GetConversationsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetConversationsResponse;
    fromJSON(object: any): GetConversationsResponse;
    toJSON(message: GetConversationsResponse): unknown;
    create(base?: DeepPartial<GetConversationsResponse>): GetConversationsResponse;
    fromPartial(object: DeepPartial<GetConversationsResponse>): GetConversationsResponse;
};
export declare const GetConversationsResponse_ConversationsEntry: {
    $type: "devvit.plugin.redditapi.newmodmail.GetConversationsResponse.ConversationsEntry";
    encode(message: GetConversationsResponse_ConversationsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetConversationsResponse_ConversationsEntry;
    fromJSON(object: any): GetConversationsResponse_ConversationsEntry;
    toJSON(message: GetConversationsResponse_ConversationsEntry): unknown;
    create(base?: DeepPartial<GetConversationsResponse_ConversationsEntry>): GetConversationsResponse_ConversationsEntry;
    fromPartial(object: DeepPartial<GetConversationsResponse_ConversationsEntry>): GetConversationsResponse_ConversationsEntry;
};
export declare const GetConversationsResponse_MessagesEntry: {
    $type: "devvit.plugin.redditapi.newmodmail.GetConversationsResponse.MessagesEntry";
    encode(message: GetConversationsResponse_MessagesEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetConversationsResponse_MessagesEntry;
    fromJSON(object: any): GetConversationsResponse_MessagesEntry;
    toJSON(message: GetConversationsResponse_MessagesEntry): unknown;
    create(base?: DeepPartial<GetConversationsResponse_MessagesEntry>): GetConversationsResponse_MessagesEntry;
    fromPartial(object: DeepPartial<GetConversationsResponse_MessagesEntry>): GetConversationsResponse_MessagesEntry;
};
export declare const CreateConversationResponse: {
    $type: "devvit.plugin.redditapi.newmodmail.CreateConversationResponse";
    encode(message: CreateConversationResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CreateConversationResponse;
    fromJSON(object: any): CreateConversationResponse;
    toJSON(message: CreateConversationResponse): unknown;
    create(base?: DeepPartial<CreateConversationResponse>): CreateConversationResponse;
    fromPartial(object: DeepPartial<CreateConversationResponse>): CreateConversationResponse;
};
export declare const CreateConversationResponse_MessagesEntry: {
    $type: "devvit.plugin.redditapi.newmodmail.CreateConversationResponse.MessagesEntry";
    encode(message: CreateConversationResponse_MessagesEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CreateConversationResponse_MessagesEntry;
    fromJSON(object: any): CreateConversationResponse_MessagesEntry;
    toJSON(message: CreateConversationResponse_MessagesEntry): unknown;
    create(base?: DeepPartial<CreateConversationResponse_MessagesEntry>): CreateConversationResponse_MessagesEntry;
    fromPartial(object: DeepPartial<CreateConversationResponse_MessagesEntry>): CreateConversationResponse_MessagesEntry;
};
export declare const CreateConversationResponse_ModActionsEntry: {
    $type: "devvit.plugin.redditapi.newmodmail.CreateConversationResponse.ModActionsEntry";
    encode(message: CreateConversationResponse_ModActionsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CreateConversationResponse_ModActionsEntry;
    fromJSON(object: any): CreateConversationResponse_ModActionsEntry;
    toJSON(message: CreateConversationResponse_ModActionsEntry): unknown;
    create(base?: DeepPartial<CreateConversationResponse_ModActionsEntry>): CreateConversationResponse_ModActionsEntry;
    fromPartial(object: DeepPartial<CreateConversationResponse_ModActionsEntry>): CreateConversationResponse_ModActionsEntry;
};
export declare const GetConversationResponse: {
    $type: "devvit.plugin.redditapi.newmodmail.GetConversationResponse";
    encode(message: GetConversationResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetConversationResponse;
    fromJSON(object: any): GetConversationResponse;
    toJSON(message: GetConversationResponse): unknown;
    create(base?: DeepPartial<GetConversationResponse>): GetConversationResponse;
    fromPartial(object: DeepPartial<GetConversationResponse>): GetConversationResponse;
};
export declare const GetConversationResponse_MessagesEntry: {
    $type: "devvit.plugin.redditapi.newmodmail.GetConversationResponse.MessagesEntry";
    encode(message: GetConversationResponse_MessagesEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetConversationResponse_MessagesEntry;
    fromJSON(object: any): GetConversationResponse_MessagesEntry;
    toJSON(message: GetConversationResponse_MessagesEntry): unknown;
    create(base?: DeepPartial<GetConversationResponse_MessagesEntry>): GetConversationResponse_MessagesEntry;
    fromPartial(object: DeepPartial<GetConversationResponse_MessagesEntry>): GetConversationResponse_MessagesEntry;
};
export declare const GetConversationResponse_ModActionsEntry: {
    $type: "devvit.plugin.redditapi.newmodmail.GetConversationResponse.ModActionsEntry";
    encode(message: GetConversationResponse_ModActionsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetConversationResponse_ModActionsEntry;
    fromJSON(object: any): GetConversationResponse_ModActionsEntry;
    toJSON(message: GetConversationResponse_ModActionsEntry): unknown;
    create(base?: DeepPartial<GetConversationResponse_ModActionsEntry>): GetConversationResponse_ModActionsEntry;
    fromPartial(object: DeepPartial<GetConversationResponse_ModActionsEntry>): GetConversationResponse_ModActionsEntry;
};
export declare const CreateConversationMessageResponse: {
    $type: "devvit.plugin.redditapi.newmodmail.CreateConversationMessageResponse";
    encode(message: CreateConversationMessageResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CreateConversationMessageResponse;
    fromJSON(object: any): CreateConversationMessageResponse;
    toJSON(message: CreateConversationMessageResponse): unknown;
    create(base?: DeepPartial<CreateConversationMessageResponse>): CreateConversationMessageResponse;
    fromPartial(object: DeepPartial<CreateConversationMessageResponse>): CreateConversationMessageResponse;
};
export declare const CreateConversationMessageResponse_MessagesEntry: {
    $type: "devvit.plugin.redditapi.newmodmail.CreateConversationMessageResponse.MessagesEntry";
    encode(message: CreateConversationMessageResponse_MessagesEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CreateConversationMessageResponse_MessagesEntry;
    fromJSON(object: any): CreateConversationMessageResponse_MessagesEntry;
    toJSON(message: CreateConversationMessageResponse_MessagesEntry): unknown;
    create(base?: DeepPartial<CreateConversationMessageResponse_MessagesEntry>): CreateConversationMessageResponse_MessagesEntry;
    fromPartial(object: DeepPartial<CreateConversationMessageResponse_MessagesEntry>): CreateConversationMessageResponse_MessagesEntry;
};
export declare const ApproveConversationResponse: {
    $type: "devvit.plugin.redditapi.newmodmail.ApproveConversationResponse";
    encode(message: ApproveConversationResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ApproveConversationResponse;
    fromJSON(object: any): ApproveConversationResponse;
    toJSON(message: ApproveConversationResponse): unknown;
    create(base?: DeepPartial<ApproveConversationResponse>): ApproveConversationResponse;
    fromPartial(object: DeepPartial<ApproveConversationResponse>): ApproveConversationResponse;
};
export declare const ApproveConversationResponse_MessagesEntry: {
    $type: "devvit.plugin.redditapi.newmodmail.ApproveConversationResponse.MessagesEntry";
    encode(message: ApproveConversationResponse_MessagesEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ApproveConversationResponse_MessagesEntry;
    fromJSON(object: any): ApproveConversationResponse_MessagesEntry;
    toJSON(message: ApproveConversationResponse_MessagesEntry): unknown;
    create(base?: DeepPartial<ApproveConversationResponse_MessagesEntry>): ApproveConversationResponse_MessagesEntry;
    fromPartial(object: DeepPartial<ApproveConversationResponse_MessagesEntry>): ApproveConversationResponse_MessagesEntry;
};
export declare const ApproveConversationResponse_ModActionsEntry: {
    $type: "devvit.plugin.redditapi.newmodmail.ApproveConversationResponse.ModActionsEntry";
    encode(message: ApproveConversationResponse_ModActionsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ApproveConversationResponse_ModActionsEntry;
    fromJSON(object: any): ApproveConversationResponse_ModActionsEntry;
    toJSON(message: ApproveConversationResponse_ModActionsEntry): unknown;
    create(base?: DeepPartial<ApproveConversationResponse_ModActionsEntry>): ApproveConversationResponse_ModActionsEntry;
    fromPartial(object: DeepPartial<ApproveConversationResponse_ModActionsEntry>): ApproveConversationResponse_ModActionsEntry;
};
export declare const ArchiveConversationResponse: {
    $type: "devvit.plugin.redditapi.newmodmail.ArchiveConversationResponse";
    encode(message: ArchiveConversationResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ArchiveConversationResponse;
    fromJSON(object: any): ArchiveConversationResponse;
    toJSON(message: ArchiveConversationResponse): unknown;
    create(base?: DeepPartial<ArchiveConversationResponse>): ArchiveConversationResponse;
    fromPartial(object: DeepPartial<ArchiveConversationResponse>): ArchiveConversationResponse;
};
export declare const ArchiveConversationResponse_MessagesEntry: {
    $type: "devvit.plugin.redditapi.newmodmail.ArchiveConversationResponse.MessagesEntry";
    encode(message: ArchiveConversationResponse_MessagesEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ArchiveConversationResponse_MessagesEntry;
    fromJSON(object: any): ArchiveConversationResponse_MessagesEntry;
    toJSON(message: ArchiveConversationResponse_MessagesEntry): unknown;
    create(base?: DeepPartial<ArchiveConversationResponse_MessagesEntry>): ArchiveConversationResponse_MessagesEntry;
    fromPartial(object: DeepPartial<ArchiveConversationResponse_MessagesEntry>): ArchiveConversationResponse_MessagesEntry;
};
export declare const ArchiveConversationResponse_ModActionsEntry: {
    $type: "devvit.plugin.redditapi.newmodmail.ArchiveConversationResponse.ModActionsEntry";
    encode(message: ArchiveConversationResponse_ModActionsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ArchiveConversationResponse_ModActionsEntry;
    fromJSON(object: any): ArchiveConversationResponse_ModActionsEntry;
    toJSON(message: ArchiveConversationResponse_ModActionsEntry): unknown;
    create(base?: DeepPartial<ArchiveConversationResponse_ModActionsEntry>): ArchiveConversationResponse_ModActionsEntry;
    fromPartial(object: DeepPartial<ArchiveConversationResponse_ModActionsEntry>): ArchiveConversationResponse_ModActionsEntry;
};
export declare const HighlightConversationResponse: {
    $type: "devvit.plugin.redditapi.newmodmail.HighlightConversationResponse";
    encode(message: HighlightConversationResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): HighlightConversationResponse;
    fromJSON(object: any): HighlightConversationResponse;
    toJSON(message: HighlightConversationResponse): unknown;
    create(base?: DeepPartial<HighlightConversationResponse>): HighlightConversationResponse;
    fromPartial(object: DeepPartial<HighlightConversationResponse>): HighlightConversationResponse;
};
export declare const HighlightConversationResponse_MessagesEntry: {
    $type: "devvit.plugin.redditapi.newmodmail.HighlightConversationResponse.MessagesEntry";
    encode(message: HighlightConversationResponse_MessagesEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): HighlightConversationResponse_MessagesEntry;
    fromJSON(object: any): HighlightConversationResponse_MessagesEntry;
    toJSON(message: HighlightConversationResponse_MessagesEntry): unknown;
    create(base?: DeepPartial<HighlightConversationResponse_MessagesEntry>): HighlightConversationResponse_MessagesEntry;
    fromPartial(object: DeepPartial<HighlightConversationResponse_MessagesEntry>): HighlightConversationResponse_MessagesEntry;
};
export declare const HighlightConversationResponse_ModActionsEntry: {
    $type: "devvit.plugin.redditapi.newmodmail.HighlightConversationResponse.ModActionsEntry";
    encode(message: HighlightConversationResponse_ModActionsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): HighlightConversationResponse_ModActionsEntry;
    fromJSON(object: any): HighlightConversationResponse_ModActionsEntry;
    toJSON(message: HighlightConversationResponse_ModActionsEntry): unknown;
    create(base?: DeepPartial<HighlightConversationResponse_ModActionsEntry>): HighlightConversationResponse_ModActionsEntry;
    fromPartial(object: DeepPartial<HighlightConversationResponse_ModActionsEntry>): HighlightConversationResponse_ModActionsEntry;
};
export declare const MuteConversationResponse: {
    $type: "devvit.plugin.redditapi.newmodmail.MuteConversationResponse";
    encode(message: MuteConversationResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MuteConversationResponse;
    fromJSON(object: any): MuteConversationResponse;
    toJSON(message: MuteConversationResponse): unknown;
    create(base?: DeepPartial<MuteConversationResponse>): MuteConversationResponse;
    fromPartial(object: DeepPartial<MuteConversationResponse>): MuteConversationResponse;
};
export declare const MuteConversationResponse_MessagesEntry: {
    $type: "devvit.plugin.redditapi.newmodmail.MuteConversationResponse.MessagesEntry";
    encode(message: MuteConversationResponse_MessagesEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MuteConversationResponse_MessagesEntry;
    fromJSON(object: any): MuteConversationResponse_MessagesEntry;
    toJSON(message: MuteConversationResponse_MessagesEntry): unknown;
    create(base?: DeepPartial<MuteConversationResponse_MessagesEntry>): MuteConversationResponse_MessagesEntry;
    fromPartial(object: DeepPartial<MuteConversationResponse_MessagesEntry>): MuteConversationResponse_MessagesEntry;
};
export declare const MuteConversationResponse_ModActionsEntry: {
    $type: "devvit.plugin.redditapi.newmodmail.MuteConversationResponse.ModActionsEntry";
    encode(message: MuteConversationResponse_ModActionsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MuteConversationResponse_ModActionsEntry;
    fromJSON(object: any): MuteConversationResponse_ModActionsEntry;
    toJSON(message: MuteConversationResponse_ModActionsEntry): unknown;
    create(base?: DeepPartial<MuteConversationResponse_ModActionsEntry>): MuteConversationResponse_ModActionsEntry;
    fromPartial(object: DeepPartial<MuteConversationResponse_ModActionsEntry>): MuteConversationResponse_ModActionsEntry;
};
export declare const TempBanResponse: {
    $type: "devvit.plugin.redditapi.newmodmail.TempBanResponse";
    encode(message: TempBanResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TempBanResponse;
    fromJSON(object: any): TempBanResponse;
    toJSON(message: TempBanResponse): unknown;
    create(base?: DeepPartial<TempBanResponse>): TempBanResponse;
    fromPartial(object: DeepPartial<TempBanResponse>): TempBanResponse;
};
export declare const TempBanResponse_MessagesEntry: {
    $type: "devvit.plugin.redditapi.newmodmail.TempBanResponse.MessagesEntry";
    encode(message: TempBanResponse_MessagesEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TempBanResponse_MessagesEntry;
    fromJSON(object: any): TempBanResponse_MessagesEntry;
    toJSON(message: TempBanResponse_MessagesEntry): unknown;
    create(base?: DeepPartial<TempBanResponse_MessagesEntry>): TempBanResponse_MessagesEntry;
    fromPartial(object: DeepPartial<TempBanResponse_MessagesEntry>): TempBanResponse_MessagesEntry;
};
export declare const TempBanResponse_ModActionsEntry: {
    $type: "devvit.plugin.redditapi.newmodmail.TempBanResponse.ModActionsEntry";
    encode(message: TempBanResponse_ModActionsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TempBanResponse_ModActionsEntry;
    fromJSON(object: any): TempBanResponse_ModActionsEntry;
    toJSON(message: TempBanResponse_ModActionsEntry): unknown;
    create(base?: DeepPartial<TempBanResponse_ModActionsEntry>): TempBanResponse_ModActionsEntry;
    fromPartial(object: DeepPartial<TempBanResponse_ModActionsEntry>): TempBanResponse_ModActionsEntry;
};
export declare const SubredditsResponse: {
    $type: "devvit.plugin.redditapi.newmodmail.SubredditsResponse";
    encode(message: SubredditsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SubredditsResponse;
    fromJSON(object: any): SubredditsResponse;
    toJSON(message: SubredditsResponse): unknown;
    create(base?: DeepPartial<SubredditsResponse>): SubredditsResponse;
    fromPartial(object: DeepPartial<SubredditsResponse>): SubredditsResponse;
};
export declare const SubredditsResponse_SubredditData: {
    $type: "devvit.plugin.redditapi.newmodmail.SubredditsResponse.SubredditData";
    encode(message: SubredditsResponse_SubredditData, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SubredditsResponse_SubredditData;
    fromJSON(object: any): SubredditsResponse_SubredditData;
    toJSON(message: SubredditsResponse_SubredditData): unknown;
    create(base?: DeepPartial<SubredditsResponse_SubredditData>): SubredditsResponse_SubredditData;
    fromPartial(object: DeepPartial<SubredditsResponse_SubredditData>): SubredditsResponse_SubredditData;
};
export declare const SubredditsResponse_SubredditsEntry: {
    $type: "devvit.plugin.redditapi.newmodmail.SubredditsResponse.SubredditsEntry";
    encode(message: SubredditsResponse_SubredditsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SubredditsResponse_SubredditsEntry;
    fromJSON(object: any): SubredditsResponse_SubredditsEntry;
    toJSON(message: SubredditsResponse_SubredditsEntry): unknown;
    create(base?: DeepPartial<SubredditsResponse_SubredditsEntry>): SubredditsResponse_SubredditsEntry;
    fromPartial(object: DeepPartial<SubredditsResponse_SubredditsEntry>): SubredditsResponse_SubredditsEntry;
};
export declare const UnreadCountResponse: {
    $type: "devvit.plugin.redditapi.newmodmail.UnreadCountResponse";
    encode(message: UnreadCountResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UnreadCountResponse;
    fromJSON(object: any): UnreadCountResponse;
    toJSON(message: UnreadCountResponse): unknown;
    create(base?: DeepPartial<UnreadCountResponse>): UnreadCountResponse;
    fromPartial(object: DeepPartial<UnreadCountResponse>): UnreadCountResponse;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=newmodmail_msg.d.ts.map