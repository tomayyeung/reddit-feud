import { BulkReadConversationsRequest, BulkReadConversationsResponse, GetConversationsRequest, GetConversationsResponse, CreateConversationRequest, CreateConversationResponse, GetConversationRequest, GetConversationResponse, CreateConversationMessageRequest, CreateConversationMessageResponse, BasicConversationRequest, ApproveConversationResponse, ArchiveConversationResponse, HighlightConversationResponse, MuteConversationRequest, MuteConversationResponse, TempBanRequest, TempBanResponse, ConversationUserData, BasicConversationsRequest, SubredditsResponse, UnreadCountResponse, } from './newmodmail_msg.js';
import { Empty } from '../../../../google/protobuf/empty.js';
export class NewModmailClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.BulkReadConversations.bind(this);
        this.GetConversations.bind(this);
        this.CreateConversation.bind(this);
        this.GetConversation.bind(this);
        this.CreateConversationMessage.bind(this);
        this.ApproveConversation.bind(this);
        this.ArchiveConversation.bind(this);
        this.DisapproveConversation.bind(this);
        this.UnhighlightConversation.bind(this);
        this.HighlightConversation.bind(this);
        this.MuteConversation.bind(this);
        this.TempBan.bind(this);
        this.UnarchiveConversation.bind(this);
        this.Unban.bind(this);
        this.UnmuteConversation.bind(this);
        this.UserConversations.bind(this);
        this.Read.bind(this);
        this.Subreddits.bind(this);
        this.Unread.bind(this);
        this.UnreadCount.bind(this);
    }
    BulkReadConversations(request) {
        const data = BulkReadConversationsRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.newmodmail.NewModmail', 'BulkReadConversations', 'application/json', data);
        return promise.then((data) => BulkReadConversationsResponse.fromJSON(data));
    }
    GetConversations(request) {
        const data = GetConversationsRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.newmodmail.NewModmail', 'GetConversations', 'application/json', data);
        return promise.then((data) => GetConversationsResponse.fromJSON(data));
    }
    CreateConversation(request) {
        const data = CreateConversationRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.newmodmail.NewModmail', 'CreateConversation', 'application/json', data);
        return promise.then((data) => CreateConversationResponse.fromJSON(data));
    }
    GetConversation(request) {
        const data = GetConversationRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.newmodmail.NewModmail', 'GetConversation', 'application/json', data);
        return promise.then((data) => GetConversationResponse.fromJSON(data));
    }
    CreateConversationMessage(request) {
        const data = CreateConversationMessageRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.newmodmail.NewModmail', 'CreateConversationMessage', 'application/json', data);
        return promise.then((data) => CreateConversationMessageResponse.fromJSON(data));
    }
    ApproveConversation(request) {
        const data = BasicConversationRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.newmodmail.NewModmail', 'ApproveConversation', 'application/json', data);
        return promise.then((data) => ApproveConversationResponse.fromJSON(data));
    }
    ArchiveConversation(request) {
        const data = BasicConversationRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.newmodmail.NewModmail', 'ArchiveConversation', 'application/json', data);
        return promise.then((data) => ArchiveConversationResponse.fromJSON(data));
    }
    DisapproveConversation(request) {
        const data = BasicConversationRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.newmodmail.NewModmail', 'DisapproveConversation', 'application/json', data);
        return promise.then((data) => ApproveConversationResponse.fromJSON(data));
    }
    UnhighlightConversation(request) {
        const data = BasicConversationRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.newmodmail.NewModmail', 'UnhighlightConversation', 'application/json', data);
        return promise.then((data) => HighlightConversationResponse.fromJSON(data));
    }
    HighlightConversation(request) {
        const data = BasicConversationRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.newmodmail.NewModmail', 'HighlightConversation', 'application/json', data);
        return promise.then((data) => HighlightConversationResponse.fromJSON(data));
    }
    MuteConversation(request) {
        const data = MuteConversationRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.newmodmail.NewModmail', 'MuteConversation', 'application/json', data);
        return promise.then((data) => MuteConversationResponse.fromJSON(data));
    }
    TempBan(request) {
        const data = TempBanRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.newmodmail.NewModmail', 'TempBan', 'application/json', data);
        return promise.then((data) => TempBanResponse.fromJSON(data));
    }
    UnarchiveConversation(request) {
        const data = BasicConversationRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.newmodmail.NewModmail', 'UnarchiveConversation', 'application/json', data);
        return promise.then((data) => ArchiveConversationResponse.fromJSON(data));
    }
    Unban(request) {
        const data = BasicConversationRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.newmodmail.NewModmail', 'Unban', 'application/json', data);
        return promise.then((data) => TempBanResponse.fromJSON(data));
    }
    UnmuteConversation(request) {
        const data = BasicConversationRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.newmodmail.NewModmail', 'UnmuteConversation', 'application/json', data);
        return promise.then((data) => MuteConversationResponse.fromJSON(data));
    }
    UserConversations(request) {
        const data = BasicConversationRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.newmodmail.NewModmail', 'UserConversations', 'application/json', data);
        return promise.then((data) => ConversationUserData.fromJSON(data));
    }
    Read(request) {
        const data = BasicConversationsRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.newmodmail.NewModmail', 'Read', 'application/json', data);
        return promise.then((data) => Empty.fromJSON(data));
    }
    Subreddits(request) {
        const data = Empty.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.newmodmail.NewModmail', 'Subreddits', 'application/json', data);
        return promise.then((data) => SubredditsResponse.fromJSON(data));
    }
    Unread(request) {
        const data = BasicConversationsRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.newmodmail.NewModmail', 'Unread', 'application/json', data);
        return promise.then((data) => Empty.fromJSON(data));
    }
    UnreadCount(request) {
        const data = Empty.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.newmodmail.NewModmail', 'UnreadCount', 'application/json', data);
        return promise.then((data) => UnreadCountResponse.fromJSON(data));
    }
}
export class NewModmailClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.BulkReadConversations.bind(this);
        this.GetConversations.bind(this);
        this.CreateConversation.bind(this);
        this.GetConversation.bind(this);
        this.CreateConversationMessage.bind(this);
        this.ApproveConversation.bind(this);
        this.ArchiveConversation.bind(this);
        this.DisapproveConversation.bind(this);
        this.UnhighlightConversation.bind(this);
        this.HighlightConversation.bind(this);
        this.MuteConversation.bind(this);
        this.TempBan.bind(this);
        this.UnarchiveConversation.bind(this);
        this.Unban.bind(this);
        this.UnmuteConversation.bind(this);
        this.UserConversations.bind(this);
        this.Read.bind(this);
        this.Subreddits.bind(this);
        this.Unread.bind(this);
        this.UnreadCount.bind(this);
    }
    BulkReadConversations(request) {
        const data = BulkReadConversationsRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.newmodmail.NewModmail', 'BulkReadConversations', 'application/protobuf', data);
        return promise.then((data) => BulkReadConversationsResponse.decode(data));
    }
    GetConversations(request) {
        const data = GetConversationsRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.newmodmail.NewModmail', 'GetConversations', 'application/protobuf', data);
        return promise.then((data) => GetConversationsResponse.decode(data));
    }
    CreateConversation(request) {
        const data = CreateConversationRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.newmodmail.NewModmail', 'CreateConversation', 'application/protobuf', data);
        return promise.then((data) => CreateConversationResponse.decode(data));
    }
    GetConversation(request) {
        const data = GetConversationRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.newmodmail.NewModmail', 'GetConversation', 'application/protobuf', data);
        return promise.then((data) => GetConversationResponse.decode(data));
    }
    CreateConversationMessage(request) {
        const data = CreateConversationMessageRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.newmodmail.NewModmail', 'CreateConversationMessage', 'application/protobuf', data);
        return promise.then((data) => CreateConversationMessageResponse.decode(data));
    }
    ApproveConversation(request) {
        const data = BasicConversationRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.newmodmail.NewModmail', 'ApproveConversation', 'application/protobuf', data);
        return promise.then((data) => ApproveConversationResponse.decode(data));
    }
    ArchiveConversation(request) {
        const data = BasicConversationRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.newmodmail.NewModmail', 'ArchiveConversation', 'application/protobuf', data);
        return promise.then((data) => ArchiveConversationResponse.decode(data));
    }
    DisapproveConversation(request) {
        const data = BasicConversationRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.newmodmail.NewModmail', 'DisapproveConversation', 'application/protobuf', data);
        return promise.then((data) => ApproveConversationResponse.decode(data));
    }
    UnhighlightConversation(request) {
        const data = BasicConversationRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.newmodmail.NewModmail', 'UnhighlightConversation', 'application/protobuf', data);
        return promise.then((data) => HighlightConversationResponse.decode(data));
    }
    HighlightConversation(request) {
        const data = BasicConversationRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.newmodmail.NewModmail', 'HighlightConversation', 'application/protobuf', data);
        return promise.then((data) => HighlightConversationResponse.decode(data));
    }
    MuteConversation(request) {
        const data = MuteConversationRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.newmodmail.NewModmail', 'MuteConversation', 'application/protobuf', data);
        return promise.then((data) => MuteConversationResponse.decode(data));
    }
    TempBan(request) {
        const data = TempBanRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.newmodmail.NewModmail', 'TempBan', 'application/protobuf', data);
        return promise.then((data) => TempBanResponse.decode(data));
    }
    UnarchiveConversation(request) {
        const data = BasicConversationRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.newmodmail.NewModmail', 'UnarchiveConversation', 'application/protobuf', data);
        return promise.then((data) => ArchiveConversationResponse.decode(data));
    }
    Unban(request) {
        const data = BasicConversationRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.newmodmail.NewModmail', 'Unban', 'application/protobuf', data);
        return promise.then((data) => TempBanResponse.decode(data));
    }
    UnmuteConversation(request) {
        const data = BasicConversationRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.newmodmail.NewModmail', 'UnmuteConversation', 'application/protobuf', data);
        return promise.then((data) => MuteConversationResponse.decode(data));
    }
    UserConversations(request) {
        const data = BasicConversationRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.newmodmail.NewModmail', 'UserConversations', 'application/protobuf', data);
        return promise.then((data) => ConversationUserData.decode(data));
    }
    Read(request) {
        const data = BasicConversationsRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.newmodmail.NewModmail', 'Read', 'application/protobuf', data);
        return promise.then((data) => Empty.decode(data));
    }
    Subreddits(request) {
        const data = Empty.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.newmodmail.NewModmail', 'Subreddits', 'application/protobuf', data);
        return promise.then((data) => SubredditsResponse.decode(data));
    }
    Unread(request) {
        const data = BasicConversationsRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.newmodmail.NewModmail', 'Unread', 'application/protobuf', data);
        return promise.then((data) => Empty.decode(data));
    }
    UnreadCount(request) {
        const data = Empty.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.newmodmail.NewModmail', 'UnreadCount', 'application/protobuf', data);
        return promise.then((data) => UnreadCountResponse.decode(data));
    }
}
