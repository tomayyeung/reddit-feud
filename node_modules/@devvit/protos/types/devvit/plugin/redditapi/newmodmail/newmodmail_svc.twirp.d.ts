/// <reference types="node" resolution-mode="require"/>
import { TwirpContext, TwirpServer } from 'twirp-ts';
import { BulkReadConversationsRequest, BulkReadConversationsResponse, GetConversationsRequest, GetConversationsResponse, CreateConversationRequest, CreateConversationResponse, GetConversationRequest, GetConversationResponse, CreateConversationMessageRequest, CreateConversationMessageResponse, BasicConversationRequest, ApproveConversationResponse, ArchiveConversationResponse, HighlightConversationResponse, MuteConversationRequest, MuteConversationResponse, TempBanRequest, TempBanResponse, ConversationUserData, BasicConversationsRequest, SubredditsResponse, UnreadCountResponse } from './newmodmail_msg.js';
import { Empty } from '../../../../google/protobuf/empty.js';
export interface NewModmailTwirp<T extends TwirpContext = TwirpContext> {
    BulkReadConversations(ctx: T, request: BulkReadConversationsRequest): Promise<BulkReadConversationsResponse>;
    GetConversations(ctx: T, request: GetConversationsRequest): Promise<GetConversationsResponse>;
    CreateConversation(ctx: T, request: CreateConversationRequest): Promise<CreateConversationResponse>;
    GetConversation(ctx: T, request: GetConversationRequest): Promise<GetConversationResponse>;
    CreateConversationMessage(ctx: T, request: CreateConversationMessageRequest): Promise<CreateConversationMessageResponse>;
    ApproveConversation(ctx: T, request: BasicConversationRequest): Promise<ApproveConversationResponse>;
    ArchiveConversation(ctx: T, request: BasicConversationRequest): Promise<ArchiveConversationResponse>;
    DisapproveConversation(ctx: T, request: BasicConversationRequest): Promise<ApproveConversationResponse>;
    UnhighlightConversation(ctx: T, request: BasicConversationRequest): Promise<HighlightConversationResponse>;
    HighlightConversation(ctx: T, request: BasicConversationRequest): Promise<HighlightConversationResponse>;
    MuteConversation(ctx: T, request: MuteConversationRequest): Promise<MuteConversationResponse>;
    TempBan(ctx: T, request: TempBanRequest): Promise<TempBanResponse>;
    UnarchiveConversation(ctx: T, request: BasicConversationRequest): Promise<ArchiveConversationResponse>;
    Unban(ctx: T, request: BasicConversationRequest): Promise<TempBanResponse>;
    UnmuteConversation(ctx: T, request: BasicConversationRequest): Promise<MuteConversationResponse>;
    UserConversations(ctx: T, request: BasicConversationRequest): Promise<ConversationUserData>;
    Read(ctx: T, request: BasicConversationsRequest): Promise<Empty>;
    Subreddits(ctx: T, request: Empty): Promise<SubredditsResponse>;
    Unread(ctx: T, request: BasicConversationsRequest): Promise<Empty>;
    UnreadCount(ctx: T, request: Empty): Promise<UnreadCountResponse>;
}
export declare enum NewModmailMethod {
    BulkReadConversations = "BulkReadConversations",
    GetConversations = "GetConversations",
    CreateConversation = "CreateConversation",
    GetConversation = "GetConversation",
    CreateConversationMessage = "CreateConversationMessage",
    ApproveConversation = "ApproveConversation",
    ArchiveConversation = "ArchiveConversation",
    DisapproveConversation = "DisapproveConversation",
    UnhighlightConversation = "UnhighlightConversation",
    HighlightConversation = "HighlightConversation",
    MuteConversation = "MuteConversation",
    TempBan = "TempBan",
    UnarchiveConversation = "UnarchiveConversation",
    Unban = "Unban",
    UnmuteConversation = "UnmuteConversation",
    UserConversations = "UserConversations",
    Read = "Read",
    Subreddits = "Subreddits",
    Unread = "Unread",
    UnreadCount = "UnreadCount"
}
export declare const NewModmailMethodList: NewModmailMethod[];
export declare function createNewModmailServer<T extends TwirpContext = TwirpContext>(service: NewModmailTwirp<T>): TwirpServer<NewModmailTwirp<TwirpContext<import("http").IncomingMessage, import("http").ServerResponse<import("http").IncomingMessage>>>, T>;
//# sourceMappingURL=newmodmail_svc.twirp.d.ts.map