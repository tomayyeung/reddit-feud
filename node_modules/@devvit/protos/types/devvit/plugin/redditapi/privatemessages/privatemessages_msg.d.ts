/**
 * #privatemessages_msg.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
export interface GenericPrivateMessagesRequest {
    /** fullname of a thing */
    id: string;
}
export interface ComposeRequest {
    /** the name of an existing user */
    to: string;
    /** a string no longer than 100 characters */
    subject: string;
    /** raw markdown text */
    text: string;
    /** subreddit name */
    fromSr: string;
}
export interface ReadAllMessagesRequest {
    /** A comma-separated list of items */
    filterTypes: string;
}
export interface MessageWhereRequest {
    /** one "inbox", "unread", or "sent" */
    where: string;
    /** true or false */
    mark?: boolean | undefined;
    /** message id */
    mid?: string | undefined;
    /** fullname of a thing */
    after?: string | undefined;
    /** fullname of a thing */
    before?: string | undefined;
    /** a positive integer (default: 0) */
    count?: number | undefined;
    /** the maximum number of items desired (default: 25, maximum: 100) */
    limit?: number | undefined;
    /** (optional) the string all */
    show?: string | undefined;
}
export declare const GenericPrivateMessagesRequest: {
    $type: "devvit.plugin.redditapi.privatemessages.GenericPrivateMessagesRequest";
    encode(message: GenericPrivateMessagesRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GenericPrivateMessagesRequest;
    fromJSON(object: any): GenericPrivateMessagesRequest;
    toJSON(message: GenericPrivateMessagesRequest): unknown;
    create(base?: DeepPartial<GenericPrivateMessagesRequest>): GenericPrivateMessagesRequest;
    fromPartial(object: DeepPartial<GenericPrivateMessagesRequest>): GenericPrivateMessagesRequest;
};
export declare const ComposeRequest: {
    $type: "devvit.plugin.redditapi.privatemessages.ComposeRequest";
    encode(message: ComposeRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ComposeRequest;
    fromJSON(object: any): ComposeRequest;
    toJSON(message: ComposeRequest): unknown;
    create(base?: DeepPartial<ComposeRequest>): ComposeRequest;
    fromPartial(object: DeepPartial<ComposeRequest>): ComposeRequest;
};
export declare const ReadAllMessagesRequest: {
    $type: "devvit.plugin.redditapi.privatemessages.ReadAllMessagesRequest";
    encode(message: ReadAllMessagesRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ReadAllMessagesRequest;
    fromJSON(object: any): ReadAllMessagesRequest;
    toJSON(message: ReadAllMessagesRequest): unknown;
    create(base?: DeepPartial<ReadAllMessagesRequest>): ReadAllMessagesRequest;
    fromPartial(object: DeepPartial<ReadAllMessagesRequest>): ReadAllMessagesRequest;
};
export declare const MessageWhereRequest: {
    $type: "devvit.plugin.redditapi.privatemessages.MessageWhereRequest";
    encode(message: MessageWhereRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MessageWhereRequest;
    fromJSON(object: any): MessageWhereRequest;
    toJSON(message: MessageWhereRequest): unknown;
    create(base?: DeepPartial<MessageWhereRequest>): MessageWhereRequest;
    fromPartial(object: DeepPartial<MessageWhereRequest>): MessageWhereRequest;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=privatemessages_msg.d.ts.map