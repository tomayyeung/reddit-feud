/**
 * #privatemessages_msg.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { BoolValue, Int64Value, StringValue } from "../../../../google/protobuf/wrappers.js";
import { messageTypeRegistry } from "../../../../typeRegistry.js";
function createBaseGenericPrivateMessagesRequest() {
    return { id: "" };
}
export const GenericPrivateMessagesRequest = {
    $type: "devvit.plugin.redditapi.privatemessages.GenericPrivateMessagesRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGenericPrivateMessagesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return GenericPrivateMessagesRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGenericPrivateMessagesRequest();
        message.id = object.id ?? "";
        return message;
    },
};
messageTypeRegistry.set(GenericPrivateMessagesRequest.$type, GenericPrivateMessagesRequest);
function createBaseComposeRequest() {
    return { to: "", subject: "", text: "", fromSr: "" };
}
export const ComposeRequest = {
    $type: "devvit.plugin.redditapi.privatemessages.ComposeRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.to !== "") {
            writer.uint32(10).string(message.to);
        }
        if (message.subject !== "") {
            writer.uint32(18).string(message.subject);
        }
        if (message.text !== "") {
            writer.uint32(26).string(message.text);
        }
        if (message.fromSr !== "") {
            writer.uint32(34).string(message.fromSr);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseComposeRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.to = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.subject = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.text = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.fromSr = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            to: isSet(object.to) ? globalThis.String(object.to) : "",
            subject: isSet(object.subject) ? globalThis.String(object.subject) : "",
            text: isSet(object.text) ? globalThis.String(object.text) : "",
            fromSr: isSet(object.fromSr) ? globalThis.String(object.fromSr) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.to !== "") {
            obj.to = message.to;
        }
        if (message.subject !== "") {
            obj.subject = message.subject;
        }
        if (message.text !== "") {
            obj.text = message.text;
        }
        if (message.fromSr !== "") {
            obj.fromSr = message.fromSr;
        }
        return obj;
    },
    create(base) {
        return ComposeRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseComposeRequest();
        message.to = object.to ?? "";
        message.subject = object.subject ?? "";
        message.text = object.text ?? "";
        message.fromSr = object.fromSr ?? "";
        return message;
    },
};
messageTypeRegistry.set(ComposeRequest.$type, ComposeRequest);
function createBaseReadAllMessagesRequest() {
    return { filterTypes: "" };
}
export const ReadAllMessagesRequest = {
    $type: "devvit.plugin.redditapi.privatemessages.ReadAllMessagesRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.filterTypes !== "") {
            writer.uint32(10).string(message.filterTypes);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseReadAllMessagesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.filterTypes = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { filterTypes: isSet(object.filterTypes) ? globalThis.String(object.filterTypes) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.filterTypes !== "") {
            obj.filterTypes = message.filterTypes;
        }
        return obj;
    },
    create(base) {
        return ReadAllMessagesRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseReadAllMessagesRequest();
        message.filterTypes = object.filterTypes ?? "";
        return message;
    },
};
messageTypeRegistry.set(ReadAllMessagesRequest.$type, ReadAllMessagesRequest);
function createBaseMessageWhereRequest() {
    return {
        where: "",
        mark: undefined,
        mid: undefined,
        after: undefined,
        before: undefined,
        count: undefined,
        limit: undefined,
        show: undefined,
    };
}
export const MessageWhereRequest = {
    $type: "devvit.plugin.redditapi.privatemessages.MessageWhereRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.where !== "") {
            writer.uint32(10).string(message.where);
        }
        if (message.mark !== undefined) {
            BoolValue.encode({ value: message.mark }, writer.uint32(18).fork()).ldelim();
        }
        if (message.mid !== undefined) {
            StringValue.encode({ value: message.mid }, writer.uint32(26).fork()).ldelim();
        }
        if (message.after !== undefined) {
            StringValue.encode({ value: message.after }, writer.uint32(34).fork()).ldelim();
        }
        if (message.before !== undefined) {
            StringValue.encode({ value: message.before }, writer.uint32(42).fork()).ldelim();
        }
        if (message.count !== undefined) {
            Int64Value.encode({ value: message.count }, writer.uint32(50).fork()).ldelim();
        }
        if (message.limit !== undefined) {
            Int64Value.encode({ value: message.limit }, writer.uint32(58).fork()).ldelim();
        }
        if (message.show !== undefined) {
            StringValue.encode({ value: message.show }, writer.uint32(66).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMessageWhereRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.where = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.mark = BoolValue.decode(reader, reader.uint32()).value;
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.mid = StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.after = StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.before = StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.count = Int64Value.decode(reader, reader.uint32()).value;
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.limit = Int64Value.decode(reader, reader.uint32()).value;
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.show = StringValue.decode(reader, reader.uint32()).value;
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            where: isSet(object.where) ? globalThis.String(object.where) : "",
            mark: isSet(object.mark) ? Boolean(object.mark) : undefined,
            mid: isSet(object.mid) ? String(object.mid) : undefined,
            after: isSet(object.after) ? String(object.after) : undefined,
            before: isSet(object.before) ? String(object.before) : undefined,
            count: isSet(object.count) ? Number(object.count) : undefined,
            limit: isSet(object.limit) ? Number(object.limit) : undefined,
            show: isSet(object.show) ? String(object.show) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.where !== "") {
            obj.where = message.where;
        }
        if (message.mark !== undefined) {
            obj.mark = message.mark;
        }
        if (message.mid !== undefined) {
            obj.mid = message.mid;
        }
        if (message.after !== undefined) {
            obj.after = message.after;
        }
        if (message.before !== undefined) {
            obj.before = message.before;
        }
        if (message.count !== undefined) {
            obj.count = message.count;
        }
        if (message.limit !== undefined) {
            obj.limit = message.limit;
        }
        if (message.show !== undefined) {
            obj.show = message.show;
        }
        return obj;
    },
    create(base) {
        return MessageWhereRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMessageWhereRequest();
        message.where = object.where ?? "";
        message.mark = object.mark ?? undefined;
        message.mid = object.mid ?? undefined;
        message.after = object.after ?? undefined;
        message.before = object.before ?? undefined;
        message.count = object.count ?? undefined;
        message.limit = object.limit ?? undefined;
        message.show = object.show ?? undefined;
        return message;
    },
};
messageTypeRegistry.set(MessageWhereRequest.$type, MessageWhereRequest);
function isSet(value) {
    return value !== null && value !== undefined;
}
