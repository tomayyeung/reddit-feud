import { GenericPrivateMessagesRequest, ComposeRequest, ReadAllMessagesRequest, MessageWhereRequest, } from './privatemessages_msg.js';
import { Empty } from '../../../../google/protobuf/empty.js';
import { Listing } from '../common/common_msg.js';
export class PrivateMessagesClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.Block.bind(this);
        this.CollapseMessage.bind(this);
        this.Compose.bind(this);
        this.DelMsg.bind(this);
        this.ReadAllMessages.bind(this);
        this.ReadMessage.bind(this);
        this.UnblockSubreddit.bind(this);
        this.UncollapseMessage.bind(this);
        this.UnreadMessage.bind(this);
        this.MessageWhere.bind(this);
    }
    Block(request) {
        const data = GenericPrivateMessagesRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.privatemessages.PrivateMessages', 'Block', 'application/json', data);
        return promise.then((data) => Empty.fromJSON(data));
    }
    CollapseMessage(request) {
        const data = GenericPrivateMessagesRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.privatemessages.PrivateMessages', 'CollapseMessage', 'application/json', data);
        return promise.then((data) => Empty.fromJSON(data));
    }
    Compose(request) {
        const data = ComposeRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.privatemessages.PrivateMessages', 'Compose', 'application/json', data);
        return promise.then((data) => Empty.fromJSON(data));
    }
    DelMsg(request) {
        const data = GenericPrivateMessagesRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.privatemessages.PrivateMessages', 'DelMsg', 'application/json', data);
        return promise.then((data) => Empty.fromJSON(data));
    }
    ReadAllMessages(request) {
        const data = ReadAllMessagesRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.privatemessages.PrivateMessages', 'ReadAllMessages', 'application/json', data);
        return promise.then((data) => Empty.fromJSON(data));
    }
    ReadMessage(request) {
        const data = GenericPrivateMessagesRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.privatemessages.PrivateMessages', 'ReadMessage', 'application/json', data);
        return promise.then((data) => Empty.fromJSON(data));
    }
    UnblockSubreddit(request) {
        const data = GenericPrivateMessagesRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.privatemessages.PrivateMessages', 'UnblockSubreddit', 'application/json', data);
        return promise.then((data) => Empty.fromJSON(data));
    }
    UncollapseMessage(request) {
        const data = GenericPrivateMessagesRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.privatemessages.PrivateMessages', 'UncollapseMessage', 'application/json', data);
        return promise.then((data) => Empty.fromJSON(data));
    }
    UnreadMessage(request) {
        const data = GenericPrivateMessagesRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.privatemessages.PrivateMessages', 'UnreadMessage', 'application/json', data);
        return promise.then((data) => Empty.fromJSON(data));
    }
    MessageWhere(request) {
        const data = MessageWhereRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.privatemessages.PrivateMessages', 'MessageWhere', 'application/json', data);
        return promise.then((data) => Listing.fromJSON(data));
    }
}
export class PrivateMessagesClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.Block.bind(this);
        this.CollapseMessage.bind(this);
        this.Compose.bind(this);
        this.DelMsg.bind(this);
        this.ReadAllMessages.bind(this);
        this.ReadMessage.bind(this);
        this.UnblockSubreddit.bind(this);
        this.UncollapseMessage.bind(this);
        this.UnreadMessage.bind(this);
        this.MessageWhere.bind(this);
    }
    Block(request) {
        const data = GenericPrivateMessagesRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.privatemessages.PrivateMessages', 'Block', 'application/protobuf', data);
        return promise.then((data) => Empty.decode(data));
    }
    CollapseMessage(request) {
        const data = GenericPrivateMessagesRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.privatemessages.PrivateMessages', 'CollapseMessage', 'application/protobuf', data);
        return promise.then((data) => Empty.decode(data));
    }
    Compose(request) {
        const data = ComposeRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.privatemessages.PrivateMessages', 'Compose', 'application/protobuf', data);
        return promise.then((data) => Empty.decode(data));
    }
    DelMsg(request) {
        const data = GenericPrivateMessagesRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.privatemessages.PrivateMessages', 'DelMsg', 'application/protobuf', data);
        return promise.then((data) => Empty.decode(data));
    }
    ReadAllMessages(request) {
        const data = ReadAllMessagesRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.privatemessages.PrivateMessages', 'ReadAllMessages', 'application/protobuf', data);
        return promise.then((data) => Empty.decode(data));
    }
    ReadMessage(request) {
        const data = GenericPrivateMessagesRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.privatemessages.PrivateMessages', 'ReadMessage', 'application/protobuf', data);
        return promise.then((data) => Empty.decode(data));
    }
    UnblockSubreddit(request) {
        const data = GenericPrivateMessagesRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.privatemessages.PrivateMessages', 'UnblockSubreddit', 'application/protobuf', data);
        return promise.then((data) => Empty.decode(data));
    }
    UncollapseMessage(request) {
        const data = GenericPrivateMessagesRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.privatemessages.PrivateMessages', 'UncollapseMessage', 'application/protobuf', data);
        return promise.then((data) => Empty.decode(data));
    }
    UnreadMessage(request) {
        const data = GenericPrivateMessagesRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.privatemessages.PrivateMessages', 'UnreadMessage', 'application/protobuf', data);
        return promise.then((data) => Empty.decode(data));
    }
    MessageWhere(request) {
        const data = MessageWhereRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.privatemessages.PrivateMessages', 'MessageWhere', 'application/protobuf', data);
        return promise.then((data) => Listing.decode(data));
    }
}
