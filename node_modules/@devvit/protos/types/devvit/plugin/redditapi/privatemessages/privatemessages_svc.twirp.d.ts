/// <reference types="node" resolution-mode="require"/>
import { TwirpContext, TwirpServer } from 'twirp-ts';
import { GenericPrivateMessagesRequest, ComposeRequest, ReadAllMessagesRequest, MessageWhereRequest } from './privatemessages_msg.js';
import { Empty } from '../../../../google/protobuf/empty.js';
import { Listing } from '../common/common_msg.js';
export interface PrivateMessagesTwirp<T extends TwirpContext = TwirpContext> {
    Block(ctx: T, request: GenericPrivateMessagesRequest): Promise<Empty>;
    CollapseMessage(ctx: T, request: GenericPrivateMessagesRequest): Promise<Empty>;
    Compose(ctx: T, request: ComposeRequest): Promise<Empty>;
    DelMsg(ctx: T, request: GenericPrivateMessagesRequest): Promise<Empty>;
    ReadAllMessages(ctx: T, request: ReadAllMessagesRequest): Promise<Empty>;
    ReadMessage(ctx: T, request: GenericPrivateMessagesRequest): Promise<Empty>;
    UnblockSubreddit(ctx: T, request: GenericPrivateMessagesRequest): Promise<Empty>;
    UncollapseMessage(ctx: T, request: GenericPrivateMessagesRequest): Promise<Empty>;
    UnreadMessage(ctx: T, request: GenericPrivateMessagesRequest): Promise<Empty>;
    MessageWhere(ctx: T, request: MessageWhereRequest): Promise<Listing>;
}
export declare enum PrivateMessagesMethod {
    Block = "Block",
    CollapseMessage = "CollapseMessage",
    Compose = "Compose",
    DelMsg = "DelMsg",
    ReadAllMessages = "ReadAllMessages",
    ReadMessage = "ReadMessage",
    UnblockSubreddit = "UnblockSubreddit",
    UncollapseMessage = "UncollapseMessage",
    UnreadMessage = "UnreadMessage",
    MessageWhere = "MessageWhere"
}
export declare const PrivateMessagesMethodList: PrivateMessagesMethod[];
export declare function createPrivateMessagesServer<T extends TwirpContext = TwirpContext>(service: PrivateMessagesTwirp<T>): TwirpServer<PrivateMessagesTwirp<TwirpContext<import("http").IncomingMessage, import("http").ServerResponse<import("http").IncomingMessage>>>, T>;
//# sourceMappingURL=privatemessages_svc.twirp.d.ts.map