import { TwirpServer, TwirpError, TwirpErrorCode, TwirpContentType, chainInterceptors, } from 'twirp-ts';
import { GenericPrivateMessagesRequest, ComposeRequest, ReadAllMessagesRequest, MessageWhereRequest, } from './privatemessages_msg.js';
import { Empty } from '../../../../google/protobuf/empty.js';
import { Listing } from '../common/common_msg.js';
export var PrivateMessagesMethod;
(function (PrivateMessagesMethod) {
    PrivateMessagesMethod["Block"] = "Block";
    PrivateMessagesMethod["CollapseMessage"] = "CollapseMessage";
    PrivateMessagesMethod["Compose"] = "Compose";
    PrivateMessagesMethod["DelMsg"] = "DelMsg";
    PrivateMessagesMethod["ReadAllMessages"] = "ReadAllMessages";
    PrivateMessagesMethod["ReadMessage"] = "ReadMessage";
    PrivateMessagesMethod["UnblockSubreddit"] = "UnblockSubreddit";
    PrivateMessagesMethod["UncollapseMessage"] = "UncollapseMessage";
    PrivateMessagesMethod["UnreadMessage"] = "UnreadMessage";
    PrivateMessagesMethod["MessageWhere"] = "MessageWhere";
})(PrivateMessagesMethod || (PrivateMessagesMethod = {}));
export const PrivateMessagesMethodList = [
    PrivateMessagesMethod.Block,
    PrivateMessagesMethod.CollapseMessage,
    PrivateMessagesMethod.Compose,
    PrivateMessagesMethod.DelMsg,
    PrivateMessagesMethod.ReadAllMessages,
    PrivateMessagesMethod.ReadMessage,
    PrivateMessagesMethod.UnblockSubreddit,
    PrivateMessagesMethod.UncollapseMessage,
    PrivateMessagesMethod.UnreadMessage,
    PrivateMessagesMethod.MessageWhere,
];
export function createPrivateMessagesServer(service) {
    return new TwirpServer({
        service,
        packageName: 'devvit.plugin.redditapi.privatemessages',
        serviceName: 'PrivateMessages',
        methodList: PrivateMessagesMethodList,
        matchRoute: matchPrivateMessagesRoute,
    });
}
function matchPrivateMessagesRoute(method, events) {
    switch (method) {
        case 'Block':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'Block' };
                await events.onMatch(ctx);
                return handlePrivateMessagesBlockRequest(ctx, service, data, interceptors);
            };
        case 'CollapseMessage':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'CollapseMessage' };
                await events.onMatch(ctx);
                return handlePrivateMessagesCollapseMessageRequest(ctx, service, data, interceptors);
            };
        case 'Compose':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'Compose' };
                await events.onMatch(ctx);
                return handlePrivateMessagesComposeRequest(ctx, service, data, interceptors);
            };
        case 'DelMsg':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'DelMsg' };
                await events.onMatch(ctx);
                return handlePrivateMessagesDelMsgRequest(ctx, service, data, interceptors);
            };
        case 'ReadAllMessages':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'ReadAllMessages' };
                await events.onMatch(ctx);
                return handlePrivateMessagesReadAllMessagesRequest(ctx, service, data, interceptors);
            };
        case 'ReadMessage':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'ReadMessage' };
                await events.onMatch(ctx);
                return handlePrivateMessagesReadMessageRequest(ctx, service, data, interceptors);
            };
        case 'UnblockSubreddit':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'UnblockSubreddit' };
                await events.onMatch(ctx);
                return handlePrivateMessagesUnblockSubredditRequest(ctx, service, data, interceptors);
            };
        case 'UncollapseMessage':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'UncollapseMessage' };
                await events.onMatch(ctx);
                return handlePrivateMessagesUncollapseMessageRequest(ctx, service, data, interceptors);
            };
        case 'UnreadMessage':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'UnreadMessage' };
                await events.onMatch(ctx);
                return handlePrivateMessagesUnreadMessageRequest(ctx, service, data, interceptors);
            };
        case 'MessageWhere':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'MessageWhere' };
                await events.onMatch(ctx);
                return handlePrivateMessagesMessageWhereRequest(ctx, service, data, interceptors);
            };
        default:
            events.onNotFound();
            const msg = `no handler found`;
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handlePrivateMessagesBlockRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handlePrivateMessagesBlockJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handlePrivateMessagesBlockProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handlePrivateMessagesCollapseMessageRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handlePrivateMessagesCollapseMessageJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handlePrivateMessagesCollapseMessageProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handlePrivateMessagesComposeRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handlePrivateMessagesComposeJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handlePrivateMessagesComposeProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handlePrivateMessagesDelMsgRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handlePrivateMessagesDelMsgJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handlePrivateMessagesDelMsgProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handlePrivateMessagesReadAllMessagesRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handlePrivateMessagesReadAllMessagesJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handlePrivateMessagesReadAllMessagesProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handlePrivateMessagesReadMessageRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handlePrivateMessagesReadMessageJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handlePrivateMessagesReadMessageProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handlePrivateMessagesUnblockSubredditRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handlePrivateMessagesUnblockSubredditJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handlePrivateMessagesUnblockSubredditProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handlePrivateMessagesUncollapseMessageRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handlePrivateMessagesUncollapseMessageJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handlePrivateMessagesUncollapseMessageProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handlePrivateMessagesUnreadMessageRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handlePrivateMessagesUnreadMessageJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handlePrivateMessagesUnreadMessageProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handlePrivateMessagesMessageWhereRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handlePrivateMessagesMessageWhereJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handlePrivateMessagesMessageWhereProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
async function handlePrivateMessagesBlockJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = GenericPrivateMessagesRequest.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.Block(ctx, inputReq);
        });
    }
    else {
        response = await service.Block(ctx, request);
    }
    return JSON.stringify(Empty.toJSON(response));
}
async function handlePrivateMessagesCollapseMessageJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = GenericPrivateMessagesRequest.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.CollapseMessage(ctx, inputReq);
        });
    }
    else {
        response = await service.CollapseMessage(ctx, request);
    }
    return JSON.stringify(Empty.toJSON(response));
}
async function handlePrivateMessagesComposeJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = ComposeRequest.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.Compose(ctx, inputReq);
        });
    }
    else {
        response = await service.Compose(ctx, request);
    }
    return JSON.stringify(Empty.toJSON(response));
}
async function handlePrivateMessagesDelMsgJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = GenericPrivateMessagesRequest.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.DelMsg(ctx, inputReq);
        });
    }
    else {
        response = await service.DelMsg(ctx, request);
    }
    return JSON.stringify(Empty.toJSON(response));
}
async function handlePrivateMessagesReadAllMessagesJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = ReadAllMessagesRequest.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.ReadAllMessages(ctx, inputReq);
        });
    }
    else {
        response = await service.ReadAllMessages(ctx, request);
    }
    return JSON.stringify(Empty.toJSON(response));
}
async function handlePrivateMessagesReadMessageJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = GenericPrivateMessagesRequest.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.ReadMessage(ctx, inputReq);
        });
    }
    else {
        response = await service.ReadMessage(ctx, request);
    }
    return JSON.stringify(Empty.toJSON(response));
}
async function handlePrivateMessagesUnblockSubredditJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = GenericPrivateMessagesRequest.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.UnblockSubreddit(ctx, inputReq);
        });
    }
    else {
        response = await service.UnblockSubreddit(ctx, request);
    }
    return JSON.stringify(Empty.toJSON(response));
}
async function handlePrivateMessagesUncollapseMessageJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = GenericPrivateMessagesRequest.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.UncollapseMessage(ctx, inputReq);
        });
    }
    else {
        response = await service.UncollapseMessage(ctx, request);
    }
    return JSON.stringify(Empty.toJSON(response));
}
async function handlePrivateMessagesUnreadMessageJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = GenericPrivateMessagesRequest.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.UnreadMessage(ctx, inputReq);
        });
    }
    else {
        response = await service.UnreadMessage(ctx, request);
    }
    return JSON.stringify(Empty.toJSON(response));
}
async function handlePrivateMessagesMessageWhereJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = MessageWhereRequest.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.MessageWhere(ctx, inputReq);
        });
    }
    else {
        response = await service.MessageWhere(ctx, request);
    }
    return JSON.stringify(Listing.toJSON(response));
}
async function handlePrivateMessagesBlockProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = GenericPrivateMessagesRequest.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.Block(ctx, inputReq);
        });
    }
    else {
        response = await service.Block(ctx, request);
    }
    return Buffer.from(Empty.encode(response).finish());
}
async function handlePrivateMessagesCollapseMessageProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = GenericPrivateMessagesRequest.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.CollapseMessage(ctx, inputReq);
        });
    }
    else {
        response = await service.CollapseMessage(ctx, request);
    }
    return Buffer.from(Empty.encode(response).finish());
}
async function handlePrivateMessagesComposeProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = ComposeRequest.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.Compose(ctx, inputReq);
        });
    }
    else {
        response = await service.Compose(ctx, request);
    }
    return Buffer.from(Empty.encode(response).finish());
}
async function handlePrivateMessagesDelMsgProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = GenericPrivateMessagesRequest.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.DelMsg(ctx, inputReq);
        });
    }
    else {
        response = await service.DelMsg(ctx, request);
    }
    return Buffer.from(Empty.encode(response).finish());
}
async function handlePrivateMessagesReadAllMessagesProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = ReadAllMessagesRequest.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.ReadAllMessages(ctx, inputReq);
        });
    }
    else {
        response = await service.ReadAllMessages(ctx, request);
    }
    return Buffer.from(Empty.encode(response).finish());
}
async function handlePrivateMessagesReadMessageProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = GenericPrivateMessagesRequest.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.ReadMessage(ctx, inputReq);
        });
    }
    else {
        response = await service.ReadMessage(ctx, request);
    }
    return Buffer.from(Empty.encode(response).finish());
}
async function handlePrivateMessagesUnblockSubredditProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = GenericPrivateMessagesRequest.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.UnblockSubreddit(ctx, inputReq);
        });
    }
    else {
        response = await service.UnblockSubreddit(ctx, request);
    }
    return Buffer.from(Empty.encode(response).finish());
}
async function handlePrivateMessagesUncollapseMessageProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = GenericPrivateMessagesRequest.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.UncollapseMessage(ctx, inputReq);
        });
    }
    else {
        response = await service.UncollapseMessage(ctx, request);
    }
    return Buffer.from(Empty.encode(response).finish());
}
async function handlePrivateMessagesUnreadMessageProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = GenericPrivateMessagesRequest.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.UnreadMessage(ctx, inputReq);
        });
    }
    else {
        response = await service.UnreadMessage(ctx, request);
    }
    return Buffer.from(Empty.encode(response).finish());
}
async function handlePrivateMessagesMessageWhereProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = MessageWhereRequest.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.MessageWhere(ctx, inputReq);
        });
    }
    else {
        response = await service.MessageWhere(ctx, request);
    }
    return Buffer.from(Listing.encode(response).finish());
}
