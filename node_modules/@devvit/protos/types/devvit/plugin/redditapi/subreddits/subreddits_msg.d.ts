/**
 * #subreddits_msg.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { Any } from "../../../../google/protobuf/any.js";
import { CommentContributionSettings, MediaEmbed, UserFlairRichtext } from "../../../reddit/common.js";
/** requests */
export interface AboutWhereRequest {
    /** fullname of a thing */
    after?: string | undefined;
    /** fullname of a thing */
    before?: string | undefined;
    /** a positive integer (default: 0) */
    count?: number | undefined;
    /** the maximum number of items desired (default: 25, maximum: 100) */
    limit?: number | undefined;
    /** (optional) the string all */
    show?: string | undefined;
    /** A valid, existing reddit username */
    user?: string | undefined;
    /** the name of the subreddit */
    subreddit?: string | undefined;
    /** one of "banned", "muted", "wikibanned", "contributors", "wikicontributors", or "moderators" */
    where: string;
}
export interface BasicSubredditRequest {
    /** the name of the subreddit */
    subreddit: string;
}
export interface DeleteSrImgRequest {
    /** the name of the subreddit */
    subreddit: string;
    /** a valid subreddit image name */
    imgName: string;
}
export interface BasicSearchRequest {
    /** boolean value */
    exact?: boolean | undefined;
    /** boolean value */
    includeOver18?: boolean | undefined;
    /** boolean value */
    includeUnadvertisable?: boolean | undefined;
    /** a string up to 50 characters long, consisting of printable characters */
    query: string;
    /** a uuid */
    searchQueryId?: string | undefined;
    /** (optional) boolean value */
    typeaheadActive?: boolean | undefined;
}
export interface SiteAdminRequest {
    /** boolean value */
    acceptFollowers: boolean;
    /** boolean value */
    adminOverrideSpamComments: boolean;
    /** boolean value */
    adminOverrideSpamLinks: boolean;
    /** boolean value */
    adminOverrideSpamSelfposts: boolean;
    /** boolean value */
    allOriginalContent: boolean;
    /** boolean value */
    allowChatPostCreation: boolean;
    /** boolean value */
    allowDiscovery: boolean;
    /** boolean value */
    allowGalleries: boolean;
    /** boolean value */
    allowImages: boolean;
    /** boolean value */
    allowPolls: boolean;
    /** boolean value */
    allowPostCrossposts: boolean;
    /** boolean value */
    allowPredictionContributors: boolean;
    /** boolean value */
    allowPredictions: boolean;
    /** boolean value */
    allowPredictionsTournament: boolean;
    /** boolean value */
    allowTalks: boolean;
    /** boolean value */
    allowTop: boolean;
    /** boolean value */
    allowVideos: boolean;
    /** an integer between 0 and 3 */
    banEvasionThreshold: number;
    /** boolean value */
    collapseDeletedComments: boolean;
    /**
     * json data:
     * \{
     *   "allowed_media_types": [
     *     one of (`giphy`, `unknown`, `animated`, `static`),
     *     ...
     *   ],
     * \}
     */
    commentContributionSettings?: CommentContributionSettings | undefined;
    /** an integer between 0 and 1440 (default: 0) */
    commentScoreHideMins: number;
    /** boolean value */
    crowdControlFilter: boolean;
    /** an integer between 0 and 3 */
    crowdControlLevel: number;
    /** boolean value */
    crowdControlMode: boolean;
    /** an integer between 0 and 3 */
    crowdControlPostLevel: number;
    /** raw markdown text */
    description: string;
    /** boolean value */
    disableContributorRequests: boolean;
    /** boolean value */
    excludeBannedModqueue: boolean;
    /** boolean value */
    freeFormReports: boolean;
    gRecaptchaResponse: string;
    /** an integer between 0 and 3 */
    hatefulContentThresholdAbuse: number;
    /** an integer between 0 and 3 */
    hatefulContentThresholdIdentity: number;
    /** a string no longer than 500 characters */
    headerTitle: string;
    /** a 6-digit rgb hex color, e.g. #AABBCC */
    keyColor: string;
    /** one of (any, link, self) */
    linkType: string;
    /** subreddit name */
    name: string;
    /** boolean value */
    newPinnedPostPnsEnabled: boolean;
    /** boolean value */
    originalContentTagEnabled: boolean;
    /** boolean value */
    over18: boolean;
    /** an integer between 0 and 2 */
    predictionLeaderboardEntryType: number;
    /** raw markdown text */
    publicDescription: string;
    /** boolean value */
    restrictCommenting: boolean;
    /** boolean value */
    restrictPosting: boolean;
    /** boolean value */
    shouldArchivePosts: boolean;
    /** boolean value */
    showMedia: boolean;
    /** boolean value */
    showMediaPreview: boolean;
    /** one of (low, high, all) */
    spamComments: string;
    /** one of (low, high, all) */
    spamLinks: string;
    /** one of (low, high, all) */
    spamSelfposts: string;
    /** boolean value */
    spoilersEnabled: boolean;
    /** fullname of a thing */
    sr: string;
    /** a string no longer than 60 characters */
    submitLinkLabel: string;
    /** raw markdown text */
    submitText: string;
    /** a string no longer than 60 characters */
    submitTextLabel: string;
    /** one of (confidence, top, new, controversial, old, random, qa, live) */
    suggestedCommentSort: string;
    /** a string no longer than 100 characters */
    title: string;
    /** an integer between 0 and 1 */
    toxicityThresholdChatLevel: number;
    /** one of (gold_restricted, archived, restricted, private, employees_only, gold_only, public, user) */
    type: string;
    /** boolean value */
    userFlairPnsEnabled: boolean;
    /** boolean value */
    welcomeMessageEnabled: boolean;
    /** raw markdown text */
    welcomeMessageText: string;
    /** an integer between 0 and 36600 (default: 0) */
    wikiEditAge: number;
    /** an integer between 0 and 1000000000 (default: 0) */
    wikiEditKarma: number;
    /** one of (disabled, modonly, anyone) */
    wikimode: string;
    /** an integer between 0 and 3 */
    crowdControlChatLevel: number;
    /** boolean value */
    hideAds: boolean;
    /** boolean value */
    modmailHarassmentFilterEnabled: boolean;
}
export interface SubredditAutocompleteRequest {
    /** boolean value */
    includeOver18?: boolean | undefined;
    /** boolean value */
    includeProfiles?: boolean | undefined;
    /** an integer between 1 and 10 (default: 5) */
    limit?: number | undefined;
    /** a string up to 25 characters long, consisting of printable characters */
    query: string;
    /** a uuid */
    searchQueryId?: string | undefined;
    /** (optional) boolean value */
    typeaheadActive?: boolean | undefined;
}
export interface SubredditStylesheetRequest {
    /** one of (save, preview) */
    op: string;
    /** a string up to 256 characters long, consisting of printable characters. */
    reason: string;
    /** the new stylesheet content */
    stylesheetContents: string;
    /** the name of the subreddit */
    subreddit: string;
}
export interface SubscribeRequest {
    /** one of (sub, unsub) */
    action: string;
    /** one of (o, n, b, o, a, r, d, i, n, g) */
    actionSource: string;
    /** boolean value */
    skipInitialDefaults: boolean;
    /** A comma-separated list of subreddit fullnames */
    sr: string;
    /** A comma-separated list of subreddit names */
    srName: string;
}
export interface UploadSrImgRequest {
    /** file upload with maximum size of 500 KiB */
    file: string;
    /** (optional) can be ignored */
    header: number;
    /** an integer between 0 and 1 */
    imgType: string;
    /** a valid subreddit image name */
    name: string;
    /** one of png or jpg (default: png) */
    uploadType: string;
    /** the name of the subreddit */
    subreddit: string;
}
export interface SubredditAboutEditRequest {
    /** one of (true, false) */
    created: string;
    location: string;
    /** the name of the subreddit */
    subreddit: string;
}
export interface StickyRequest {
    /** an integer between 1 and 2 (default: 1) */
    num: number;
    /** the name of the subreddit */
    subreddit: string;
}
export interface BasicWhereRequest {
    /** fullname of a thing */
    after?: string | undefined;
    /** fullname of a thing */
    before?: string | undefined;
    /** a positive integer (default: 0) */
    count?: number | undefined;
    /** the maximum number of items desired (default: 25, maximum: 100) */
    limit?: number | undefined;
    /** (optional) the string all */
    show?: string | undefined;
    /**
     * SubredditsMineWhere: one of (subscriber, contributor, moderator, streams)
     * SubredditsWhere: one of (popular, new, gold, default)
     * UsersWhere: one of (popular, new)
     */
    where: string;
}
export interface SubredditsSearchRequest {
    /** fullname of a thing */
    after?: string | undefined;
    /** fullname of a thing */
    before?: string | undefined;
    /** a positive integer (default: 0) */
    count?: number | undefined;
    /** the maximum number of items desired (default: 25, maximum: 100) */
    limit?: number | undefined;
    /** a search query */
    q: string;
    /** a uuid */
    searchQueryId?: string | undefined;
    /** (optional) the string all */
    show?: string | undefined;
    /** boolean value */
    showUsers?: boolean | undefined;
    /** one of (relevance, activity) */
    sort?: string | undefined;
    /** (optional) boolean value */
    typeaheadActive?: boolean | undefined;
}
export interface UsersSearchRequest {
    /** fullname of a thing */
    after?: string | undefined;
    /** fullname of a thing */
    before?: string | undefined;
    /** a positive integer (default: 0) */
    count?: number | undefined;
    /** the maximum number of items desired (default: 25, maximum: 100) */
    limit?: number | undefined;
    /** a search query */
    q: string;
    /** a uuid */
    searchQueryId?: string | undefined;
    /** (optional) the string all */
    show?: string | undefined;
    /** one of (relevance, activity) */
    sort?: string | undefined;
    /** (optional) boolean value */
    typeaheadActive?: boolean | undefined;
}
/** responses */
export interface SearchRedditNamesResponse {
    names: string[];
}
export interface SearchSubredditsResponse {
    subreddits: SearchSubredditsResponse_SubredditData[];
}
export interface SearchSubredditsResponse_SubredditData {
    activeUserCount?: number | undefined;
    iconImg?: string | undefined;
    keyColor?: string | undefined;
    name?: string | undefined;
    subscriberCount?: number | undefined;
    isChatPostFeatureEnabled?: boolean | undefined;
    allowChatPostCreation?: boolean | undefined;
    allowImages?: boolean | undefined;
}
export interface SubmitTextResponse {
    submitText?: string | undefined;
    submitTextHtml?: string | undefined;
}
export interface SubredditAutocompleteResponse {
    kind?: string | undefined;
    data?: SubredditAutocompleteResponse_AutocompleteResponse | undefined;
}
export interface SubredditAutocompleteResponse_AutocompleteAccount {
    isEmployee?: boolean | undefined;
    isFriend?: boolean | undefined;
    snoovatarSize?: number | undefined;
    id?: string | undefined;
    verified?: boolean | undefined;
    isGold?: boolean | undefined;
    isMod?: boolean | undefined;
    hasVerifiedEmail?: boolean | undefined;
    iconImg?: string | undefined;
    hideFromRobots?: boolean | undefined;
    linkKarma?: number | undefined;
    acceptChats?: boolean | undefined;
    isBlocked?: boolean | undefined;
    prefShowSnoovatar?: boolean | undefined;
    name?: string | undefined;
    created?: number | undefined;
    createdUtc?: number | undefined;
    snoovatarImg?: string | undefined;
    commentKarma?: number | undefined;
    acceptFollowers?: boolean | undefined;
    hasSubscribed?: boolean | undefined;
    acceptPms?: boolean | undefined;
}
export interface SubredditAutocompleteResponse_AutocompleteAccount_Subreddit {
    defaultSet?: boolean | undefined;
    userIsContributor?: boolean | undefined;
    bannerImg?: string | undefined;
    allowedMediaInComments: string[];
    userIsBanned?: boolean | undefined;
    freeFormReports?: boolean | undefined;
    communityIcon?: string | undefined;
    showMedia?: boolean | undefined;
    iconColor?: string | undefined;
    userIsMuted?: boolean | undefined;
    displayName?: string | undefined;
    headerImg?: string | undefined;
    title?: string | undefined;
    previousNames: string[];
    over18?: boolean | undefined;
    iconSize: number[];
    primaryColor?: string | undefined;
    iconImg?: string | undefined;
    description?: string | undefined;
    submitLinkLabel?: string | undefined;
    headerSize?: number | undefined;
    restrictPosting?: boolean | undefined;
    restrictCommenting?: boolean | undefined;
    subscribers?: number | undefined;
    submitTextLabel?: string | undefined;
    isDefaultIcon?: boolean | undefined;
    inkFlairPosition?: string | undefined;
    displayNamePrefixed?: string | undefined;
    keyColor?: string | undefined;
    name?: string | undefined;
    isDefaultBanner?: boolean | undefined;
    url?: string | undefined;
    quarantine?: boolean | undefined;
    bannerSize?: number | undefined;
    userIsModerator?: boolean | undefined;
    acceptFollowers?: boolean | undefined;
    publicDescription?: string | undefined;
    linkFlairEnabled?: boolean | undefined;
    disableContributorRequests?: boolean | undefined;
    subredditType?: string | undefined;
    userIsSubscriber?: boolean | undefined;
}
export interface SubredditAutocompleteResponse_WrappedAutoCompleteSubreddit {
    kind: string;
    data?: FullSubredditObject | undefined;
}
export interface SubredditAutocompleteResponse_WrappedAutoCompleteAccount {
    kind: string;
    data?: SubredditAutocompleteResponse_AutocompleteAccount | undefined;
}
export interface SubredditAutocompleteResponse_AutocompleteResponse {
    after?: string | undefined;
    before?: string | undefined;
    dist?: number | undefined;
    childrenSubreddits: SubredditAutocompleteResponse_WrappedAutoCompleteSubreddit[];
    childrenAccounts: SubredditAutocompleteResponse_WrappedAutoCompleteAccount[];
}
export interface UploadSrImgResponse {
    errors: string[];
    imgSrc?: string | undefined;
    errorsValues: string[];
}
export interface SubredditPostRequirementsResponse {
    titleRegexes: string[];
    bodyBlacklistedStrings: string[];
    titleBlacklistedStrings: string[];
    bodyTextMaxLength?: number | undefined;
    titleRequiredStrings: string[];
    guidelinesText?: string | undefined;
    galleryMinItems?: number | undefined;
    domainBlacklist: string[];
    domainWhitelist: string[];
    titleTextMaxLength?: number | undefined;
    bodyRestrictionPolicy?: string | undefined;
    linkRestrictionPolicy?: string | undefined;
    guidelinesDisplayPolicy?: string | undefined;
    bodyRequiredStrings: string[];
    titleTextMinLength?: number | undefined;
    galleryCaptionsRequirement?: string | undefined;
    isFlairRequired?: boolean | undefined;
    galleryMaxItems?: number | undefined;
    galleryUrlsRequirement?: string | undefined;
    bodyRegexes: string[];
    linkRepostAge?: number | undefined;
    bodyTextMinLength?: number | undefined;
}
export interface SubredditAboutResponse {
    kind?: string | undefined;
    data?: SubredditAboutResponse_AboutData | undefined;
}
export interface SubredditAboutResponse_AboutData {
    userFlairBackgroundColor?: string | undefined;
    submitTextHtml?: string | undefined;
    restrictPosting?: boolean | undefined;
    userIsBanned?: boolean | undefined;
    freeFormReports?: boolean | undefined;
    wikiEnabled?: boolean | undefined;
    userIsMuted?: boolean | undefined;
    userCanFlairInSr?: boolean | undefined;
    displayName?: string | undefined;
    headerImg?: string | undefined;
    title?: string | undefined;
    allowGalleries?: boolean | undefined;
    primaryColor?: string | undefined;
    activeUserCount?: number | undefined;
    iconImg?: string | undefined;
    displayNamePrefixed?: string | undefined;
    accountsActive?: number | undefined;
    publicTraffic?: boolean | undefined;
    subscribers?: number | undefined;
    userFlairRichtext: UserFlairRichtext[];
    name?: string | undefined;
    quarantine?: boolean | undefined;
    hideAds?: boolean | undefined;
    emojisEnabled?: boolean | undefined;
    advertiserCategory?: string | undefined;
    publicDescription?: string | undefined;
    commentScoreHideMins?: number | undefined;
    allowPredictions?: boolean | undefined;
    userHasFavorited?: boolean | undefined;
    userFlairTemplateId?: string | undefined;
    communityIcon?: string | undefined;
    bannerBackgroundImage?: string | undefined;
    originalContentTagEnabled?: boolean | undefined;
    communityReviewed?: boolean | undefined;
    submitText?: string | undefined;
    descriptionHtml?: string | undefined;
    spoilersEnabled?: boolean | undefined;
    commentContributionSettings?: CommentContributionSettings | undefined;
    allowTalks?: boolean | undefined;
    userFlairPosition?: string | undefined;
    allOriginalContent?: boolean | undefined;
    collectionsEnabled?: boolean | undefined;
    isEnrolledInNewModmail?: boolean | undefined;
    keyColor?: string | undefined;
    eventPostsEnabled?: boolean | undefined;
    canAssignUserFlair?: boolean | undefined;
    created?: number | undefined;
    showMediaPreview?: boolean | undefined;
    submissionType?: string | undefined;
    userIsSubscriber?: boolean | undefined;
    allowedMediaInComments: string[];
    allowVideogifs?: boolean | undefined;
    shouldArchivePosts?: boolean | undefined;
    userFlairType?: string | undefined;
    allowPolls?: boolean | undefined;
    collapseDeletedComments?: boolean | undefined;
    coins?: number | undefined;
    publicDescriptionHtml?: string | undefined;
    allowVideos?: boolean | undefined;
    isCrosspostableSubreddit?: boolean | undefined;
    notificationLevel?: string | undefined;
    shouldShowMediaInCommentsSetting?: boolean | undefined;
    canAssignLinkFlair?: boolean | undefined;
    hasMenuWidget?: boolean | undefined;
    accountsActiveIsFuzzed?: boolean | undefined;
    allowPredictionContributors?: boolean | undefined;
    submitTextLabel?: string | undefined;
    linkFlairPosition?: string | undefined;
    userSrFlairEnabled?: boolean | undefined;
    userFlairEnabledInSr?: boolean | undefined;
    allowChatPostCreation?: boolean | undefined;
    allowDiscovery?: boolean | undefined;
    acceptFollowers?: boolean | undefined;
    userSrThemeEnabled?: boolean | undefined;
    linkFlairEnabled?: boolean | undefined;
    disableContributorRequests?: boolean | undefined;
    subredditType?: string | undefined;
    suggestedCommentSort?: string | undefined;
    bannerImg?: string | undefined;
    userFlairText?: string | undefined;
    bannerBackgroundColor?: string | undefined;
    showMedia?: boolean | undefined;
    id?: string | undefined;
    userIsModerator?: boolean | undefined;
    over18?: boolean | undefined;
    headerTitle?: string | undefined;
    description?: string | undefined;
    isChatPostFeatureEnabled?: boolean | undefined;
    submitLinkLabel?: string | undefined;
    userFlairTextColor?: string | undefined;
    restrictCommenting?: boolean | undefined;
    userFlairCssClass?: string | undefined;
    allowImages?: boolean | undefined;
    lang?: string | undefined;
    url?: string | undefined;
    createdUtc?: number | undefined;
    bannerSize: number[];
    mobileBannerImage?: string | undefined;
    userIsContributor?: boolean | undefined;
    allowPredictionsTournament?: boolean | undefined;
    iconSize: number[];
    headerSize: number[];
    wls?: number | undefined;
    whitelistStatus?: string | undefined;
    emojisCustomSize: number[];
}
export interface SubredditAboutEditResponse {
    kind?: string | undefined;
    data?: SubredditAboutEditResponse_SubredditSettings | undefined;
}
export interface SubredditAboutEditResponse_SubredditSettings {
    defaultSet?: boolean | undefined;
    toxicityThresholdChatLevel?: number | undefined;
    crowdControlChatLevel?: number | undefined;
    restrictPosting?: boolean | undefined;
    publicDescription?: string | undefined;
    subredditId?: string | undefined;
    allowImages?: boolean | undefined;
    freeFormReports?: boolean | undefined;
    domain?: string | undefined;
    originalContentTagEnabled?: boolean | undefined;
    showMedia?: boolean | undefined;
    excludeBannedModqueue?: boolean | undefined;
    shouldArchivePosts?: boolean | undefined;
    submitText?: string | undefined;
    spamLinks?: string | undefined;
    title?: string | undefined;
    collapseDeletedComments?: boolean | undefined;
    wikimode?: string | undefined;
    over18?: boolean | undefined;
    allowVideos?: boolean | undefined;
    allowGalleries?: boolean | undefined;
    crowdControlLevel?: number | undefined;
    banEvasionThreshold?: number | undefined;
    crowdControlMode?: boolean | undefined;
    welcomeMessageEnabled?: boolean | undefined;
    welcomeMessageText?: string | undefined;
    suggestedCommentSort?: boolean | undefined;
    disableContributorRequests?: boolean | undefined;
    allowTalks?: boolean | undefined;
    description?: string | undefined;
    submitLinkLabel?: string | undefined;
    spoilersEnabled?: boolean | undefined;
    allowPostCrossposts?: boolean | undefined;
    spamComments?: string | undefined;
    publicTraffic?: boolean | undefined;
    restrictCommenting?: boolean | undefined;
    allowPolls?: boolean | undefined;
    commentContributionSettings?: CommentContributionSettings | undefined;
    submitTextLabel?: string | undefined;
    commentScoreHideMins?: number | undefined;
    allOriginalContent?: boolean | undefined;
    spamSelfposts?: string | undefined;
    keyColor?: string | undefined;
    language?: string | undefined;
    newPinnedPostPnsEnabled?: boolean | undefined;
    hideAds?: boolean | undefined;
    predictionLeaderboardEntryType?: number | undefined;
    headerHoverText?: string | undefined;
    wikiEditAge?: number | undefined;
    allowChatPostCreation?: boolean | undefined;
    allowPredictionContributors?: boolean | undefined;
    allowDiscovery?: boolean | undefined;
    acceptFollowers?: boolean | undefined;
    crowdControlPostLevel?: number | undefined;
    allowPredictionsTournament?: boolean | undefined;
    wikiEditKarma?: number | undefined;
    showMediaPreview?: boolean | undefined;
    crowdControlFilter?: boolean | undefined;
    subredditType?: string | undefined;
    allowPredictions?: boolean | undefined;
    userFlairPnsEnabled?: boolean | undefined;
    contentOptions?: string | undefined;
}
export interface SubredditAboutRulesResponse {
    rules: SubredditAboutRulesResponse_SubredditRule[];
    siteRules: string[];
    siteRulesFlow: SubredditAboutRulesResponse_RuleFlow[];
}
export interface SubredditAboutRulesResponse_SubredditRule {
    kind?: string | undefined;
    description?: string | undefined;
    shortName?: string | undefined;
    violationReason?: string | undefined;
    createdUtc?: number | undefined;
    priority?: number | undefined;
    descriptionHtml?: string | undefined;
}
export interface SubredditAboutRulesResponse_RuleFlow {
    reasonTextToShow?: string | undefined;
    reasonText?: string | undefined;
    nextStepHeader?: string | undefined;
    nextStepReasons: SubredditAboutRulesResponse_RuleFlow[];
    complaintButtonText?: string | undefined;
    complaintUrl?: string | undefined;
    complaintPageTitle?: string | undefined;
    fileComplaint?: boolean | undefined;
    complaintPrompt?: string | undefined;
    canWriteNotes?: boolean | undefined;
    isAbuseOfReportButton?: boolean | undefined;
    notesInputTitle?: string | undefined;
    usernamesInputTitle?: string | undefined;
    canSpecifyUsernames?: boolean | undefined;
    requestCrisisSupport?: boolean | undefined;
    oneUsername?: boolean | undefined;
}
export interface SubredditAboutTrafficResponse {
    day: SubredditAboutTrafficResponse_Data[];
    hour: SubredditAboutTrafficResponse_Data[];
    month: SubredditAboutTrafficResponse_Data[];
}
export interface SubredditAboutTrafficResponse_Data {
    values: number[];
}
export interface StickyResponse {
    kind?: string | undefined;
    data?: StickyResponse_StickyResponseData | undefined;
}
export interface StickyResponse_LinkData {
    authorFlairBackgroundColor?: string | undefined;
    approvedAtUtc?: number | undefined;
    subreddit?: string | undefined;
    selftext?: string | undefined;
    userReports: string[];
    saved?: boolean | undefined;
    modReasonTitle?: string | undefined;
    gilded?: number | undefined;
    clicked?: boolean | undefined;
    title?: string | undefined;
    linkFlairRichtext: string[];
    subredditNamePrefixed?: string | undefined;
    hidden?: boolean | undefined;
    pwls?: string | undefined;
    linkFlairCssClass?: string | undefined;
    downs?: number | undefined;
    thumbnailHeight?: number | undefined;
    topAwardedType?: string | undefined;
    parentWhitelistStatus?: boolean | undefined;
    hideScore?: boolean | undefined;
    name?: string | undefined;
    quarantine?: boolean | undefined;
    linkFlairTextColor?: string | undefined;
    upvoteRatio?: number | undefined;
    ignoreReports?: boolean | undefined;
    ups?: number | undefined;
    domain?: string | undefined;
    mediaEmbed?: MediaEmbed | undefined;
    thumbnailWidth?: number | undefined;
    authorFlairTemplateId?: string | undefined;
    isOriginalContent?: boolean | undefined;
    authorFullname?: string | undefined;
    secureMedia?: boolean | undefined;
    isRedditMediaDomain?: boolean | undefined;
    isMeta?: boolean | undefined;
    category?: string | undefined;
    secureMediaEmbed?: MediaEmbed | undefined;
    linkFlairText?: string | undefined;
    canModPost?: boolean | undefined;
    score?: number | undefined;
    approvedBy?: string | undefined;
    isCreatedFromAdsUi?: boolean | undefined;
    authorPremium?: boolean | undefined;
    thumbnail?: string | undefined;
    edited?: boolean | undefined;
    authorFlairCssClass?: string | undefined;
    previousVisits: number[];
    authorFlairRichtext: string[];
    gildings?: Any | undefined;
    contentCategories?: string | undefined;
    isSelf?: boolean | undefined;
    subredditType?: string | undefined;
    created?: number | undefined;
    linkFlairType?: string | undefined;
    wls?: string | undefined;
    removedByCategory?: string | undefined;
    bannedBy?: string | undefined;
    authorFlairType?: string | undefined;
    totalAwardsReceived?: number | undefined;
    allowLiveComments?: boolean | undefined;
    selftextHtml?: string | undefined;
    likes?: boolean | undefined;
    suggestedSort?: string | undefined;
    bannedAtUtc?: number | undefined;
    viewCount?: number | undefined;
    archived?: boolean | undefined;
    noFollow?: boolean | undefined;
    spam?: boolean | undefined;
    isCrosspostable?: boolean | undefined;
    pinned?: boolean | undefined;
    over18?: boolean | undefined;
    allAwardings: Any[];
    awarders: string[];
    mediaOnly?: boolean | undefined;
    canGild?: boolean | undefined;
    removed?: boolean | undefined;
    spoiler?: boolean | undefined;
    locked?: boolean | undefined;
    authorFlairText?: string | undefined;
    treatmentTags: Any[];
    rteMode?: string | undefined;
    visited?: boolean | undefined;
    removedBy?: string | undefined;
    modNote?: string | undefined;
    distinguished?: string | undefined;
    subredditId?: string | undefined;
    authorIsBlocked?: boolean | undefined;
    modReasonBy?: string | undefined;
    numReports?: number | undefined;
    removalReason?: string | undefined;
    linkFlairBackgroundColor?: string | undefined;
    id?: string | undefined;
    isRobotIndexable?: boolean | undefined;
    numDuplicates?: number | undefined;
    reportReasons: Any[];
    author?: string | undefined;
    discussionType?: string | undefined;
    numComments?: number | undefined;
    sendReplies?: boolean | undefined;
    media?: string | undefined;
    contestMode?: boolean | undefined;
    authorPatreonFlair?: boolean | undefined;
    approved?: boolean | undefined;
    authorFlairTextColor?: string | undefined;
    permalink?: string | undefined;
    whitelistStatus?: boolean | undefined;
    stickied?: boolean | undefined;
    url?: string | undefined;
    subredditSubscribers?: number | undefined;
    createdUtc?: number | undefined;
    numCrossposts?: number | undefined;
    modReports: Any[];
    isVideo?: boolean | undefined;
}
export interface StickyResponse_WrappedStickyListing {
    kind?: string | undefined;
    data?: StickyResponse_LinkData | undefined;
}
export interface StickyResponse_StickyResponseData {
    after?: string | undefined;
    before?: string | undefined;
    dist?: number | undefined;
    modhash?: string | undefined;
    geoFilter?: string | undefined;
    children: StickyResponse_WrappedStickyListing[];
}
export interface FullSubredditObject {
    userFlairBackgroundColor?: string | undefined;
    submitTextHtml?: string | undefined;
    restrictPosting?: boolean | undefined;
    userIsBanned?: boolean | undefined;
    freeFormReports?: boolean | undefined;
    wikiEnabled?: boolean | undefined;
    userIsMuted?: boolean | undefined;
    userCanFlairInSr?: boolean | undefined;
    displayName?: string | undefined;
    headerImg?: string | undefined;
    title?: string | undefined;
    allowGalleries?: boolean | undefined;
    iconSize: number[];
    primaryColor?: string | undefined;
    activeUserCount?: number | undefined;
    iconImg?: string | undefined;
    displayNamePrefixed?: string | undefined;
    accountsActive?: number | undefined;
    publicTraffic?: boolean | undefined;
    subscribers?: number | undefined;
    userFlairRichtext: string[];
    videostreamLinksCount?: number | undefined;
    name?: string | undefined;
    quarantine?: boolean | undefined;
    hideAds?: boolean | undefined;
    emojisEnabled?: boolean | undefined;
    advertiserCategory?: string | undefined;
    publicDescription?: string | undefined;
    commentScoreHideMins?: number | undefined;
    allowPredictions?: boolean | undefined;
    userHasFavorited?: boolean | undefined;
    userFlairTemplateId?: string | undefined;
    communityIcon?: string | undefined;
    bannerBackgroundImage?: string | undefined;
    originalContentTagEnabled?: boolean | undefined;
    communityReviewed?: boolean | undefined;
    submitText?: string | undefined;
    descriptionHtml?: string | undefined;
    spoilersEnabled?: boolean | undefined;
    commentContributionSettings?: CommentContributionSettings | undefined;
    allowTalks?: boolean | undefined;
    headerSize: number[];
    userFlairPosition?: string | undefined;
    allOriginalContent?: boolean | undefined;
    hasMenuWidget?: boolean | undefined;
    isEnrolledInNewModmail?: boolean | undefined;
    keyColor?: string | undefined;
    canAssignUserFlair?: boolean | undefined;
    created?: number | undefined;
    wls?: number | undefined;
    showMediaPreview?: boolean | undefined;
    submissionType?: string | undefined;
    userIsSubscriber?: boolean | undefined;
    allowedMediaInComments: string[];
    allowVideogifs?: boolean | undefined;
    shouldArchivePosts?: boolean | undefined;
    userFlairType?: string | undefined;
    allowPolls?: boolean | undefined;
    collapseDeletedComments?: boolean | undefined;
    emojisCustomSize: number[];
    publicDescriptionHtml?: string | undefined;
    allowVideos?: boolean | undefined;
    isCrosspostableSubreddit?: boolean | undefined;
    notificationLevel?: string | undefined;
    shouldShowMediaInCommentsSetting?: boolean | undefined;
    canAssignLinkFlair?: boolean | undefined;
    accountsActiveIsFuzzed?: boolean | undefined;
    allowPredictionContributors?: boolean | undefined;
    submitTextLabel?: string | undefined;
    linkFlairPosition?: string | undefined;
    userSrFlairEnabled?: boolean | undefined;
    userFlairEnabledInSr?: boolean | undefined;
    allowChatPostCreation?: boolean | undefined;
    allowDiscovery?: boolean | undefined;
    acceptFollowers?: boolean | undefined;
    userSrThemeEnabled?: boolean | undefined;
    linkFlairEnabled?: boolean | undefined;
    disableContributorRequests?: boolean | undefined;
    subredditType?: string | undefined;
    suggestedCommentSort?: string | undefined;
    bannerImg?: string | undefined;
    userFlairText?: string | undefined;
    contentCategory?: string | undefined;
    bannerBackgroundColor?: string | undefined;
    showMedia?: boolean | undefined;
    id?: string | undefined;
    userIsModerator?: boolean | undefined;
    over18?: boolean | undefined;
    headerTitle?: string | undefined;
    description?: string | undefined;
    isChatPostFeatureEnabled?: boolean | undefined;
    submitLinkLabel?: string | undefined;
    userFlairTextColor?: string | undefined;
    restrictCommenting?: boolean | undefined;
    userFlairCssClass?: string | undefined;
    allowImages?: boolean | undefined;
    lang?: string | undefined;
    whitelistStatus?: string | undefined;
    url?: string | undefined;
    createdUtc?: number | undefined;
    bannerSize: number[];
    mobileBannerImage?: string | undefined;
    userIsContributor?: boolean | undefined;
    allowPredictionsTournament?: boolean | undefined;
}
export interface SubredditsSearchResponse {
    kind?: string | undefined;
    data?: SubredditsSearchResponse_WrappedSubredditObject | undefined;
}
export interface SubredditsSearchResponse_WrappedSubredditObject {
    after?: string | undefined;
    before?: string | undefined;
    dist?: number | undefined;
    geoFilter?: string | undefined;
    children: SubredditsSearchResponse_WrappedSubredditObject_SubredditData[];
}
export interface SubredditsSearchResponse_WrappedSubredditObject_SubredditData {
    kind?: string | undefined;
    data?: FullSubredditObject | undefined;
}
export interface UserSearchResponse {
    kind?: string | undefined;
    data?: UserSearchResponse_AccData | undefined;
}
export interface UserSearchResponse_AccData {
    after?: string | undefined;
    dist?: number | undefined;
    modhash?: string | undefined;
    geoFilter?: string | undefined;
    children: UserSearchResponse_Account[];
    before?: string | undefined;
}
export interface UserSearchResponse_Account {
    kind?: string | undefined;
    data?: UserSearchResponse_AccountData | undefined;
}
export interface UserSearchResponse_AccountData {
    isEmployee?: boolean | undefined;
    isFriend?: boolean | undefined;
    snoovatarSize: number[];
    id?: string | undefined;
    verified?: boolean | undefined;
    isGold?: boolean | undefined;
    isMod?: boolean | undefined;
    hasVerifiedEmail?: boolean | undefined;
    iconImg?: string | undefined;
    hideFromRobots?: boolean | undefined;
    linkKarma?: number | undefined;
    acceptChats?: boolean | undefined;
    isBlocked?: boolean | undefined;
    prefShowSnoovatar?: boolean | undefined;
    name?: string | undefined;
    created?: number | undefined;
    createdUtc?: number | undefined;
    snoovatarImg?: string | undefined;
    commentKarma?: number | undefined;
    acceptFollowers?: boolean | undefined;
    hasSubscribed?: boolean | undefined;
    acceptPms?: boolean | undefined;
    isSuspended?: boolean | undefined;
    subreddit?: UserSearchResponse_AccountData_Subreddit | undefined;
}
export interface UserSearchResponse_AccountData_Subreddit {
    defaultSet?: boolean | undefined;
    userIsContributor?: boolean | undefined;
    bannerImg?: string | undefined;
    allowedMediaInComments: string[];
    userIsBanned?: boolean | undefined;
    freeFormReports?: boolean | undefined;
    communityIcon?: string | undefined;
    showMedia?: boolean | undefined;
    iconColor?: string | undefined;
    userIsMuted?: boolean | undefined;
    displayName?: string | undefined;
    headerImg?: string | undefined;
    title?: string | undefined;
    previousNames: string[];
    over18?: boolean | undefined;
    iconSize: number[];
    primaryColor?: string | undefined;
    iconImg?: string | undefined;
    description?: string | undefined;
    submitLinkLabel?: string | undefined;
    headerSize: number[];
    restrictPosting?: boolean | undefined;
    restrictCommenting?: boolean | undefined;
    subscribers?: number | undefined;
    submitTextLabel?: string | undefined;
    isDefaultIcon?: boolean | undefined;
    linkFlairPosition?: string | undefined;
    displayNamePrefixed?: string | undefined;
    keyColor?: string | undefined;
    name?: string | undefined;
    isDefaultBanner?: boolean | undefined;
    url?: string | undefined;
    quarantine?: boolean | undefined;
    bannerSize: number[];
    userIsModerator?: boolean | undefined;
    acceptFollowers?: boolean | undefined;
    publicDescription?: string | undefined;
    linkFlairEnabled?: boolean | undefined;
    disableContributorRequests?: boolean | undefined;
    subredditType?: string | undefined;
    userIsSubscriber?: boolean | undefined;
}
export interface SubredditAddRemovalReasonRequest {
    /** The name of the subreddit without `r/` */
    subreddit: string;
    /** A message that will communicate to the user why their post was removed */
    message: string;
    /** Removal Reason title */
    title: string;
}
export interface SubredditAddRemovalReasonResponse {
    /** Removal Reason ID */
    id: string;
}
export interface SubredditGetRemovalReasonsRequest {
    /** The name of the subreddit without `r/` */
    subreddit: string;
}
export interface SubredditGetRemovalReasonsResponse {
    data: {
        [key: string]: SubredditGetRemovalReasonsResponse_SubredditRemovalReason;
    };
    /** Ordered list of Removal Reason IDs */
    order: string[];
}
export interface SubredditGetRemovalReasonsResponse_SubredditRemovalReason {
    /** Removal Reason ID */
    id: string;
    /** A message that will communicate to the user why their post was removed */
    message: string;
    /** Removal Reason title */
    title: string;
}
export interface SubredditGetRemovalReasonsResponse_DataEntry {
    key: string;
    value?: SubredditGetRemovalReasonsResponse_SubredditRemovalReason | undefined;
}
export declare const AboutWhereRequest: {
    $type: "devvit.plugin.redditapi.subreddits.AboutWhereRequest";
    encode(message: AboutWhereRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AboutWhereRequest;
    fromJSON(object: any): AboutWhereRequest;
    toJSON(message: AboutWhereRequest): unknown;
    create(base?: DeepPartial<AboutWhereRequest>): AboutWhereRequest;
    fromPartial(object: DeepPartial<AboutWhereRequest>): AboutWhereRequest;
};
export declare const BasicSubredditRequest: {
    $type: "devvit.plugin.redditapi.subreddits.BasicSubredditRequest";
    encode(message: BasicSubredditRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BasicSubredditRequest;
    fromJSON(object: any): BasicSubredditRequest;
    toJSON(message: BasicSubredditRequest): unknown;
    create(base?: DeepPartial<BasicSubredditRequest>): BasicSubredditRequest;
    fromPartial(object: DeepPartial<BasicSubredditRequest>): BasicSubredditRequest;
};
export declare const DeleteSrImgRequest: {
    $type: "devvit.plugin.redditapi.subreddits.DeleteSrImgRequest";
    encode(message: DeleteSrImgRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DeleteSrImgRequest;
    fromJSON(object: any): DeleteSrImgRequest;
    toJSON(message: DeleteSrImgRequest): unknown;
    create(base?: DeepPartial<DeleteSrImgRequest>): DeleteSrImgRequest;
    fromPartial(object: DeepPartial<DeleteSrImgRequest>): DeleteSrImgRequest;
};
export declare const BasicSearchRequest: {
    $type: "devvit.plugin.redditapi.subreddits.BasicSearchRequest";
    encode(message: BasicSearchRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BasicSearchRequest;
    fromJSON(object: any): BasicSearchRequest;
    toJSON(message: BasicSearchRequest): unknown;
    create(base?: DeepPartial<BasicSearchRequest>): BasicSearchRequest;
    fromPartial(object: DeepPartial<BasicSearchRequest>): BasicSearchRequest;
};
export declare const SiteAdminRequest: {
    $type: "devvit.plugin.redditapi.subreddits.SiteAdminRequest";
    encode(message: SiteAdminRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SiteAdminRequest;
    fromJSON(object: any): SiteAdminRequest;
    toJSON(message: SiteAdminRequest): unknown;
    create(base?: DeepPartial<SiteAdminRequest>): SiteAdminRequest;
    fromPartial(object: DeepPartial<SiteAdminRequest>): SiteAdminRequest;
};
export declare const SubredditAutocompleteRequest: {
    $type: "devvit.plugin.redditapi.subreddits.SubredditAutocompleteRequest";
    encode(message: SubredditAutocompleteRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SubredditAutocompleteRequest;
    fromJSON(object: any): SubredditAutocompleteRequest;
    toJSON(message: SubredditAutocompleteRequest): unknown;
    create(base?: DeepPartial<SubredditAutocompleteRequest>): SubredditAutocompleteRequest;
    fromPartial(object: DeepPartial<SubredditAutocompleteRequest>): SubredditAutocompleteRequest;
};
export declare const SubredditStylesheetRequest: {
    $type: "devvit.plugin.redditapi.subreddits.SubredditStylesheetRequest";
    encode(message: SubredditStylesheetRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SubredditStylesheetRequest;
    fromJSON(object: any): SubredditStylesheetRequest;
    toJSON(message: SubredditStylesheetRequest): unknown;
    create(base?: DeepPartial<SubredditStylesheetRequest>): SubredditStylesheetRequest;
    fromPartial(object: DeepPartial<SubredditStylesheetRequest>): SubredditStylesheetRequest;
};
export declare const SubscribeRequest: {
    $type: "devvit.plugin.redditapi.subreddits.SubscribeRequest";
    encode(message: SubscribeRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SubscribeRequest;
    fromJSON(object: any): SubscribeRequest;
    toJSON(message: SubscribeRequest): unknown;
    create(base?: DeepPartial<SubscribeRequest>): SubscribeRequest;
    fromPartial(object: DeepPartial<SubscribeRequest>): SubscribeRequest;
};
export declare const UploadSrImgRequest: {
    $type: "devvit.plugin.redditapi.subreddits.UploadSrImgRequest";
    encode(message: UploadSrImgRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UploadSrImgRequest;
    fromJSON(object: any): UploadSrImgRequest;
    toJSON(message: UploadSrImgRequest): unknown;
    create(base?: DeepPartial<UploadSrImgRequest>): UploadSrImgRequest;
    fromPartial(object: DeepPartial<UploadSrImgRequest>): UploadSrImgRequest;
};
export declare const SubredditAboutEditRequest: {
    $type: "devvit.plugin.redditapi.subreddits.SubredditAboutEditRequest";
    encode(message: SubredditAboutEditRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SubredditAboutEditRequest;
    fromJSON(object: any): SubredditAboutEditRequest;
    toJSON(message: SubredditAboutEditRequest): unknown;
    create(base?: DeepPartial<SubredditAboutEditRequest>): SubredditAboutEditRequest;
    fromPartial(object: DeepPartial<SubredditAboutEditRequest>): SubredditAboutEditRequest;
};
export declare const StickyRequest: {
    $type: "devvit.plugin.redditapi.subreddits.StickyRequest";
    encode(message: StickyRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): StickyRequest;
    fromJSON(object: any): StickyRequest;
    toJSON(message: StickyRequest): unknown;
    create(base?: DeepPartial<StickyRequest>): StickyRequest;
    fromPartial(object: DeepPartial<StickyRequest>): StickyRequest;
};
export declare const BasicWhereRequest: {
    $type: "devvit.plugin.redditapi.subreddits.BasicWhereRequest";
    encode(message: BasicWhereRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BasicWhereRequest;
    fromJSON(object: any): BasicWhereRequest;
    toJSON(message: BasicWhereRequest): unknown;
    create(base?: DeepPartial<BasicWhereRequest>): BasicWhereRequest;
    fromPartial(object: DeepPartial<BasicWhereRequest>): BasicWhereRequest;
};
export declare const SubredditsSearchRequest: {
    $type: "devvit.plugin.redditapi.subreddits.SubredditsSearchRequest";
    encode(message: SubredditsSearchRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SubredditsSearchRequest;
    fromJSON(object: any): SubredditsSearchRequest;
    toJSON(message: SubredditsSearchRequest): unknown;
    create(base?: DeepPartial<SubredditsSearchRequest>): SubredditsSearchRequest;
    fromPartial(object: DeepPartial<SubredditsSearchRequest>): SubredditsSearchRequest;
};
export declare const UsersSearchRequest: {
    $type: "devvit.plugin.redditapi.subreddits.UsersSearchRequest";
    encode(message: UsersSearchRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UsersSearchRequest;
    fromJSON(object: any): UsersSearchRequest;
    toJSON(message: UsersSearchRequest): unknown;
    create(base?: DeepPartial<UsersSearchRequest>): UsersSearchRequest;
    fromPartial(object: DeepPartial<UsersSearchRequest>): UsersSearchRequest;
};
export declare const SearchRedditNamesResponse: {
    $type: "devvit.plugin.redditapi.subreddits.SearchRedditNamesResponse";
    encode(message: SearchRedditNamesResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SearchRedditNamesResponse;
    fromJSON(object: any): SearchRedditNamesResponse;
    toJSON(message: SearchRedditNamesResponse): unknown;
    create(base?: DeepPartial<SearchRedditNamesResponse>): SearchRedditNamesResponse;
    fromPartial(object: DeepPartial<SearchRedditNamesResponse>): SearchRedditNamesResponse;
};
export declare const SearchSubredditsResponse: {
    $type: "devvit.plugin.redditapi.subreddits.SearchSubredditsResponse";
    encode(message: SearchSubredditsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SearchSubredditsResponse;
    fromJSON(object: any): SearchSubredditsResponse;
    toJSON(message: SearchSubredditsResponse): unknown;
    create(base?: DeepPartial<SearchSubredditsResponse>): SearchSubredditsResponse;
    fromPartial(object: DeepPartial<SearchSubredditsResponse>): SearchSubredditsResponse;
};
export declare const SearchSubredditsResponse_SubredditData: {
    $type: "devvit.plugin.redditapi.subreddits.SearchSubredditsResponse.SubredditData";
    encode(message: SearchSubredditsResponse_SubredditData, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SearchSubredditsResponse_SubredditData;
    fromJSON(object: any): SearchSubredditsResponse_SubredditData;
    toJSON(message: SearchSubredditsResponse_SubredditData): unknown;
    create(base?: DeepPartial<SearchSubredditsResponse_SubredditData>): SearchSubredditsResponse_SubredditData;
    fromPartial(object: DeepPartial<SearchSubredditsResponse_SubredditData>): SearchSubredditsResponse_SubredditData;
};
export declare const SubmitTextResponse: {
    $type: "devvit.plugin.redditapi.subreddits.SubmitTextResponse";
    encode(message: SubmitTextResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SubmitTextResponse;
    fromJSON(object: any): SubmitTextResponse;
    toJSON(message: SubmitTextResponse): unknown;
    create(base?: DeepPartial<SubmitTextResponse>): SubmitTextResponse;
    fromPartial(object: DeepPartial<SubmitTextResponse>): SubmitTextResponse;
};
export declare const SubredditAutocompleteResponse: {
    $type: "devvit.plugin.redditapi.subreddits.SubredditAutocompleteResponse";
    encode(message: SubredditAutocompleteResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SubredditAutocompleteResponse;
    fromJSON(object: any): SubredditAutocompleteResponse;
    toJSON(message: SubredditAutocompleteResponse): unknown;
    create(base?: DeepPartial<SubredditAutocompleteResponse>): SubredditAutocompleteResponse;
    fromPartial(object: DeepPartial<SubredditAutocompleteResponse>): SubredditAutocompleteResponse;
};
export declare const SubredditAutocompleteResponse_AutocompleteAccount: {
    $type: "devvit.plugin.redditapi.subreddits.SubredditAutocompleteResponse.AutocompleteAccount";
    encode(message: SubredditAutocompleteResponse_AutocompleteAccount, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SubredditAutocompleteResponse_AutocompleteAccount;
    fromJSON(object: any): SubredditAutocompleteResponse_AutocompleteAccount;
    toJSON(message: SubredditAutocompleteResponse_AutocompleteAccount): unknown;
    create(base?: DeepPartial<SubredditAutocompleteResponse_AutocompleteAccount>): SubredditAutocompleteResponse_AutocompleteAccount;
    fromPartial(object: DeepPartial<SubredditAutocompleteResponse_AutocompleteAccount>): SubredditAutocompleteResponse_AutocompleteAccount;
};
export declare const SubredditAutocompleteResponse_AutocompleteAccount_Subreddit: {
    $type: "devvit.plugin.redditapi.subreddits.SubredditAutocompleteResponse.AutocompleteAccount.Subreddit";
    encode(message: SubredditAutocompleteResponse_AutocompleteAccount_Subreddit, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SubredditAutocompleteResponse_AutocompleteAccount_Subreddit;
    fromJSON(object: any): SubredditAutocompleteResponse_AutocompleteAccount_Subreddit;
    toJSON(message: SubredditAutocompleteResponse_AutocompleteAccount_Subreddit): unknown;
    create(base?: DeepPartial<SubredditAutocompleteResponse_AutocompleteAccount_Subreddit>): SubredditAutocompleteResponse_AutocompleteAccount_Subreddit;
    fromPartial(object: DeepPartial<SubredditAutocompleteResponse_AutocompleteAccount_Subreddit>): SubredditAutocompleteResponse_AutocompleteAccount_Subreddit;
};
export declare const SubredditAutocompleteResponse_WrappedAutoCompleteSubreddit: {
    $type: "devvit.plugin.redditapi.subreddits.SubredditAutocompleteResponse.WrappedAutoCompleteSubreddit";
    encode(message: SubredditAutocompleteResponse_WrappedAutoCompleteSubreddit, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SubredditAutocompleteResponse_WrappedAutoCompleteSubreddit;
    fromJSON(object: any): SubredditAutocompleteResponse_WrappedAutoCompleteSubreddit;
    toJSON(message: SubredditAutocompleteResponse_WrappedAutoCompleteSubreddit): unknown;
    create(base?: DeepPartial<SubredditAutocompleteResponse_WrappedAutoCompleteSubreddit>): SubredditAutocompleteResponse_WrappedAutoCompleteSubreddit;
    fromPartial(object: DeepPartial<SubredditAutocompleteResponse_WrappedAutoCompleteSubreddit>): SubredditAutocompleteResponse_WrappedAutoCompleteSubreddit;
};
export declare const SubredditAutocompleteResponse_WrappedAutoCompleteAccount: {
    $type: "devvit.plugin.redditapi.subreddits.SubredditAutocompleteResponse.WrappedAutoCompleteAccount";
    encode(message: SubredditAutocompleteResponse_WrappedAutoCompleteAccount, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SubredditAutocompleteResponse_WrappedAutoCompleteAccount;
    fromJSON(object: any): SubredditAutocompleteResponse_WrappedAutoCompleteAccount;
    toJSON(message: SubredditAutocompleteResponse_WrappedAutoCompleteAccount): unknown;
    create(base?: DeepPartial<SubredditAutocompleteResponse_WrappedAutoCompleteAccount>): SubredditAutocompleteResponse_WrappedAutoCompleteAccount;
    fromPartial(object: DeepPartial<SubredditAutocompleteResponse_WrappedAutoCompleteAccount>): SubredditAutocompleteResponse_WrappedAutoCompleteAccount;
};
export declare const SubredditAutocompleteResponse_AutocompleteResponse: {
    $type: "devvit.plugin.redditapi.subreddits.SubredditAutocompleteResponse.AutocompleteResponse";
    encode(message: SubredditAutocompleteResponse_AutocompleteResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SubredditAutocompleteResponse_AutocompleteResponse;
    fromJSON(object: any): SubredditAutocompleteResponse_AutocompleteResponse;
    toJSON(message: SubredditAutocompleteResponse_AutocompleteResponse): unknown;
    create(base?: DeepPartial<SubredditAutocompleteResponse_AutocompleteResponse>): SubredditAutocompleteResponse_AutocompleteResponse;
    fromPartial(object: DeepPartial<SubredditAutocompleteResponse_AutocompleteResponse>): SubredditAutocompleteResponse_AutocompleteResponse;
};
export declare const UploadSrImgResponse: {
    $type: "devvit.plugin.redditapi.subreddits.UploadSrImgResponse";
    encode(message: UploadSrImgResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UploadSrImgResponse;
    fromJSON(object: any): UploadSrImgResponse;
    toJSON(message: UploadSrImgResponse): unknown;
    create(base?: DeepPartial<UploadSrImgResponse>): UploadSrImgResponse;
    fromPartial(object: DeepPartial<UploadSrImgResponse>): UploadSrImgResponse;
};
export declare const SubredditPostRequirementsResponse: {
    $type: "devvit.plugin.redditapi.subreddits.SubredditPostRequirementsResponse";
    encode(message: SubredditPostRequirementsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SubredditPostRequirementsResponse;
    fromJSON(object: any): SubredditPostRequirementsResponse;
    toJSON(message: SubredditPostRequirementsResponse): unknown;
    create(base?: DeepPartial<SubredditPostRequirementsResponse>): SubredditPostRequirementsResponse;
    fromPartial(object: DeepPartial<SubredditPostRequirementsResponse>): SubredditPostRequirementsResponse;
};
export declare const SubredditAboutResponse: {
    $type: "devvit.plugin.redditapi.subreddits.SubredditAboutResponse";
    encode(message: SubredditAboutResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SubredditAboutResponse;
    fromJSON(object: any): SubredditAboutResponse;
    toJSON(message: SubredditAboutResponse): unknown;
    create(base?: DeepPartial<SubredditAboutResponse>): SubredditAboutResponse;
    fromPartial(object: DeepPartial<SubredditAboutResponse>): SubredditAboutResponse;
};
export declare const SubredditAboutResponse_AboutData: {
    $type: "devvit.plugin.redditapi.subreddits.SubredditAboutResponse.AboutData";
    encode(message: SubredditAboutResponse_AboutData, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SubredditAboutResponse_AboutData;
    fromJSON(object: any): SubredditAboutResponse_AboutData;
    toJSON(message: SubredditAboutResponse_AboutData): unknown;
    create(base?: DeepPartial<SubredditAboutResponse_AboutData>): SubredditAboutResponse_AboutData;
    fromPartial(object: DeepPartial<SubredditAboutResponse_AboutData>): SubredditAboutResponse_AboutData;
};
export declare const SubredditAboutEditResponse: {
    $type: "devvit.plugin.redditapi.subreddits.SubredditAboutEditResponse";
    encode(message: SubredditAboutEditResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SubredditAboutEditResponse;
    fromJSON(object: any): SubredditAboutEditResponse;
    toJSON(message: SubredditAboutEditResponse): unknown;
    create(base?: DeepPartial<SubredditAboutEditResponse>): SubredditAboutEditResponse;
    fromPartial(object: DeepPartial<SubredditAboutEditResponse>): SubredditAboutEditResponse;
};
export declare const SubredditAboutEditResponse_SubredditSettings: {
    $type: "devvit.plugin.redditapi.subreddits.SubredditAboutEditResponse.SubredditSettings";
    encode(message: SubredditAboutEditResponse_SubredditSettings, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SubredditAboutEditResponse_SubredditSettings;
    fromJSON(object: any): SubredditAboutEditResponse_SubredditSettings;
    toJSON(message: SubredditAboutEditResponse_SubredditSettings): unknown;
    create(base?: DeepPartial<SubredditAboutEditResponse_SubredditSettings>): SubredditAboutEditResponse_SubredditSettings;
    fromPartial(object: DeepPartial<SubredditAboutEditResponse_SubredditSettings>): SubredditAboutEditResponse_SubredditSettings;
};
export declare const SubredditAboutRulesResponse: {
    $type: "devvit.plugin.redditapi.subreddits.SubredditAboutRulesResponse";
    encode(message: SubredditAboutRulesResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SubredditAboutRulesResponse;
    fromJSON(object: any): SubredditAboutRulesResponse;
    toJSON(message: SubredditAboutRulesResponse): unknown;
    create(base?: DeepPartial<SubredditAboutRulesResponse>): SubredditAboutRulesResponse;
    fromPartial(object: DeepPartial<SubredditAboutRulesResponse>): SubredditAboutRulesResponse;
};
export declare const SubredditAboutRulesResponse_SubredditRule: {
    $type: "devvit.plugin.redditapi.subreddits.SubredditAboutRulesResponse.SubredditRule";
    encode(message: SubredditAboutRulesResponse_SubredditRule, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SubredditAboutRulesResponse_SubredditRule;
    fromJSON(object: any): SubredditAboutRulesResponse_SubredditRule;
    toJSON(message: SubredditAboutRulesResponse_SubredditRule): unknown;
    create(base?: DeepPartial<SubredditAboutRulesResponse_SubredditRule>): SubredditAboutRulesResponse_SubredditRule;
    fromPartial(object: DeepPartial<SubredditAboutRulesResponse_SubredditRule>): SubredditAboutRulesResponse_SubredditRule;
};
export declare const SubredditAboutRulesResponse_RuleFlow: {
    $type: "devvit.plugin.redditapi.subreddits.SubredditAboutRulesResponse.RuleFlow";
    encode(message: SubredditAboutRulesResponse_RuleFlow, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SubredditAboutRulesResponse_RuleFlow;
    fromJSON(object: any): SubredditAboutRulesResponse_RuleFlow;
    toJSON(message: SubredditAboutRulesResponse_RuleFlow): unknown;
    create(base?: DeepPartial<SubredditAboutRulesResponse_RuleFlow>): SubredditAboutRulesResponse_RuleFlow;
    fromPartial(object: DeepPartial<SubredditAboutRulesResponse_RuleFlow>): SubredditAboutRulesResponse_RuleFlow;
};
export declare const SubredditAboutTrafficResponse: {
    $type: "devvit.plugin.redditapi.subreddits.SubredditAboutTrafficResponse";
    encode(message: SubredditAboutTrafficResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SubredditAboutTrafficResponse;
    fromJSON(object: any): SubredditAboutTrafficResponse;
    toJSON(message: SubredditAboutTrafficResponse): unknown;
    create(base?: DeepPartial<SubredditAboutTrafficResponse>): SubredditAboutTrafficResponse;
    fromPartial(object: DeepPartial<SubredditAboutTrafficResponse>): SubredditAboutTrafficResponse;
};
export declare const SubredditAboutTrafficResponse_Data: {
    $type: "devvit.plugin.redditapi.subreddits.SubredditAboutTrafficResponse.Data";
    encode(message: SubredditAboutTrafficResponse_Data, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SubredditAboutTrafficResponse_Data;
    fromJSON(object: any): SubredditAboutTrafficResponse_Data;
    toJSON(message: SubredditAboutTrafficResponse_Data): unknown;
    create(base?: DeepPartial<SubredditAboutTrafficResponse_Data>): SubredditAboutTrafficResponse_Data;
    fromPartial(object: DeepPartial<SubredditAboutTrafficResponse_Data>): SubredditAboutTrafficResponse_Data;
};
export declare const StickyResponse: {
    $type: "devvit.plugin.redditapi.subreddits.StickyResponse";
    encode(message: StickyResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): StickyResponse;
    fromJSON(object: any): StickyResponse;
    toJSON(message: StickyResponse): unknown;
    create(base?: DeepPartial<StickyResponse>): StickyResponse;
    fromPartial(object: DeepPartial<StickyResponse>): StickyResponse;
};
export declare const StickyResponse_LinkData: {
    $type: "devvit.plugin.redditapi.subreddits.StickyResponse.LinkData";
    encode(message: StickyResponse_LinkData, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): StickyResponse_LinkData;
    fromJSON(object: any): StickyResponse_LinkData;
    toJSON(message: StickyResponse_LinkData): unknown;
    create(base?: DeepPartial<StickyResponse_LinkData>): StickyResponse_LinkData;
    fromPartial(object: DeepPartial<StickyResponse_LinkData>): StickyResponse_LinkData;
};
export declare const StickyResponse_WrappedStickyListing: {
    $type: "devvit.plugin.redditapi.subreddits.StickyResponse.WrappedStickyListing";
    encode(message: StickyResponse_WrappedStickyListing, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): StickyResponse_WrappedStickyListing;
    fromJSON(object: any): StickyResponse_WrappedStickyListing;
    toJSON(message: StickyResponse_WrappedStickyListing): unknown;
    create(base?: DeepPartial<StickyResponse_WrappedStickyListing>): StickyResponse_WrappedStickyListing;
    fromPartial(object: DeepPartial<StickyResponse_WrappedStickyListing>): StickyResponse_WrappedStickyListing;
};
export declare const StickyResponse_StickyResponseData: {
    $type: "devvit.plugin.redditapi.subreddits.StickyResponse.StickyResponseData";
    encode(message: StickyResponse_StickyResponseData, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): StickyResponse_StickyResponseData;
    fromJSON(object: any): StickyResponse_StickyResponseData;
    toJSON(message: StickyResponse_StickyResponseData): unknown;
    create(base?: DeepPartial<StickyResponse_StickyResponseData>): StickyResponse_StickyResponseData;
    fromPartial(object: DeepPartial<StickyResponse_StickyResponseData>): StickyResponse_StickyResponseData;
};
export declare const FullSubredditObject: {
    $type: "devvit.plugin.redditapi.subreddits.FullSubredditObject";
    encode(message: FullSubredditObject, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FullSubredditObject;
    fromJSON(object: any): FullSubredditObject;
    toJSON(message: FullSubredditObject): unknown;
    create(base?: DeepPartial<FullSubredditObject>): FullSubredditObject;
    fromPartial(object: DeepPartial<FullSubredditObject>): FullSubredditObject;
};
export declare const SubredditsSearchResponse: {
    $type: "devvit.plugin.redditapi.subreddits.SubredditsSearchResponse";
    encode(message: SubredditsSearchResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SubredditsSearchResponse;
    fromJSON(object: any): SubredditsSearchResponse;
    toJSON(message: SubredditsSearchResponse): unknown;
    create(base?: DeepPartial<SubredditsSearchResponse>): SubredditsSearchResponse;
    fromPartial(object: DeepPartial<SubredditsSearchResponse>): SubredditsSearchResponse;
};
export declare const SubredditsSearchResponse_WrappedSubredditObject: {
    $type: "devvit.plugin.redditapi.subreddits.SubredditsSearchResponse.WrappedSubredditObject";
    encode(message: SubredditsSearchResponse_WrappedSubredditObject, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SubredditsSearchResponse_WrappedSubredditObject;
    fromJSON(object: any): SubredditsSearchResponse_WrappedSubredditObject;
    toJSON(message: SubredditsSearchResponse_WrappedSubredditObject): unknown;
    create(base?: DeepPartial<SubredditsSearchResponse_WrappedSubredditObject>): SubredditsSearchResponse_WrappedSubredditObject;
    fromPartial(object: DeepPartial<SubredditsSearchResponse_WrappedSubredditObject>): SubredditsSearchResponse_WrappedSubredditObject;
};
export declare const SubredditsSearchResponse_WrappedSubredditObject_SubredditData: {
    $type: "devvit.plugin.redditapi.subreddits.SubredditsSearchResponse.WrappedSubredditObject.SubredditData";
    encode(message: SubredditsSearchResponse_WrappedSubredditObject_SubredditData, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SubredditsSearchResponse_WrappedSubredditObject_SubredditData;
    fromJSON(object: any): SubredditsSearchResponse_WrappedSubredditObject_SubredditData;
    toJSON(message: SubredditsSearchResponse_WrappedSubredditObject_SubredditData): unknown;
    create(base?: DeepPartial<SubredditsSearchResponse_WrappedSubredditObject_SubredditData>): SubredditsSearchResponse_WrappedSubredditObject_SubredditData;
    fromPartial(object: DeepPartial<SubredditsSearchResponse_WrappedSubredditObject_SubredditData>): SubredditsSearchResponse_WrappedSubredditObject_SubredditData;
};
export declare const UserSearchResponse: {
    $type: "devvit.plugin.redditapi.subreddits.UserSearchResponse";
    encode(message: UserSearchResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UserSearchResponse;
    fromJSON(object: any): UserSearchResponse;
    toJSON(message: UserSearchResponse): unknown;
    create(base?: DeepPartial<UserSearchResponse>): UserSearchResponse;
    fromPartial(object: DeepPartial<UserSearchResponse>): UserSearchResponse;
};
export declare const UserSearchResponse_AccData: {
    $type: "devvit.plugin.redditapi.subreddits.UserSearchResponse.AccData";
    encode(message: UserSearchResponse_AccData, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UserSearchResponse_AccData;
    fromJSON(object: any): UserSearchResponse_AccData;
    toJSON(message: UserSearchResponse_AccData): unknown;
    create(base?: DeepPartial<UserSearchResponse_AccData>): UserSearchResponse_AccData;
    fromPartial(object: DeepPartial<UserSearchResponse_AccData>): UserSearchResponse_AccData;
};
export declare const UserSearchResponse_Account: {
    $type: "devvit.plugin.redditapi.subreddits.UserSearchResponse.Account";
    encode(message: UserSearchResponse_Account, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UserSearchResponse_Account;
    fromJSON(object: any): UserSearchResponse_Account;
    toJSON(message: UserSearchResponse_Account): unknown;
    create(base?: DeepPartial<UserSearchResponse_Account>): UserSearchResponse_Account;
    fromPartial(object: DeepPartial<UserSearchResponse_Account>): UserSearchResponse_Account;
};
export declare const UserSearchResponse_AccountData: {
    $type: "devvit.plugin.redditapi.subreddits.UserSearchResponse.AccountData";
    encode(message: UserSearchResponse_AccountData, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UserSearchResponse_AccountData;
    fromJSON(object: any): UserSearchResponse_AccountData;
    toJSON(message: UserSearchResponse_AccountData): unknown;
    create(base?: DeepPartial<UserSearchResponse_AccountData>): UserSearchResponse_AccountData;
    fromPartial(object: DeepPartial<UserSearchResponse_AccountData>): UserSearchResponse_AccountData;
};
export declare const UserSearchResponse_AccountData_Subreddit: {
    $type: "devvit.plugin.redditapi.subreddits.UserSearchResponse.AccountData.Subreddit";
    encode(message: UserSearchResponse_AccountData_Subreddit, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UserSearchResponse_AccountData_Subreddit;
    fromJSON(object: any): UserSearchResponse_AccountData_Subreddit;
    toJSON(message: UserSearchResponse_AccountData_Subreddit): unknown;
    create(base?: DeepPartial<UserSearchResponse_AccountData_Subreddit>): UserSearchResponse_AccountData_Subreddit;
    fromPartial(object: DeepPartial<UserSearchResponse_AccountData_Subreddit>): UserSearchResponse_AccountData_Subreddit;
};
export declare const SubredditAddRemovalReasonRequest: {
    $type: "devvit.plugin.redditapi.subreddits.SubredditAddRemovalReasonRequest";
    encode(message: SubredditAddRemovalReasonRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SubredditAddRemovalReasonRequest;
    fromJSON(object: any): SubredditAddRemovalReasonRequest;
    toJSON(message: SubredditAddRemovalReasonRequest): unknown;
    create(base?: DeepPartial<SubredditAddRemovalReasonRequest>): SubredditAddRemovalReasonRequest;
    fromPartial(object: DeepPartial<SubredditAddRemovalReasonRequest>): SubredditAddRemovalReasonRequest;
};
export declare const SubredditAddRemovalReasonResponse: {
    $type: "devvit.plugin.redditapi.subreddits.SubredditAddRemovalReasonResponse";
    encode(message: SubredditAddRemovalReasonResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SubredditAddRemovalReasonResponse;
    fromJSON(object: any): SubredditAddRemovalReasonResponse;
    toJSON(message: SubredditAddRemovalReasonResponse): unknown;
    create(base?: DeepPartial<SubredditAddRemovalReasonResponse>): SubredditAddRemovalReasonResponse;
    fromPartial(object: DeepPartial<SubredditAddRemovalReasonResponse>): SubredditAddRemovalReasonResponse;
};
export declare const SubredditGetRemovalReasonsRequest: {
    $type: "devvit.plugin.redditapi.subreddits.SubredditGetRemovalReasonsRequest";
    encode(message: SubredditGetRemovalReasonsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SubredditGetRemovalReasonsRequest;
    fromJSON(object: any): SubredditGetRemovalReasonsRequest;
    toJSON(message: SubredditGetRemovalReasonsRequest): unknown;
    create(base?: DeepPartial<SubredditGetRemovalReasonsRequest>): SubredditGetRemovalReasonsRequest;
    fromPartial(object: DeepPartial<SubredditGetRemovalReasonsRequest>): SubredditGetRemovalReasonsRequest;
};
export declare const SubredditGetRemovalReasonsResponse: {
    $type: "devvit.plugin.redditapi.subreddits.SubredditGetRemovalReasonsResponse";
    encode(message: SubredditGetRemovalReasonsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SubredditGetRemovalReasonsResponse;
    fromJSON(object: any): SubredditGetRemovalReasonsResponse;
    toJSON(message: SubredditGetRemovalReasonsResponse): unknown;
    create(base?: DeepPartial<SubredditGetRemovalReasonsResponse>): SubredditGetRemovalReasonsResponse;
    fromPartial(object: DeepPartial<SubredditGetRemovalReasonsResponse>): SubredditGetRemovalReasonsResponse;
};
export declare const SubredditGetRemovalReasonsResponse_SubredditRemovalReason: {
    $type: "devvit.plugin.redditapi.subreddits.SubredditGetRemovalReasonsResponse.SubredditRemovalReason";
    encode(message: SubredditGetRemovalReasonsResponse_SubredditRemovalReason, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SubredditGetRemovalReasonsResponse_SubredditRemovalReason;
    fromJSON(object: any): SubredditGetRemovalReasonsResponse_SubredditRemovalReason;
    toJSON(message: SubredditGetRemovalReasonsResponse_SubredditRemovalReason): unknown;
    create(base?: DeepPartial<SubredditGetRemovalReasonsResponse_SubredditRemovalReason>): SubredditGetRemovalReasonsResponse_SubredditRemovalReason;
    fromPartial(object: DeepPartial<SubredditGetRemovalReasonsResponse_SubredditRemovalReason>): SubredditGetRemovalReasonsResponse_SubredditRemovalReason;
};
export declare const SubredditGetRemovalReasonsResponse_DataEntry: {
    $type: "devvit.plugin.redditapi.subreddits.SubredditGetRemovalReasonsResponse.DataEntry";
    encode(message: SubredditGetRemovalReasonsResponse_DataEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SubredditGetRemovalReasonsResponse_DataEntry;
    fromJSON(object: any): SubredditGetRemovalReasonsResponse_DataEntry;
    toJSON(message: SubredditGetRemovalReasonsResponse_DataEntry): unknown;
    create(base?: DeepPartial<SubredditGetRemovalReasonsResponse_DataEntry>): SubredditGetRemovalReasonsResponse_DataEntry;
    fromPartial(object: DeepPartial<SubredditGetRemovalReasonsResponse_DataEntry>): SubredditGetRemovalReasonsResponse_DataEntry;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=subreddits_msg.d.ts.map