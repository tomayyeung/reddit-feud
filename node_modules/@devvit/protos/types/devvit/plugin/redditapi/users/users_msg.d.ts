/**
 * #users_msg.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { User } from "../../../reddit/user.js";
/** Requests */
export interface GenericUsersRequest {
    /** thing id e.g. 't3_15bfi0' */
    id?: string | undefined;
    /** a valid, existing reddit username */
    username: string;
}
export interface BlockUserRequest {
    /** account thing id e.g. 't3_15bfi0' */
    accountId?: string | undefined;
    /** a valid, existing reddit username */
    name?: string | undefined;
}
export interface FriendRequest {
    /** thing id e.g. 't3_15bfi0' */
    banContext?: string | undefined;
    /** raw markdown text */
    banMessage?: string | undefined;
    /** a string no longer than 100 characters */
    banReason?: string | undefined;
    /** an integer between 1 and 999 */
    duration?: number | undefined;
    /** the name of an existing user */
    name: string;
    /** a string no longer than 300 characters */
    note?: string | undefined;
    permissions?: string | undefined;
    /** one of (friend, moderator, moderator_invite, contributor, banned, muted, wikibanned, wikicontributor) */
    type: string;
    /** subreddit name without the r/ e.g. 'devvit_test' */
    subreddit?: string | undefined;
}
export interface ReportUserRequest {
    /** JSON data */
    details: string;
    /** a string no longer than 100 characters */
    reason: string;
    /** a valid, existing reddit username */
    user: string;
}
export interface SetPermissionsRequest {
    /** the name of an existing user */
    name: string;
    /** subreddit name without the r/ e.g. 'devvit_test' */
    subreddit: string;
    permissions: string;
    type: string;
}
export interface UnfriendRequest {
    /** thing id e.g. 't3_15bfi0' */
    id?: string | undefined;
    /** the name of an existing */
    name?: string | undefined;
    /** one of (friend, enemy, moderator, moderator_invite, contributor, banned, muted, wikibanned, wikicontributor) */
    type: string;
    /** subreddit name without the r/ e.g. 'devvit_test' */
    subreddit?: string | undefined;
}
export interface UserDataByAccountIdsRequest {
    /** a comma-separated list of account thing ids */
    ids: string;
}
export interface UsernameAvailableRequest {
    /** a valid, unused username */
    user: string;
}
export interface UpdateFriendRelationshipRequest {
    /** a valid, existing reddit username */
    name: string;
    note: string;
}
export interface UserAboutRequest {
    /** a valid, existing reddit username */
    username: string;
}
export interface UserWhereRequest {
    context?: number | undefined;
    show?: string | undefined;
    sort?: string | undefined;
    t?: string | undefined;
    type?: string | undefined;
    after?: string | undefined;
    before?: string | undefined;
    count?: number | undefined;
    limit?: number | undefined;
    username?: string | undefined;
    where: string;
}
/** Responses */
export interface GeneralFriendResponse {
    date?: number | undefined;
    relId?: string | undefined;
    name?: string | undefined;
    id?: string | undefined;
    /** error case */
    fields: string[];
    explanation?: string | undefined;
    message?: string | undefined;
    reason?: string | undefined;
}
export interface BlockUserResponse {
    date?: number | undefined;
    iconImg?: string | undefined;
    id?: string | undefined;
    name?: string | undefined;
}
export interface UserDataByAccountIdsResponse {
    users: {
        [key: string]: UserDataByAccountIdsResponse_UserAccountData;
    };
}
export interface UserDataByAccountIdsResponse_UserAccountData {
    name?: string | undefined;
    createdUtc?: number | undefined;
    linkKarma?: number | undefined;
    commentKarma?: number | undefined;
    profileImg?: string | undefined;
    profileColor?: string | undefined;
    profileOver18?: boolean | undefined;
}
export interface UserDataByAccountIdsResponse_UsersEntry {
    key: string;
    value?: UserDataByAccountIdsResponse_UserAccountData | undefined;
}
export interface UserTrophiesResponse {
    kind?: string | undefined;
    data?: UserTrophiesResponse_UserTrophiesData | undefined;
}
export interface UserTrophiesResponse_TrophiesData {
    icon70?: string | undefined;
    grantedAt?: number | undefined;
    url?: string | undefined;
    icon40?: string | undefined;
    name?: string | undefined;
    awardId?: string | undefined;
    id?: string | undefined;
    description?: string | undefined;
}
export interface UserTrophiesResponse_TrophiesType {
    kind?: string | undefined;
    data?: UserTrophiesResponse_TrophiesData | undefined;
}
export interface UserTrophiesResponse_UserTrophiesData {
    trophies: UserTrophiesResponse_TrophiesType[];
}
export interface UserAboutResponse {
    kind?: string | undefined;
    data?: User | undefined;
}
export declare const GenericUsersRequest: {
    $type: "devvit.plugin.redditapi.users.GenericUsersRequest";
    encode(message: GenericUsersRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GenericUsersRequest;
    fromJSON(object: any): GenericUsersRequest;
    toJSON(message: GenericUsersRequest): unknown;
    create(base?: DeepPartial<GenericUsersRequest>): GenericUsersRequest;
    fromPartial(object: DeepPartial<GenericUsersRequest>): GenericUsersRequest;
};
export declare const BlockUserRequest: {
    $type: "devvit.plugin.redditapi.users.BlockUserRequest";
    encode(message: BlockUserRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BlockUserRequest;
    fromJSON(object: any): BlockUserRequest;
    toJSON(message: BlockUserRequest): unknown;
    create(base?: DeepPartial<BlockUserRequest>): BlockUserRequest;
    fromPartial(object: DeepPartial<BlockUserRequest>): BlockUserRequest;
};
export declare const FriendRequest: {
    $type: "devvit.plugin.redditapi.users.FriendRequest";
    encode(message: FriendRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FriendRequest;
    fromJSON(object: any): FriendRequest;
    toJSON(message: FriendRequest): unknown;
    create(base?: DeepPartial<FriendRequest>): FriendRequest;
    fromPartial(object: DeepPartial<FriendRequest>): FriendRequest;
};
export declare const ReportUserRequest: {
    $type: "devvit.plugin.redditapi.users.ReportUserRequest";
    encode(message: ReportUserRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ReportUserRequest;
    fromJSON(object: any): ReportUserRequest;
    toJSON(message: ReportUserRequest): unknown;
    create(base?: DeepPartial<ReportUserRequest>): ReportUserRequest;
    fromPartial(object: DeepPartial<ReportUserRequest>): ReportUserRequest;
};
export declare const SetPermissionsRequest: {
    $type: "devvit.plugin.redditapi.users.SetPermissionsRequest";
    encode(message: SetPermissionsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SetPermissionsRequest;
    fromJSON(object: any): SetPermissionsRequest;
    toJSON(message: SetPermissionsRequest): unknown;
    create(base?: DeepPartial<SetPermissionsRequest>): SetPermissionsRequest;
    fromPartial(object: DeepPartial<SetPermissionsRequest>): SetPermissionsRequest;
};
export declare const UnfriendRequest: {
    $type: "devvit.plugin.redditapi.users.UnfriendRequest";
    encode(message: UnfriendRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UnfriendRequest;
    fromJSON(object: any): UnfriendRequest;
    toJSON(message: UnfriendRequest): unknown;
    create(base?: DeepPartial<UnfriendRequest>): UnfriendRequest;
    fromPartial(object: DeepPartial<UnfriendRequest>): UnfriendRequest;
};
export declare const UserDataByAccountIdsRequest: {
    $type: "devvit.plugin.redditapi.users.UserDataByAccountIdsRequest";
    encode(message: UserDataByAccountIdsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UserDataByAccountIdsRequest;
    fromJSON(object: any): UserDataByAccountIdsRequest;
    toJSON(message: UserDataByAccountIdsRequest): unknown;
    create(base?: DeepPartial<UserDataByAccountIdsRequest>): UserDataByAccountIdsRequest;
    fromPartial(object: DeepPartial<UserDataByAccountIdsRequest>): UserDataByAccountIdsRequest;
};
export declare const UsernameAvailableRequest: {
    $type: "devvit.plugin.redditapi.users.UsernameAvailableRequest";
    encode(message: UsernameAvailableRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UsernameAvailableRequest;
    fromJSON(object: any): UsernameAvailableRequest;
    toJSON(message: UsernameAvailableRequest): unknown;
    create(base?: DeepPartial<UsernameAvailableRequest>): UsernameAvailableRequest;
    fromPartial(object: DeepPartial<UsernameAvailableRequest>): UsernameAvailableRequest;
};
export declare const UpdateFriendRelationshipRequest: {
    $type: "devvit.plugin.redditapi.users.UpdateFriendRelationshipRequest";
    encode(message: UpdateFriendRelationshipRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UpdateFriendRelationshipRequest;
    fromJSON(object: any): UpdateFriendRelationshipRequest;
    toJSON(message: UpdateFriendRelationshipRequest): unknown;
    create(base?: DeepPartial<UpdateFriendRelationshipRequest>): UpdateFriendRelationshipRequest;
    fromPartial(object: DeepPartial<UpdateFriendRelationshipRequest>): UpdateFriendRelationshipRequest;
};
export declare const UserAboutRequest: {
    $type: "devvit.plugin.redditapi.users.UserAboutRequest";
    encode(message: UserAboutRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UserAboutRequest;
    fromJSON(object: any): UserAboutRequest;
    toJSON(message: UserAboutRequest): unknown;
    create(base?: DeepPartial<UserAboutRequest>): UserAboutRequest;
    fromPartial(object: DeepPartial<UserAboutRequest>): UserAboutRequest;
};
export declare const UserWhereRequest: {
    $type: "devvit.plugin.redditapi.users.UserWhereRequest";
    encode(message: UserWhereRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UserWhereRequest;
    fromJSON(object: any): UserWhereRequest;
    toJSON(message: UserWhereRequest): unknown;
    create(base?: DeepPartial<UserWhereRequest>): UserWhereRequest;
    fromPartial(object: DeepPartial<UserWhereRequest>): UserWhereRequest;
};
export declare const GeneralFriendResponse: {
    $type: "devvit.plugin.redditapi.users.GeneralFriendResponse";
    encode(message: GeneralFriendResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GeneralFriendResponse;
    fromJSON(object: any): GeneralFriendResponse;
    toJSON(message: GeneralFriendResponse): unknown;
    create(base?: DeepPartial<GeneralFriendResponse>): GeneralFriendResponse;
    fromPartial(object: DeepPartial<GeneralFriendResponse>): GeneralFriendResponse;
};
export declare const BlockUserResponse: {
    $type: "devvit.plugin.redditapi.users.BlockUserResponse";
    encode(message: BlockUserResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BlockUserResponse;
    fromJSON(object: any): BlockUserResponse;
    toJSON(message: BlockUserResponse): unknown;
    create(base?: DeepPartial<BlockUserResponse>): BlockUserResponse;
    fromPartial(object: DeepPartial<BlockUserResponse>): BlockUserResponse;
};
export declare const UserDataByAccountIdsResponse: {
    $type: "devvit.plugin.redditapi.users.UserDataByAccountIdsResponse";
    encode(message: UserDataByAccountIdsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UserDataByAccountIdsResponse;
    fromJSON(object: any): UserDataByAccountIdsResponse;
    toJSON(message: UserDataByAccountIdsResponse): unknown;
    create(base?: DeepPartial<UserDataByAccountIdsResponse>): UserDataByAccountIdsResponse;
    fromPartial(object: DeepPartial<UserDataByAccountIdsResponse>): UserDataByAccountIdsResponse;
};
export declare const UserDataByAccountIdsResponse_UserAccountData: {
    $type: "devvit.plugin.redditapi.users.UserDataByAccountIdsResponse.UserAccountData";
    encode(message: UserDataByAccountIdsResponse_UserAccountData, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UserDataByAccountIdsResponse_UserAccountData;
    fromJSON(object: any): UserDataByAccountIdsResponse_UserAccountData;
    toJSON(message: UserDataByAccountIdsResponse_UserAccountData): unknown;
    create(base?: DeepPartial<UserDataByAccountIdsResponse_UserAccountData>): UserDataByAccountIdsResponse_UserAccountData;
    fromPartial(object: DeepPartial<UserDataByAccountIdsResponse_UserAccountData>): UserDataByAccountIdsResponse_UserAccountData;
};
export declare const UserDataByAccountIdsResponse_UsersEntry: {
    $type: "devvit.plugin.redditapi.users.UserDataByAccountIdsResponse.UsersEntry";
    encode(message: UserDataByAccountIdsResponse_UsersEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UserDataByAccountIdsResponse_UsersEntry;
    fromJSON(object: any): UserDataByAccountIdsResponse_UsersEntry;
    toJSON(message: UserDataByAccountIdsResponse_UsersEntry): unknown;
    create(base?: DeepPartial<UserDataByAccountIdsResponse_UsersEntry>): UserDataByAccountIdsResponse_UsersEntry;
    fromPartial(object: DeepPartial<UserDataByAccountIdsResponse_UsersEntry>): UserDataByAccountIdsResponse_UsersEntry;
};
export declare const UserTrophiesResponse: {
    $type: "devvit.plugin.redditapi.users.UserTrophiesResponse";
    encode(message: UserTrophiesResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UserTrophiesResponse;
    fromJSON(object: any): UserTrophiesResponse;
    toJSON(message: UserTrophiesResponse): unknown;
    create(base?: DeepPartial<UserTrophiesResponse>): UserTrophiesResponse;
    fromPartial(object: DeepPartial<UserTrophiesResponse>): UserTrophiesResponse;
};
export declare const UserTrophiesResponse_TrophiesData: {
    $type: "devvit.plugin.redditapi.users.UserTrophiesResponse.TrophiesData";
    encode(message: UserTrophiesResponse_TrophiesData, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UserTrophiesResponse_TrophiesData;
    fromJSON(object: any): UserTrophiesResponse_TrophiesData;
    toJSON(message: UserTrophiesResponse_TrophiesData): unknown;
    create(base?: DeepPartial<UserTrophiesResponse_TrophiesData>): UserTrophiesResponse_TrophiesData;
    fromPartial(object: DeepPartial<UserTrophiesResponse_TrophiesData>): UserTrophiesResponse_TrophiesData;
};
export declare const UserTrophiesResponse_TrophiesType: {
    $type: "devvit.plugin.redditapi.users.UserTrophiesResponse.TrophiesType";
    encode(message: UserTrophiesResponse_TrophiesType, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UserTrophiesResponse_TrophiesType;
    fromJSON(object: any): UserTrophiesResponse_TrophiesType;
    toJSON(message: UserTrophiesResponse_TrophiesType): unknown;
    create(base?: DeepPartial<UserTrophiesResponse_TrophiesType>): UserTrophiesResponse_TrophiesType;
    fromPartial(object: DeepPartial<UserTrophiesResponse_TrophiesType>): UserTrophiesResponse_TrophiesType;
};
export declare const UserTrophiesResponse_UserTrophiesData: {
    $type: "devvit.plugin.redditapi.users.UserTrophiesResponse.UserTrophiesData";
    encode(message: UserTrophiesResponse_UserTrophiesData, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UserTrophiesResponse_UserTrophiesData;
    fromJSON(object: any): UserTrophiesResponse_UserTrophiesData;
    toJSON(message: UserTrophiesResponse_UserTrophiesData): unknown;
    create(base?: DeepPartial<UserTrophiesResponse_UserTrophiesData>): UserTrophiesResponse_UserTrophiesData;
    fromPartial(object: DeepPartial<UserTrophiesResponse_UserTrophiesData>): UserTrophiesResponse_UserTrophiesData;
};
export declare const UserAboutResponse: {
    $type: "devvit.plugin.redditapi.users.UserAboutResponse";
    encode(message: UserAboutResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UserAboutResponse;
    fromJSON(object: any): UserAboutResponse;
    toJSON(message: UserAboutResponse): unknown;
    create(base?: DeepPartial<UserAboutResponse>): UserAboutResponse;
    fromPartial(object: DeepPartial<UserAboutResponse>): UserAboutResponse;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=users_msg.d.ts.map