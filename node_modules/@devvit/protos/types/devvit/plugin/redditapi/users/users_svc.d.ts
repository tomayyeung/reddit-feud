/**
 * #users_svc.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { Metadata } from "../../../../../lib/Types.js";
import { Empty } from "../../../../google/protobuf/empty.js";
import { BoolValue } from "../../../../google/protobuf/wrappers.js";
import { JsonStatus, Listing } from "../common/common_msg.js";
import { BlockUserRequest, BlockUserResponse, FriendRequest, GeneralFriendResponse, GenericUsersRequest, ReportUserRequest, SetPermissionsRequest, UnfriendRequest, UpdateFriendRelationshipRequest, UserAboutRequest, UserAboutResponse, UserDataByAccountIdsRequest, UserDataByAccountIdsResponse, UsernameAvailableRequest, UserTrophiesResponse, UserWhereRequest } from "./users_msg.js";
/**
 * USERS - https://www.reddit.com/dev/api#section_users
 * Note: all endpoints require oauth
 */
export interface Users {
    /** https://www.reddit.com/dev/api#POST_api_block_user */
    BlockUser(request: BlockUserRequest, metadata?: Metadata): Promise<BlockUserResponse>;
    /** https://www.reddit.com/dev/api#POST_api_friend */
    Friend(request: FriendRequest, metadata?: Metadata): Promise<JsonStatus>;
    /** https://www.reddit.com/dev/api#POST_api_report_user */
    ReportUser(request: ReportUserRequest, metadata?: Metadata): Promise<Empty>;
    /** https://www.reddit.com/dev/api#POST_api_setpermissions */
    SetPermissions(request: SetPermissionsRequest, metadata?: Metadata): Promise<JsonStatus>;
    /** https://www.reddit.com/dev/api#POST_api_unfriend */
    Unfriend(request: UnfriendRequest, metadata?: Metadata): Promise<Empty>;
    /** https://www.reddit.com/dev/api#GET_api_user_data_by_account_ids */
    UserDataByAccountIds(request: UserDataByAccountIdsRequest, metadata?: Metadata): Promise<UserDataByAccountIdsResponse>;
    /** https://www.reddit.com/dev/api#GET_api_username_available */
    UsernameAvailable(request: UsernameAvailableRequest, metadata?: Metadata): Promise<BoolValue>;
    /** https://www.reddit.com/dev/api#DELETE_api_v1_me_friends_username */
    UnfriendUser(request: GenericUsersRequest, metadata?: Metadata): Promise<Empty>;
    /**
     * https://www.reddit.com/dev/api#GET_api_v1_me_friends_username
     * TODO: this actually returns a WrappedRedditObject. Fix this up after the system worker is deleted.
     */
    GetFriendInformation(request: GenericUsersRequest, metadata?: Metadata): Promise<GeneralFriendResponse>;
    /** https://www.reddit.com/dev/api#PUT_api_v1_me_friends_username */
    UpdateFriendRelationship(request: UpdateFriendRelationshipRequest, metadata?: Metadata): Promise<GeneralFriendResponse>;
    /** https://www.reddit.com/dev/api#GET_api_v1_user_username_trophies */
    UserTrophies(request: GenericUsersRequest, metadata?: Metadata): Promise<UserTrophiesResponse>;
    /** https://www.reddit.com/dev/api#GET_user_username_about */
    UserAbout(request: UserAboutRequest, metadata?: Metadata): Promise<UserAboutResponse>;
    /** https://www.reddit.com/dev/api#GET_user_username_where */
    UserWhere(request: UserWhereRequest, metadata?: Metadata): Promise<Listing>;
}
export declare const UsersServiceName = "devvit.plugin.redditapi.users.Users";
export declare class UsersClientImpl implements Users {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    BlockUser(request: BlockUserRequest, metadata?: Metadata): Promise<BlockUserResponse>;
    Friend(request: FriendRequest, metadata?: Metadata): Promise<JsonStatus>;
    ReportUser(request: ReportUserRequest, metadata?: Metadata): Promise<Empty>;
    SetPermissions(request: SetPermissionsRequest, metadata?: Metadata): Promise<JsonStatus>;
    Unfriend(request: UnfriendRequest, metadata?: Metadata): Promise<Empty>;
    UserDataByAccountIds(request: UserDataByAccountIdsRequest, metadata?: Metadata): Promise<UserDataByAccountIdsResponse>;
    UsernameAvailable(request: UsernameAvailableRequest, metadata?: Metadata): Promise<BoolValue>;
    UnfriendUser(request: GenericUsersRequest, metadata?: Metadata): Promise<Empty>;
    GetFriendInformation(request: GenericUsersRequest, metadata?: Metadata): Promise<GeneralFriendResponse>;
    UpdateFriendRelationship(request: UpdateFriendRelationshipRequest, metadata?: Metadata): Promise<GeneralFriendResponse>;
    UserTrophies(request: GenericUsersRequest, metadata?: Metadata): Promise<UserTrophiesResponse>;
    UserAbout(request: UserAboutRequest, metadata?: Metadata): Promise<UserAboutResponse>;
    UserWhere(request: UserWhereRequest, metadata?: Metadata): Promise<Listing>;
}
/**
 * USERS - https://www.reddit.com/dev/api#section_users
 * Note: all endpoints require oauth
 */
export type UsersDefinition = typeof UsersDefinition;
export declare const UsersDefinition: {
    readonly name: "Users";
    readonly fullName: "devvit.plugin.redditapi.users.Users";
    readonly methods: {
        /** https://www.reddit.com/dev/api#POST_api_block_user */
        readonly blockUser: {
            readonly name: "BlockUser";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.users.BlockUserRequest";
                encode(message: BlockUserRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): BlockUserRequest;
                fromJSON(object: any): BlockUserRequest;
                toJSON(message: BlockUserRequest): unknown;
                create(base?: {
                    accountId?: string | undefined;
                    name?: string | undefined;
                } | undefined): BlockUserRequest;
                fromPartial(object: {
                    accountId?: string | undefined;
                    name?: string | undefined;
                }): BlockUserRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.users.BlockUserResponse";
                encode(message: BlockUserResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): BlockUserResponse;
                fromJSON(object: any): BlockUserResponse;
                toJSON(message: BlockUserResponse): unknown;
                create(base?: {
                    date?: number | undefined;
                    iconImg?: string | undefined;
                    id?: string | undefined;
                    name?: string | undefined;
                } | undefined): BlockUserResponse;
                fromPartial(object: {
                    date?: number | undefined;
                    iconImg?: string | undefined;
                    id?: string | undefined;
                    name?: string | undefined;
                }): BlockUserResponse;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array, Uint8Array, Uint8Array, Uint8Array];
                };
            };
        };
        /** https://www.reddit.com/dev/api#POST_api_friend */
        readonly friend: {
            readonly name: "Friend";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.users.FriendRequest";
                encode(message: FriendRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): FriendRequest;
                fromJSON(object: any): FriendRequest;
                toJSON(message: FriendRequest): unknown;
                create(base?: {
                    banContext?: string | undefined;
                    banMessage?: string | undefined;
                    banReason?: string | undefined;
                    duration?: number | undefined;
                    name?: string;
                    note?: string | undefined;
                    permissions?: string | undefined;
                    type?: string;
                    subreddit?: string | undefined;
                } | undefined): FriendRequest;
                fromPartial(object: {
                    banContext?: string | undefined;
                    banMessage?: string | undefined;
                    banReason?: string | undefined;
                    duration?: number | undefined;
                    name?: string;
                    note?: string | undefined;
                    permissions?: string | undefined;
                    type?: string;
                    subreddit?: string | undefined;
                }): FriendRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.common.JsonStatus";
                encode(message: JsonStatus, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): JsonStatus;
                fromJSON(object: any): JsonStatus;
                toJSON(message: JsonStatus): unknown;
                create(base?: {
                    json?: {
                        errors?: string[];
                    } | undefined;
                } | undefined): JsonStatus;
                fromPartial(object: {
                    json?: {
                        errors?: string[];
                    } | undefined;
                }): JsonStatus;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array, Uint8Array, Uint8Array, Uint8Array];
                };
            };
        };
        /** https://www.reddit.com/dev/api#POST_api_report_user */
        readonly reportUser: {
            readonly name: "ReportUser";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.users.ReportUserRequest";
                encode(message: ReportUserRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ReportUserRequest;
                fromJSON(object: any): ReportUserRequest;
                toJSON(message: ReportUserRequest): unknown;
                create(base?: {
                    details?: string;
                    reason?: string;
                    user?: string;
                } | undefined): ReportUserRequest;
                fromPartial(object: {
                    details?: string;
                    reason?: string;
                    user?: string;
                }): ReportUserRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {} | undefined): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array, Uint8Array, Uint8Array];
                };
            };
        };
        /** https://www.reddit.com/dev/api#POST_api_setpermissions */
        readonly setPermissions: {
            readonly name: "SetPermissions";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.users.SetPermissionsRequest";
                encode(message: SetPermissionsRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): SetPermissionsRequest;
                fromJSON(object: any): SetPermissionsRequest;
                toJSON(message: SetPermissionsRequest): unknown;
                create(base?: {
                    name?: string;
                    subreddit?: string;
                    permissions?: string;
                    type?: string;
                } | undefined): SetPermissionsRequest;
                fromPartial(object: {
                    name?: string;
                    subreddit?: string;
                    permissions?: string;
                    type?: string;
                }): SetPermissionsRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.common.JsonStatus";
                encode(message: JsonStatus, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): JsonStatus;
                fromJSON(object: any): JsonStatus;
                toJSON(message: JsonStatus): unknown;
                create(base?: {
                    json?: {
                        errors?: string[];
                    } | undefined;
                } | undefined): JsonStatus;
                fromPartial(object: {
                    json?: {
                        errors?: string[];
                    } | undefined;
                }): JsonStatus;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array, Uint8Array, Uint8Array, Uint8Array];
                };
            };
        };
        /** https://www.reddit.com/dev/api#POST_api_unfriend */
        readonly unfriend: {
            readonly name: "Unfriend";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.users.UnfriendRequest";
                encode(message: UnfriendRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): UnfriendRequest;
                fromJSON(object: any): UnfriendRequest;
                toJSON(message: UnfriendRequest): unknown;
                create(base?: {
                    id?: string | undefined;
                    name?: string | undefined;
                    type?: string;
                    subreddit?: string | undefined;
                } | undefined): UnfriendRequest;
                fromPartial(object: {
                    id?: string | undefined;
                    name?: string | undefined;
                    type?: string;
                    subreddit?: string | undefined;
                }): UnfriendRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {} | undefined): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array, Uint8Array, Uint8Array];
                };
            };
        };
        /** https://www.reddit.com/dev/api#GET_api_user_data_by_account_ids */
        readonly userDataByAccountIds: {
            readonly name: "UserDataByAccountIds";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.users.UserDataByAccountIdsRequest";
                encode(message: UserDataByAccountIdsRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): UserDataByAccountIdsRequest;
                fromJSON(object: any): UserDataByAccountIdsRequest;
                toJSON(message: UserDataByAccountIdsRequest): unknown;
                create(base?: {
                    ids?: string;
                } | undefined): UserDataByAccountIdsRequest;
                fromPartial(object: {
                    ids?: string;
                }): UserDataByAccountIdsRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.users.UserDataByAccountIdsResponse";
                encode(message: UserDataByAccountIdsResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): UserDataByAccountIdsResponse;
                fromJSON(object: any): UserDataByAccountIdsResponse;
                toJSON(message: UserDataByAccountIdsResponse): unknown;
                create(base?: {
                    users?: {
                        [x: string]: {
                            name?: string | undefined;
                            createdUtc?: number | undefined;
                            linkKarma?: number | undefined;
                            commentKarma?: number | undefined;
                            profileImg?: string | undefined;
                            profileColor?: string | undefined;
                            profileOver18?: boolean | undefined;
                        } | undefined;
                    };
                } | undefined): UserDataByAccountIdsResponse;
                fromPartial(object: {
                    users?: {
                        [x: string]: {
                            name?: string | undefined;
                            createdUtc?: number | undefined;
                            linkKarma?: number | undefined;
                            commentKarma?: number | undefined;
                            profileImg?: string | undefined;
                            profileColor?: string | undefined;
                            profileOver18?: boolean | undefined;
                        } | undefined;
                    };
                }): UserDataByAccountIdsResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** https://www.reddit.com/dev/api#GET_api_username_available */
        readonly usernameAvailable: {
            readonly name: "UsernameAvailable";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.users.UsernameAvailableRequest";
                encode(message: UsernameAvailableRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): UsernameAvailableRequest;
                fromJSON(object: any): UsernameAvailableRequest;
                toJSON(message: UsernameAvailableRequest): unknown;
                create(base?: {
                    user?: string;
                } | undefined): UsernameAvailableRequest;
                fromPartial(object: {
                    user?: string;
                }): UsernameAvailableRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.BoolValue";
                encode(message: BoolValue, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): BoolValue;
                fromJSON(object: any): BoolValue;
                toJSON(message: BoolValue): unknown;
                create(base?: {
                    value?: boolean;
                } | undefined): BoolValue;
                fromPartial(object: {
                    value?: boolean;
                }): BoolValue;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array, Uint8Array, Uint8Array];
                };
            };
        };
        /** https://www.reddit.com/dev/api#DELETE_api_v1_me_friends_username */
        readonly unfriendUser: {
            readonly name: "UnfriendUser";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.users.GenericUsersRequest";
                encode(message: GenericUsersRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GenericUsersRequest;
                fromJSON(object: any): GenericUsersRequest;
                toJSON(message: GenericUsersRequest): unknown;
                create(base?: {
                    id?: string | undefined;
                    username?: string;
                } | undefined): GenericUsersRequest;
                fromPartial(object: {
                    id?: string | undefined;
                    username?: string;
                }): GenericUsersRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {} | undefined): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array, Uint8Array];
                };
            };
        };
        /**
         * https://www.reddit.com/dev/api#GET_api_v1_me_friends_username
         * TODO: this actually returns a WrappedRedditObject. Fix this up after the system worker is deleted.
         */
        readonly getFriendInformation: {
            readonly name: "GetFriendInformation";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.users.GenericUsersRequest";
                encode(message: GenericUsersRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GenericUsersRequest;
                fromJSON(object: any): GenericUsersRequest;
                toJSON(message: GenericUsersRequest): unknown;
                create(base?: {
                    id?: string | undefined;
                    username?: string;
                } | undefined): GenericUsersRequest;
                fromPartial(object: {
                    id?: string | undefined;
                    username?: string;
                }): GenericUsersRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.users.GeneralFriendResponse";
                encode(message: GeneralFriendResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GeneralFriendResponse;
                fromJSON(object: any): GeneralFriendResponse;
                toJSON(message: GeneralFriendResponse): unknown;
                create(base?: {
                    date?: number | undefined;
                    relId?: string | undefined;
                    name?: string | undefined;
                    id?: string | undefined;
                    fields?: string[];
                    explanation?: string | undefined;
                    message?: string | undefined;
                    reason?: string | undefined;
                } | undefined): GeneralFriendResponse;
                fromPartial(object: {
                    date?: number | undefined;
                    relId?: string | undefined;
                    name?: string | undefined;
                    id?: string | undefined;
                    fields?: string[];
                    explanation?: string | undefined;
                    message?: string | undefined;
                    reason?: string | undefined;
                }): GeneralFriendResponse;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array, Uint8Array];
                };
            };
        };
        /** https://www.reddit.com/dev/api#PUT_api_v1_me_friends_username */
        readonly updateFriendRelationship: {
            readonly name: "UpdateFriendRelationship";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.users.UpdateFriendRelationshipRequest";
                encode(message: UpdateFriendRelationshipRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): UpdateFriendRelationshipRequest;
                fromJSON(object: any): UpdateFriendRelationshipRequest;
                toJSON(message: UpdateFriendRelationshipRequest): unknown;
                create(base?: {
                    name?: string;
                    note?: string;
                } | undefined): UpdateFriendRelationshipRequest;
                fromPartial(object: {
                    name?: string;
                    note?: string;
                }): UpdateFriendRelationshipRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.users.GeneralFriendResponse";
                encode(message: GeneralFriendResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GeneralFriendResponse;
                fromJSON(object: any): GeneralFriendResponse;
                toJSON(message: GeneralFriendResponse): unknown;
                create(base?: {
                    date?: number | undefined;
                    relId?: string | undefined;
                    name?: string | undefined;
                    id?: string | undefined;
                    fields?: string[];
                    explanation?: string | undefined;
                    message?: string | undefined;
                    reason?: string | undefined;
                } | undefined): GeneralFriendResponse;
                fromPartial(object: {
                    date?: number | undefined;
                    relId?: string | undefined;
                    name?: string | undefined;
                    id?: string | undefined;
                    fields?: string[];
                    explanation?: string | undefined;
                    message?: string | undefined;
                    reason?: string | undefined;
                }): GeneralFriendResponse;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array, Uint8Array, Uint8Array];
                };
            };
        };
        /** https://www.reddit.com/dev/api#GET_api_v1_user_username_trophies */
        readonly userTrophies: {
            readonly name: "UserTrophies";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.users.GenericUsersRequest";
                encode(message: GenericUsersRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): GenericUsersRequest;
                fromJSON(object: any): GenericUsersRequest;
                toJSON(message: GenericUsersRequest): unknown;
                create(base?: {
                    id?: string | undefined;
                    username?: string;
                } | undefined): GenericUsersRequest;
                fromPartial(object: {
                    id?: string | undefined;
                    username?: string;
                }): GenericUsersRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.users.UserTrophiesResponse";
                encode(message: UserTrophiesResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): UserTrophiesResponse;
                fromJSON(object: any): UserTrophiesResponse;
                toJSON(message: UserTrophiesResponse): unknown;
                create(base?: {
                    kind?: string | undefined;
                    data?: {
                        trophies?: {
                            kind?: string | undefined;
                            data?: {
                                icon70?: string | undefined;
                                grantedAt?: number | undefined;
                                url?: string | undefined;
                                icon40?: string | undefined;
                                name?: string | undefined;
                                awardId?: string | undefined;
                                id?: string | undefined;
                                description?: string | undefined;
                            } | undefined;
                        }[];
                    } | undefined;
                } | undefined): UserTrophiesResponse;
                fromPartial(object: {
                    kind?: string | undefined;
                    data?: {
                        trophies?: {
                            kind?: string | undefined;
                            data?: {
                                icon70?: string | undefined;
                                grantedAt?: number | undefined;
                                url?: string | undefined;
                                icon40?: string | undefined;
                                name?: string | undefined;
                                awardId?: string | undefined;
                                id?: string | undefined;
                                description?: string | undefined;
                            } | undefined;
                        }[];
                    } | undefined;
                }): UserTrophiesResponse;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array, Uint8Array];
                };
            };
        };
        /** https://www.reddit.com/dev/api#GET_user_username_about */
        readonly userAbout: {
            readonly name: "UserAbout";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.users.UserAboutRequest";
                encode(message: UserAboutRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): UserAboutRequest;
                fromJSON(object: any): UserAboutRequest;
                toJSON(message: UserAboutRequest): unknown;
                create(base?: {
                    username?: string;
                } | undefined): UserAboutRequest;
                fromPartial(object: {
                    username?: string;
                }): UserAboutRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.users.UserAboutResponse";
                encode(message: UserAboutResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): UserAboutResponse;
                fromJSON(object: any): UserAboutResponse;
                toJSON(message: UserAboutResponse): unknown;
                create(base?: {
                    kind?: string | undefined;
                    data?: {
                        acceptChats?: boolean | undefined;
                        acceptFollowers?: boolean | undefined;
                        acceptPms?: boolean | undefined;
                        awardeeKarma?: number | undefined;
                        awarderKarma?: number | undefined;
                        canCreateSubreddit?: boolean | undefined;
                        canEditName?: boolean | undefined;
                        coins?: number | undefined;
                        commentKarma?: number | undefined;
                        created?: number | undefined;
                        createdUtc?: number | undefined;
                        features?: {
                            awardsOnStreams?: boolean | undefined;
                            canMakeMobileTestBuildPurchases?: boolean | undefined;
                            chatGroupRollout?: boolean | undefined;
                            chatSubreddit?: boolean | undefined;
                            chatUserSettings?: boolean | undefined;
                            chat?: boolean | undefined;
                            cookieConsentBanner?: boolean | undefined;
                            crosspostNotif?: boolean | undefined;
                            crowdControlForPost?: boolean | undefined;
                            customFeedImage?: boolean | undefined;
                            doNotTrack?: boolean | undefined;
                            expensiveCoinsPackage?: boolean | undefined;
                            isEmailPermissionRequired?: boolean | undefined;
                            liveComments?: boolean | undefined;
                            liveOrangereds?: boolean | undefined;
                            modAwards?: boolean | undefined;
                            modServiceMuteReads?: boolean | undefined;
                            modServiceMuteWrites?: boolean | undefined;
                            modlogCopyrightRemoval?: boolean | undefined;
                            mwebNsfwXpromo?: {
                                experimentId?: number | undefined;
                                owner?: string | undefined;
                                variant?: string | undefined;
                            } | undefined;
                            mwebXpromoInterstitialCommentsAndroid?: boolean | undefined;
                            mwebXpromoInterstitialCommentsIos?: boolean | undefined;
                            mwebXpromoModalListingClickDailyDismissibleAndroid?: boolean | undefined;
                            mwebXpromoModalListingClickDailyDismissibleIos?: boolean | undefined;
                            mwebXpromoRevampV2?: {
                                experimentId?: number | undefined;
                                owner?: string | undefined;
                                variant?: string | undefined;
                            } | undefined;
                            mwebXpromoRevampV3?: {
                                experimentId?: number | undefined;
                                owner?: string | undefined;
                                variant?: string | undefined;
                            } | undefined;
                            noreferrerToNoopener?: boolean | undefined;
                            pollsMobile?: boolean | undefined;
                            premiumSubscriptionsTable?: boolean | undefined;
                            promotedTrendBlanks?: boolean | undefined;
                            resizedStylesImages?: boolean | undefined;
                            showAmpLink?: boolean | undefined;
                            showNpsSurvey?: boolean | undefined;
                            spezModal?: boolean | undefined;
                            usePrefAccountDeployment?: boolean | undefined;
                            userFlairMigrationTesting?: boolean | undefined;
                            webhookConfig?: boolean | undefined;
                        } | undefined;
                        forcePasswordReset?: boolean | undefined;
                        goldCreddits?: number | undefined;
                        goldExpiration?: string | undefined;
                        hasAndroidSubscription?: boolean | undefined;
                        hasExternalAccount?: boolean | undefined;
                        hasGoldSubscription?: boolean | undefined;
                        hasIosSubscription?: boolean | undefined;
                        hasMail?: boolean | undefined;
                        hasModMail?: boolean | undefined;
                        hasPaypalSubscription?: boolean | undefined;
                        hasStripeSubscription?: boolean | undefined;
                        hasSubscribed?: boolean | undefined;
                        hasSubscribedToPremium?: boolean | undefined;
                        hasVerifiedEmail?: boolean | undefined;
                        hasVisitedNewProfile?: boolean | undefined;
                        hideFromRobots?: boolean | undefined;
                        iconImg?: string | undefined;
                        id?: string | undefined;
                        inBeta?: boolean | undefined;
                        inChat?: boolean | undefined;
                        inRedesignBeta?: boolean | undefined;
                        inboxCount?: number | undefined;
                        isBlocked?: boolean | undefined;
                        isEmployee?: boolean | undefined;
                        isFriend?: boolean | undefined;
                        isGold?: boolean | undefined;
                        isMod?: boolean | undefined;
                        isSponsor?: boolean | undefined;
                        isSuspended?: boolean | undefined;
                        linkKarma?: number | undefined;
                        modhash?: string | undefined;
                        name?: string | undefined;
                        newModmailExists?: boolean | undefined;
                        numFriends?: number | undefined;
                        over18?: boolean | undefined;
                        passwordSet?: boolean | undefined;
                        prefAutoplay?: boolean | undefined;
                        prefClickgadget?: number | undefined;
                        prefGeopopular?: string | undefined;
                        prefNightmode?: boolean | undefined;
                        prefNoProfanity?: boolean | undefined;
                        prefShowPresence?: boolean | undefined;
                        prefShowSnoovatar?: boolean | undefined;
                        prefShowTrending?: boolean | undefined;
                        prefShowTwitter?: boolean | undefined;
                        prefTopKarmaSubreddits?: boolean | undefined;
                        prefVideoAutoplay?: boolean | undefined;
                        snoovatarImg?: string | undefined;
                        snoovatarSize?: number[];
                        subreddit?: {
                            acceptFollowers?: boolean | undefined;
                            accountsActiveIsFuzzed?: boolean | undefined;
                            accountsActive?: number | undefined;
                            activeUserCount?: number | undefined;
                            advertiserCategory?: string | undefined;
                            allOriginalContent?: boolean | undefined;
                            allowChatPostCreation?: boolean | undefined;
                            allowDiscovery?: boolean | undefined;
                            allowGalleries?: boolean | undefined;
                            allowImages?: boolean | undefined;
                            allowPolls?: boolean | undefined;
                            allowPredictionContributors?: boolean | undefined;
                            allowPredictionsTournament?: boolean | undefined;
                            allowPredictions?: boolean | undefined;
                            allowTalks?: boolean | undefined;
                            allowVideogifs?: boolean | undefined;
                            allowVideos?: boolean | undefined;
                            allowedMediaInComments?: string[];
                            bannerBackgroundColor?: string | undefined;
                            bannerBackgroundImage?: string | undefined;
                            bannerImg?: string | undefined;
                            bannerSize?: number[];
                            canAssignLinkFlair?: boolean | undefined;
                            canAssignUserFlair?: boolean | undefined;
                            coins?: number | undefined;
                            collapseDeletedComments?: boolean | undefined;
                            commentContributionSettings?: {
                                allowedMediaTypes?: string[];
                            } | undefined;
                            commentScoreHideMins?: number | undefined;
                            communityIcon?: string | undefined;
                            communityReviewed?: boolean | undefined;
                            contentCategory?: string | undefined;
                            createdUtc?: number | undefined;
                            created?: number | undefined;
                            defaultSet?: boolean | undefined;
                            description?: string | undefined;
                            descriptionHtml?: string | undefined;
                            disableContributorRequests?: boolean | undefined;
                            displayName?: string | undefined;
                            displayNamePrefixed?: string | undefined;
                            emojisCustomSize?: number[];
                            emojisEnabled?: boolean | undefined;
                            freeFormReports?: boolean | undefined;
                            hasMenuWidget?: boolean | undefined;
                            headerImg?: string | undefined;
                            headerSize?: number[];
                            headerTitle?: string | undefined;
                            hideAds?: boolean | undefined;
                            iconColor?: string | undefined;
                            iconImg?: string | undefined;
                            iconSize?: number[];
                            id?: string | undefined;
                            isChatPostFeatureEnabled?: boolean | undefined;
                            isCrosspostableSubreddit?: boolean | undefined;
                            isDefaultBanner?: boolean | undefined;
                            isDefaultIcon?: boolean | undefined;
                            isEnrolledInNewModmail?: boolean | undefined;
                            keyColor?: string | undefined;
                            lang?: string | undefined;
                            linkFlairEnabled?: boolean | undefined;
                            linkFlairPosition?: string | undefined;
                            mobileBannerImage?: string | undefined;
                            name?: string | undefined;
                            notificationLevel?: string | undefined;
                            originalContentTagEnabled?: string | undefined;
                            over18?: boolean | undefined;
                            predictionLeaderboardEntryType?: string | undefined;
                            previousNames?: string[];
                            primaryColor?: string | undefined;
                            publicDescription?: string | undefined;
                            publicDescriptionHtml?: string | undefined;
                            publicTraffic?: boolean | undefined;
                            quarantine?: boolean | undefined;
                            restrictCommenting?: boolean | undefined;
                            restrictPosting?: boolean | undefined;
                            shouldArchivePosts?: boolean | undefined;
                            shouldShowMediaInCommentsSetting?: boolean | undefined;
                            showMedia?: boolean | undefined;
                            showMediaPreview?: boolean | undefined;
                            spoilersEnabled?: boolean | undefined;
                            submissionType?: string | undefined;
                            submitLinkLabel?: string | undefined;
                            submitText?: string | undefined;
                            submitTextHtml?: string | undefined;
                            submitTextLabel?: string | undefined;
                            subredditType?: string | undefined;
                            subscribers?: number | undefined;
                            suggestedCommentSort?: string | undefined;
                            title?: string | undefined;
                            url?: string | undefined;
                            userCanFlairInSr?: boolean | undefined;
                            userFlairBackgroundColor?: string | undefined;
                            userFlairCssClass?: string | undefined;
                            userFlairEnabledInSr?: boolean | undefined;
                            userFlairPosition?: string | undefined;
                            userFlairRichtext?: {
                                e?: string | undefined;
                                t?: string | undefined;
                            }[];
                            userFlairTemplateId?: string | undefined;
                            userFlairText?: string | undefined;
                            userFlairTextColor?: string | undefined;
                            userFlairType?: string | undefined;
                            userHasFavorited?: boolean | undefined;
                            userIsBanned?: boolean | undefined;
                            userIsContributor?: boolean | undefined;
                            userIsModerator?: boolean | undefined;
                            userIsSubscriber?: boolean | undefined;
                            userSrFlairEnabled?: boolean | undefined;
                            userSrThemeEnabled?: boolean | undefined;
                            videostreamLinksCount?: number | undefined;
                            whitelistStatus?: string | undefined;
                            wikiEnabled?: boolean | undefined;
                            wls?: number | undefined;
                            markedSpam?: boolean | undefined;
                            postRequirements?: {
                                bodyRestrictionPolicy?: string | undefined;
                            } | undefined;
                            userIsMuted?: boolean;
                        } | undefined;
                        suspensionExpirationUtc?: string | undefined;
                        totalKarma?: number | undefined;
                        verified?: boolean | undefined;
                        hasPhoneNumber?: boolean | undefined;
                        subredditsModerated?: number | undefined;
                        hasMetaSubscription?: boolean | undefined;
                        metaSubscriptionAge?: number | undefined;
                        metaPointsBalance?: string | undefined;
                        metaLockedPointsBalance?: string | undefined;
                        commentSubredditKarma?: number | undefined;
                        postSubredditKarma?: number | undefined;
                        markedSpam?: boolean | undefined;
                        isSubredditProxyAccount?: boolean | undefined;
                    } | undefined;
                } | undefined): UserAboutResponse;
                fromPartial(object: {
                    kind?: string | undefined;
                    data?: {
                        acceptChats?: boolean | undefined;
                        acceptFollowers?: boolean | undefined;
                        acceptPms?: boolean | undefined;
                        awardeeKarma?: number | undefined;
                        awarderKarma?: number | undefined;
                        canCreateSubreddit?: boolean | undefined;
                        canEditName?: boolean | undefined;
                        coins?: number | undefined;
                        commentKarma?: number | undefined;
                        created?: number | undefined;
                        createdUtc?: number | undefined;
                        features?: {
                            awardsOnStreams?: boolean | undefined;
                            canMakeMobileTestBuildPurchases?: boolean | undefined;
                            chatGroupRollout?: boolean | undefined;
                            chatSubreddit?: boolean | undefined;
                            chatUserSettings?: boolean | undefined;
                            chat?: boolean | undefined;
                            cookieConsentBanner?: boolean | undefined;
                            crosspostNotif?: boolean | undefined;
                            crowdControlForPost?: boolean | undefined;
                            customFeedImage?: boolean | undefined;
                            doNotTrack?: boolean | undefined;
                            expensiveCoinsPackage?: boolean | undefined;
                            isEmailPermissionRequired?: boolean | undefined;
                            liveComments?: boolean | undefined;
                            liveOrangereds?: boolean | undefined;
                            modAwards?: boolean | undefined;
                            modServiceMuteReads?: boolean | undefined;
                            modServiceMuteWrites?: boolean | undefined;
                            modlogCopyrightRemoval?: boolean | undefined;
                            mwebNsfwXpromo?: {
                                experimentId?: number | undefined;
                                owner?: string | undefined;
                                variant?: string | undefined;
                            } | undefined;
                            mwebXpromoInterstitialCommentsAndroid?: boolean | undefined;
                            mwebXpromoInterstitialCommentsIos?: boolean | undefined;
                            mwebXpromoModalListingClickDailyDismissibleAndroid?: boolean | undefined;
                            mwebXpromoModalListingClickDailyDismissibleIos?: boolean | undefined;
                            mwebXpromoRevampV2?: {
                                experimentId?: number | undefined;
                                owner?: string | undefined;
                                variant?: string | undefined;
                            } | undefined;
                            mwebXpromoRevampV3?: {
                                experimentId?: number | undefined;
                                owner?: string | undefined;
                                variant?: string | undefined;
                            } | undefined;
                            noreferrerToNoopener?: boolean | undefined;
                            pollsMobile?: boolean | undefined;
                            premiumSubscriptionsTable?: boolean | undefined;
                            promotedTrendBlanks?: boolean | undefined;
                            resizedStylesImages?: boolean | undefined;
                            showAmpLink?: boolean | undefined;
                            showNpsSurvey?: boolean | undefined;
                            spezModal?: boolean | undefined;
                            usePrefAccountDeployment?: boolean | undefined;
                            userFlairMigrationTesting?: boolean | undefined;
                            webhookConfig?: boolean | undefined;
                        } | undefined;
                        forcePasswordReset?: boolean | undefined;
                        goldCreddits?: number | undefined;
                        goldExpiration?: string | undefined;
                        hasAndroidSubscription?: boolean | undefined;
                        hasExternalAccount?: boolean | undefined;
                        hasGoldSubscription?: boolean | undefined;
                        hasIosSubscription?: boolean | undefined;
                        hasMail?: boolean | undefined;
                        hasModMail?: boolean | undefined;
                        hasPaypalSubscription?: boolean | undefined;
                        hasStripeSubscription?: boolean | undefined;
                        hasSubscribed?: boolean | undefined;
                        hasSubscribedToPremium?: boolean | undefined;
                        hasVerifiedEmail?: boolean | undefined;
                        hasVisitedNewProfile?: boolean | undefined;
                        hideFromRobots?: boolean | undefined;
                        iconImg?: string | undefined;
                        id?: string | undefined;
                        inBeta?: boolean | undefined;
                        inChat?: boolean | undefined;
                        inRedesignBeta?: boolean | undefined;
                        inboxCount?: number | undefined;
                        isBlocked?: boolean | undefined;
                        isEmployee?: boolean | undefined;
                        isFriend?: boolean | undefined;
                        isGold?: boolean | undefined;
                        isMod?: boolean | undefined;
                        isSponsor?: boolean | undefined;
                        isSuspended?: boolean | undefined;
                        linkKarma?: number | undefined;
                        modhash?: string | undefined;
                        name?: string | undefined;
                        newModmailExists?: boolean | undefined;
                        numFriends?: number | undefined;
                        over18?: boolean | undefined;
                        passwordSet?: boolean | undefined;
                        prefAutoplay?: boolean | undefined;
                        prefClickgadget?: number | undefined;
                        prefGeopopular?: string | undefined;
                        prefNightmode?: boolean | undefined;
                        prefNoProfanity?: boolean | undefined;
                        prefShowPresence?: boolean | undefined;
                        prefShowSnoovatar?: boolean | undefined;
                        prefShowTrending?: boolean | undefined;
                        prefShowTwitter?: boolean | undefined;
                        prefTopKarmaSubreddits?: boolean | undefined;
                        prefVideoAutoplay?: boolean | undefined;
                        snoovatarImg?: string | undefined;
                        snoovatarSize?: number[];
                        subreddit?: {
                            acceptFollowers?: boolean | undefined;
                            accountsActiveIsFuzzed?: boolean | undefined;
                            accountsActive?: number | undefined;
                            activeUserCount?: number | undefined;
                            advertiserCategory?: string | undefined;
                            allOriginalContent?: boolean | undefined;
                            allowChatPostCreation?: boolean | undefined;
                            allowDiscovery?: boolean | undefined;
                            allowGalleries?: boolean | undefined;
                            allowImages?: boolean | undefined;
                            allowPolls?: boolean | undefined;
                            allowPredictionContributors?: boolean | undefined;
                            allowPredictionsTournament?: boolean | undefined;
                            allowPredictions?: boolean | undefined;
                            allowTalks?: boolean | undefined;
                            allowVideogifs?: boolean | undefined;
                            allowVideos?: boolean | undefined;
                            allowedMediaInComments?: string[];
                            bannerBackgroundColor?: string | undefined;
                            bannerBackgroundImage?: string | undefined;
                            bannerImg?: string | undefined;
                            bannerSize?: number[];
                            canAssignLinkFlair?: boolean | undefined;
                            canAssignUserFlair?: boolean | undefined;
                            coins?: number | undefined;
                            collapseDeletedComments?: boolean | undefined;
                            commentContributionSettings?: {
                                allowedMediaTypes?: string[];
                            } | undefined;
                            commentScoreHideMins?: number | undefined;
                            communityIcon?: string | undefined;
                            communityReviewed?: boolean | undefined;
                            contentCategory?: string | undefined;
                            createdUtc?: number | undefined;
                            created?: number | undefined;
                            defaultSet?: boolean | undefined;
                            description?: string | undefined;
                            descriptionHtml?: string | undefined;
                            disableContributorRequests?: boolean | undefined;
                            displayName?: string | undefined;
                            displayNamePrefixed?: string | undefined;
                            emojisCustomSize?: number[];
                            emojisEnabled?: boolean | undefined;
                            freeFormReports?: boolean | undefined;
                            hasMenuWidget?: boolean | undefined;
                            headerImg?: string | undefined;
                            headerSize?: number[];
                            headerTitle?: string | undefined;
                            hideAds?: boolean | undefined;
                            iconColor?: string | undefined;
                            iconImg?: string | undefined;
                            iconSize?: number[];
                            id?: string | undefined;
                            isChatPostFeatureEnabled?: boolean | undefined;
                            isCrosspostableSubreddit?: boolean | undefined;
                            isDefaultBanner?: boolean | undefined;
                            isDefaultIcon?: boolean | undefined;
                            isEnrolledInNewModmail?: boolean | undefined;
                            keyColor?: string | undefined;
                            lang?: string | undefined;
                            linkFlairEnabled?: boolean | undefined;
                            linkFlairPosition?: string | undefined;
                            mobileBannerImage?: string | undefined;
                            name?: string | undefined;
                            notificationLevel?: string | undefined;
                            originalContentTagEnabled?: string | undefined;
                            over18?: boolean | undefined;
                            predictionLeaderboardEntryType?: string | undefined;
                            previousNames?: string[];
                            primaryColor?: string | undefined;
                            publicDescription?: string | undefined;
                            publicDescriptionHtml?: string | undefined;
                            publicTraffic?: boolean | undefined;
                            quarantine?: boolean | undefined;
                            restrictCommenting?: boolean | undefined;
                            restrictPosting?: boolean | undefined;
                            shouldArchivePosts?: boolean | undefined;
                            shouldShowMediaInCommentsSetting?: boolean | undefined;
                            showMedia?: boolean | undefined;
                            showMediaPreview?: boolean | undefined;
                            spoilersEnabled?: boolean | undefined;
                            submissionType?: string | undefined;
                            submitLinkLabel?: string | undefined;
                            submitText?: string | undefined;
                            submitTextHtml?: string | undefined;
                            submitTextLabel?: string | undefined;
                            subredditType?: string | undefined;
                            subscribers?: number | undefined;
                            suggestedCommentSort?: string | undefined;
                            title?: string | undefined;
                            url?: string | undefined;
                            userCanFlairInSr?: boolean | undefined;
                            userFlairBackgroundColor?: string | undefined;
                            userFlairCssClass?: string | undefined;
                            userFlairEnabledInSr?: boolean | undefined;
                            userFlairPosition?: string | undefined;
                            userFlairRichtext?: {
                                e?: string | undefined;
                                t?: string | undefined;
                            }[];
                            userFlairTemplateId?: string | undefined;
                            userFlairText?: string | undefined;
                            userFlairTextColor?: string | undefined;
                            userFlairType?: string | undefined;
                            userHasFavorited?: boolean | undefined;
                            userIsBanned?: boolean | undefined;
                            userIsContributor?: boolean | undefined;
                            userIsModerator?: boolean | undefined;
                            userIsSubscriber?: boolean | undefined;
                            userSrFlairEnabled?: boolean | undefined;
                            userSrThemeEnabled?: boolean | undefined;
                            videostreamLinksCount?: number | undefined;
                            whitelistStatus?: string | undefined;
                            wikiEnabled?: boolean | undefined;
                            wls?: number | undefined;
                            markedSpam?: boolean | undefined;
                            postRequirements?: {
                                bodyRestrictionPolicy?: string | undefined;
                            } | undefined;
                            userIsMuted?: boolean;
                        } | undefined;
                        suspensionExpirationUtc?: string | undefined;
                        totalKarma?: number | undefined;
                        verified?: boolean | undefined;
                        hasPhoneNumber?: boolean | undefined;
                        subredditsModerated?: number | undefined;
                        hasMetaSubscription?: boolean | undefined;
                        metaSubscriptionAge?: number | undefined;
                        metaPointsBalance?: string | undefined;
                        metaLockedPointsBalance?: string | undefined;
                        commentSubredditKarma?: number | undefined;
                        postSubredditKarma?: number | undefined;
                        markedSpam?: boolean | undefined;
                        isSubredditProxyAccount?: boolean | undefined;
                    } | undefined;
                }): UserAboutResponse;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array, Uint8Array];
                };
            };
        };
        /** https://www.reddit.com/dev/api#GET_user_username_where */
        readonly userWhere: {
            readonly name: "UserWhere";
            readonly requestType: {
                $type: "devvit.plugin.redditapi.users.UserWhereRequest";
                encode(message: UserWhereRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): UserWhereRequest;
                fromJSON(object: any): UserWhereRequest;
                toJSON(message: UserWhereRequest): unknown;
                create(base?: {
                    context?: number | undefined;
                    show?: string | undefined;
                    sort?: string | undefined;
                    t?: string | undefined;
                    type?: string | undefined;
                    after?: string | undefined;
                    before?: string | undefined;
                    count?: number | undefined;
                    limit?: number | undefined;
                    username?: string | undefined;
                    where?: string;
                } | undefined): UserWhereRequest;
                fromPartial(object: {
                    context?: number | undefined;
                    show?: string | undefined;
                    sort?: string | undefined;
                    t?: string | undefined;
                    type?: string | undefined;
                    after?: string | undefined;
                    before?: string | undefined;
                    count?: number | undefined;
                    limit?: number | undefined;
                    username?: string | undefined;
                    where?: string;
                }): UserWhereRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.redditapi.common.Listing";
                encode(message: Listing, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Listing;
                fromJSON(object: any): Listing;
                toJSON(message: Listing): unknown;
                create(base?: {
                    kind?: string;
                    data?: {
                        after?: string | undefined;
                        before?: string | undefined;
                        children?: {
                            kind?: string;
                            data?: {
                                allAwardings?: {
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                }[];
                                approved?: boolean | undefined;
                                approvedAtUtc?: number | undefined;
                                approvedBy?: string | undefined;
                                archived?: boolean | undefined;
                                associatedAward?: string | undefined;
                                author?: string | undefined;
                                authorFlairBackgroundColor?: string | undefined;
                                authorFlairCssClass?: string | undefined;
                                authorFlairRichtext?: {
                                    e?: string | undefined;
                                    t?: string | undefined;
                                    a?: string | undefined;
                                    u?: string | undefined;
                                }[];
                                authorFlairTemplateId?: string | undefined;
                                authorFlairText?: string | undefined;
                                authorFlairTextColor?: string | undefined;
                                authorFlairType?: string | undefined;
                                authorFullname?: string | undefined;
                                authorIsBlocked?: boolean | undefined;
                                authorPatreonFlair?: boolean | undefined;
                                authorPremium?: boolean | undefined;
                                awarders?: string[];
                                bannedAtUtc?: number | undefined;
                                bannedBy?: string | undefined;
                                body?: string | undefined;
                                bodyHtml?: string | undefined;
                                canGild?: boolean | undefined;
                                canModPost?: boolean | undefined;
                                collapsed?: boolean | undefined;
                                collapsedBecauseCrowdControl?: boolean | undefined;
                                collapsedReason?: string | undefined;
                                collapsedReasonCode?: string | undefined;
                                commentType?: string | undefined;
                                controversiality?: number | undefined;
                                created?: number | undefined;
                                createdUtc?: number | undefined;
                                distinguished?: string | undefined;
                                downs?: number | undefined;
                                edited?: boolean | undefined;
                                gilded?: number | undefined;
                                gildings?: {
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                } | undefined;
                                id?: string | undefined;
                                ignoreReports?: boolean | undefined;
                                isSubmitter?: boolean | undefined;
                                likes?: boolean | undefined;
                                linkId?: string | undefined;
                                locked?: boolean | undefined;
                                modNote?: string | undefined;
                                modReasonBy?: string | undefined;
                                modReasonTitle?: string | undefined;
                                name?: string | undefined;
                                noFollow?: boolean | undefined;
                                numReports?: number | undefined;
                                parentId?: string | undefined;
                                permalink?: string | undefined;
                                removalReason?: string | undefined;
                                removed?: boolean | undefined;
                                replies?: string | undefined;
                                reportReasons?: any[] | undefined;
                                rteMode?: string | undefined;
                                saved?: boolean | undefined;
                                score?: number | undefined;
                                scoreHidden?: boolean | undefined;
                                sendReplies?: boolean | undefined;
                                spam?: boolean | undefined;
                                stickied?: boolean | undefined;
                                subreddit?: string | undefined;
                                subredditId?: string | undefined;
                                subredditNamePrefixed?: string | undefined;
                                subredditType?: string | undefined;
                                topAwardedType?: string | undefined;
                                totalAwardsReceived?: number | undefined;
                                treatmentTags?: {
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                }[];
                                unrepliableReason?: string | undefined;
                                ups?: number | undefined;
                                depth?: number | undefined;
                                linkTitle?: string | undefined;
                                linkAuthor?: string | undefined;
                                numComments?: number | undefined;
                                over18?: boolean | undefined;
                                linkPermalink?: string | undefined;
                                quarantine?: boolean | undefined;
                                linkUrl?: string | undefined;
                                selftext?: string | undefined;
                                selftextHtml?: string | undefined;
                                thumbnail?: string | undefined;
                                thumbnailWidth?: number | undefined;
                                thumbnailHeight?: number | undefined;
                                title?: string | undefined;
                                url?: string | undefined;
                                displayName?: string | undefined;
                                modPermissions?: string[];
                                count?: number | undefined;
                                children?: any[] | undefined;
                                replyList?: any | undefined;
                                hidden?: boolean | undefined;
                                linkFlairBackgroundColor?: string | undefined;
                                linkFlairCssClass?: string | undefined;
                                linkFlairRichtext?: {
                                    e?: string | undefined;
                                    t?: string | undefined;
                                    a?: string | undefined;
                                    u?: string | undefined;
                                }[];
                                linkFlairTemplateId?: string | undefined;
                                linkFlairText?: string | undefined;
                                linkFlairTextColor?: string | undefined;
                                linkFlairType?: string | undefined;
                                secureMedia?: {
                                    type?: string;
                                    oembed?: {
                                        type?: string;
                                        title?: string | undefined;
                                        providerName?: string | undefined;
                                        providerUrl?: string | undefined;
                                        version?: string;
                                        thumbnailWidth?: number | undefined;
                                        thumbnailHeight?: number | undefined;
                                        thumbnailUrl?: string | undefined;
                                        html?: string;
                                        height?: number | undefined;
                                        width?: number | undefined;
                                        authorUrl?: string | undefined;
                                        authorName?: string | undefined;
                                    } | undefined;
                                    redditVideo?: {
                                        bitrateKbps?: number | undefined;
                                        dashUrl?: string | undefined;
                                        duration?: number | undefined;
                                        fallbackUrl?: string | undefined;
                                        height?: number | undefined;
                                        hlsUrl?: string | undefined;
                                        isGif?: boolean | undefined;
                                        scrubberMediaUrl?: string | undefined;
                                        transcodingStatus?: string | undefined;
                                        width?: number | undefined;
                                    } | undefined;
                                } | undefined;
                                spoiler?: boolean;
                                modReports?: any[][];
                                userReports?: any[][];
                                removedBy?: string | undefined;
                                removedByCategory?: string | undefined;
                            } | undefined;
                        }[];
                        dist?: number | undefined;
                    } | undefined;
                } | undefined): Listing;
                fromPartial(object: {
                    kind?: string;
                    data?: {
                        after?: string | undefined;
                        before?: string | undefined;
                        children?: {
                            kind?: string;
                            data?: {
                                allAwardings?: {
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                }[];
                                approved?: boolean | undefined;
                                approvedAtUtc?: number | undefined;
                                approvedBy?: string | undefined;
                                archived?: boolean | undefined;
                                associatedAward?: string | undefined;
                                author?: string | undefined;
                                authorFlairBackgroundColor?: string | undefined;
                                authorFlairCssClass?: string | undefined;
                                authorFlairRichtext?: {
                                    e?: string | undefined;
                                    t?: string | undefined;
                                    a?: string | undefined;
                                    u?: string | undefined;
                                }[];
                                authorFlairTemplateId?: string | undefined;
                                authorFlairText?: string | undefined;
                                authorFlairTextColor?: string | undefined;
                                authorFlairType?: string | undefined;
                                authorFullname?: string | undefined;
                                authorIsBlocked?: boolean | undefined;
                                authorPatreonFlair?: boolean | undefined;
                                authorPremium?: boolean | undefined;
                                awarders?: string[];
                                bannedAtUtc?: number | undefined;
                                bannedBy?: string | undefined;
                                body?: string | undefined;
                                bodyHtml?: string | undefined;
                                canGild?: boolean | undefined;
                                canModPost?: boolean | undefined;
                                collapsed?: boolean | undefined;
                                collapsedBecauseCrowdControl?: boolean | undefined;
                                collapsedReason?: string | undefined;
                                collapsedReasonCode?: string | undefined;
                                commentType?: string | undefined;
                                controversiality?: number | undefined;
                                created?: number | undefined;
                                createdUtc?: number | undefined;
                                distinguished?: string | undefined;
                                downs?: number | undefined;
                                edited?: boolean | undefined;
                                gilded?: number | undefined;
                                gildings?: {
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                } | undefined;
                                id?: string | undefined;
                                ignoreReports?: boolean | undefined;
                                isSubmitter?: boolean | undefined;
                                likes?: boolean | undefined;
                                linkId?: string | undefined;
                                locked?: boolean | undefined;
                                modNote?: string | undefined;
                                modReasonBy?: string | undefined;
                                modReasonTitle?: string | undefined;
                                name?: string | undefined;
                                noFollow?: boolean | undefined;
                                numReports?: number | undefined;
                                parentId?: string | undefined;
                                permalink?: string | undefined;
                                removalReason?: string | undefined;
                                removed?: boolean | undefined;
                                replies?: string | undefined;
                                reportReasons?: any[] | undefined;
                                rteMode?: string | undefined;
                                saved?: boolean | undefined;
                                score?: number | undefined;
                                scoreHidden?: boolean | undefined;
                                sendReplies?: boolean | undefined;
                                spam?: boolean | undefined;
                                stickied?: boolean | undefined;
                                subreddit?: string | undefined;
                                subredditId?: string | undefined;
                                subredditNamePrefixed?: string | undefined;
                                subredditType?: string | undefined;
                                topAwardedType?: string | undefined;
                                totalAwardsReceived?: number | undefined;
                                treatmentTags?: {
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                }[];
                                unrepliableReason?: string | undefined;
                                ups?: number | undefined;
                                depth?: number | undefined;
                                linkTitle?: string | undefined;
                                linkAuthor?: string | undefined;
                                numComments?: number | undefined;
                                over18?: boolean | undefined;
                                linkPermalink?: string | undefined;
                                quarantine?: boolean | undefined;
                                linkUrl?: string | undefined;
                                selftext?: string | undefined;
                                selftextHtml?: string | undefined;
                                thumbnail?: string | undefined;
                                thumbnailWidth?: number | undefined;
                                thumbnailHeight?: number | undefined;
                                title?: string | undefined;
                                url?: string | undefined;
                                displayName?: string | undefined;
                                modPermissions?: string[];
                                count?: number | undefined;
                                children?: any[] | undefined;
                                replyList?: any | undefined;
                                hidden?: boolean | undefined;
                                linkFlairBackgroundColor?: string | undefined;
                                linkFlairCssClass?: string | undefined;
                                linkFlairRichtext?: {
                                    e?: string | undefined;
                                    t?: string | undefined;
                                    a?: string | undefined;
                                    u?: string | undefined;
                                }[];
                                linkFlairTemplateId?: string | undefined;
                                linkFlairText?: string | undefined;
                                linkFlairTextColor?: string | undefined;
                                linkFlairType?: string | undefined;
                                secureMedia?: {
                                    type?: string;
                                    oembed?: {
                                        type?: string;
                                        title?: string | undefined;
                                        providerName?: string | undefined;
                                        providerUrl?: string | undefined;
                                        version?: string;
                                        thumbnailWidth?: number | undefined;
                                        thumbnailHeight?: number | undefined;
                                        thumbnailUrl?: string | undefined;
                                        html?: string;
                                        height?: number | undefined;
                                        width?: number | undefined;
                                        authorUrl?: string | undefined;
                                        authorName?: string | undefined;
                                    } | undefined;
                                    redditVideo?: {
                                        bitrateKbps?: number | undefined;
                                        dashUrl?: string | undefined;
                                        duration?: number | undefined;
                                        fallbackUrl?: string | undefined;
                                        height?: number | undefined;
                                        hlsUrl?: string | undefined;
                                        isGif?: boolean | undefined;
                                        scrubberMediaUrl?: string | undefined;
                                        transcodingStatus?: string | undefined;
                                        width?: number | undefined;
                                    } | undefined;
                                } | undefined;
                                spoiler?: boolean;
                                modReports?: any[][];
                                userReports?: any[][];
                                removedBy?: string | undefined;
                                removedByCategory?: string | undefined;
                            } | undefined;
                        }[];
                        dist?: number | undefined;
                    } | undefined;
                }): Listing;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 480010: readonly [Uint8Array, Uint8Array];
                };
            };
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array, metadata?: Metadata): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=users_svc.d.ts.map