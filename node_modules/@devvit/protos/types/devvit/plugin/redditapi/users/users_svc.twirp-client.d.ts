import { BlockUserRequest, BlockUserResponse, FriendRequest, ReportUserRequest, SetPermissionsRequest, UnfriendRequest, UserDataByAccountIdsRequest, UserDataByAccountIdsResponse, UsernameAvailableRequest, GenericUsersRequest, GeneralFriendResponse, UpdateFriendRelationshipRequest, UserTrophiesResponse, UserAboutRequest, UserAboutResponse, UserWhereRequest } from './users_msg.js';
import { JsonStatus, Listing } from '../common/common_msg.js';
import { Empty } from '../../../../google/protobuf/empty.js';
import { BoolValue } from '../../../../google/protobuf/wrappers.js';
interface Rpc {
    request(service: string, method: string, contentType: 'application/json' | 'application/protobuf', data: object | Uint8Array): Promise<object | Uint8Array>;
}
export interface UsersClient {
    BlockUser(request: BlockUserRequest): Promise<BlockUserResponse>;
    Friend(request: FriendRequest): Promise<JsonStatus>;
    ReportUser(request: ReportUserRequest): Promise<Empty>;
    SetPermissions(request: SetPermissionsRequest): Promise<JsonStatus>;
    Unfriend(request: UnfriendRequest): Promise<Empty>;
    UserDataByAccountIds(request: UserDataByAccountIdsRequest): Promise<UserDataByAccountIdsResponse>;
    UsernameAvailable(request: UsernameAvailableRequest): Promise<BoolValue>;
    UnfriendUser(request: GenericUsersRequest): Promise<Empty>;
    GetFriendInformation(request: GenericUsersRequest): Promise<GeneralFriendResponse>;
    UpdateFriendRelationship(request: UpdateFriendRelationshipRequest): Promise<GeneralFriendResponse>;
    UserTrophies(request: GenericUsersRequest): Promise<UserTrophiesResponse>;
    UserAbout(request: UserAboutRequest): Promise<UserAboutResponse>;
    UserWhere(request: UserWhereRequest): Promise<Listing>;
}
export declare class UsersClientJSON implements UsersClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    BlockUser(request: BlockUserRequest): Promise<BlockUserResponse>;
    Friend(request: FriendRequest): Promise<JsonStatus>;
    ReportUser(request: ReportUserRequest): Promise<Empty>;
    SetPermissions(request: SetPermissionsRequest): Promise<JsonStatus>;
    Unfriend(request: UnfriendRequest): Promise<Empty>;
    UserDataByAccountIds(request: UserDataByAccountIdsRequest): Promise<UserDataByAccountIdsResponse>;
    UsernameAvailable(request: UsernameAvailableRequest): Promise<BoolValue>;
    UnfriendUser(request: GenericUsersRequest): Promise<Empty>;
    GetFriendInformation(request: GenericUsersRequest): Promise<GeneralFriendResponse>;
    UpdateFriendRelationship(request: UpdateFriendRelationshipRequest): Promise<GeneralFriendResponse>;
    UserTrophies(request: GenericUsersRequest): Promise<UserTrophiesResponse>;
    UserAbout(request: UserAboutRequest): Promise<UserAboutResponse>;
    UserWhere(request: UserWhereRequest): Promise<Listing>;
}
export declare class UsersClientProtobuf implements UsersClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    BlockUser(request: BlockUserRequest): Promise<BlockUserResponse>;
    Friend(request: FriendRequest): Promise<JsonStatus>;
    ReportUser(request: ReportUserRequest): Promise<Empty>;
    SetPermissions(request: SetPermissionsRequest): Promise<JsonStatus>;
    Unfriend(request: UnfriendRequest): Promise<Empty>;
    UserDataByAccountIds(request: UserDataByAccountIdsRequest): Promise<UserDataByAccountIdsResponse>;
    UsernameAvailable(request: UsernameAvailableRequest): Promise<BoolValue>;
    UnfriendUser(request: GenericUsersRequest): Promise<Empty>;
    GetFriendInformation(request: GenericUsersRequest): Promise<GeneralFriendResponse>;
    UpdateFriendRelationship(request: UpdateFriendRelationshipRequest): Promise<GeneralFriendResponse>;
    UserTrophies(request: GenericUsersRequest): Promise<UserTrophiesResponse>;
    UserAbout(request: UserAboutRequest): Promise<UserAboutResponse>;
    UserWhere(request: UserWhereRequest): Promise<Listing>;
}
export {};
//# sourceMappingURL=users_svc.twirp-client.d.ts.map