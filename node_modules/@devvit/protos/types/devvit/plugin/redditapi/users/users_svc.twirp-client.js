import { BlockUserRequest, BlockUserResponse, FriendRequest, ReportUserRequest, SetPermissionsRequest, UnfriendRequest, UserDataByAccountIdsRequest, UserDataByAccountIdsResponse, UsernameAvailableRequest, GenericUsersRequest, GeneralFriendResponse, UpdateFriendRelationshipRequest, UserTrophiesResponse, UserAboutRequest, UserAboutResponse, UserWhereRequest, } from './users_msg.js';
import { JsonStatus, Listing } from '../common/common_msg.js';
import { Empty } from '../../../../google/protobuf/empty.js';
import { BoolValue } from '../../../../google/protobuf/wrappers.js';
export class UsersClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.BlockUser.bind(this);
        this.Friend.bind(this);
        this.ReportUser.bind(this);
        this.SetPermissions.bind(this);
        this.Unfriend.bind(this);
        this.UserDataByAccountIds.bind(this);
        this.UsernameAvailable.bind(this);
        this.UnfriendUser.bind(this);
        this.GetFriendInformation.bind(this);
        this.UpdateFriendRelationship.bind(this);
        this.UserTrophies.bind(this);
        this.UserAbout.bind(this);
        this.UserWhere.bind(this);
    }
    BlockUser(request) {
        const data = BlockUserRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.users.Users', 'BlockUser', 'application/json', data);
        return promise.then((data) => BlockUserResponse.fromJSON(data));
    }
    Friend(request) {
        const data = FriendRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.users.Users', 'Friend', 'application/json', data);
        return promise.then((data) => JsonStatus.fromJSON(data));
    }
    ReportUser(request) {
        const data = ReportUserRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.users.Users', 'ReportUser', 'application/json', data);
        return promise.then((data) => Empty.fromJSON(data));
    }
    SetPermissions(request) {
        const data = SetPermissionsRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.users.Users', 'SetPermissions', 'application/json', data);
        return promise.then((data) => JsonStatus.fromJSON(data));
    }
    Unfriend(request) {
        const data = UnfriendRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.users.Users', 'Unfriend', 'application/json', data);
        return promise.then((data) => Empty.fromJSON(data));
    }
    UserDataByAccountIds(request) {
        const data = UserDataByAccountIdsRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.users.Users', 'UserDataByAccountIds', 'application/json', data);
        return promise.then((data) => UserDataByAccountIdsResponse.fromJSON(data));
    }
    UsernameAvailable(request) {
        const data = UsernameAvailableRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.users.Users', 'UsernameAvailable', 'application/json', data);
        return promise.then((data) => BoolValue.fromJSON(data));
    }
    UnfriendUser(request) {
        const data = GenericUsersRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.users.Users', 'UnfriendUser', 'application/json', data);
        return promise.then((data) => Empty.fromJSON(data));
    }
    GetFriendInformation(request) {
        const data = GenericUsersRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.users.Users', 'GetFriendInformation', 'application/json', data);
        return promise.then((data) => GeneralFriendResponse.fromJSON(data));
    }
    UpdateFriendRelationship(request) {
        const data = UpdateFriendRelationshipRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.users.Users', 'UpdateFriendRelationship', 'application/json', data);
        return promise.then((data) => GeneralFriendResponse.fromJSON(data));
    }
    UserTrophies(request) {
        const data = GenericUsersRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.users.Users', 'UserTrophies', 'application/json', data);
        return promise.then((data) => UserTrophiesResponse.fromJSON(data));
    }
    UserAbout(request) {
        const data = UserAboutRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.users.Users', 'UserAbout', 'application/json', data);
        return promise.then((data) => UserAboutResponse.fromJSON(data));
    }
    UserWhere(request) {
        const data = UserWhereRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.users.Users', 'UserWhere', 'application/json', data);
        return promise.then((data) => Listing.fromJSON(data));
    }
}
export class UsersClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.BlockUser.bind(this);
        this.Friend.bind(this);
        this.ReportUser.bind(this);
        this.SetPermissions.bind(this);
        this.Unfriend.bind(this);
        this.UserDataByAccountIds.bind(this);
        this.UsernameAvailable.bind(this);
        this.UnfriendUser.bind(this);
        this.GetFriendInformation.bind(this);
        this.UpdateFriendRelationship.bind(this);
        this.UserTrophies.bind(this);
        this.UserAbout.bind(this);
        this.UserWhere.bind(this);
    }
    BlockUser(request) {
        const data = BlockUserRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.users.Users', 'BlockUser', 'application/protobuf', data);
        return promise.then((data) => BlockUserResponse.decode(data));
    }
    Friend(request) {
        const data = FriendRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.users.Users', 'Friend', 'application/protobuf', data);
        return promise.then((data) => JsonStatus.decode(data));
    }
    ReportUser(request) {
        const data = ReportUserRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.users.Users', 'ReportUser', 'application/protobuf', data);
        return promise.then((data) => Empty.decode(data));
    }
    SetPermissions(request) {
        const data = SetPermissionsRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.users.Users', 'SetPermissions', 'application/protobuf', data);
        return promise.then((data) => JsonStatus.decode(data));
    }
    Unfriend(request) {
        const data = UnfriendRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.users.Users', 'Unfriend', 'application/protobuf', data);
        return promise.then((data) => Empty.decode(data));
    }
    UserDataByAccountIds(request) {
        const data = UserDataByAccountIdsRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.users.Users', 'UserDataByAccountIds', 'application/protobuf', data);
        return promise.then((data) => UserDataByAccountIdsResponse.decode(data));
    }
    UsernameAvailable(request) {
        const data = UsernameAvailableRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.users.Users', 'UsernameAvailable', 'application/protobuf', data);
        return promise.then((data) => BoolValue.decode(data));
    }
    UnfriendUser(request) {
        const data = GenericUsersRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.users.Users', 'UnfriendUser', 'application/protobuf', data);
        return promise.then((data) => Empty.decode(data));
    }
    GetFriendInformation(request) {
        const data = GenericUsersRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.users.Users', 'GetFriendInformation', 'application/protobuf', data);
        return promise.then((data) => GeneralFriendResponse.decode(data));
    }
    UpdateFriendRelationship(request) {
        const data = UpdateFriendRelationshipRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.users.Users', 'UpdateFriendRelationship', 'application/protobuf', data);
        return promise.then((data) => GeneralFriendResponse.decode(data));
    }
    UserTrophies(request) {
        const data = GenericUsersRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.users.Users', 'UserTrophies', 'application/protobuf', data);
        return promise.then((data) => UserTrophiesResponse.decode(data));
    }
    UserAbout(request) {
        const data = UserAboutRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.users.Users', 'UserAbout', 'application/protobuf', data);
        return promise.then((data) => UserAboutResponse.decode(data));
    }
    UserWhere(request) {
        const data = UserWhereRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.users.Users', 'UserWhere', 'application/protobuf', data);
        return promise.then((data) => Listing.decode(data));
    }
}
