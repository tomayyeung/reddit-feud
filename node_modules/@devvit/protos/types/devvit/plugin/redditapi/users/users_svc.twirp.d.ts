/// <reference types="node" resolution-mode="require"/>
import { TwirpContext, TwirpServer } from 'twirp-ts';
import { BlockUserRequest, BlockUserResponse, FriendRequest, ReportUserRequest, SetPermissionsRequest, UnfriendRequest, UserDataByAccountIdsRequest, UserDataByAccountIdsResponse, UsernameAvailableRequest, GenericUsersRequest, GeneralFriendResponse, UpdateFriendRelationshipRequest, UserTrophiesResponse, UserAboutRequest, UserAboutResponse, UserWhereRequest } from './users_msg.js';
import { JsonStatus, Listing } from '../common/common_msg.js';
import { Empty } from '../../../../google/protobuf/empty.js';
import { BoolValue } from '../../../../google/protobuf/wrappers.js';
export interface UsersTwirp<T extends TwirpContext = TwirpContext> {
    BlockUser(ctx: T, request: BlockUserRequest): Promise<BlockUserResponse>;
    Friend(ctx: T, request: FriendRequest): Promise<JsonStatus>;
    ReportUser(ctx: T, request: ReportUserRequest): Promise<Empty>;
    SetPermissions(ctx: T, request: SetPermissionsRequest): Promise<JsonStatus>;
    Unfriend(ctx: T, request: UnfriendRequest): Promise<Empty>;
    UserDataByAccountIds(ctx: T, request: UserDataByAccountIdsRequest): Promise<UserDataByAccountIdsResponse>;
    UsernameAvailable(ctx: T, request: UsernameAvailableRequest): Promise<BoolValue>;
    UnfriendUser(ctx: T, request: GenericUsersRequest): Promise<Empty>;
    GetFriendInformation(ctx: T, request: GenericUsersRequest): Promise<GeneralFriendResponse>;
    UpdateFriendRelationship(ctx: T, request: UpdateFriendRelationshipRequest): Promise<GeneralFriendResponse>;
    UserTrophies(ctx: T, request: GenericUsersRequest): Promise<UserTrophiesResponse>;
    UserAbout(ctx: T, request: UserAboutRequest): Promise<UserAboutResponse>;
    UserWhere(ctx: T, request: UserWhereRequest): Promise<Listing>;
}
export declare enum UsersMethod {
    BlockUser = "BlockUser",
    Friend = "Friend",
    ReportUser = "ReportUser",
    SetPermissions = "SetPermissions",
    Unfriend = "Unfriend",
    UserDataByAccountIds = "UserDataByAccountIds",
    UsernameAvailable = "UsernameAvailable",
    UnfriendUser = "UnfriendUser",
    GetFriendInformation = "GetFriendInformation",
    UpdateFriendRelationship = "UpdateFriendRelationship",
    UserTrophies = "UserTrophies",
    UserAbout = "UserAbout",
    UserWhere = "UserWhere"
}
export declare const UsersMethodList: UsersMethod[];
export declare function createUsersServer<T extends TwirpContext = TwirpContext>(service: UsersTwirp<T>): TwirpServer<UsersTwirp<TwirpContext<import("http").IncomingMessage, import("http").ServerResponse<import("http").IncomingMessage>>>, T>;
//# sourceMappingURL=users_svc.twirp.d.ts.map