/**
 * #widgets_msg.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { AuthorFlairRichText } from "../../../reddit/common.js";
export interface WidgetStyles {
    backgroundColor?: string | undefined;
    headerColor?: string | undefined;
}
export interface WidgetImage {
    url: string;
    /** required by can be an empty string */
    linkUrl: string;
    height: number;
    width: number;
}
export interface ImageWidget {
    id: string;
    kind: string;
    data: WidgetImage[];
    shortName: string;
    styles?: WidgetStyles | undefined;
    subreddit?: string | undefined;
}
export interface AddImageWidgetRequest {
    subreddit: string;
    data: WidgetImage[];
    shortName: string;
    styles?: WidgetStyles | undefined;
}
export interface UpdateImageWidgetRequest {
    subreddit: string;
    id: string;
    data: WidgetImage[];
    shortName: string;
    styles?: WidgetStyles | undefined;
}
export interface CalendarWidgetConfiguration {
    numEvents: number;
    showDate: boolean;
    showDescription: boolean;
    showLocation: boolean;
    showTime: boolean;
    showTitle: boolean;
}
export interface CalendarWidget {
    id: string;
    kind: string;
    configuration?: CalendarWidgetConfiguration | undefined;
    googleCalendarId: string;
    requiresSync: boolean;
    shortName: string;
    styles?: WidgetStyles | undefined;
}
export interface AddCalendarWidgetRequest {
    subreddit: string;
    configuration?: CalendarWidgetConfiguration | undefined;
    googleCalendarId: string;
    requiresSync: boolean;
    shortName: string;
    styles?: WidgetStyles | undefined;
}
export interface UpdateCalendarWidgetRequest {
    subreddit: string;
    id: string;
    configuration?: CalendarWidgetConfiguration | undefined;
    googleCalendarId: string;
    requiresSync: boolean;
    shortName: string;
    styles?: WidgetStyles | undefined;
}
export interface TextAreaWidget {
    id: string;
    kind: string;
    shortName: string;
    text: string;
    styles?: WidgetStyles | undefined;
}
export interface AddTextAreaWidgetRequest {
    subreddit: string;
    shortName: string;
    text: string;
    styles?: WidgetStyles | undefined;
}
export interface UpdateTextAreaWidgetRequest {
    subreddit: string;
    id: string;
    shortName: string;
    text: string;
    styles?: WidgetStyles | undefined;
}
export interface WidgetButton {
    kind: string;
    text: string;
    url?: string | undefined;
    imageUrl?: string | undefined;
    linkUrl?: string | undefined;
    color?: string | undefined;
    fillColor?: string | undefined;
    textColor?: string | undefined;
    height?: number | undefined;
    width?: number | undefined;
    hoverState?: WidgetButton_HoverState | undefined;
}
export interface WidgetButton_HoverState {
    kind: string;
    color?: string | undefined;
    fillColor?: string | undefined;
    text?: string | undefined;
    textColor?: string | undefined;
    imageUrl?: string | undefined;
    height?: number | undefined;
    width?: number | undefined;
}
export interface ButtonWidget {
    id: string;
    kind: string;
    shortName: string;
    description: string;
    buttons: WidgetButton[];
    styles?: WidgetStyles | undefined;
}
export interface AddButtonWidgetRequest {
    subreddit: string;
    shortName: string;
    description: string;
    buttons: WidgetButton[];
    styles?: WidgetStyles | undefined;
}
export interface UpdateButtonWidgetRequest {
    subreddit: string;
    id: string;
    shortName: string;
    description: string;
    buttons: WidgetButton[];
    styles?: WidgetStyles | undefined;
}
export interface CommunityListWidget {
    id: string;
    kind: string;
    shortName: string;
    data: CommunityListWidget_CommunityData[];
    styles?: WidgetStyles | undefined;
}
export interface CommunityListWidget_CommunityData {
    communityIcon: string;
    iconUrl: string;
    isNsfw: boolean;
    isSubscribed: boolean;
    name: string;
    prefixedName: string;
    primaryColor: string;
    subscribers: number;
    type: string;
}
export interface AddCommunityListWidgetRequest {
    subreddit: string;
    shortName: string;
    data: string[];
    styles?: WidgetStyles | undefined;
}
export interface UpdateCommunityListWidgetRequest {
    subreddit: string;
    id: string;
    shortName: string;
    data: string[];
    styles?: WidgetStyles | undefined;
}
export interface UpdateCommunityListWidgetResponse {
    kind: string;
    shortName: string;
    data: string[];
    styles?: WidgetStyles | undefined;
}
export interface PostFlairWidget {
    id: string;
    kind: string;
    display: string;
    order: string[];
    shortName: string;
    styles?: WidgetStyles | undefined;
    subreddit?: string | undefined;
}
export interface AddPostFlairWidgetRequest {
    subreddit: string;
    display: string;
    order: string[];
    shortName: string;
    styles?: WidgetStyles | undefined;
}
export interface UpdatePostFlairWidgetRequest {
    subreddit: string;
    id: string;
    display: string;
    order: string[];
    shortName: string;
    styles?: WidgetStyles | undefined;
}
export interface DeleteWidgetRequest {
    id: string;
    subreddit: string;
}
export interface GetWidgetsRequest {
    subreddit: string;
    progressiveImages?: boolean | undefined;
}
export interface GetWidgetsResponse {
    layout?: GetWidgetsResponse_Layout | undefined;
    items: {
        [key: string]: GetWidgetsResponse_WidgetItem;
    };
}
export interface GetWidgetsResponse_WidgetOrdering {
    order: string[];
}
export interface GetWidgetsResponse_Layout {
    idCardWidget: string;
    topbar?: GetWidgetsResponse_WidgetOrdering | undefined;
    sidebar?: GetWidgetsResponse_WidgetOrdering | undefined;
    moderatorWidget: string;
}
export interface GetWidgetsResponse_WidgetItem {
    id: string;
    kind: string;
    styles?: WidgetStyles | undefined;
    shortName: string;
    description?: string | undefined;
    data: GetWidgetsResponse_WidgetItem_Data[];
    buttons: WidgetButton[];
    subscribersCount?: number | undefined;
    currentlyViewingText?: string | undefined;
    currentlyViewingCount?: number | undefined;
    subscribersText?: string | undefined;
    showWiki?: boolean | undefined;
    templates: {
        [key: string]: GetWidgetsResponse_WidgetItem_PostFlairTemplate;
    };
    display?: string | undefined;
    order: string[];
    mods: GetWidgetsResponse_WidgetItem_Moderator[];
    totalMods?: number | undefined;
    googleCalendarId?: string | undefined;
    requiresSync?: boolean | undefined;
    configuration?: CalendarWidgetConfiguration | undefined;
    text?: string | undefined;
    css?: string | undefined;
    stylesheetUrl?: string | undefined;
    height?: number | undefined;
    imageData: WidgetImage[];
}
export interface GetWidgetsResponse_WidgetItem_Data {
    url?: string | undefined;
    linkUrl?: string | undefined;
    height?: number | undefined;
    width?: number | undefined;
    iconUrl?: string | undefined;
    name?: string | undefined;
    prefixedName?: string | undefined;
    isSubscribed?: boolean | undefined;
    type?: string | undefined;
    subscribers?: number | undefined;
    communityIcon?: string | undefined;
    isNsfw?: boolean | undefined;
    text?: string | undefined;
    children: MenuWidgetItem[];
}
export interface GetWidgetsResponse_WidgetItem_Moderator {
    name: string;
    authorFlairType: string;
    authorFlairTextColor: string;
    authorFlairBackgroundColor: string;
    authorFalirText: string;
    authorFlairRichtext: AuthorFlairRichText[];
}
export interface GetWidgetsResponse_WidgetItem_PostFlairTemplate {
    text: string;
    richtext: AuthorFlairRichText[];
    backgroundColor: string;
    templateId: string;
    textColor: string;
    type: string;
}
export interface GetWidgetsResponse_WidgetItem_TemplatesEntry {
    key: string;
    value?: GetWidgetsResponse_WidgetItem_PostFlairTemplate | undefined;
}
export interface GetWidgetsResponse_ItemsEntry {
    key: string;
    value?: GetWidgetsResponse_WidgetItem | undefined;
}
export interface MenuWidgetItem {
    text?: string | undefined;
    url?: string | undefined;
    children: MenuWidgetItem[];
}
export interface OrderWidgetsRequest {
    subreddit: string;
    order: string[];
}
export interface GetWidgetImageUploadLeaseRequest {
    subreddit: string;
    filepath: string;
    mimetype: string;
}
export interface GetWidgetImageUploadLeaseResponse {
    s3UploadLease?: GetWidgetImageUploadLeaseResponse_S3UploadLease | undefined;
    websocketUrl: string;
}
export interface GetWidgetImageUploadLeaseResponse_S3UploadLease {
    action: string;
    fields: GetWidgetImageUploadLeaseResponse_S3UploadLease_NameValuePair[];
}
export interface GetWidgetImageUploadLeaseResponse_S3UploadLease_NameValuePair {
    name: string;
    value: string;
}
export interface CustomWidget {
    id: string;
    kind: string;
    shortName: string;
    text: string;
    height: number;
    css: string;
    imageData: WidgetImage[];
    styles?: WidgetStyles | undefined;
}
export interface AddCustomWidgetRequest {
    subreddit: string;
    shortName: string;
    text: string;
    height: number;
    css: string;
    imageData: WidgetImage[];
    styles?: WidgetStyles | undefined;
}
export interface UpdateCustomWidgetRequest {
    subreddit: string;
    id: string;
    shortName: string;
    text: string;
    height: number;
    css: string;
    imageData: WidgetImage[];
    styles?: WidgetStyles | undefined;
}
export declare const WidgetStyles: {
    $type: "devvit.plugin.redditapi.widgets.WidgetStyles";
    encode(message: WidgetStyles, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WidgetStyles;
    fromJSON(object: any): WidgetStyles;
    toJSON(message: WidgetStyles): unknown;
    create(base?: DeepPartial<WidgetStyles>): WidgetStyles;
    fromPartial(object: DeepPartial<WidgetStyles>): WidgetStyles;
};
export declare const WidgetImage: {
    $type: "devvit.plugin.redditapi.widgets.WidgetImage";
    encode(message: WidgetImage, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WidgetImage;
    fromJSON(object: any): WidgetImage;
    toJSON(message: WidgetImage): unknown;
    create(base?: DeepPartial<WidgetImage>): WidgetImage;
    fromPartial(object: DeepPartial<WidgetImage>): WidgetImage;
};
export declare const ImageWidget: {
    $type: "devvit.plugin.redditapi.widgets.ImageWidget";
    encode(message: ImageWidget, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ImageWidget;
    fromJSON(object: any): ImageWidget;
    toJSON(message: ImageWidget): unknown;
    create(base?: DeepPartial<ImageWidget>): ImageWidget;
    fromPartial(object: DeepPartial<ImageWidget>): ImageWidget;
};
export declare const AddImageWidgetRequest: {
    $type: "devvit.plugin.redditapi.widgets.AddImageWidgetRequest";
    encode(message: AddImageWidgetRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AddImageWidgetRequest;
    fromJSON(object: any): AddImageWidgetRequest;
    toJSON(message: AddImageWidgetRequest): unknown;
    create(base?: DeepPartial<AddImageWidgetRequest>): AddImageWidgetRequest;
    fromPartial(object: DeepPartial<AddImageWidgetRequest>): AddImageWidgetRequest;
};
export declare const UpdateImageWidgetRequest: {
    $type: "devvit.plugin.redditapi.widgets.UpdateImageWidgetRequest";
    encode(message: UpdateImageWidgetRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UpdateImageWidgetRequest;
    fromJSON(object: any): UpdateImageWidgetRequest;
    toJSON(message: UpdateImageWidgetRequest): unknown;
    create(base?: DeepPartial<UpdateImageWidgetRequest>): UpdateImageWidgetRequest;
    fromPartial(object: DeepPartial<UpdateImageWidgetRequest>): UpdateImageWidgetRequest;
};
export declare const CalendarWidgetConfiguration: {
    $type: "devvit.plugin.redditapi.widgets.CalendarWidgetConfiguration";
    encode(message: CalendarWidgetConfiguration, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CalendarWidgetConfiguration;
    fromJSON(object: any): CalendarWidgetConfiguration;
    toJSON(message: CalendarWidgetConfiguration): unknown;
    create(base?: DeepPartial<CalendarWidgetConfiguration>): CalendarWidgetConfiguration;
    fromPartial(object: DeepPartial<CalendarWidgetConfiguration>): CalendarWidgetConfiguration;
};
export declare const CalendarWidget: {
    $type: "devvit.plugin.redditapi.widgets.CalendarWidget";
    encode(message: CalendarWidget, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CalendarWidget;
    fromJSON(object: any): CalendarWidget;
    toJSON(message: CalendarWidget): unknown;
    create(base?: DeepPartial<CalendarWidget>): CalendarWidget;
    fromPartial(object: DeepPartial<CalendarWidget>): CalendarWidget;
};
export declare const AddCalendarWidgetRequest: {
    $type: "devvit.plugin.redditapi.widgets.AddCalendarWidgetRequest";
    encode(message: AddCalendarWidgetRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AddCalendarWidgetRequest;
    fromJSON(object: any): AddCalendarWidgetRequest;
    toJSON(message: AddCalendarWidgetRequest): unknown;
    create(base?: DeepPartial<AddCalendarWidgetRequest>): AddCalendarWidgetRequest;
    fromPartial(object: DeepPartial<AddCalendarWidgetRequest>): AddCalendarWidgetRequest;
};
export declare const UpdateCalendarWidgetRequest: {
    $type: "devvit.plugin.redditapi.widgets.UpdateCalendarWidgetRequest";
    encode(message: UpdateCalendarWidgetRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UpdateCalendarWidgetRequest;
    fromJSON(object: any): UpdateCalendarWidgetRequest;
    toJSON(message: UpdateCalendarWidgetRequest): unknown;
    create(base?: DeepPartial<UpdateCalendarWidgetRequest>): UpdateCalendarWidgetRequest;
    fromPartial(object: DeepPartial<UpdateCalendarWidgetRequest>): UpdateCalendarWidgetRequest;
};
export declare const TextAreaWidget: {
    $type: "devvit.plugin.redditapi.widgets.TextAreaWidget";
    encode(message: TextAreaWidget, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TextAreaWidget;
    fromJSON(object: any): TextAreaWidget;
    toJSON(message: TextAreaWidget): unknown;
    create(base?: DeepPartial<TextAreaWidget>): TextAreaWidget;
    fromPartial(object: DeepPartial<TextAreaWidget>): TextAreaWidget;
};
export declare const AddTextAreaWidgetRequest: {
    $type: "devvit.plugin.redditapi.widgets.AddTextAreaWidgetRequest";
    encode(message: AddTextAreaWidgetRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AddTextAreaWidgetRequest;
    fromJSON(object: any): AddTextAreaWidgetRequest;
    toJSON(message: AddTextAreaWidgetRequest): unknown;
    create(base?: DeepPartial<AddTextAreaWidgetRequest>): AddTextAreaWidgetRequest;
    fromPartial(object: DeepPartial<AddTextAreaWidgetRequest>): AddTextAreaWidgetRequest;
};
export declare const UpdateTextAreaWidgetRequest: {
    $type: "devvit.plugin.redditapi.widgets.UpdateTextAreaWidgetRequest";
    encode(message: UpdateTextAreaWidgetRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UpdateTextAreaWidgetRequest;
    fromJSON(object: any): UpdateTextAreaWidgetRequest;
    toJSON(message: UpdateTextAreaWidgetRequest): unknown;
    create(base?: DeepPartial<UpdateTextAreaWidgetRequest>): UpdateTextAreaWidgetRequest;
    fromPartial(object: DeepPartial<UpdateTextAreaWidgetRequest>): UpdateTextAreaWidgetRequest;
};
export declare const WidgetButton: {
    $type: "devvit.plugin.redditapi.widgets.WidgetButton";
    encode(message: WidgetButton, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WidgetButton;
    fromJSON(object: any): WidgetButton;
    toJSON(message: WidgetButton): unknown;
    create(base?: DeepPartial<WidgetButton>): WidgetButton;
    fromPartial(object: DeepPartial<WidgetButton>): WidgetButton;
};
export declare const WidgetButton_HoverState: {
    $type: "devvit.plugin.redditapi.widgets.WidgetButton.HoverState";
    encode(message: WidgetButton_HoverState, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WidgetButton_HoverState;
    fromJSON(object: any): WidgetButton_HoverState;
    toJSON(message: WidgetButton_HoverState): unknown;
    create(base?: DeepPartial<WidgetButton_HoverState>): WidgetButton_HoverState;
    fromPartial(object: DeepPartial<WidgetButton_HoverState>): WidgetButton_HoverState;
};
export declare const ButtonWidget: {
    $type: "devvit.plugin.redditapi.widgets.ButtonWidget";
    encode(message: ButtonWidget, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ButtonWidget;
    fromJSON(object: any): ButtonWidget;
    toJSON(message: ButtonWidget): unknown;
    create(base?: DeepPartial<ButtonWidget>): ButtonWidget;
    fromPartial(object: DeepPartial<ButtonWidget>): ButtonWidget;
};
export declare const AddButtonWidgetRequest: {
    $type: "devvit.plugin.redditapi.widgets.AddButtonWidgetRequest";
    encode(message: AddButtonWidgetRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AddButtonWidgetRequest;
    fromJSON(object: any): AddButtonWidgetRequest;
    toJSON(message: AddButtonWidgetRequest): unknown;
    create(base?: DeepPartial<AddButtonWidgetRequest>): AddButtonWidgetRequest;
    fromPartial(object: DeepPartial<AddButtonWidgetRequest>): AddButtonWidgetRequest;
};
export declare const UpdateButtonWidgetRequest: {
    $type: "devvit.plugin.redditapi.widgets.UpdateButtonWidgetRequest";
    encode(message: UpdateButtonWidgetRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UpdateButtonWidgetRequest;
    fromJSON(object: any): UpdateButtonWidgetRequest;
    toJSON(message: UpdateButtonWidgetRequest): unknown;
    create(base?: DeepPartial<UpdateButtonWidgetRequest>): UpdateButtonWidgetRequest;
    fromPartial(object: DeepPartial<UpdateButtonWidgetRequest>): UpdateButtonWidgetRequest;
};
export declare const CommunityListWidget: {
    $type: "devvit.plugin.redditapi.widgets.CommunityListWidget";
    encode(message: CommunityListWidget, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CommunityListWidget;
    fromJSON(object: any): CommunityListWidget;
    toJSON(message: CommunityListWidget): unknown;
    create(base?: DeepPartial<CommunityListWidget>): CommunityListWidget;
    fromPartial(object: DeepPartial<CommunityListWidget>): CommunityListWidget;
};
export declare const CommunityListWidget_CommunityData: {
    $type: "devvit.plugin.redditapi.widgets.CommunityListWidget.CommunityData";
    encode(message: CommunityListWidget_CommunityData, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CommunityListWidget_CommunityData;
    fromJSON(object: any): CommunityListWidget_CommunityData;
    toJSON(message: CommunityListWidget_CommunityData): unknown;
    create(base?: DeepPartial<CommunityListWidget_CommunityData>): CommunityListWidget_CommunityData;
    fromPartial(object: DeepPartial<CommunityListWidget_CommunityData>): CommunityListWidget_CommunityData;
};
export declare const AddCommunityListWidgetRequest: {
    $type: "devvit.plugin.redditapi.widgets.AddCommunityListWidgetRequest";
    encode(message: AddCommunityListWidgetRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AddCommunityListWidgetRequest;
    fromJSON(object: any): AddCommunityListWidgetRequest;
    toJSON(message: AddCommunityListWidgetRequest): unknown;
    create(base?: DeepPartial<AddCommunityListWidgetRequest>): AddCommunityListWidgetRequest;
    fromPartial(object: DeepPartial<AddCommunityListWidgetRequest>): AddCommunityListWidgetRequest;
};
export declare const UpdateCommunityListWidgetRequest: {
    $type: "devvit.plugin.redditapi.widgets.UpdateCommunityListWidgetRequest";
    encode(message: UpdateCommunityListWidgetRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UpdateCommunityListWidgetRequest;
    fromJSON(object: any): UpdateCommunityListWidgetRequest;
    toJSON(message: UpdateCommunityListWidgetRequest): unknown;
    create(base?: DeepPartial<UpdateCommunityListWidgetRequest>): UpdateCommunityListWidgetRequest;
    fromPartial(object: DeepPartial<UpdateCommunityListWidgetRequest>): UpdateCommunityListWidgetRequest;
};
export declare const UpdateCommunityListWidgetResponse: {
    $type: "devvit.plugin.redditapi.widgets.UpdateCommunityListWidgetResponse";
    encode(message: UpdateCommunityListWidgetResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UpdateCommunityListWidgetResponse;
    fromJSON(object: any): UpdateCommunityListWidgetResponse;
    toJSON(message: UpdateCommunityListWidgetResponse): unknown;
    create(base?: DeepPartial<UpdateCommunityListWidgetResponse>): UpdateCommunityListWidgetResponse;
    fromPartial(object: DeepPartial<UpdateCommunityListWidgetResponse>): UpdateCommunityListWidgetResponse;
};
export declare const PostFlairWidget: {
    $type: "devvit.plugin.redditapi.widgets.PostFlairWidget";
    encode(message: PostFlairWidget, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PostFlairWidget;
    fromJSON(object: any): PostFlairWidget;
    toJSON(message: PostFlairWidget): unknown;
    create(base?: DeepPartial<PostFlairWidget>): PostFlairWidget;
    fromPartial(object: DeepPartial<PostFlairWidget>): PostFlairWidget;
};
export declare const AddPostFlairWidgetRequest: {
    $type: "devvit.plugin.redditapi.widgets.AddPostFlairWidgetRequest";
    encode(message: AddPostFlairWidgetRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AddPostFlairWidgetRequest;
    fromJSON(object: any): AddPostFlairWidgetRequest;
    toJSON(message: AddPostFlairWidgetRequest): unknown;
    create(base?: DeepPartial<AddPostFlairWidgetRequest>): AddPostFlairWidgetRequest;
    fromPartial(object: DeepPartial<AddPostFlairWidgetRequest>): AddPostFlairWidgetRequest;
};
export declare const UpdatePostFlairWidgetRequest: {
    $type: "devvit.plugin.redditapi.widgets.UpdatePostFlairWidgetRequest";
    encode(message: UpdatePostFlairWidgetRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UpdatePostFlairWidgetRequest;
    fromJSON(object: any): UpdatePostFlairWidgetRequest;
    toJSON(message: UpdatePostFlairWidgetRequest): unknown;
    create(base?: DeepPartial<UpdatePostFlairWidgetRequest>): UpdatePostFlairWidgetRequest;
    fromPartial(object: DeepPartial<UpdatePostFlairWidgetRequest>): UpdatePostFlairWidgetRequest;
};
export declare const DeleteWidgetRequest: {
    $type: "devvit.plugin.redditapi.widgets.DeleteWidgetRequest";
    encode(message: DeleteWidgetRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DeleteWidgetRequest;
    fromJSON(object: any): DeleteWidgetRequest;
    toJSON(message: DeleteWidgetRequest): unknown;
    create(base?: DeepPartial<DeleteWidgetRequest>): DeleteWidgetRequest;
    fromPartial(object: DeepPartial<DeleteWidgetRequest>): DeleteWidgetRequest;
};
export declare const GetWidgetsRequest: {
    $type: "devvit.plugin.redditapi.widgets.GetWidgetsRequest";
    encode(message: GetWidgetsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetWidgetsRequest;
    fromJSON(object: any): GetWidgetsRequest;
    toJSON(message: GetWidgetsRequest): unknown;
    create(base?: DeepPartial<GetWidgetsRequest>): GetWidgetsRequest;
    fromPartial(object: DeepPartial<GetWidgetsRequest>): GetWidgetsRequest;
};
export declare const GetWidgetsResponse: {
    $type: "devvit.plugin.redditapi.widgets.GetWidgetsResponse";
    encode(message: GetWidgetsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetWidgetsResponse;
    fromJSON(object: any): GetWidgetsResponse;
    toJSON(message: GetWidgetsResponse): unknown;
    create(base?: DeepPartial<GetWidgetsResponse>): GetWidgetsResponse;
    fromPartial(object: DeepPartial<GetWidgetsResponse>): GetWidgetsResponse;
};
export declare const GetWidgetsResponse_WidgetOrdering: {
    $type: "devvit.plugin.redditapi.widgets.GetWidgetsResponse.WidgetOrdering";
    encode(message: GetWidgetsResponse_WidgetOrdering, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetWidgetsResponse_WidgetOrdering;
    fromJSON(object: any): GetWidgetsResponse_WidgetOrdering;
    toJSON(message: GetWidgetsResponse_WidgetOrdering): unknown;
    create(base?: DeepPartial<GetWidgetsResponse_WidgetOrdering>): GetWidgetsResponse_WidgetOrdering;
    fromPartial(object: DeepPartial<GetWidgetsResponse_WidgetOrdering>): GetWidgetsResponse_WidgetOrdering;
};
export declare const GetWidgetsResponse_Layout: {
    $type: "devvit.plugin.redditapi.widgets.GetWidgetsResponse.Layout";
    encode(message: GetWidgetsResponse_Layout, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetWidgetsResponse_Layout;
    fromJSON(object: any): GetWidgetsResponse_Layout;
    toJSON(message: GetWidgetsResponse_Layout): unknown;
    create(base?: DeepPartial<GetWidgetsResponse_Layout>): GetWidgetsResponse_Layout;
    fromPartial(object: DeepPartial<GetWidgetsResponse_Layout>): GetWidgetsResponse_Layout;
};
export declare const GetWidgetsResponse_WidgetItem: {
    $type: "devvit.plugin.redditapi.widgets.GetWidgetsResponse.WidgetItem";
    encode(message: GetWidgetsResponse_WidgetItem, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetWidgetsResponse_WidgetItem;
    fromJSON(object: any): GetWidgetsResponse_WidgetItem;
    toJSON(message: GetWidgetsResponse_WidgetItem): unknown;
    create(base?: DeepPartial<GetWidgetsResponse_WidgetItem>): GetWidgetsResponse_WidgetItem;
    fromPartial(object: DeepPartial<GetWidgetsResponse_WidgetItem>): GetWidgetsResponse_WidgetItem;
};
export declare const GetWidgetsResponse_WidgetItem_Data: {
    $type: "devvit.plugin.redditapi.widgets.GetWidgetsResponse.WidgetItem.Data";
    encode(message: GetWidgetsResponse_WidgetItem_Data, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetWidgetsResponse_WidgetItem_Data;
    fromJSON(object: any): GetWidgetsResponse_WidgetItem_Data;
    toJSON(message: GetWidgetsResponse_WidgetItem_Data): unknown;
    create(base?: DeepPartial<GetWidgetsResponse_WidgetItem_Data>): GetWidgetsResponse_WidgetItem_Data;
    fromPartial(object: DeepPartial<GetWidgetsResponse_WidgetItem_Data>): GetWidgetsResponse_WidgetItem_Data;
};
export declare const GetWidgetsResponse_WidgetItem_Moderator: {
    $type: "devvit.plugin.redditapi.widgets.GetWidgetsResponse.WidgetItem.Moderator";
    encode(message: GetWidgetsResponse_WidgetItem_Moderator, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetWidgetsResponse_WidgetItem_Moderator;
    fromJSON(object: any): GetWidgetsResponse_WidgetItem_Moderator;
    toJSON(message: GetWidgetsResponse_WidgetItem_Moderator): unknown;
    create(base?: DeepPartial<GetWidgetsResponse_WidgetItem_Moderator>): GetWidgetsResponse_WidgetItem_Moderator;
    fromPartial(object: DeepPartial<GetWidgetsResponse_WidgetItem_Moderator>): GetWidgetsResponse_WidgetItem_Moderator;
};
export declare const GetWidgetsResponse_WidgetItem_PostFlairTemplate: {
    $type: "devvit.plugin.redditapi.widgets.GetWidgetsResponse.WidgetItem.PostFlairTemplate";
    encode(message: GetWidgetsResponse_WidgetItem_PostFlairTemplate, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetWidgetsResponse_WidgetItem_PostFlairTemplate;
    fromJSON(object: any): GetWidgetsResponse_WidgetItem_PostFlairTemplate;
    toJSON(message: GetWidgetsResponse_WidgetItem_PostFlairTemplate): unknown;
    create(base?: DeepPartial<GetWidgetsResponse_WidgetItem_PostFlairTemplate>): GetWidgetsResponse_WidgetItem_PostFlairTemplate;
    fromPartial(object: DeepPartial<GetWidgetsResponse_WidgetItem_PostFlairTemplate>): GetWidgetsResponse_WidgetItem_PostFlairTemplate;
};
export declare const GetWidgetsResponse_WidgetItem_TemplatesEntry: {
    $type: "devvit.plugin.redditapi.widgets.GetWidgetsResponse.WidgetItem.TemplatesEntry";
    encode(message: GetWidgetsResponse_WidgetItem_TemplatesEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetWidgetsResponse_WidgetItem_TemplatesEntry;
    fromJSON(object: any): GetWidgetsResponse_WidgetItem_TemplatesEntry;
    toJSON(message: GetWidgetsResponse_WidgetItem_TemplatesEntry): unknown;
    create(base?: DeepPartial<GetWidgetsResponse_WidgetItem_TemplatesEntry>): GetWidgetsResponse_WidgetItem_TemplatesEntry;
    fromPartial(object: DeepPartial<GetWidgetsResponse_WidgetItem_TemplatesEntry>): GetWidgetsResponse_WidgetItem_TemplatesEntry;
};
export declare const GetWidgetsResponse_ItemsEntry: {
    $type: "devvit.plugin.redditapi.widgets.GetWidgetsResponse.ItemsEntry";
    encode(message: GetWidgetsResponse_ItemsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetWidgetsResponse_ItemsEntry;
    fromJSON(object: any): GetWidgetsResponse_ItemsEntry;
    toJSON(message: GetWidgetsResponse_ItemsEntry): unknown;
    create(base?: DeepPartial<GetWidgetsResponse_ItemsEntry>): GetWidgetsResponse_ItemsEntry;
    fromPartial(object: DeepPartial<GetWidgetsResponse_ItemsEntry>): GetWidgetsResponse_ItemsEntry;
};
export declare const MenuWidgetItem: {
    $type: "devvit.plugin.redditapi.widgets.MenuWidgetItem";
    encode(message: MenuWidgetItem, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MenuWidgetItem;
    fromJSON(object: any): MenuWidgetItem;
    toJSON(message: MenuWidgetItem): unknown;
    create(base?: DeepPartial<MenuWidgetItem>): MenuWidgetItem;
    fromPartial(object: DeepPartial<MenuWidgetItem>): MenuWidgetItem;
};
export declare const OrderWidgetsRequest: {
    $type: "devvit.plugin.redditapi.widgets.OrderWidgetsRequest";
    encode(message: OrderWidgetsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): OrderWidgetsRequest;
    fromJSON(object: any): OrderWidgetsRequest;
    toJSON(message: OrderWidgetsRequest): unknown;
    create(base?: DeepPartial<OrderWidgetsRequest>): OrderWidgetsRequest;
    fromPartial(object: DeepPartial<OrderWidgetsRequest>): OrderWidgetsRequest;
};
export declare const GetWidgetImageUploadLeaseRequest: {
    $type: "devvit.plugin.redditapi.widgets.GetWidgetImageUploadLeaseRequest";
    encode(message: GetWidgetImageUploadLeaseRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetWidgetImageUploadLeaseRequest;
    fromJSON(object: any): GetWidgetImageUploadLeaseRequest;
    toJSON(message: GetWidgetImageUploadLeaseRequest): unknown;
    create(base?: DeepPartial<GetWidgetImageUploadLeaseRequest>): GetWidgetImageUploadLeaseRequest;
    fromPartial(object: DeepPartial<GetWidgetImageUploadLeaseRequest>): GetWidgetImageUploadLeaseRequest;
};
export declare const GetWidgetImageUploadLeaseResponse: {
    $type: "devvit.plugin.redditapi.widgets.GetWidgetImageUploadLeaseResponse";
    encode(message: GetWidgetImageUploadLeaseResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetWidgetImageUploadLeaseResponse;
    fromJSON(object: any): GetWidgetImageUploadLeaseResponse;
    toJSON(message: GetWidgetImageUploadLeaseResponse): unknown;
    create(base?: DeepPartial<GetWidgetImageUploadLeaseResponse>): GetWidgetImageUploadLeaseResponse;
    fromPartial(object: DeepPartial<GetWidgetImageUploadLeaseResponse>): GetWidgetImageUploadLeaseResponse;
};
export declare const GetWidgetImageUploadLeaseResponse_S3UploadLease: {
    $type: "devvit.plugin.redditapi.widgets.GetWidgetImageUploadLeaseResponse.S3UploadLease";
    encode(message: GetWidgetImageUploadLeaseResponse_S3UploadLease, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetWidgetImageUploadLeaseResponse_S3UploadLease;
    fromJSON(object: any): GetWidgetImageUploadLeaseResponse_S3UploadLease;
    toJSON(message: GetWidgetImageUploadLeaseResponse_S3UploadLease): unknown;
    create(base?: DeepPartial<GetWidgetImageUploadLeaseResponse_S3UploadLease>): GetWidgetImageUploadLeaseResponse_S3UploadLease;
    fromPartial(object: DeepPartial<GetWidgetImageUploadLeaseResponse_S3UploadLease>): GetWidgetImageUploadLeaseResponse_S3UploadLease;
};
export declare const GetWidgetImageUploadLeaseResponse_S3UploadLease_NameValuePair: {
    $type: "devvit.plugin.redditapi.widgets.GetWidgetImageUploadLeaseResponse.S3UploadLease.NameValuePair";
    encode(message: GetWidgetImageUploadLeaseResponse_S3UploadLease_NameValuePair, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetWidgetImageUploadLeaseResponse_S3UploadLease_NameValuePair;
    fromJSON(object: any): GetWidgetImageUploadLeaseResponse_S3UploadLease_NameValuePair;
    toJSON(message: GetWidgetImageUploadLeaseResponse_S3UploadLease_NameValuePair): unknown;
    create(base?: DeepPartial<GetWidgetImageUploadLeaseResponse_S3UploadLease_NameValuePair>): GetWidgetImageUploadLeaseResponse_S3UploadLease_NameValuePair;
    fromPartial(object: DeepPartial<GetWidgetImageUploadLeaseResponse_S3UploadLease_NameValuePair>): GetWidgetImageUploadLeaseResponse_S3UploadLease_NameValuePair;
};
export declare const CustomWidget: {
    $type: "devvit.plugin.redditapi.widgets.CustomWidget";
    encode(message: CustomWidget, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CustomWidget;
    fromJSON(object: any): CustomWidget;
    toJSON(message: CustomWidget): unknown;
    create(base?: DeepPartial<CustomWidget>): CustomWidget;
    fromPartial(object: DeepPartial<CustomWidget>): CustomWidget;
};
export declare const AddCustomWidgetRequest: {
    $type: "devvit.plugin.redditapi.widgets.AddCustomWidgetRequest";
    encode(message: AddCustomWidgetRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AddCustomWidgetRequest;
    fromJSON(object: any): AddCustomWidgetRequest;
    toJSON(message: AddCustomWidgetRequest): unknown;
    create(base?: DeepPartial<AddCustomWidgetRequest>): AddCustomWidgetRequest;
    fromPartial(object: DeepPartial<AddCustomWidgetRequest>): AddCustomWidgetRequest;
};
export declare const UpdateCustomWidgetRequest: {
    $type: "devvit.plugin.redditapi.widgets.UpdateCustomWidgetRequest";
    encode(message: UpdateCustomWidgetRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UpdateCustomWidgetRequest;
    fromJSON(object: any): UpdateCustomWidgetRequest;
    toJSON(message: UpdateCustomWidgetRequest): unknown;
    create(base?: DeepPartial<UpdateCustomWidgetRequest>): UpdateCustomWidgetRequest;
    fromPartial(object: DeepPartial<UpdateCustomWidgetRequest>): UpdateCustomWidgetRequest;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=widgets_msg.d.ts.map