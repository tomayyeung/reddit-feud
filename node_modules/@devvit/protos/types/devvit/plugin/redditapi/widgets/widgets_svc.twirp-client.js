import { AddButtonWidgetRequest, ButtonWidget, AddImageWidgetRequest, ImageWidget, AddCalendarWidgetRequest, CalendarWidget, AddTextAreaWidgetRequest, TextAreaWidget, AddCommunityListWidgetRequest, CommunityListWidget, AddPostFlairWidgetRequest, PostFlairWidget, AddCustomWidgetRequest, CustomWidget, DeleteWidgetRequest, UpdateButtonWidgetRequest, UpdateImageWidgetRequest, UpdateCalendarWidgetRequest, UpdateTextAreaWidgetRequest, UpdateCommunityListWidgetRequest, UpdateCommunityListWidgetResponse, UpdatePostFlairWidgetRequest, UpdateCustomWidgetRequest, GetWidgetImageUploadLeaseRequest, GetWidgetImageUploadLeaseResponse, OrderWidgetsRequest, GetWidgetsRequest, GetWidgetsResponse, } from './widgets_msg.js';
import { Empty } from '../../../../google/protobuf/empty.js';
export class WidgetsClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.AddButtonWidget.bind(this);
        this.AddImageWidget.bind(this);
        this.AddCalendarWidget.bind(this);
        this.AddTextAreaWidget.bind(this);
        this.AddCommunityListWidget.bind(this);
        this.AddPostFlairWidget.bind(this);
        this.AddCustomWidget.bind(this);
        this.DeleteWidget.bind(this);
        this.UpdateButtonWidget.bind(this);
        this.UpdateImageWidget.bind(this);
        this.UpdateCalendarWidget.bind(this);
        this.UpdateTextAreaWidget.bind(this);
        this.UpdateCommunityListWidget.bind(this);
        this.UpdatePostFlairWidget.bind(this);
        this.UpdateCustomWidget.bind(this);
        this.GetWidgetImageUploadLease.bind(this);
        this.OrderWidgets.bind(this);
        this.GetWidgets.bind(this);
    }
    AddButtonWidget(request) {
        const data = AddButtonWidgetRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.widgets.Widgets', 'AddButtonWidget', 'application/json', data);
        return promise.then((data) => ButtonWidget.fromJSON(data));
    }
    AddImageWidget(request) {
        const data = AddImageWidgetRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.widgets.Widgets', 'AddImageWidget', 'application/json', data);
        return promise.then((data) => ImageWidget.fromJSON(data));
    }
    AddCalendarWidget(request) {
        const data = AddCalendarWidgetRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.widgets.Widgets', 'AddCalendarWidget', 'application/json', data);
        return promise.then((data) => CalendarWidget.fromJSON(data));
    }
    AddTextAreaWidget(request) {
        const data = AddTextAreaWidgetRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.widgets.Widgets', 'AddTextAreaWidget', 'application/json', data);
        return promise.then((data) => TextAreaWidget.fromJSON(data));
    }
    AddCommunityListWidget(request) {
        const data = AddCommunityListWidgetRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.widgets.Widgets', 'AddCommunityListWidget', 'application/json', data);
        return promise.then((data) => CommunityListWidget.fromJSON(data));
    }
    AddPostFlairWidget(request) {
        const data = AddPostFlairWidgetRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.widgets.Widgets', 'AddPostFlairWidget', 'application/json', data);
        return promise.then((data) => PostFlairWidget.fromJSON(data));
    }
    AddCustomWidget(request) {
        const data = AddCustomWidgetRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.widgets.Widgets', 'AddCustomWidget', 'application/json', data);
        return promise.then((data) => CustomWidget.fromJSON(data));
    }
    DeleteWidget(request) {
        const data = DeleteWidgetRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.widgets.Widgets', 'DeleteWidget', 'application/json', data);
        return promise.then((data) => Empty.fromJSON(data));
    }
    UpdateButtonWidget(request) {
        const data = UpdateButtonWidgetRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.widgets.Widgets', 'UpdateButtonWidget', 'application/json', data);
        return promise.then((data) => ButtonWidget.fromJSON(data));
    }
    UpdateImageWidget(request) {
        const data = UpdateImageWidgetRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.widgets.Widgets', 'UpdateImageWidget', 'application/json', data);
        return promise.then((data) => ImageWidget.fromJSON(data));
    }
    UpdateCalendarWidget(request) {
        const data = UpdateCalendarWidgetRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.widgets.Widgets', 'UpdateCalendarWidget', 'application/json', data);
        return promise.then((data) => CalendarWidget.fromJSON(data));
    }
    UpdateTextAreaWidget(request) {
        const data = UpdateTextAreaWidgetRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.widgets.Widgets', 'UpdateTextAreaWidget', 'application/json', data);
        return promise.then((data) => TextAreaWidget.fromJSON(data));
    }
    UpdateCommunityListWidget(request) {
        const data = UpdateCommunityListWidgetRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.widgets.Widgets', 'UpdateCommunityListWidget', 'application/json', data);
        return promise.then((data) => UpdateCommunityListWidgetResponse.fromJSON(data));
    }
    UpdatePostFlairWidget(request) {
        const data = UpdatePostFlairWidgetRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.widgets.Widgets', 'UpdatePostFlairWidget', 'application/json', data);
        return promise.then((data) => PostFlairWidget.fromJSON(data));
    }
    UpdateCustomWidget(request) {
        const data = UpdateCustomWidgetRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.widgets.Widgets', 'UpdateCustomWidget', 'application/json', data);
        return promise.then((data) => CustomWidget.fromJSON(data));
    }
    GetWidgetImageUploadLease(request) {
        const data = GetWidgetImageUploadLeaseRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.widgets.Widgets', 'GetWidgetImageUploadLease', 'application/json', data);
        return promise.then((data) => GetWidgetImageUploadLeaseResponse.fromJSON(data));
    }
    OrderWidgets(request) {
        const data = OrderWidgetsRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.widgets.Widgets', 'OrderWidgets', 'application/json', data);
        return promise.then((data) => Empty.fromJSON(data));
    }
    GetWidgets(request) {
        const data = GetWidgetsRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.widgets.Widgets', 'GetWidgets', 'application/json', data);
        return promise.then((data) => GetWidgetsResponse.fromJSON(data));
    }
}
export class WidgetsClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.AddButtonWidget.bind(this);
        this.AddImageWidget.bind(this);
        this.AddCalendarWidget.bind(this);
        this.AddTextAreaWidget.bind(this);
        this.AddCommunityListWidget.bind(this);
        this.AddPostFlairWidget.bind(this);
        this.AddCustomWidget.bind(this);
        this.DeleteWidget.bind(this);
        this.UpdateButtonWidget.bind(this);
        this.UpdateImageWidget.bind(this);
        this.UpdateCalendarWidget.bind(this);
        this.UpdateTextAreaWidget.bind(this);
        this.UpdateCommunityListWidget.bind(this);
        this.UpdatePostFlairWidget.bind(this);
        this.UpdateCustomWidget.bind(this);
        this.GetWidgetImageUploadLease.bind(this);
        this.OrderWidgets.bind(this);
        this.GetWidgets.bind(this);
    }
    AddButtonWidget(request) {
        const data = AddButtonWidgetRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.widgets.Widgets', 'AddButtonWidget', 'application/protobuf', data);
        return promise.then((data) => ButtonWidget.decode(data));
    }
    AddImageWidget(request) {
        const data = AddImageWidgetRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.widgets.Widgets', 'AddImageWidget', 'application/protobuf', data);
        return promise.then((data) => ImageWidget.decode(data));
    }
    AddCalendarWidget(request) {
        const data = AddCalendarWidgetRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.widgets.Widgets', 'AddCalendarWidget', 'application/protobuf', data);
        return promise.then((data) => CalendarWidget.decode(data));
    }
    AddTextAreaWidget(request) {
        const data = AddTextAreaWidgetRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.widgets.Widgets', 'AddTextAreaWidget', 'application/protobuf', data);
        return promise.then((data) => TextAreaWidget.decode(data));
    }
    AddCommunityListWidget(request) {
        const data = AddCommunityListWidgetRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.widgets.Widgets', 'AddCommunityListWidget', 'application/protobuf', data);
        return promise.then((data) => CommunityListWidget.decode(data));
    }
    AddPostFlairWidget(request) {
        const data = AddPostFlairWidgetRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.widgets.Widgets', 'AddPostFlairWidget', 'application/protobuf', data);
        return promise.then((data) => PostFlairWidget.decode(data));
    }
    AddCustomWidget(request) {
        const data = AddCustomWidgetRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.widgets.Widgets', 'AddCustomWidget', 'application/protobuf', data);
        return promise.then((data) => CustomWidget.decode(data));
    }
    DeleteWidget(request) {
        const data = DeleteWidgetRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.widgets.Widgets', 'DeleteWidget', 'application/protobuf', data);
        return promise.then((data) => Empty.decode(data));
    }
    UpdateButtonWidget(request) {
        const data = UpdateButtonWidgetRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.widgets.Widgets', 'UpdateButtonWidget', 'application/protobuf', data);
        return promise.then((data) => ButtonWidget.decode(data));
    }
    UpdateImageWidget(request) {
        const data = UpdateImageWidgetRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.widgets.Widgets', 'UpdateImageWidget', 'application/protobuf', data);
        return promise.then((data) => ImageWidget.decode(data));
    }
    UpdateCalendarWidget(request) {
        const data = UpdateCalendarWidgetRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.widgets.Widgets', 'UpdateCalendarWidget', 'application/protobuf', data);
        return promise.then((data) => CalendarWidget.decode(data));
    }
    UpdateTextAreaWidget(request) {
        const data = UpdateTextAreaWidgetRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.widgets.Widgets', 'UpdateTextAreaWidget', 'application/protobuf', data);
        return promise.then((data) => TextAreaWidget.decode(data));
    }
    UpdateCommunityListWidget(request) {
        const data = UpdateCommunityListWidgetRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.widgets.Widgets', 'UpdateCommunityListWidget', 'application/protobuf', data);
        return promise.then((data) => UpdateCommunityListWidgetResponse.decode(data));
    }
    UpdatePostFlairWidget(request) {
        const data = UpdatePostFlairWidgetRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.widgets.Widgets', 'UpdatePostFlairWidget', 'application/protobuf', data);
        return promise.then((data) => PostFlairWidget.decode(data));
    }
    UpdateCustomWidget(request) {
        const data = UpdateCustomWidgetRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.widgets.Widgets', 'UpdateCustomWidget', 'application/protobuf', data);
        return promise.then((data) => CustomWidget.decode(data));
    }
    GetWidgetImageUploadLease(request) {
        const data = GetWidgetImageUploadLeaseRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.widgets.Widgets', 'GetWidgetImageUploadLease', 'application/protobuf', data);
        return promise.then((data) => GetWidgetImageUploadLeaseResponse.decode(data));
    }
    OrderWidgets(request) {
        const data = OrderWidgetsRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.widgets.Widgets', 'OrderWidgets', 'application/protobuf', data);
        return promise.then((data) => Empty.decode(data));
    }
    GetWidgets(request) {
        const data = GetWidgetsRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.widgets.Widgets', 'GetWidgets', 'application/protobuf', data);
        return promise.then((data) => GetWidgetsResponse.decode(data));
    }
}
