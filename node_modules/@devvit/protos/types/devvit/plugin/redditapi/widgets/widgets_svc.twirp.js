import { TwirpServer, TwirpError, TwirpErrorCode, TwirpContentType, chainInterceptors, } from 'twirp-ts';
import { AddButtonWidgetRequest, ButtonWidget, AddImageWidgetRequest, ImageWidget, AddCalendarWidgetRequest, CalendarWidget, AddTextAreaWidgetRequest, TextAreaWidget, AddCommunityListWidgetRequest, CommunityListWidget, AddPostFlairWidgetRequest, PostFlairWidget, AddCustomWidgetRequest, CustomWidget, DeleteWidgetRequest, UpdateButtonWidgetRequest, UpdateImageWidgetRequest, UpdateCalendarWidgetRequest, UpdateTextAreaWidgetRequest, UpdateCommunityListWidgetRequest, UpdateCommunityListWidgetResponse, UpdatePostFlairWidgetRequest, UpdateCustomWidgetRequest, GetWidgetImageUploadLeaseRequest, GetWidgetImageUploadLeaseResponse, OrderWidgetsRequest, GetWidgetsRequest, GetWidgetsResponse, } from './widgets_msg.js';
import { Empty } from '../../../../google/protobuf/empty.js';
export var WidgetsMethod;
(function (WidgetsMethod) {
    WidgetsMethod["AddButtonWidget"] = "AddButtonWidget";
    WidgetsMethod["AddImageWidget"] = "AddImageWidget";
    WidgetsMethod["AddCalendarWidget"] = "AddCalendarWidget";
    WidgetsMethod["AddTextAreaWidget"] = "AddTextAreaWidget";
    WidgetsMethod["AddCommunityListWidget"] = "AddCommunityListWidget";
    WidgetsMethod["AddPostFlairWidget"] = "AddPostFlairWidget";
    WidgetsMethod["AddCustomWidget"] = "AddCustomWidget";
    WidgetsMethod["DeleteWidget"] = "DeleteWidget";
    WidgetsMethod["UpdateButtonWidget"] = "UpdateButtonWidget";
    WidgetsMethod["UpdateImageWidget"] = "UpdateImageWidget";
    WidgetsMethod["UpdateCalendarWidget"] = "UpdateCalendarWidget";
    WidgetsMethod["UpdateTextAreaWidget"] = "UpdateTextAreaWidget";
    WidgetsMethod["UpdateCommunityListWidget"] = "UpdateCommunityListWidget";
    WidgetsMethod["UpdatePostFlairWidget"] = "UpdatePostFlairWidget";
    WidgetsMethod["UpdateCustomWidget"] = "UpdateCustomWidget";
    WidgetsMethod["GetWidgetImageUploadLease"] = "GetWidgetImageUploadLease";
    WidgetsMethod["OrderWidgets"] = "OrderWidgets";
    WidgetsMethod["GetWidgets"] = "GetWidgets";
})(WidgetsMethod || (WidgetsMethod = {}));
export const WidgetsMethodList = [
    WidgetsMethod.AddButtonWidget,
    WidgetsMethod.AddImageWidget,
    WidgetsMethod.AddCalendarWidget,
    WidgetsMethod.AddTextAreaWidget,
    WidgetsMethod.AddCommunityListWidget,
    WidgetsMethod.AddPostFlairWidget,
    WidgetsMethod.AddCustomWidget,
    WidgetsMethod.DeleteWidget,
    WidgetsMethod.UpdateButtonWidget,
    WidgetsMethod.UpdateImageWidget,
    WidgetsMethod.UpdateCalendarWidget,
    WidgetsMethod.UpdateTextAreaWidget,
    WidgetsMethod.UpdateCommunityListWidget,
    WidgetsMethod.UpdatePostFlairWidget,
    WidgetsMethod.UpdateCustomWidget,
    WidgetsMethod.GetWidgetImageUploadLease,
    WidgetsMethod.OrderWidgets,
    WidgetsMethod.GetWidgets,
];
export function createWidgetsServer(service) {
    return new TwirpServer({
        service,
        packageName: 'devvit.plugin.redditapi.widgets',
        serviceName: 'Widgets',
        methodList: WidgetsMethodList,
        matchRoute: matchWidgetsRoute,
    });
}
function matchWidgetsRoute(method, events) {
    switch (method) {
        case 'AddButtonWidget':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'AddButtonWidget' };
                await events.onMatch(ctx);
                return handleWidgetsAddButtonWidgetRequest(ctx, service, data, interceptors);
            };
        case 'AddImageWidget':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'AddImageWidget' };
                await events.onMatch(ctx);
                return handleWidgetsAddImageWidgetRequest(ctx, service, data, interceptors);
            };
        case 'AddCalendarWidget':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'AddCalendarWidget' };
                await events.onMatch(ctx);
                return handleWidgetsAddCalendarWidgetRequest(ctx, service, data, interceptors);
            };
        case 'AddTextAreaWidget':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'AddTextAreaWidget' };
                await events.onMatch(ctx);
                return handleWidgetsAddTextAreaWidgetRequest(ctx, service, data, interceptors);
            };
        case 'AddCommunityListWidget':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'AddCommunityListWidget' };
                await events.onMatch(ctx);
                return handleWidgetsAddCommunityListWidgetRequest(ctx, service, data, interceptors);
            };
        case 'AddPostFlairWidget':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'AddPostFlairWidget' };
                await events.onMatch(ctx);
                return handleWidgetsAddPostFlairWidgetRequest(ctx, service, data, interceptors);
            };
        case 'AddCustomWidget':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'AddCustomWidget' };
                await events.onMatch(ctx);
                return handleWidgetsAddCustomWidgetRequest(ctx, service, data, interceptors);
            };
        case 'DeleteWidget':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'DeleteWidget' };
                await events.onMatch(ctx);
                return handleWidgetsDeleteWidgetRequest(ctx, service, data, interceptors);
            };
        case 'UpdateButtonWidget':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'UpdateButtonWidget' };
                await events.onMatch(ctx);
                return handleWidgetsUpdateButtonWidgetRequest(ctx, service, data, interceptors);
            };
        case 'UpdateImageWidget':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'UpdateImageWidget' };
                await events.onMatch(ctx);
                return handleWidgetsUpdateImageWidgetRequest(ctx, service, data, interceptors);
            };
        case 'UpdateCalendarWidget':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'UpdateCalendarWidget' };
                await events.onMatch(ctx);
                return handleWidgetsUpdateCalendarWidgetRequest(ctx, service, data, interceptors);
            };
        case 'UpdateTextAreaWidget':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'UpdateTextAreaWidget' };
                await events.onMatch(ctx);
                return handleWidgetsUpdateTextAreaWidgetRequest(ctx, service, data, interceptors);
            };
        case 'UpdateCommunityListWidget':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'UpdateCommunityListWidget' };
                await events.onMatch(ctx);
                return handleWidgetsUpdateCommunityListWidgetRequest(ctx, service, data, interceptors);
            };
        case 'UpdatePostFlairWidget':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'UpdatePostFlairWidget' };
                await events.onMatch(ctx);
                return handleWidgetsUpdatePostFlairWidgetRequest(ctx, service, data, interceptors);
            };
        case 'UpdateCustomWidget':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'UpdateCustomWidget' };
                await events.onMatch(ctx);
                return handleWidgetsUpdateCustomWidgetRequest(ctx, service, data, interceptors);
            };
        case 'GetWidgetImageUploadLease':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'GetWidgetImageUploadLease' };
                await events.onMatch(ctx);
                return handleWidgetsGetWidgetImageUploadLeaseRequest(ctx, service, data, interceptors);
            };
        case 'OrderWidgets':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'OrderWidgets' };
                await events.onMatch(ctx);
                return handleWidgetsOrderWidgetsRequest(ctx, service, data, interceptors);
            };
        case 'GetWidgets':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'GetWidgets' };
                await events.onMatch(ctx);
                return handleWidgetsGetWidgetsRequest(ctx, service, data, interceptors);
            };
        default:
            events.onNotFound();
            const msg = `no handler found`;
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleWidgetsAddButtonWidgetRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleWidgetsAddButtonWidgetJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleWidgetsAddButtonWidgetProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleWidgetsAddImageWidgetRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleWidgetsAddImageWidgetJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleWidgetsAddImageWidgetProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleWidgetsAddCalendarWidgetRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleWidgetsAddCalendarWidgetJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleWidgetsAddCalendarWidgetProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleWidgetsAddTextAreaWidgetRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleWidgetsAddTextAreaWidgetJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleWidgetsAddTextAreaWidgetProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleWidgetsAddCommunityListWidgetRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleWidgetsAddCommunityListWidgetJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleWidgetsAddCommunityListWidgetProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleWidgetsAddPostFlairWidgetRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleWidgetsAddPostFlairWidgetJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleWidgetsAddPostFlairWidgetProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleWidgetsAddCustomWidgetRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleWidgetsAddCustomWidgetJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleWidgetsAddCustomWidgetProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleWidgetsDeleteWidgetRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleWidgetsDeleteWidgetJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleWidgetsDeleteWidgetProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleWidgetsUpdateButtonWidgetRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleWidgetsUpdateButtonWidgetJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleWidgetsUpdateButtonWidgetProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleWidgetsUpdateImageWidgetRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleWidgetsUpdateImageWidgetJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleWidgetsUpdateImageWidgetProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleWidgetsUpdateCalendarWidgetRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleWidgetsUpdateCalendarWidgetJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleWidgetsUpdateCalendarWidgetProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleWidgetsUpdateTextAreaWidgetRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleWidgetsUpdateTextAreaWidgetJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleWidgetsUpdateTextAreaWidgetProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleWidgetsUpdateCommunityListWidgetRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleWidgetsUpdateCommunityListWidgetJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleWidgetsUpdateCommunityListWidgetProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleWidgetsUpdatePostFlairWidgetRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleWidgetsUpdatePostFlairWidgetJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleWidgetsUpdatePostFlairWidgetProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleWidgetsUpdateCustomWidgetRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleWidgetsUpdateCustomWidgetJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleWidgetsUpdateCustomWidgetProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleWidgetsGetWidgetImageUploadLeaseRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleWidgetsGetWidgetImageUploadLeaseJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleWidgetsGetWidgetImageUploadLeaseProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleWidgetsOrderWidgetsRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleWidgetsOrderWidgetsJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleWidgetsOrderWidgetsProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleWidgetsGetWidgetsRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleWidgetsGetWidgetsJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleWidgetsGetWidgetsProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
async function handleWidgetsAddButtonWidgetJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = AddButtonWidgetRequest.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.AddButtonWidget(ctx, inputReq);
        });
    }
    else {
        response = await service.AddButtonWidget(ctx, request);
    }
    return JSON.stringify(ButtonWidget.toJSON(response));
}
async function handleWidgetsAddImageWidgetJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = AddImageWidgetRequest.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.AddImageWidget(ctx, inputReq);
        });
    }
    else {
        response = await service.AddImageWidget(ctx, request);
    }
    return JSON.stringify(ImageWidget.toJSON(response));
}
async function handleWidgetsAddCalendarWidgetJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = AddCalendarWidgetRequest.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.AddCalendarWidget(ctx, inputReq);
        });
    }
    else {
        response = await service.AddCalendarWidget(ctx, request);
    }
    return JSON.stringify(CalendarWidget.toJSON(response));
}
async function handleWidgetsAddTextAreaWidgetJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = AddTextAreaWidgetRequest.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.AddTextAreaWidget(ctx, inputReq);
        });
    }
    else {
        response = await service.AddTextAreaWidget(ctx, request);
    }
    return JSON.stringify(TextAreaWidget.toJSON(response));
}
async function handleWidgetsAddCommunityListWidgetJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = AddCommunityListWidgetRequest.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.AddCommunityListWidget(ctx, inputReq);
        });
    }
    else {
        response = await service.AddCommunityListWidget(ctx, request);
    }
    return JSON.stringify(CommunityListWidget.toJSON(response));
}
async function handleWidgetsAddPostFlairWidgetJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = AddPostFlairWidgetRequest.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.AddPostFlairWidget(ctx, inputReq);
        });
    }
    else {
        response = await service.AddPostFlairWidget(ctx, request);
    }
    return JSON.stringify(PostFlairWidget.toJSON(response));
}
async function handleWidgetsAddCustomWidgetJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = AddCustomWidgetRequest.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.AddCustomWidget(ctx, inputReq);
        });
    }
    else {
        response = await service.AddCustomWidget(ctx, request);
    }
    return JSON.stringify(CustomWidget.toJSON(response));
}
async function handleWidgetsDeleteWidgetJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = DeleteWidgetRequest.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.DeleteWidget(ctx, inputReq);
        });
    }
    else {
        response = await service.DeleteWidget(ctx, request);
    }
    return JSON.stringify(Empty.toJSON(response));
}
async function handleWidgetsUpdateButtonWidgetJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = UpdateButtonWidgetRequest.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.UpdateButtonWidget(ctx, inputReq);
        });
    }
    else {
        response = await service.UpdateButtonWidget(ctx, request);
    }
    return JSON.stringify(ButtonWidget.toJSON(response));
}
async function handleWidgetsUpdateImageWidgetJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = UpdateImageWidgetRequest.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.UpdateImageWidget(ctx, inputReq);
        });
    }
    else {
        response = await service.UpdateImageWidget(ctx, request);
    }
    return JSON.stringify(ImageWidget.toJSON(response));
}
async function handleWidgetsUpdateCalendarWidgetJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = UpdateCalendarWidgetRequest.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.UpdateCalendarWidget(ctx, inputReq);
        });
    }
    else {
        response = await service.UpdateCalendarWidget(ctx, request);
    }
    return JSON.stringify(CalendarWidget.toJSON(response));
}
async function handleWidgetsUpdateTextAreaWidgetJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = UpdateTextAreaWidgetRequest.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.UpdateTextAreaWidget(ctx, inputReq);
        });
    }
    else {
        response = await service.UpdateTextAreaWidget(ctx, request);
    }
    return JSON.stringify(TextAreaWidget.toJSON(response));
}
async function handleWidgetsUpdateCommunityListWidgetJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = UpdateCommunityListWidgetRequest.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.UpdateCommunityListWidget(ctx, inputReq);
        });
    }
    else {
        response = await service.UpdateCommunityListWidget(ctx, request);
    }
    return JSON.stringify(UpdateCommunityListWidgetResponse.toJSON(response));
}
async function handleWidgetsUpdatePostFlairWidgetJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = UpdatePostFlairWidgetRequest.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.UpdatePostFlairWidget(ctx, inputReq);
        });
    }
    else {
        response = await service.UpdatePostFlairWidget(ctx, request);
    }
    return JSON.stringify(PostFlairWidget.toJSON(response));
}
async function handleWidgetsUpdateCustomWidgetJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = UpdateCustomWidgetRequest.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.UpdateCustomWidget(ctx, inputReq);
        });
    }
    else {
        response = await service.UpdateCustomWidget(ctx, request);
    }
    return JSON.stringify(CustomWidget.toJSON(response));
}
async function handleWidgetsGetWidgetImageUploadLeaseJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = GetWidgetImageUploadLeaseRequest.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.GetWidgetImageUploadLease(ctx, inputReq);
        });
    }
    else {
        response = await service.GetWidgetImageUploadLease(ctx, request);
    }
    return JSON.stringify(GetWidgetImageUploadLeaseResponse.toJSON(response));
}
async function handleWidgetsOrderWidgetsJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = OrderWidgetsRequest.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.OrderWidgets(ctx, inputReq);
        });
    }
    else {
        response = await service.OrderWidgets(ctx, request);
    }
    return JSON.stringify(Empty.toJSON(response));
}
async function handleWidgetsGetWidgetsJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = GetWidgetsRequest.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.GetWidgets(ctx, inputReq);
        });
    }
    else {
        response = await service.GetWidgets(ctx, request);
    }
    return JSON.stringify(GetWidgetsResponse.toJSON(response));
}
async function handleWidgetsAddButtonWidgetProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = AddButtonWidgetRequest.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.AddButtonWidget(ctx, inputReq);
        });
    }
    else {
        response = await service.AddButtonWidget(ctx, request);
    }
    return Buffer.from(ButtonWidget.encode(response).finish());
}
async function handleWidgetsAddImageWidgetProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = AddImageWidgetRequest.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.AddImageWidget(ctx, inputReq);
        });
    }
    else {
        response = await service.AddImageWidget(ctx, request);
    }
    return Buffer.from(ImageWidget.encode(response).finish());
}
async function handleWidgetsAddCalendarWidgetProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = AddCalendarWidgetRequest.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.AddCalendarWidget(ctx, inputReq);
        });
    }
    else {
        response = await service.AddCalendarWidget(ctx, request);
    }
    return Buffer.from(CalendarWidget.encode(response).finish());
}
async function handleWidgetsAddTextAreaWidgetProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = AddTextAreaWidgetRequest.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.AddTextAreaWidget(ctx, inputReq);
        });
    }
    else {
        response = await service.AddTextAreaWidget(ctx, request);
    }
    return Buffer.from(TextAreaWidget.encode(response).finish());
}
async function handleWidgetsAddCommunityListWidgetProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = AddCommunityListWidgetRequest.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.AddCommunityListWidget(ctx, inputReq);
        });
    }
    else {
        response = await service.AddCommunityListWidget(ctx, request);
    }
    return Buffer.from(CommunityListWidget.encode(response).finish());
}
async function handleWidgetsAddPostFlairWidgetProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = AddPostFlairWidgetRequest.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.AddPostFlairWidget(ctx, inputReq);
        });
    }
    else {
        response = await service.AddPostFlairWidget(ctx, request);
    }
    return Buffer.from(PostFlairWidget.encode(response).finish());
}
async function handleWidgetsAddCustomWidgetProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = AddCustomWidgetRequest.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.AddCustomWidget(ctx, inputReq);
        });
    }
    else {
        response = await service.AddCustomWidget(ctx, request);
    }
    return Buffer.from(CustomWidget.encode(response).finish());
}
async function handleWidgetsDeleteWidgetProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = DeleteWidgetRequest.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.DeleteWidget(ctx, inputReq);
        });
    }
    else {
        response = await service.DeleteWidget(ctx, request);
    }
    return Buffer.from(Empty.encode(response).finish());
}
async function handleWidgetsUpdateButtonWidgetProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = UpdateButtonWidgetRequest.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.UpdateButtonWidget(ctx, inputReq);
        });
    }
    else {
        response = await service.UpdateButtonWidget(ctx, request);
    }
    return Buffer.from(ButtonWidget.encode(response).finish());
}
async function handleWidgetsUpdateImageWidgetProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = UpdateImageWidgetRequest.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.UpdateImageWidget(ctx, inputReq);
        });
    }
    else {
        response = await service.UpdateImageWidget(ctx, request);
    }
    return Buffer.from(ImageWidget.encode(response).finish());
}
async function handleWidgetsUpdateCalendarWidgetProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = UpdateCalendarWidgetRequest.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.UpdateCalendarWidget(ctx, inputReq);
        });
    }
    else {
        response = await service.UpdateCalendarWidget(ctx, request);
    }
    return Buffer.from(CalendarWidget.encode(response).finish());
}
async function handleWidgetsUpdateTextAreaWidgetProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = UpdateTextAreaWidgetRequest.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.UpdateTextAreaWidget(ctx, inputReq);
        });
    }
    else {
        response = await service.UpdateTextAreaWidget(ctx, request);
    }
    return Buffer.from(TextAreaWidget.encode(response).finish());
}
async function handleWidgetsUpdateCommunityListWidgetProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = UpdateCommunityListWidgetRequest.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.UpdateCommunityListWidget(ctx, inputReq);
        });
    }
    else {
        response = await service.UpdateCommunityListWidget(ctx, request);
    }
    return Buffer.from(UpdateCommunityListWidgetResponse.encode(response).finish());
}
async function handleWidgetsUpdatePostFlairWidgetProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = UpdatePostFlairWidgetRequest.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.UpdatePostFlairWidget(ctx, inputReq);
        });
    }
    else {
        response = await service.UpdatePostFlairWidget(ctx, request);
    }
    return Buffer.from(PostFlairWidget.encode(response).finish());
}
async function handleWidgetsUpdateCustomWidgetProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = UpdateCustomWidgetRequest.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.UpdateCustomWidget(ctx, inputReq);
        });
    }
    else {
        response = await service.UpdateCustomWidget(ctx, request);
    }
    return Buffer.from(CustomWidget.encode(response).finish());
}
async function handleWidgetsGetWidgetImageUploadLeaseProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = GetWidgetImageUploadLeaseRequest.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.GetWidgetImageUploadLease(ctx, inputReq);
        });
    }
    else {
        response = await service.GetWidgetImageUploadLease(ctx, request);
    }
    return Buffer.from(GetWidgetImageUploadLeaseResponse.encode(response).finish());
}
async function handleWidgetsOrderWidgetsProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = OrderWidgetsRequest.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.OrderWidgets(ctx, inputReq);
        });
    }
    else {
        response = await service.OrderWidgets(ctx, request);
    }
    return Buffer.from(Empty.encode(response).finish());
}
async function handleWidgetsGetWidgetsProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = GetWidgetsRequest.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.GetWidgets(ctx, inputReq);
        });
    }
    else {
        response = await service.GetWidgets(ctx, request);
    }
    return Buffer.from(GetWidgetsResponse.encode(response).finish());
}
