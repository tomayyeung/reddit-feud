/**
 * #wiki_msg.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { WrappedUserObject } from "../common/common_msg.js";
export interface GetWikiPagesRequest {
    /** The subreddit omitting the r/ prefix. */
    subreddit: string;
}
export interface GetWikiPagesResponse {
    /** String value: "wikipagelisting" */
    kind: string;
    /** A list of wiki page names. */
    data: string[];
}
export interface GetWikiPageRequest {
    /** The subreddit omitting the r/ prefix. */
    subreddit: string;
    /** The name of the wiki page. */
    page: string;
}
export interface WikiPage {
    /** The markdown content of the wiki page. */
    contentMd: string;
    /** The HTML content of the wiki page. */
    contentHtml: string;
    /** The revision ID of the wiki page. */
    revisionId: string;
    /** The date of the wiki page's last revision. */
    revisionDate: number;
    /** Whether the wiki page can be revised. */
    mayRevise: boolean;
    /** The reason for the wiki page's last revision. */
    reason?: string | undefined;
    /** The user who last edited the wiki page. */
    revisionBy?: WrappedUserObject | undefined;
}
export interface GetWikiPageResponse {
    /** String value: "wikipage" */
    kind: string;
    /** The data of the wiki page. */
    data?: WikiPage | undefined;
}
export interface EditWikiPageRequest {
    /** The subreddit omitting the r/ prefix. */
    subreddit: string;
    /** The name of the wiki page. */
    page: string;
    /** The new content of the wiki page. */
    content: string;
    /** The reason for the edit. */
    reason: string;
}
export interface HideWikiPageRevisionRequest {
    /** The subreddit omitting the r/ prefix. */
    subreddit: string;
    /** The name of the wiki page. */
    page: string;
    /** The revision ID to hide. */
    revision: string;
}
export interface HideWikiPageRevisionResponse {
    /** Whether the revision was hidden. */
    status: boolean;
}
export interface GetWikiPageRevisionsRequest {
    /** The subreddit omitting the r/ prefix. */
    subreddit: string;
    /** The name of the wiki page. */
    page: string;
    /**
     * Revision ID
     * Return Revisions in the listing up to this Revision (non-inclusive)
     * Note: Do not use `before` and `after` in the same request
     */
    after?: string | undefined;
    /**
     * Revision ID
     * Return Revisions in the listing starting after this Revision (non-inclusive)
     * Note: Do not use `before` and `after` in the same request
     */
    before?: string | undefined;
    /** The maximum number of revisions to return. */
    limit?: number | undefined;
    /**
     * The number of items seen so far.
     * Use when fetching subsequent pages with `before` or `after`.
     */
    count?: number | undefined;
    /** (optional) Show all results regardless of user preferences */
    show?: boolean | undefined;
    /** (optional) expand subreddits */
    srDetail?: boolean | undefined;
}
export interface WikiPageRevision {
    /** ID of the revision. */
    id: string;
    /** The name of the wiki page. */
    page: string;
    /** The date of the revision. */
    timestamp: number;
    /** The reason for the revision. */
    reason: string;
    /** Whether the revision is hidden. */
    revisionHidden: boolean;
    /** The user who made the revision. */
    author?: WrappedUserObject | undefined;
}
export interface WikiPageRevisionListing {
    /** String value: "Listing" */
    kind: string;
    /** The data of the wiki page revision listing. */
    data?: WikiPageRevisionListing_Data | undefined;
}
export interface WikiPageRevisionListing_Data {
    /**
     * If present, use this as the `after` parameter when calling the same
     * API again to fetch the next page
     */
    after?: string | undefined;
    /**
     * If present, use this as the `before` parameter when calling the same
     * API again to fetch the previous page
     */
    before?: string | undefined;
    /** Contents of the current page of the listing */
    children: WikiPageRevision[];
    /**
     * Number of objects in `children`
     * Note: Only counts immediate entries in `children` and does not count
     *       nested objects such as comment trees
     */
    dist?: number | undefined;
}
export interface GetWikiRevisionsRequest {
    /** The subreddit omitting the r/ prefix. */
    subreddit: string;
    /**
     * Revision ID
     * Return Revisions in the listing up to this Revision (non-inclusive)
     * Note: Do not use `before` and `after` in the same request
     */
    after?: string | undefined;
    /**
     * Revision ID
     * Return Revisions in the listing starting after this Revision (non-inclusive)
     * Note: Do not use `before` and `after` in the same request
     */
    before?: string | undefined;
    /** The maximum number of revisions to return. */
    limit?: number | undefined;
    /**
     * The number of items seen so far.
     * Use when fetching subsequent pages with `before` or `after`.
     */
    count?: number | undefined;
    /** (optional) Show all results regardless of user preferences */
    show?: boolean | undefined;
    /** (optional) expand subreddits */
    srDetail?: boolean | undefined;
}
export interface RevertWikiPageRequest {
    /** The subreddit omitting the r/ prefix. */
    subreddit: string;
    /** The name of the wiki page. */
    page: string;
    /** The revision ID to revert to. */
    revision: string;
}
export interface GetWikiPageSettingsRequest {
    /** The subreddit omitting the r/ prefix. */
    subreddit: string;
    /** The name of the wiki page. */
    page: string;
}
export interface WikiPageSettings {
    /** String value: "wikipagesettings" */
    kind: string;
    /** The data of the wiki page settings. */
    data?: WikiPageSettings_Data | undefined;
}
export interface WikiPageSettings_Data {
    /** The permission level required to edit the wiki page. */
    permLevel: number;
    /** The users who can edit the wiki page. */
    editors: WrappedUserObject[];
    /** Whether the wiki page is listed. */
    listed: boolean;
}
export interface UpdateWikiPageSettingsRequest {
    /** The subreddit omitting the r/ prefix. */
    subreddit: string;
    /** The name of the wiki page. */
    page: string;
    /**
     * The permission level required to edit the wiki page.
     * 0: Use subreddit wiki permissions
     * 1: Only approved wiki contributors for this page may edit
     * 2: Only mods may edit and view
     */
    permlevel: number;
    /** Whether the wiki page is listed. "on" to list, empty string to hide. */
    listed: string;
}
export interface AllowEditorRequest {
    /** The subreddit omitting the r/ prefix. */
    subreddit: string;
    /** The name of the wiki page. */
    page: string;
    /** Either "add" or "del". */
    act: string;
    /** The username of the user to allow or deny. */
    username: string;
}
export declare const GetWikiPagesRequest: {
    $type: "devvit.plugin.redditapi.wiki.GetWikiPagesRequest";
    encode(message: GetWikiPagesRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetWikiPagesRequest;
    fromJSON(object: any): GetWikiPagesRequest;
    toJSON(message: GetWikiPagesRequest): unknown;
    create(base?: DeepPartial<GetWikiPagesRequest>): GetWikiPagesRequest;
    fromPartial(object: DeepPartial<GetWikiPagesRequest>): GetWikiPagesRequest;
};
export declare const GetWikiPagesResponse: {
    $type: "devvit.plugin.redditapi.wiki.GetWikiPagesResponse";
    encode(message: GetWikiPagesResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetWikiPagesResponse;
    fromJSON(object: any): GetWikiPagesResponse;
    toJSON(message: GetWikiPagesResponse): unknown;
    create(base?: DeepPartial<GetWikiPagesResponse>): GetWikiPagesResponse;
    fromPartial(object: DeepPartial<GetWikiPagesResponse>): GetWikiPagesResponse;
};
export declare const GetWikiPageRequest: {
    $type: "devvit.plugin.redditapi.wiki.GetWikiPageRequest";
    encode(message: GetWikiPageRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetWikiPageRequest;
    fromJSON(object: any): GetWikiPageRequest;
    toJSON(message: GetWikiPageRequest): unknown;
    create(base?: DeepPartial<GetWikiPageRequest>): GetWikiPageRequest;
    fromPartial(object: DeepPartial<GetWikiPageRequest>): GetWikiPageRequest;
};
export declare const WikiPage: {
    $type: "devvit.plugin.redditapi.wiki.WikiPage";
    encode(message: WikiPage, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WikiPage;
    fromJSON(object: any): WikiPage;
    toJSON(message: WikiPage): unknown;
    create(base?: DeepPartial<WikiPage>): WikiPage;
    fromPartial(object: DeepPartial<WikiPage>): WikiPage;
};
export declare const GetWikiPageResponse: {
    $type: "devvit.plugin.redditapi.wiki.GetWikiPageResponse";
    encode(message: GetWikiPageResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetWikiPageResponse;
    fromJSON(object: any): GetWikiPageResponse;
    toJSON(message: GetWikiPageResponse): unknown;
    create(base?: DeepPartial<GetWikiPageResponse>): GetWikiPageResponse;
    fromPartial(object: DeepPartial<GetWikiPageResponse>): GetWikiPageResponse;
};
export declare const EditWikiPageRequest: {
    $type: "devvit.plugin.redditapi.wiki.EditWikiPageRequest";
    encode(message: EditWikiPageRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EditWikiPageRequest;
    fromJSON(object: any): EditWikiPageRequest;
    toJSON(message: EditWikiPageRequest): unknown;
    create(base?: DeepPartial<EditWikiPageRequest>): EditWikiPageRequest;
    fromPartial(object: DeepPartial<EditWikiPageRequest>): EditWikiPageRequest;
};
export declare const HideWikiPageRevisionRequest: {
    $type: "devvit.plugin.redditapi.wiki.HideWikiPageRevisionRequest";
    encode(message: HideWikiPageRevisionRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): HideWikiPageRevisionRequest;
    fromJSON(object: any): HideWikiPageRevisionRequest;
    toJSON(message: HideWikiPageRevisionRequest): unknown;
    create(base?: DeepPartial<HideWikiPageRevisionRequest>): HideWikiPageRevisionRequest;
    fromPartial(object: DeepPartial<HideWikiPageRevisionRequest>): HideWikiPageRevisionRequest;
};
export declare const HideWikiPageRevisionResponse: {
    $type: "devvit.plugin.redditapi.wiki.HideWikiPageRevisionResponse";
    encode(message: HideWikiPageRevisionResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): HideWikiPageRevisionResponse;
    fromJSON(object: any): HideWikiPageRevisionResponse;
    toJSON(message: HideWikiPageRevisionResponse): unknown;
    create(base?: DeepPartial<HideWikiPageRevisionResponse>): HideWikiPageRevisionResponse;
    fromPartial(object: DeepPartial<HideWikiPageRevisionResponse>): HideWikiPageRevisionResponse;
};
export declare const GetWikiPageRevisionsRequest: {
    $type: "devvit.plugin.redditapi.wiki.GetWikiPageRevisionsRequest";
    encode(message: GetWikiPageRevisionsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetWikiPageRevisionsRequest;
    fromJSON(object: any): GetWikiPageRevisionsRequest;
    toJSON(message: GetWikiPageRevisionsRequest): unknown;
    create(base?: DeepPartial<GetWikiPageRevisionsRequest>): GetWikiPageRevisionsRequest;
    fromPartial(object: DeepPartial<GetWikiPageRevisionsRequest>): GetWikiPageRevisionsRequest;
};
export declare const WikiPageRevision: {
    $type: "devvit.plugin.redditapi.wiki.WikiPageRevision";
    encode(message: WikiPageRevision, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WikiPageRevision;
    fromJSON(object: any): WikiPageRevision;
    toJSON(message: WikiPageRevision): unknown;
    create(base?: DeepPartial<WikiPageRevision>): WikiPageRevision;
    fromPartial(object: DeepPartial<WikiPageRevision>): WikiPageRevision;
};
export declare const WikiPageRevisionListing: {
    $type: "devvit.plugin.redditapi.wiki.WikiPageRevisionListing";
    encode(message: WikiPageRevisionListing, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WikiPageRevisionListing;
    fromJSON(object: any): WikiPageRevisionListing;
    toJSON(message: WikiPageRevisionListing): unknown;
    create(base?: DeepPartial<WikiPageRevisionListing>): WikiPageRevisionListing;
    fromPartial(object: DeepPartial<WikiPageRevisionListing>): WikiPageRevisionListing;
};
export declare const WikiPageRevisionListing_Data: {
    $type: "devvit.plugin.redditapi.wiki.WikiPageRevisionListing.Data";
    encode(message: WikiPageRevisionListing_Data, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WikiPageRevisionListing_Data;
    fromJSON(object: any): WikiPageRevisionListing_Data;
    toJSON(message: WikiPageRevisionListing_Data): unknown;
    create(base?: DeepPartial<WikiPageRevisionListing_Data>): WikiPageRevisionListing_Data;
    fromPartial(object: DeepPartial<WikiPageRevisionListing_Data>): WikiPageRevisionListing_Data;
};
export declare const GetWikiRevisionsRequest: {
    $type: "devvit.plugin.redditapi.wiki.GetWikiRevisionsRequest";
    encode(message: GetWikiRevisionsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetWikiRevisionsRequest;
    fromJSON(object: any): GetWikiRevisionsRequest;
    toJSON(message: GetWikiRevisionsRequest): unknown;
    create(base?: DeepPartial<GetWikiRevisionsRequest>): GetWikiRevisionsRequest;
    fromPartial(object: DeepPartial<GetWikiRevisionsRequest>): GetWikiRevisionsRequest;
};
export declare const RevertWikiPageRequest: {
    $type: "devvit.plugin.redditapi.wiki.RevertWikiPageRequest";
    encode(message: RevertWikiPageRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RevertWikiPageRequest;
    fromJSON(object: any): RevertWikiPageRequest;
    toJSON(message: RevertWikiPageRequest): unknown;
    create(base?: DeepPartial<RevertWikiPageRequest>): RevertWikiPageRequest;
    fromPartial(object: DeepPartial<RevertWikiPageRequest>): RevertWikiPageRequest;
};
export declare const GetWikiPageSettingsRequest: {
    $type: "devvit.plugin.redditapi.wiki.GetWikiPageSettingsRequest";
    encode(message: GetWikiPageSettingsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetWikiPageSettingsRequest;
    fromJSON(object: any): GetWikiPageSettingsRequest;
    toJSON(message: GetWikiPageSettingsRequest): unknown;
    create(base?: DeepPartial<GetWikiPageSettingsRequest>): GetWikiPageSettingsRequest;
    fromPartial(object: DeepPartial<GetWikiPageSettingsRequest>): GetWikiPageSettingsRequest;
};
export declare const WikiPageSettings: {
    $type: "devvit.plugin.redditapi.wiki.WikiPageSettings";
    encode(message: WikiPageSettings, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WikiPageSettings;
    fromJSON(object: any): WikiPageSettings;
    toJSON(message: WikiPageSettings): unknown;
    create(base?: DeepPartial<WikiPageSettings>): WikiPageSettings;
    fromPartial(object: DeepPartial<WikiPageSettings>): WikiPageSettings;
};
export declare const WikiPageSettings_Data: {
    $type: "devvit.plugin.redditapi.wiki.WikiPageSettings.Data";
    encode(message: WikiPageSettings_Data, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WikiPageSettings_Data;
    fromJSON(object: any): WikiPageSettings_Data;
    toJSON(message: WikiPageSettings_Data): unknown;
    create(base?: DeepPartial<WikiPageSettings_Data>): WikiPageSettings_Data;
    fromPartial(object: DeepPartial<WikiPageSettings_Data>): WikiPageSettings_Data;
};
export declare const UpdateWikiPageSettingsRequest: {
    $type: "devvit.plugin.redditapi.wiki.UpdateWikiPageSettingsRequest";
    encode(message: UpdateWikiPageSettingsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UpdateWikiPageSettingsRequest;
    fromJSON(object: any): UpdateWikiPageSettingsRequest;
    toJSON(message: UpdateWikiPageSettingsRequest): unknown;
    create(base?: DeepPartial<UpdateWikiPageSettingsRequest>): UpdateWikiPageSettingsRequest;
    fromPartial(object: DeepPartial<UpdateWikiPageSettingsRequest>): UpdateWikiPageSettingsRequest;
};
export declare const AllowEditorRequest: {
    $type: "devvit.plugin.redditapi.wiki.AllowEditorRequest";
    encode(message: AllowEditorRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AllowEditorRequest;
    fromJSON(object: any): AllowEditorRequest;
    toJSON(message: AllowEditorRequest): unknown;
    create(base?: DeepPartial<AllowEditorRequest>): AllowEditorRequest;
    fromPartial(object: DeepPartial<AllowEditorRequest>): AllowEditorRequest;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=wiki_msg.d.ts.map