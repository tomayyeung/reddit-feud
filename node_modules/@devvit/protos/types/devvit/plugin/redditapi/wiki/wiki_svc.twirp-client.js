import { GetWikiPagesRequest, GetWikiPagesResponse, GetWikiPageRequest, GetWikiPageResponse, EditWikiPageRequest, HideWikiPageRevisionRequest, HideWikiPageRevisionResponse, GetWikiPageRevisionsRequest, WikiPageRevisionListing, GetWikiRevisionsRequest, RevertWikiPageRequest, GetWikiPageSettingsRequest, WikiPageSettings, UpdateWikiPageSettingsRequest, AllowEditorRequest, } from './wiki_msg.js';
import { Empty } from '../../../../google/protobuf/empty.js';
export class WikiClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.GetWikiPages.bind(this);
        this.GetWikiPage.bind(this);
        this.EditWikiPage.bind(this);
        this.HideWikiPageRevision.bind(this);
        this.GetWikiPageRevisions.bind(this);
        this.GetWikiRevisions.bind(this);
        this.RevertWikiPage.bind(this);
        this.GetWikiPageSettings.bind(this);
        this.UpdateWikiPageSettings.bind(this);
        this.AllowEditor.bind(this);
    }
    GetWikiPages(request) {
        const data = GetWikiPagesRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.wiki.Wiki', 'GetWikiPages', 'application/json', data);
        return promise.then((data) => GetWikiPagesResponse.fromJSON(data));
    }
    GetWikiPage(request) {
        const data = GetWikiPageRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.wiki.Wiki', 'GetWikiPage', 'application/json', data);
        return promise.then((data) => GetWikiPageResponse.fromJSON(data));
    }
    EditWikiPage(request) {
        const data = EditWikiPageRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.wiki.Wiki', 'EditWikiPage', 'application/json', data);
        return promise.then((data) => Empty.fromJSON(data));
    }
    HideWikiPageRevision(request) {
        const data = HideWikiPageRevisionRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.wiki.Wiki', 'HideWikiPageRevision', 'application/json', data);
        return promise.then((data) => HideWikiPageRevisionResponse.fromJSON(data));
    }
    GetWikiPageRevisions(request) {
        const data = GetWikiPageRevisionsRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.wiki.Wiki', 'GetWikiPageRevisions', 'application/json', data);
        return promise.then((data) => WikiPageRevisionListing.fromJSON(data));
    }
    GetWikiRevisions(request) {
        const data = GetWikiRevisionsRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.wiki.Wiki', 'GetWikiRevisions', 'application/json', data);
        return promise.then((data) => WikiPageRevisionListing.fromJSON(data));
    }
    RevertWikiPage(request) {
        const data = RevertWikiPageRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.wiki.Wiki', 'RevertWikiPage', 'application/json', data);
        return promise.then((data) => Empty.fromJSON(data));
    }
    GetWikiPageSettings(request) {
        const data = GetWikiPageSettingsRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.wiki.Wiki', 'GetWikiPageSettings', 'application/json', data);
        return promise.then((data) => WikiPageSettings.fromJSON(data));
    }
    UpdateWikiPageSettings(request) {
        const data = UpdateWikiPageSettingsRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.wiki.Wiki', 'UpdateWikiPageSettings', 'application/json', data);
        return promise.then((data) => WikiPageSettings.fromJSON(data));
    }
    AllowEditor(request) {
        const data = AllowEditorRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redditapi.wiki.Wiki', 'AllowEditor', 'application/json', data);
        return promise.then((data) => Empty.fromJSON(data));
    }
}
export class WikiClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.GetWikiPages.bind(this);
        this.GetWikiPage.bind(this);
        this.EditWikiPage.bind(this);
        this.HideWikiPageRevision.bind(this);
        this.GetWikiPageRevisions.bind(this);
        this.GetWikiRevisions.bind(this);
        this.RevertWikiPage.bind(this);
        this.GetWikiPageSettings.bind(this);
        this.UpdateWikiPageSettings.bind(this);
        this.AllowEditor.bind(this);
    }
    GetWikiPages(request) {
        const data = GetWikiPagesRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.wiki.Wiki', 'GetWikiPages', 'application/protobuf', data);
        return promise.then((data) => GetWikiPagesResponse.decode(data));
    }
    GetWikiPage(request) {
        const data = GetWikiPageRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.wiki.Wiki', 'GetWikiPage', 'application/protobuf', data);
        return promise.then((data) => GetWikiPageResponse.decode(data));
    }
    EditWikiPage(request) {
        const data = EditWikiPageRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.wiki.Wiki', 'EditWikiPage', 'application/protobuf', data);
        return promise.then((data) => Empty.decode(data));
    }
    HideWikiPageRevision(request) {
        const data = HideWikiPageRevisionRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.wiki.Wiki', 'HideWikiPageRevision', 'application/protobuf', data);
        return promise.then((data) => HideWikiPageRevisionResponse.decode(data));
    }
    GetWikiPageRevisions(request) {
        const data = GetWikiPageRevisionsRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.wiki.Wiki', 'GetWikiPageRevisions', 'application/protobuf', data);
        return promise.then((data) => WikiPageRevisionListing.decode(data));
    }
    GetWikiRevisions(request) {
        const data = GetWikiRevisionsRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.wiki.Wiki', 'GetWikiRevisions', 'application/protobuf', data);
        return promise.then((data) => WikiPageRevisionListing.decode(data));
    }
    RevertWikiPage(request) {
        const data = RevertWikiPageRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.wiki.Wiki', 'RevertWikiPage', 'application/protobuf', data);
        return promise.then((data) => Empty.decode(data));
    }
    GetWikiPageSettings(request) {
        const data = GetWikiPageSettingsRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.wiki.Wiki', 'GetWikiPageSettings', 'application/protobuf', data);
        return promise.then((data) => WikiPageSettings.decode(data));
    }
    UpdateWikiPageSettings(request) {
        const data = UpdateWikiPageSettingsRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.wiki.Wiki', 'UpdateWikiPageSettings', 'application/protobuf', data);
        return promise.then((data) => WikiPageSettings.decode(data));
    }
    AllowEditor(request) {
        const data = AllowEditorRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redditapi.wiki.Wiki', 'AllowEditor', 'application/protobuf', data);
        return promise.then((data) => Empty.decode(data));
    }
}
