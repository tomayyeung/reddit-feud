import { KeyRequest, SetRequest, KeysRequest, IncrByRequest, HSetRequest, HGetRequest, RedisFieldValues, HDelRequest, HScanRequest, HScanResponse, KeysResponse, HIncrByRequest, TransactionId, TransactionResponses, WatchRequest, KeyRangeRequest, SetRangeRequest, RedisValues, KeyValuesRequest, ExpireRequest, ZAddRequest, ZRangeRequest, ZMembers, ZRemRequest, ZRemRangeByLexRequest, ZRemRangeByRankRequest, ZRemRangeByScoreRequest, ZScoreRequest, ZRankRequest, ZIncrByRequest, ZScanRequest, ZScanResponse } from './redisapi.js';
import { StringValue, Int64Value, DoubleValue } from '../../../google/protobuf/wrappers.js';
import { Empty } from '../../../google/protobuf/empty.js';
interface Rpc {
    request(service: string, method: string, contentType: 'application/json' | 'application/protobuf', data: object | Uint8Array): Promise<object | Uint8Array>;
}
export interface RedisAPIClient {
    Get(request: KeyRequest): Promise<StringValue>;
    Set(request: SetRequest): Promise<StringValue>;
    Del(request: KeysRequest): Promise<Int64Value>;
    Type(request: KeyRequest): Promise<StringValue>;
    IncrBy(request: IncrByRequest): Promise<Int64Value>;
    HSet(request: HSetRequest): Promise<Int64Value>;
    HGet(request: HGetRequest): Promise<StringValue>;
    HGetAll(request: KeyRequest): Promise<RedisFieldValues>;
    HDel(request: HDelRequest): Promise<Int64Value>;
    HScan(request: HScanRequest): Promise<HScanResponse>;
    HKeys(request: KeyRequest): Promise<KeysResponse>;
    HIncrBy(request: HIncrByRequest): Promise<Int64Value>;
    HLen(request: KeyRequest): Promise<Int64Value>;
    Multi(request: TransactionId): Promise<Empty>;
    Exec(request: TransactionId): Promise<TransactionResponses>;
    Discard(request: TransactionId): Promise<Empty>;
    Watch(request: WatchRequest): Promise<TransactionId>;
    Unwatch(request: TransactionId): Promise<Empty>;
    GetRange(request: KeyRangeRequest): Promise<StringValue>;
    SetRange(request: SetRangeRequest): Promise<Int64Value>;
    Strlen(request: KeyRequest): Promise<Int64Value>;
    MGet(request: KeysRequest): Promise<RedisValues>;
    MSet(request: KeyValuesRequest): Promise<Empty>;
    Expire(request: ExpireRequest): Promise<Empty>;
    ExpireTime(request: KeyRequest): Promise<Int64Value>;
    ZAdd(request: ZAddRequest): Promise<Int64Value>;
    ZCard(request: KeyRequest): Promise<Int64Value>;
    ZRange(request: ZRangeRequest): Promise<ZMembers>;
    ZRem(request: ZRemRequest): Promise<Int64Value>;
    ZRemRangeByLex(request: ZRemRangeByLexRequest): Promise<Int64Value>;
    ZRemRangeByRank(request: ZRemRangeByRankRequest): Promise<Int64Value>;
    ZRemRangeByScore(request: ZRemRangeByScoreRequest): Promise<Int64Value>;
    ZScore(request: ZScoreRequest): Promise<DoubleValue>;
    ZRank(request: ZRankRequest): Promise<Int64Value>;
    ZIncrBy(request: ZIncrByRequest): Promise<DoubleValue>;
    ZScan(request: ZScanRequest): Promise<ZScanResponse>;
}
export declare class RedisAPIClientJSON implements RedisAPIClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    Get(request: KeyRequest): Promise<StringValue>;
    Set(request: SetRequest): Promise<StringValue>;
    Del(request: KeysRequest): Promise<Int64Value>;
    Type(request: KeyRequest): Promise<StringValue>;
    IncrBy(request: IncrByRequest): Promise<Int64Value>;
    HSet(request: HSetRequest): Promise<Int64Value>;
    HGet(request: HGetRequest): Promise<StringValue>;
    HGetAll(request: KeyRequest): Promise<RedisFieldValues>;
    HDel(request: HDelRequest): Promise<Int64Value>;
    HScan(request: HScanRequest): Promise<HScanResponse>;
    HKeys(request: KeyRequest): Promise<KeysResponse>;
    HIncrBy(request: HIncrByRequest): Promise<Int64Value>;
    HLen(request: KeyRequest): Promise<Int64Value>;
    Multi(request: TransactionId): Promise<Empty>;
    Exec(request: TransactionId): Promise<TransactionResponses>;
    Discard(request: TransactionId): Promise<Empty>;
    Watch(request: WatchRequest): Promise<TransactionId>;
    Unwatch(request: TransactionId): Promise<Empty>;
    GetRange(request: KeyRangeRequest): Promise<StringValue>;
    SetRange(request: SetRangeRequest): Promise<Int64Value>;
    Strlen(request: KeyRequest): Promise<Int64Value>;
    MGet(request: KeysRequest): Promise<RedisValues>;
    MSet(request: KeyValuesRequest): Promise<Empty>;
    Expire(request: ExpireRequest): Promise<Empty>;
    ExpireTime(request: KeyRequest): Promise<Int64Value>;
    ZAdd(request: ZAddRequest): Promise<Int64Value>;
    ZCard(request: KeyRequest): Promise<Int64Value>;
    ZRange(request: ZRangeRequest): Promise<ZMembers>;
    ZRem(request: ZRemRequest): Promise<Int64Value>;
    ZRemRangeByLex(request: ZRemRangeByLexRequest): Promise<Int64Value>;
    ZRemRangeByRank(request: ZRemRangeByRankRequest): Promise<Int64Value>;
    ZRemRangeByScore(request: ZRemRangeByScoreRequest): Promise<Int64Value>;
    ZScore(request: ZScoreRequest): Promise<DoubleValue>;
    ZRank(request: ZRankRequest): Promise<Int64Value>;
    ZIncrBy(request: ZIncrByRequest): Promise<DoubleValue>;
    ZScan(request: ZScanRequest): Promise<ZScanResponse>;
}
export declare class RedisAPIClientProtobuf implements RedisAPIClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    Get(request: KeyRequest): Promise<StringValue>;
    Set(request: SetRequest): Promise<StringValue>;
    Del(request: KeysRequest): Promise<Int64Value>;
    Type(request: KeyRequest): Promise<StringValue>;
    IncrBy(request: IncrByRequest): Promise<Int64Value>;
    HSet(request: HSetRequest): Promise<Int64Value>;
    HGet(request: HGetRequest): Promise<StringValue>;
    HGetAll(request: KeyRequest): Promise<RedisFieldValues>;
    HDel(request: HDelRequest): Promise<Int64Value>;
    HScan(request: HScanRequest): Promise<HScanResponse>;
    HKeys(request: KeyRequest): Promise<KeysResponse>;
    HIncrBy(request: HIncrByRequest): Promise<Int64Value>;
    HLen(request: KeyRequest): Promise<Int64Value>;
    Multi(request: TransactionId): Promise<Empty>;
    Exec(request: TransactionId): Promise<TransactionResponses>;
    Discard(request: TransactionId): Promise<Empty>;
    Watch(request: WatchRequest): Promise<TransactionId>;
    Unwatch(request: TransactionId): Promise<Empty>;
    GetRange(request: KeyRangeRequest): Promise<StringValue>;
    SetRange(request: SetRangeRequest): Promise<Int64Value>;
    Strlen(request: KeyRequest): Promise<Int64Value>;
    MGet(request: KeysRequest): Promise<RedisValues>;
    MSet(request: KeyValuesRequest): Promise<Empty>;
    Expire(request: ExpireRequest): Promise<Empty>;
    ExpireTime(request: KeyRequest): Promise<Int64Value>;
    ZAdd(request: ZAddRequest): Promise<Int64Value>;
    ZCard(request: KeyRequest): Promise<Int64Value>;
    ZRange(request: ZRangeRequest): Promise<ZMembers>;
    ZRem(request: ZRemRequest): Promise<Int64Value>;
    ZRemRangeByLex(request: ZRemRangeByLexRequest): Promise<Int64Value>;
    ZRemRangeByRank(request: ZRemRangeByRankRequest): Promise<Int64Value>;
    ZRemRangeByScore(request: ZRemRangeByScoreRequest): Promise<Int64Value>;
    ZScore(request: ZScoreRequest): Promise<DoubleValue>;
    ZRank(request: ZRankRequest): Promise<Int64Value>;
    ZIncrBy(request: ZIncrByRequest): Promise<DoubleValue>;
    ZScan(request: ZScanRequest): Promise<ZScanResponse>;
}
export {};
//# sourceMappingURL=redisapi.twirp-client.d.ts.map