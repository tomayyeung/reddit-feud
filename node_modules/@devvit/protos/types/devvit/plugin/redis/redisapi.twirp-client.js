import { KeyRequest, SetRequest, KeysRequest, IncrByRequest, HSetRequest, HGetRequest, RedisFieldValues, HDelRequest, HScanRequest, HScanResponse, KeysResponse, HIncrByRequest, TransactionId, TransactionResponses, WatchRequest, KeyRangeRequest, SetRangeRequest, RedisValues, KeyValuesRequest, ExpireRequest, ZAddRequest, ZRangeRequest, ZMembers, ZRemRequest, ZRemRangeByLexRequest, ZRemRangeByRankRequest, ZRemRangeByScoreRequest, ZScoreRequest, ZRankRequest, ZIncrByRequest, ZScanRequest, ZScanResponse, } from './redisapi.js';
import { StringValue, Int64Value, DoubleValue, } from '../../../google/protobuf/wrappers.js';
import { Empty } from '../../../google/protobuf/empty.js';
export class RedisAPIClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.Get.bind(this);
        this.Set.bind(this);
        this.Del.bind(this);
        this.Type.bind(this);
        this.IncrBy.bind(this);
        this.HSet.bind(this);
        this.HGet.bind(this);
        this.HGetAll.bind(this);
        this.HDel.bind(this);
        this.HScan.bind(this);
        this.HKeys.bind(this);
        this.HIncrBy.bind(this);
        this.HLen.bind(this);
        this.Multi.bind(this);
        this.Exec.bind(this);
        this.Discard.bind(this);
        this.Watch.bind(this);
        this.Unwatch.bind(this);
        this.GetRange.bind(this);
        this.SetRange.bind(this);
        this.Strlen.bind(this);
        this.MGet.bind(this);
        this.MSet.bind(this);
        this.Expire.bind(this);
        this.ExpireTime.bind(this);
        this.ZAdd.bind(this);
        this.ZCard.bind(this);
        this.ZRange.bind(this);
        this.ZRem.bind(this);
        this.ZRemRangeByLex.bind(this);
        this.ZRemRangeByRank.bind(this);
        this.ZRemRangeByScore.bind(this);
        this.ZScore.bind(this);
        this.ZRank.bind(this);
        this.ZIncrBy.bind(this);
        this.ZScan.bind(this);
    }
    Get(request) {
        const data = KeyRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'Get', 'application/json', data);
        return promise.then((data) => StringValue.fromJSON(data));
    }
    Set(request) {
        const data = SetRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'Set', 'application/json', data);
        return promise.then((data) => StringValue.fromJSON(data));
    }
    Del(request) {
        const data = KeysRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'Del', 'application/json', data);
        return promise.then((data) => Int64Value.fromJSON(data));
    }
    Type(request) {
        const data = KeyRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'Type', 'application/json', data);
        return promise.then((data) => StringValue.fromJSON(data));
    }
    IncrBy(request) {
        const data = IncrByRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'IncrBy', 'application/json', data);
        return promise.then((data) => Int64Value.fromJSON(data));
    }
    HSet(request) {
        const data = HSetRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'HSet', 'application/json', data);
        return promise.then((data) => Int64Value.fromJSON(data));
    }
    HGet(request) {
        const data = HGetRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'HGet', 'application/json', data);
        return promise.then((data) => StringValue.fromJSON(data));
    }
    HGetAll(request) {
        const data = KeyRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'HGetAll', 'application/json', data);
        return promise.then((data) => RedisFieldValues.fromJSON(data));
    }
    HDel(request) {
        const data = HDelRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'HDel', 'application/json', data);
        return promise.then((data) => Int64Value.fromJSON(data));
    }
    HScan(request) {
        const data = HScanRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'HScan', 'application/json', data);
        return promise.then((data) => HScanResponse.fromJSON(data));
    }
    HKeys(request) {
        const data = KeyRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'HKeys', 'application/json', data);
        return promise.then((data) => KeysResponse.fromJSON(data));
    }
    HIncrBy(request) {
        const data = HIncrByRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'HIncrBy', 'application/json', data);
        return promise.then((data) => Int64Value.fromJSON(data));
    }
    HLen(request) {
        const data = KeyRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'HLen', 'application/json', data);
        return promise.then((data) => Int64Value.fromJSON(data));
    }
    Multi(request) {
        const data = TransactionId.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'Multi', 'application/json', data);
        return promise.then((data) => Empty.fromJSON(data));
    }
    Exec(request) {
        const data = TransactionId.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'Exec', 'application/json', data);
        return promise.then((data) => TransactionResponses.fromJSON(data));
    }
    Discard(request) {
        const data = TransactionId.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'Discard', 'application/json', data);
        return promise.then((data) => Empty.fromJSON(data));
    }
    Watch(request) {
        const data = WatchRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'Watch', 'application/json', data);
        return promise.then((data) => TransactionId.fromJSON(data));
    }
    Unwatch(request) {
        const data = TransactionId.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'Unwatch', 'application/json', data);
        return promise.then((data) => Empty.fromJSON(data));
    }
    GetRange(request) {
        const data = KeyRangeRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'GetRange', 'application/json', data);
        return promise.then((data) => StringValue.fromJSON(data));
    }
    SetRange(request) {
        const data = SetRangeRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'SetRange', 'application/json', data);
        return promise.then((data) => Int64Value.fromJSON(data));
    }
    Strlen(request) {
        const data = KeyRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'Strlen', 'application/json', data);
        return promise.then((data) => Int64Value.fromJSON(data));
    }
    MGet(request) {
        const data = KeysRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'MGet', 'application/json', data);
        return promise.then((data) => RedisValues.fromJSON(data));
    }
    MSet(request) {
        const data = KeyValuesRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'MSet', 'application/json', data);
        return promise.then((data) => Empty.fromJSON(data));
    }
    Expire(request) {
        const data = ExpireRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'Expire', 'application/json', data);
        return promise.then((data) => Empty.fromJSON(data));
    }
    ExpireTime(request) {
        const data = KeyRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'ExpireTime', 'application/json', data);
        return promise.then((data) => Int64Value.fromJSON(data));
    }
    ZAdd(request) {
        const data = ZAddRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'ZAdd', 'application/json', data);
        return promise.then((data) => Int64Value.fromJSON(data));
    }
    ZCard(request) {
        const data = KeyRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'ZCard', 'application/json', data);
        return promise.then((data) => Int64Value.fromJSON(data));
    }
    ZRange(request) {
        const data = ZRangeRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'ZRange', 'application/json', data);
        return promise.then((data) => ZMembers.fromJSON(data));
    }
    ZRem(request) {
        const data = ZRemRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'ZRem', 'application/json', data);
        return promise.then((data) => Int64Value.fromJSON(data));
    }
    ZRemRangeByLex(request) {
        const data = ZRemRangeByLexRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'ZRemRangeByLex', 'application/json', data);
        return promise.then((data) => Int64Value.fromJSON(data));
    }
    ZRemRangeByRank(request) {
        const data = ZRemRangeByRankRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'ZRemRangeByRank', 'application/json', data);
        return promise.then((data) => Int64Value.fromJSON(data));
    }
    ZRemRangeByScore(request) {
        const data = ZRemRangeByScoreRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'ZRemRangeByScore', 'application/json', data);
        return promise.then((data) => Int64Value.fromJSON(data));
    }
    ZScore(request) {
        const data = ZScoreRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'ZScore', 'application/json', data);
        return promise.then((data) => DoubleValue.fromJSON(data));
    }
    ZRank(request) {
        const data = ZRankRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'ZRank', 'application/json', data);
        return promise.then((data) => Int64Value.fromJSON(data));
    }
    ZIncrBy(request) {
        const data = ZIncrByRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'ZIncrBy', 'application/json', data);
        return promise.then((data) => DoubleValue.fromJSON(data));
    }
    ZScan(request) {
        const data = ZScanRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'ZScan', 'application/json', data);
        return promise.then((data) => ZScanResponse.fromJSON(data));
    }
}
export class RedisAPIClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.Get.bind(this);
        this.Set.bind(this);
        this.Del.bind(this);
        this.Type.bind(this);
        this.IncrBy.bind(this);
        this.HSet.bind(this);
        this.HGet.bind(this);
        this.HGetAll.bind(this);
        this.HDel.bind(this);
        this.HScan.bind(this);
        this.HKeys.bind(this);
        this.HIncrBy.bind(this);
        this.HLen.bind(this);
        this.Multi.bind(this);
        this.Exec.bind(this);
        this.Discard.bind(this);
        this.Watch.bind(this);
        this.Unwatch.bind(this);
        this.GetRange.bind(this);
        this.SetRange.bind(this);
        this.Strlen.bind(this);
        this.MGet.bind(this);
        this.MSet.bind(this);
        this.Expire.bind(this);
        this.ExpireTime.bind(this);
        this.ZAdd.bind(this);
        this.ZCard.bind(this);
        this.ZRange.bind(this);
        this.ZRem.bind(this);
        this.ZRemRangeByLex.bind(this);
        this.ZRemRangeByRank.bind(this);
        this.ZRemRangeByScore.bind(this);
        this.ZScore.bind(this);
        this.ZRank.bind(this);
        this.ZIncrBy.bind(this);
        this.ZScan.bind(this);
    }
    Get(request) {
        const data = KeyRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'Get', 'application/protobuf', data);
        return promise.then((data) => StringValue.decode(data));
    }
    Set(request) {
        const data = SetRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'Set', 'application/protobuf', data);
        return promise.then((data) => StringValue.decode(data));
    }
    Del(request) {
        const data = KeysRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'Del', 'application/protobuf', data);
        return promise.then((data) => Int64Value.decode(data));
    }
    Type(request) {
        const data = KeyRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'Type', 'application/protobuf', data);
        return promise.then((data) => StringValue.decode(data));
    }
    IncrBy(request) {
        const data = IncrByRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'IncrBy', 'application/protobuf', data);
        return promise.then((data) => Int64Value.decode(data));
    }
    HSet(request) {
        const data = HSetRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'HSet', 'application/protobuf', data);
        return promise.then((data) => Int64Value.decode(data));
    }
    HGet(request) {
        const data = HGetRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'HGet', 'application/protobuf', data);
        return promise.then((data) => StringValue.decode(data));
    }
    HGetAll(request) {
        const data = KeyRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'HGetAll', 'application/protobuf', data);
        return promise.then((data) => RedisFieldValues.decode(data));
    }
    HDel(request) {
        const data = HDelRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'HDel', 'application/protobuf', data);
        return promise.then((data) => Int64Value.decode(data));
    }
    HScan(request) {
        const data = HScanRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'HScan', 'application/protobuf', data);
        return promise.then((data) => HScanResponse.decode(data));
    }
    HKeys(request) {
        const data = KeyRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'HKeys', 'application/protobuf', data);
        return promise.then((data) => KeysResponse.decode(data));
    }
    HIncrBy(request) {
        const data = HIncrByRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'HIncrBy', 'application/protobuf', data);
        return promise.then((data) => Int64Value.decode(data));
    }
    HLen(request) {
        const data = KeyRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'HLen', 'application/protobuf', data);
        return promise.then((data) => Int64Value.decode(data));
    }
    Multi(request) {
        const data = TransactionId.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'Multi', 'application/protobuf', data);
        return promise.then((data) => Empty.decode(data));
    }
    Exec(request) {
        const data = TransactionId.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'Exec', 'application/protobuf', data);
        return promise.then((data) => TransactionResponses.decode(data));
    }
    Discard(request) {
        const data = TransactionId.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'Discard', 'application/protobuf', data);
        return promise.then((data) => Empty.decode(data));
    }
    Watch(request) {
        const data = WatchRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'Watch', 'application/protobuf', data);
        return promise.then((data) => TransactionId.decode(data));
    }
    Unwatch(request) {
        const data = TransactionId.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'Unwatch', 'application/protobuf', data);
        return promise.then((data) => Empty.decode(data));
    }
    GetRange(request) {
        const data = KeyRangeRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'GetRange', 'application/protobuf', data);
        return promise.then((data) => StringValue.decode(data));
    }
    SetRange(request) {
        const data = SetRangeRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'SetRange', 'application/protobuf', data);
        return promise.then((data) => Int64Value.decode(data));
    }
    Strlen(request) {
        const data = KeyRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'Strlen', 'application/protobuf', data);
        return promise.then((data) => Int64Value.decode(data));
    }
    MGet(request) {
        const data = KeysRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'MGet', 'application/protobuf', data);
        return promise.then((data) => RedisValues.decode(data));
    }
    MSet(request) {
        const data = KeyValuesRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'MSet', 'application/protobuf', data);
        return promise.then((data) => Empty.decode(data));
    }
    Expire(request) {
        const data = ExpireRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'Expire', 'application/protobuf', data);
        return promise.then((data) => Empty.decode(data));
    }
    ExpireTime(request) {
        const data = KeyRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'ExpireTime', 'application/protobuf', data);
        return promise.then((data) => Int64Value.decode(data));
    }
    ZAdd(request) {
        const data = ZAddRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'ZAdd', 'application/protobuf', data);
        return promise.then((data) => Int64Value.decode(data));
    }
    ZCard(request) {
        const data = KeyRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'ZCard', 'application/protobuf', data);
        return promise.then((data) => Int64Value.decode(data));
    }
    ZRange(request) {
        const data = ZRangeRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'ZRange', 'application/protobuf', data);
        return promise.then((data) => ZMembers.decode(data));
    }
    ZRem(request) {
        const data = ZRemRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'ZRem', 'application/protobuf', data);
        return promise.then((data) => Int64Value.decode(data));
    }
    ZRemRangeByLex(request) {
        const data = ZRemRangeByLexRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'ZRemRangeByLex', 'application/protobuf', data);
        return promise.then((data) => Int64Value.decode(data));
    }
    ZRemRangeByRank(request) {
        const data = ZRemRangeByRankRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'ZRemRangeByRank', 'application/protobuf', data);
        return promise.then((data) => Int64Value.decode(data));
    }
    ZRemRangeByScore(request) {
        const data = ZRemRangeByScoreRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'ZRemRangeByScore', 'application/protobuf', data);
        return promise.then((data) => Int64Value.decode(data));
    }
    ZScore(request) {
        const data = ZScoreRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'ZScore', 'application/protobuf', data);
        return promise.then((data) => DoubleValue.decode(data));
    }
    ZRank(request) {
        const data = ZRankRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'ZRank', 'application/protobuf', data);
        return promise.then((data) => Int64Value.decode(data));
    }
    ZIncrBy(request) {
        const data = ZIncrByRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'ZIncrBy', 'application/protobuf', data);
        return promise.then((data) => DoubleValue.decode(data));
    }
    ZScan(request) {
        const data = ZScanRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.redis.RedisAPI', 'ZScan', 'application/protobuf', data);
        return promise.then((data) => ZScanResponse.decode(data));
    }
}
