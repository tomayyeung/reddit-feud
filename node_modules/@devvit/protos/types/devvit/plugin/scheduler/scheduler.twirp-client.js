import { ScheduledActionRequest, ScheduledActionResponse, CancelActionRequest, ListActionRequest, ListActionResponse, } from './scheduler.js';
import { Empty } from '../../../google/protobuf/empty.js';
export class SchedulerClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.Schedule.bind(this);
        this.Cancel.bind(this);
        this.List.bind(this);
    }
    Schedule(request) {
        const data = ScheduledActionRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.scheduler.Scheduler', 'Schedule', 'application/json', data);
        return promise.then((data) => ScheduledActionResponse.fromJSON(data));
    }
    Cancel(request) {
        const data = CancelActionRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.scheduler.Scheduler', 'Cancel', 'application/json', data);
        return promise.then((data) => Empty.fromJSON(data));
    }
    List(request) {
        const data = ListActionRequest.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.scheduler.Scheduler', 'List', 'application/json', data);
        return promise.then((data) => ListActionResponse.fromJSON(data));
    }
}
export class SchedulerClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.Schedule.bind(this);
        this.Cancel.bind(this);
        this.List.bind(this);
    }
    Schedule(request) {
        const data = ScheduledActionRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.scheduler.Scheduler', 'Schedule', 'application/protobuf', data);
        return promise.then((data) => ScheduledActionResponse.decode(data));
    }
    Cancel(request) {
        const data = CancelActionRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.scheduler.Scheduler', 'Cancel', 'application/protobuf', data);
        return promise.then((data) => Empty.decode(data));
    }
    List(request) {
        const data = ListActionRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.scheduler.Scheduler', 'List', 'application/protobuf', data);
        return promise.then((data) => ListActionResponse.decode(data));
    }
}
