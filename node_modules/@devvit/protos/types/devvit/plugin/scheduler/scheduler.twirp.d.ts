/// <reference types="node" resolution-mode="require"/>
import { TwirpContext, TwirpServer } from 'twirp-ts';
import { ScheduledActionRequest, ScheduledActionResponse, CancelActionRequest, ListActionRequest, ListActionResponse } from './scheduler.js';
import { Empty } from '../../../google/protobuf/empty.js';
export interface SchedulerTwirp<T extends TwirpContext = TwirpContext> {
    Schedule(ctx: T, request: ScheduledActionRequest): Promise<ScheduledActionResponse>;
    Cancel(ctx: T, request: CancelActionRequest): Promise<Empty>;
    List(ctx: T, request: ListActionRequest): Promise<ListActionResponse>;
}
export declare enum SchedulerMethod {
    Schedule = "Schedule",
    Cancel = "Cancel",
    List = "List"
}
export declare const SchedulerMethodList: SchedulerMethod[];
export declare function createSchedulerServer<T extends TwirpContext = TwirpContext>(service: SchedulerTwirp<T>): TwirpServer<SchedulerTwirp<TwirpContext<import("http").IncomingMessage, import("http").ServerResponse<import("http").IncomingMessage>>>, T>;
//# sourceMappingURL=scheduler.twirp.d.ts.map