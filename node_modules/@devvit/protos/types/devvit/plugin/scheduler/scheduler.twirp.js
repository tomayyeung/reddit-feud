import { TwirpServer, TwirpError, TwirpErrorCode, TwirpContentType, chainInterceptors, } from 'twirp-ts';
import { ScheduledActionRequest, ScheduledActionResponse, CancelActionRequest, ListActionRequest, ListActionResponse, } from './scheduler.js';
import { Empty } from '../../../google/protobuf/empty.js';
export var SchedulerMethod;
(function (SchedulerMethod) {
    SchedulerMethod["Schedule"] = "Schedule";
    SchedulerMethod["Cancel"] = "Cancel";
    SchedulerMethod["List"] = "List";
})(SchedulerMethod || (SchedulerMethod = {}));
export const SchedulerMethodList = [
    SchedulerMethod.Schedule,
    SchedulerMethod.Cancel,
    SchedulerMethod.List,
];
export function createSchedulerServer(service) {
    return new TwirpServer({
        service,
        packageName: 'devvit.plugin.scheduler',
        serviceName: 'Scheduler',
        methodList: SchedulerMethodList,
        matchRoute: matchSchedulerRoute,
    });
}
function matchSchedulerRoute(method, events) {
    switch (method) {
        case 'Schedule':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'Schedule' };
                await events.onMatch(ctx);
                return handleSchedulerScheduleRequest(ctx, service, data, interceptors);
            };
        case 'Cancel':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'Cancel' };
                await events.onMatch(ctx);
                return handleSchedulerCancelRequest(ctx, service, data, interceptors);
            };
        case 'List':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'List' };
                await events.onMatch(ctx);
                return handleSchedulerListRequest(ctx, service, data, interceptors);
            };
        default:
            events.onNotFound();
            const msg = `no handler found`;
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleSchedulerScheduleRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleSchedulerScheduleJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleSchedulerScheduleProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleSchedulerCancelRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleSchedulerCancelJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleSchedulerCancelProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleSchedulerListRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleSchedulerListJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleSchedulerListProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
async function handleSchedulerScheduleJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = ScheduledActionRequest.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.Schedule(ctx, inputReq);
        });
    }
    else {
        response = await service.Schedule(ctx, request);
    }
    return JSON.stringify(ScheduledActionResponse.toJSON(response));
}
async function handleSchedulerCancelJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = CancelActionRequest.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.Cancel(ctx, inputReq);
        });
    }
    else {
        response = await service.Cancel(ctx, request);
    }
    return JSON.stringify(Empty.toJSON(response));
}
async function handleSchedulerListJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = ListActionRequest.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.List(ctx, inputReq);
        });
    }
    else {
        response = await service.List(ctx, request);
    }
    return JSON.stringify(ListActionResponse.toJSON(response));
}
async function handleSchedulerScheduleProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = ScheduledActionRequest.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.Schedule(ctx, inputReq);
        });
    }
    else {
        response = await service.Schedule(ctx, request);
    }
    return Buffer.from(ScheduledActionResponse.encode(response).finish());
}
async function handleSchedulerCancelProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = CancelActionRequest.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.Cancel(ctx, inputReq);
        });
    }
    else {
        response = await service.Cancel(ctx, request);
    }
    return Buffer.from(Empty.encode(response).finish());
}
async function handleSchedulerListProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = ListActionRequest.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.List(ctx, inputReq);
        });
    }
    else {
        response = await service.List(ctx, request);
    }
    return Buffer.from(ListActionResponse.encode(response).finish());
}
