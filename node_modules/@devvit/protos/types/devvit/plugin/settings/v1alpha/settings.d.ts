/**
 * #settings.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { Metadata } from "../../../../../lib/Types.js";
import { FormFieldValue } from "../../../ui/form_builder/v1alpha/value.js";
export interface SettingsValues {
    /** a unique identifier for this version of the settings */
    version: string;
    /** A map of the settings values, field_id:value */
    settings: {
        [key: string]: FormFieldValue;
    };
    /** timestamp of when settings were modified */
    timestamp?: Date | undefined;
}
export interface SettingsValues_SettingsEntry {
    key: string;
    value?: FormFieldValue | undefined;
}
export interface SettingsRequest {
}
export interface SettingsResponse {
    /** Defined via InstallationSettings interface; the values of the settings */
    installationSettings?: SettingsValues | undefined;
    /** Defined via InstanceSettings interface; the values of the settings */
    instanceSettings?: SettingsValues | undefined;
    /** Defined via AppSettings interface; the values of the settings */
    appSettings?: SettingsValues | undefined;
}
export declare const SettingsValues: {
    $type: "devvit.plugin.settings.v1alpha.SettingsValues";
    encode(message: SettingsValues, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SettingsValues;
    fromJSON(object: any): SettingsValues;
    toJSON(message: SettingsValues): unknown;
    create(base?: DeepPartial<SettingsValues>): SettingsValues;
    fromPartial(object: DeepPartial<SettingsValues>): SettingsValues;
};
export declare const SettingsValues_SettingsEntry: {
    $type: "devvit.plugin.settings.v1alpha.SettingsValues.SettingsEntry";
    encode(message: SettingsValues_SettingsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SettingsValues_SettingsEntry;
    fromJSON(object: any): SettingsValues_SettingsEntry;
    toJSON(message: SettingsValues_SettingsEntry): unknown;
    create(base?: DeepPartial<SettingsValues_SettingsEntry>): SettingsValues_SettingsEntry;
    fromPartial(object: DeepPartial<SettingsValues_SettingsEntry>): SettingsValues_SettingsEntry;
};
export declare const SettingsRequest: {
    $type: "devvit.plugin.settings.v1alpha.SettingsRequest";
    encode(_: SettingsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SettingsRequest;
    fromJSON(_: any): SettingsRequest;
    toJSON(_: SettingsRequest): unknown;
    create(base?: DeepPartial<SettingsRequest>): SettingsRequest;
    fromPartial(_: DeepPartial<SettingsRequest>): SettingsRequest;
};
export declare const SettingsResponse: {
    $type: "devvit.plugin.settings.v1alpha.SettingsResponse";
    encode(message: SettingsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SettingsResponse;
    fromJSON(object: any): SettingsResponse;
    toJSON(message: SettingsResponse): unknown;
    create(base?: DeepPartial<SettingsResponse>): SettingsResponse;
    fromPartial(object: DeepPartial<SettingsResponse>): SettingsResponse;
};
export interface Settings {
    /** Returns the installation and instance settings */
    GetSettings(request: SettingsRequest, metadata?: Metadata): Promise<SettingsResponse>;
}
export declare const SettingsServiceName = "devvit.plugin.settings.v1alpha.Settings";
export declare class SettingsClientImpl implements Settings {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    GetSettings(request: SettingsRequest, metadata?: Metadata): Promise<SettingsResponse>;
}
export type SettingsDefinition = typeof SettingsDefinition;
export declare const SettingsDefinition: {
    readonly name: "Settings";
    readonly fullName: "devvit.plugin.settings.v1alpha.Settings";
    readonly methods: {
        /** Returns the installation and instance settings */
        readonly getSettings: {
            readonly name: "GetSettings";
            readonly requestType: {
                $type: "devvit.plugin.settings.v1alpha.SettingsRequest";
                encode(_: SettingsRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): SettingsRequest;
                fromJSON(_: any): SettingsRequest;
                toJSON(_: SettingsRequest): unknown;
                create(base?: DeepPartial<SettingsRequest>): SettingsRequest;
                fromPartial(_: DeepPartial<SettingsRequest>): SettingsRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.plugin.settings.v1alpha.SettingsResponse";
                encode(message: SettingsResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): SettingsResponse;
                fromJSON(object: any): SettingsResponse;
                toJSON(message: SettingsResponse): unknown;
                create(base?: DeepPartial<SettingsResponse>): SettingsResponse;
                fromPartial(object: DeepPartial<SettingsResponse>): SettingsResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array, metadata?: Metadata): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=settings.d.ts.map