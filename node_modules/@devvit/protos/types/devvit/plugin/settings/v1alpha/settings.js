/**
 * #settings.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { Timestamp } from "../../../../google/protobuf/timestamp.js";
import { messageTypeRegistry } from "../../../../typeRegistry.js";
import { FormFieldValue } from "../../../ui/form_builder/v1alpha/value.js";
function createBaseSettingsValues() {
    return { version: "", settings: {}, timestamp: undefined };
}
export const SettingsValues = {
    $type: "devvit.plugin.settings.v1alpha.SettingsValues",
    encode(message, writer = _m0.Writer.create()) {
        if (message.version !== "") {
            writer.uint32(10).string(message.version);
        }
        Object.entries(message.settings).forEach(([key, value]) => {
            SettingsValues_SettingsEntry.encode({ key: key, value }, writer.uint32(18).fork()).ldelim();
        });
        if (message.timestamp !== undefined) {
            Timestamp.encode(toTimestamp(message.timestamp), writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSettingsValues();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.version = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    const entry2 = SettingsValues_SettingsEntry.decode(reader, reader.uint32());
                    if (entry2.value !== undefined) {
                        message.settings[entry2.key] = entry2.value;
                    }
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.timestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            version: isSet(object.version) ? globalThis.String(object.version) : "",
            settings: isObject(object.settings)
                ? Object.entries(object.settings).reduce((acc, [key, value]) => {
                    acc[key] = FormFieldValue.fromJSON(value);
                    return acc;
                }, {})
                : {},
            timestamp: isSet(object.timestamp) ? fromJsonTimestamp(object.timestamp) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.version !== "") {
            obj.version = message.version;
        }
        if (message.settings) {
            const entries = Object.entries(message.settings);
            if (entries.length > 0) {
                obj.settings = {};
                entries.forEach(([k, v]) => {
                    obj.settings[k] = FormFieldValue.toJSON(v);
                });
            }
        }
        if (message.timestamp !== undefined) {
            obj.timestamp = message.timestamp.toISOString();
        }
        return obj;
    },
    create(base) {
        return SettingsValues.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSettingsValues();
        message.version = object.version ?? "";
        message.settings = Object.entries(object.settings ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = FormFieldValue.fromPartial(value);
            }
            return acc;
        }, {});
        message.timestamp = object.timestamp ?? undefined;
        return message;
    },
};
messageTypeRegistry.set(SettingsValues.$type, SettingsValues);
function createBaseSettingsValues_SettingsEntry() {
    return { key: "", value: undefined };
}
export const SettingsValues_SettingsEntry = {
    $type: "devvit.plugin.settings.v1alpha.SettingsValues.SettingsEntry",
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            FormFieldValue.encode(message.value, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSettingsValues_SettingsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = FormFieldValue.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? FormFieldValue.fromJSON(object.value) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== undefined) {
            obj.value = FormFieldValue.toJSON(message.value);
        }
        return obj;
    },
    create(base) {
        return SettingsValues_SettingsEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSettingsValues_SettingsEntry();
        message.key = object.key ?? "";
        message.value = (object.value !== undefined && object.value !== null)
            ? FormFieldValue.fromPartial(object.value)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set(SettingsValues_SettingsEntry.$type, SettingsValues_SettingsEntry);
function createBaseSettingsRequest() {
    return {};
}
export const SettingsRequest = {
    $type: "devvit.plugin.settings.v1alpha.SettingsRequest",
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSettingsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return SettingsRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseSettingsRequest();
        return message;
    },
};
messageTypeRegistry.set(SettingsRequest.$type, SettingsRequest);
function createBaseSettingsResponse() {
    return { installationSettings: undefined, instanceSettings: undefined, appSettings: undefined };
}
export const SettingsResponse = {
    $type: "devvit.plugin.settings.v1alpha.SettingsResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.installationSettings !== undefined) {
            SettingsValues.encode(message.installationSettings, writer.uint32(10).fork()).ldelim();
        }
        if (message.instanceSettings !== undefined) {
            SettingsValues.encode(message.instanceSettings, writer.uint32(18).fork()).ldelim();
        }
        if (message.appSettings !== undefined) {
            SettingsValues.encode(message.appSettings, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSettingsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.installationSettings = SettingsValues.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.instanceSettings = SettingsValues.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.appSettings = SettingsValues.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            installationSettings: isSet(object.installationSettings)
                ? SettingsValues.fromJSON(object.installationSettings)
                : undefined,
            instanceSettings: isSet(object.instanceSettings) ? SettingsValues.fromJSON(object.instanceSettings) : undefined,
            appSettings: isSet(object.appSettings) ? SettingsValues.fromJSON(object.appSettings) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.installationSettings !== undefined) {
            obj.installationSettings = SettingsValues.toJSON(message.installationSettings);
        }
        if (message.instanceSettings !== undefined) {
            obj.instanceSettings = SettingsValues.toJSON(message.instanceSettings);
        }
        if (message.appSettings !== undefined) {
            obj.appSettings = SettingsValues.toJSON(message.appSettings);
        }
        return obj;
    },
    create(base) {
        return SettingsResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSettingsResponse();
        message.installationSettings = (object.installationSettings !== undefined && object.installationSettings !== null)
            ? SettingsValues.fromPartial(object.installationSettings)
            : undefined;
        message.instanceSettings = (object.instanceSettings !== undefined && object.instanceSettings !== null)
            ? SettingsValues.fromPartial(object.instanceSettings)
            : undefined;
        message.appSettings = (object.appSettings !== undefined && object.appSettings !== null)
            ? SettingsValues.fromPartial(object.appSettings)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set(SettingsResponse.$type, SettingsResponse);
export const SettingsServiceName = "devvit.plugin.settings.v1alpha.Settings";
export class SettingsClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || SettingsServiceName;
        this.rpc = rpc;
        this.GetSettings = this.GetSettings.bind(this);
    }
    GetSettings(request, metadata) {
        const data = SettingsRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetSettings", data, metadata);
        return promise.then((data) => SettingsResponse.decode(_m0.Reader.create(data)));
    }
}
export const SettingsDefinition = {
    name: "Settings",
    fullName: "devvit.plugin.settings.v1alpha.Settings",
    methods: {
        /** Returns the installation and instance settings */
        getSettings: {
            name: "GetSettings",
            requestType: SettingsRequest,
            requestStream: false,
            responseType: SettingsResponse,
            responseStream: false,
            options: {},
        },
    },
};
function toTimestamp(date) {
    const seconds = Math.trunc(date.getTime() / 1000);
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (t.seconds || 0) * 1000;
    millis += (t.nanos || 0) / 1000000;
    return new globalThis.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof globalThis.Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new globalThis.Date(o);
    }
    else {
        return fromTimestamp(Timestamp.fromJSON(o));
    }
}
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
