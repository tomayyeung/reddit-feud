import { Message, Cursor } from './streambroker.js';
import { Empty } from '../../../google/protobuf/empty.js';
interface Rpc {
    request(service: string, method: string, contentType: 'application/json' | 'application/protobuf', data: object | Uint8Array): Promise<object | Uint8Array>;
}
export interface StreamBrokerClient {
    Put(request: Message): Promise<Empty>;
    Get(request: Cursor): Promise<Message>;
}
export declare class StreamBrokerClientJSON implements StreamBrokerClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    Put(request: Message): Promise<Empty>;
    Get(request: Cursor): Promise<Message>;
}
export declare class StreamBrokerClientProtobuf implements StreamBrokerClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    Put(request: Message): Promise<Empty>;
    Get(request: Cursor): Promise<Message>;
}
export {};
//# sourceMappingURL=streambroker.twirp-client.d.ts.map