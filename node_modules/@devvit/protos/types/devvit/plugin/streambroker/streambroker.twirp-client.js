import { Message, Cursor } from './streambroker.js';
import { Empty } from '../../../google/protobuf/empty.js';
export class StreamBrokerClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.Put.bind(this);
        this.Get.bind(this);
    }
    Put(request) {
        const data = Message.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.streambroker.StreamBroker', 'Put', 'application/json', data);
        return promise.then((data) => Empty.fromJSON(data));
    }
    Get(request) {
        const data = Cursor.toJSON(request);
        const promise = this.rpc.request('devvit.plugin.streambroker.StreamBroker', 'Get', 'application/json', data);
        return promise.then((data) => Message.fromJSON(data));
    }
}
export class StreamBrokerClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.Put.bind(this);
        this.Get.bind(this);
    }
    Put(request) {
        const data = Message.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.streambroker.StreamBroker', 'Put', 'application/protobuf', data);
        return promise.then((data) => Empty.decode(data));
    }
    Get(request) {
        const data = Cursor.encode(request).finish();
        const promise = this.rpc.request('devvit.plugin.streambroker.StreamBroker', 'Get', 'application/protobuf', data);
        return promise.then((data) => Message.decode(data));
    }
}
