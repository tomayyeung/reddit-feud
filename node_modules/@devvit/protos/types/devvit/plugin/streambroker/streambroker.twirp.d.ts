/// <reference types="node" resolution-mode="require"/>
import { TwirpContext, TwirpServer } from 'twirp-ts';
import { Message, Cursor } from './streambroker.js';
import { Empty } from '../../../google/protobuf/empty.js';
export interface StreamBrokerTwirp<T extends TwirpContext = TwirpContext> {
    Put(ctx: T, request: Message): Promise<Empty>;
    Get(ctx: T, request: Cursor): Promise<Message>;
}
export declare enum StreamBrokerMethod {
    Put = "Put",
    Get = "Get"
}
export declare const StreamBrokerMethodList: StreamBrokerMethod[];
export declare function createStreamBrokerServer<T extends TwirpContext = TwirpContext>(service: StreamBrokerTwirp<T>): TwirpServer<StreamBrokerTwirp<TwirpContext<import("http").IncomingMessage, import("http").ServerResponse<import("http").IncomingMessage>>>, T>;
//# sourceMappingURL=streambroker.twirp.d.ts.map