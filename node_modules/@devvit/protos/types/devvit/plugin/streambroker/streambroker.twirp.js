import { TwirpServer, TwirpError, TwirpErrorCode, TwirpContentType, chainInterceptors, } from 'twirp-ts';
import { Message, Cursor } from './streambroker.js';
import { Empty } from '../../../google/protobuf/empty.js';
export var StreamBrokerMethod;
(function (StreamBrokerMethod) {
    StreamBrokerMethod["Put"] = "Put";
    StreamBrokerMethod["Get"] = "Get";
})(StreamBrokerMethod || (StreamBrokerMethod = {}));
export const StreamBrokerMethodList = [
    StreamBrokerMethod.Put,
    StreamBrokerMethod.Get,
];
export function createStreamBrokerServer(service) {
    return new TwirpServer({
        service,
        packageName: 'devvit.plugin.streambroker',
        serviceName: 'StreamBroker',
        methodList: StreamBrokerMethodList,
        matchRoute: matchStreamBrokerRoute,
    });
}
function matchStreamBrokerRoute(method, events) {
    switch (method) {
        case 'Put':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'Put' };
                await events.onMatch(ctx);
                return handleStreamBrokerPutRequest(ctx, service, data, interceptors);
            };
        case 'Get':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'Get' };
                await events.onMatch(ctx);
                return handleStreamBrokerGetRequest(ctx, service, data, interceptors);
            };
        default:
            events.onNotFound();
            const msg = `no handler found`;
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleStreamBrokerPutRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleStreamBrokerPutJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleStreamBrokerPutProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleStreamBrokerGetRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleStreamBrokerGetJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleStreamBrokerGetProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
async function handleStreamBrokerPutJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = Message.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.Put(ctx, inputReq);
        });
    }
    else {
        response = await service.Put(ctx, request);
    }
    return JSON.stringify(Empty.toJSON(response));
}
async function handleStreamBrokerGetJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = Cursor.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.Get(ctx, inputReq);
        });
    }
    else {
        response = await service.Get(ctx, request);
    }
    return JSON.stringify(Message.toJSON(response));
}
async function handleStreamBrokerPutProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = Message.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.Put(ctx, inputReq);
        });
    }
    else {
        response = await service.Put(ctx, request);
    }
    return Buffer.from(Empty.encode(response).finish());
}
async function handleStreamBrokerGetProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = Cursor.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.Get(ctx, inputReq);
        });
    }
    else {
        response = await service.Get(ctx, request);
    }
    return Buffer.from(Message.encode(response).finish());
}
