/**
 * #timer.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { Metadata } from "../../../../lib/Types.js";
import { Empty } from "../../../google/protobuf/empty.js";
export interface TimerMessage {
    durationMillis: number;
}
export declare const TimerMessage: {
    $type: "devvit.plugin.timer.TimerMessage";
    encode(message: TimerMessage, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TimerMessage;
    fromJSON(object: any): TimerMessage;
    toJSON(message: TimerMessage): unknown;
    create(base?: DeepPartial<TimerMessage>): TimerMessage;
    fromPartial(object: DeepPartial<TimerMessage>): TimerMessage;
};
export interface Timer {
    Wait(request: TimerMessage, metadata?: Metadata): Promise<Empty>;
}
export declare const TimerServiceName = "devvit.plugin.timer.Timer";
export declare class TimerClientImpl implements Timer {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Wait(request: TimerMessage, metadata?: Metadata): Promise<Empty>;
}
export type TimerDefinition = typeof TimerDefinition;
export declare const TimerDefinition: {
    readonly name: "Timer";
    readonly fullName: "devvit.plugin.timer.Timer";
    readonly methods: {
        readonly wait: {
            readonly name: "Wait";
            readonly requestType: {
                $type: "devvit.plugin.timer.TimerMessage";
                encode(message: TimerMessage, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): TimerMessage;
                fromJSON(object: any): TimerMessage;
                toJSON(message: TimerMessage): unknown;
                create(base?: DeepPartial<TimerMessage>): TimerMessage;
                fromPartial(object: DeepPartial<TimerMessage>): TimerMessage;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {} | undefined): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array, metadata?: Metadata): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=timer.d.ts.map