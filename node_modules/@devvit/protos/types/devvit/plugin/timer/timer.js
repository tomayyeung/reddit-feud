/**
 * #timer.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { Empty } from "../../../google/protobuf/empty.js";
import { messageTypeRegistry } from "../../../typeRegistry.js";
function createBaseTimerMessage() {
    return { durationMillis: 0 };
}
export const TimerMessage = {
    $type: "devvit.plugin.timer.TimerMessage",
    encode(message, writer = _m0.Writer.create()) {
        if (message.durationMillis !== 0) {
            writer.uint32(8).int32(message.durationMillis);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTimerMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.durationMillis = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { durationMillis: isSet(object.durationMillis) ? globalThis.Number(object.durationMillis) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.durationMillis !== 0) {
            obj.durationMillis = Math.round(message.durationMillis);
        }
        return obj;
    },
    create(base) {
        return TimerMessage.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseTimerMessage();
        message.durationMillis = object.durationMillis ?? 0;
        return message;
    },
};
messageTypeRegistry.set(TimerMessage.$type, TimerMessage);
export const TimerServiceName = "devvit.plugin.timer.Timer";
export class TimerClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || TimerServiceName;
        this.rpc = rpc;
        this.Wait = this.Wait.bind(this);
    }
    Wait(request, metadata) {
        const data = TimerMessage.encode(request).finish();
        const promise = this.rpc.request(this.service, "Wait", data, metadata);
        return promise.then((data) => Empty.decode(_m0.Reader.create(data)));
    }
}
export const TimerDefinition = {
    name: "Timer",
    fullName: "devvit.plugin.timer.Timer",
    methods: {
        wait: {
            name: "Wait",
            requestType: TimerMessage,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
