/**
 * #v2events.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { messageTypeRegistry } from "../../../typeRegistry.js";
function createBaseV2EventsActionInfo() {
    return { pageType: "", paneName: "" };
}
export const V2EventsActionInfo = {
    $type: "devvit.plugin.v2events.V2EventsActionInfo",
    encode(message, writer = _m0.Writer.create()) {
        if (message.pageType !== "") {
            writer.uint32(10).string(message.pageType);
        }
        if (message.paneName !== "") {
            writer.uint32(18).string(message.paneName);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseV2EventsActionInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.pageType = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.paneName = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            pageType: isSet(object.pageType) ? globalThis.String(object.pageType) : "",
            paneName: isSet(object.paneName) ? globalThis.String(object.paneName) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.pageType !== "") {
            obj.pageType = message.pageType;
        }
        if (message.paneName !== "") {
            obj.paneName = message.paneName;
        }
        return obj;
    },
    create(base) {
        return V2EventsActionInfo.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseV2EventsActionInfo();
        message.pageType = object.pageType ?? "";
        message.paneName = object.paneName ?? "";
        return message;
    },
};
messageTypeRegistry.set(V2EventsActionInfo.$type, V2EventsActionInfo);
function createBaseV2EventsPostGuidanceCreate() {
    return { actionInfo: undefined };
}
export const V2EventsPostGuidanceCreate = {
    $type: "devvit.plugin.v2events.V2EventsPostGuidanceCreate",
    encode(message, writer = _m0.Writer.create()) {
        if (message.actionInfo !== undefined) {
            V2EventsActionInfo.encode(message.actionInfo, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseV2EventsPostGuidanceCreate();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.actionInfo = V2EventsActionInfo.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { actionInfo: isSet(object.actionInfo) ? V2EventsActionInfo.fromJSON(object.actionInfo) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.actionInfo !== undefined) {
            obj.actionInfo = V2EventsActionInfo.toJSON(message.actionInfo);
        }
        return obj;
    },
    create(base) {
        return V2EventsPostGuidanceCreate.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseV2EventsPostGuidanceCreate();
        message.actionInfo = (object.actionInfo !== undefined && object.actionInfo !== null)
            ? V2EventsActionInfo.fromPartial(object.actionInfo)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set(V2EventsPostGuidanceCreate.$type, V2EventsPostGuidanceCreate);
function createBaseV2EventsPostGuidanceUpdate() {
    return { actionInfo: undefined };
}
export const V2EventsPostGuidanceUpdate = {
    $type: "devvit.plugin.v2events.V2EventsPostGuidanceUpdate",
    encode(message, writer = _m0.Writer.create()) {
        if (message.actionInfo !== undefined) {
            V2EventsActionInfo.encode(message.actionInfo, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseV2EventsPostGuidanceUpdate();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.actionInfo = V2EventsActionInfo.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { actionInfo: isSet(object.actionInfo) ? V2EventsActionInfo.fromJSON(object.actionInfo) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.actionInfo !== undefined) {
            obj.actionInfo = V2EventsActionInfo.toJSON(message.actionInfo);
        }
        return obj;
    },
    create(base) {
        return V2EventsPostGuidanceUpdate.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseV2EventsPostGuidanceUpdate();
        message.actionInfo = (object.actionInfo !== undefined && object.actionInfo !== null)
            ? V2EventsActionInfo.fromPartial(object.actionInfo)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set(V2EventsPostGuidanceUpdate.$type, V2EventsPostGuidanceUpdate);
function createBaseV2EventsPublishRequest() {
    return { postGuidanceCreate: undefined, postGuidanceUpdate: undefined };
}
export const V2EventsPublishRequest = {
    $type: "devvit.plugin.v2events.V2EventsPublishRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.postGuidanceCreate !== undefined) {
            V2EventsPostGuidanceCreate.encode(message.postGuidanceCreate, writer.uint32(10).fork()).ldelim();
        }
        if (message.postGuidanceUpdate !== undefined) {
            V2EventsPostGuidanceUpdate.encode(message.postGuidanceUpdate, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseV2EventsPublishRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.postGuidanceCreate = V2EventsPostGuidanceCreate.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.postGuidanceUpdate = V2EventsPostGuidanceUpdate.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            postGuidanceCreate: isSet(object.postGuidanceCreate)
                ? V2EventsPostGuidanceCreate.fromJSON(object.postGuidanceCreate)
                : undefined,
            postGuidanceUpdate: isSet(object.postGuidanceUpdate)
                ? V2EventsPostGuidanceUpdate.fromJSON(object.postGuidanceUpdate)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.postGuidanceCreate !== undefined) {
            obj.postGuidanceCreate = V2EventsPostGuidanceCreate.toJSON(message.postGuidanceCreate);
        }
        if (message.postGuidanceUpdate !== undefined) {
            obj.postGuidanceUpdate = V2EventsPostGuidanceUpdate.toJSON(message.postGuidanceUpdate);
        }
        return obj;
    },
    create(base) {
        return V2EventsPublishRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseV2EventsPublishRequest();
        message.postGuidanceCreate = (object.postGuidanceCreate !== undefined && object.postGuidanceCreate !== null)
            ? V2EventsPostGuidanceCreate.fromPartial(object.postGuidanceCreate)
            : undefined;
        message.postGuidanceUpdate = (object.postGuidanceUpdate !== undefined && object.postGuidanceUpdate !== null)
            ? V2EventsPostGuidanceUpdate.fromPartial(object.postGuidanceUpdate)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set(V2EventsPublishRequest.$type, V2EventsPublishRequest);
function createBaseV2EventsPublishResponse() {
    return {};
}
export const V2EventsPublishResponse = {
    $type: "devvit.plugin.v2events.V2EventsPublishResponse",
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseV2EventsPublishResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return V2EventsPublishResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseV2EventsPublishResponse();
        return message;
    },
};
messageTypeRegistry.set(V2EventsPublishResponse.$type, V2EventsPublishResponse);
export const V2EventsServiceName = "devvit.plugin.v2events.V2Events";
export class V2EventsClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || V2EventsServiceName;
        this.rpc = rpc;
        this.Publish = this.Publish.bind(this);
    }
    Publish(request, metadata) {
        const data = V2EventsPublishRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Publish", data, metadata);
        return promise.then((data) => V2EventsPublishResponse.decode(_m0.Reader.create(data)));
    }
}
export const V2EventsDefinition = {
    name: "V2Events",
    fullName: "devvit.plugin.v2events.V2Events",
    methods: {
        publish: {
            name: "Publish",
            requestType: V2EventsPublishRequest,
            requestStream: false,
            responseType: V2EventsPublishResponse,
            responseStream: false,
            options: {},
        },
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
