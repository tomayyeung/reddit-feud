import { TwirpServer, TwirpError, TwirpErrorCode, TwirpContentType, chainInterceptors, } from 'twirp-ts';
import { V2EventsPublishRequest, V2EventsPublishResponse } from './v2events.js';
export var V2EventsMethod;
(function (V2EventsMethod) {
    V2EventsMethod["Publish"] = "Publish";
})(V2EventsMethod || (V2EventsMethod = {}));
export const V2EventsMethodList = [V2EventsMethod.Publish];
export function createV2EventsServer(service) {
    return new TwirpServer({
        service,
        packageName: 'devvit.plugin.v2events',
        serviceName: 'V2Events',
        methodList: V2EventsMethodList,
        matchRoute: matchV2EventsRoute,
    });
}
function matchV2EventsRoute(method, events) {
    switch (method) {
        case 'Publish':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'Publish' };
                await events.onMatch(ctx);
                return handleV2EventsPublishRequest(ctx, service, data, interceptors);
            };
        default:
            events.onNotFound();
            const msg = `no handler found`;
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleV2EventsPublishRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleV2EventsPublishJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleV2EventsPublishProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
async function handleV2EventsPublishJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = V2EventsPublishRequest.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.Publish(ctx, inputReq);
        });
    }
    else {
        response = await service.Publish(ctx, request);
    }
    return JSON.stringify(V2EventsPublishResponse.toJSON(response));
}
async function handleV2EventsPublishProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = V2EventsPublishRequest.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.Publish(ctx, inputReq);
        });
    }
    else {
        response = await service.Publish(ctx, request);
    }
    return Buffer.from(V2EventsPublishResponse.encode(response).finish());
}
