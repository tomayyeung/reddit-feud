/**
 * #comment.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { AuthorFlairRichText, Awarding, BanInfo, Gildings } from "./common.js";
export interface Comment {
    allAwardings: Awarding[];
    approved?: boolean | undefined;
    approvedAtUtc?: number | undefined;
    approvedBy?: string | undefined;
    archived?: boolean | undefined;
    associatedAward?: string | undefined;
    author?: string | undefined;
    authorFlairBackgroundColor?: string | undefined;
    authorFlairCssClass?: string | undefined;
    authorFlairRichtext: AuthorFlairRichText[];
    authorFlairTemplateId?: string | undefined;
    authorFlairText?: string | undefined;
    authorFlairTextColor?: string | undefined;
    authorFlairType?: string | undefined;
    authorFullname?: string | undefined;
    authorIsBlocked?: boolean | undefined;
    authorPatreonFlair?: boolean | undefined;
    authorPremium?: boolean | undefined;
    awarders: string[];
    bannedAtUtc?: number | undefined;
    bannedBy?: string | undefined;
    body?: string | undefined;
    bodyHtml?: string | undefined;
    canGild?: boolean | undefined;
    canModPost?: boolean | undefined;
    collapsed?: boolean | undefined;
    collapsedBecauseCrowdControl?: boolean | undefined;
    collapsedReason?: string | undefined;
    collapsedReasonCode?: string | undefined;
    commentType?: string | undefined;
    controversiality?: number | undefined;
    created?: number | undefined;
    createdUtc?: number | undefined;
    depth?: number | undefined;
    distinguished?: string | undefined;
    downs?: number | undefined;
    edited?: boolean | undefined;
    gilded?: number | undefined;
    gildings?: Gildings | undefined;
    id?: string | undefined;
    ignoreReports?: boolean | undefined;
    isSubmitter?: boolean | undefined;
    likes?: boolean | undefined;
    linkId?: string | undefined;
    locked?: boolean | undefined;
    modNote?: string | undefined;
    modReasonBy?: string | undefined;
    modReasonTitle?: string | undefined;
    /** array of array of strings :-/ */
    modReports: Array<any>[];
    name?: string | undefined;
    noFollow?: boolean | undefined;
    numReports?: number | undefined;
    parentId?: string | undefined;
    permalink?: string | undefined;
    removalReason?: string | undefined;
    removed?: boolean | undefined;
    replies?: string | undefined;
    reportReasons: string[];
    rteMode?: string | undefined;
    saved?: boolean | undefined;
    score?: number | undefined;
    scoreHidden?: boolean | undefined;
    sendReplies?: boolean | undefined;
    spam?: boolean | undefined;
    stickied?: boolean | undefined;
    subreddit?: string | undefined;
    subredditId?: string | undefined;
    subredditNamePrefixed?: string | undefined;
    subredditType?: string | undefined;
    topAwardedType?: string | undefined;
    totalAwardsReceived?: number | undefined;
    treatmentTags: string[];
    unrepliableReason?: string | undefined;
    ups?: number | undefined;
    /** array of array of strings :-/ */
    userReports: Array<any>[];
    /** more type - for getting more comments */
    count?: number | undefined;
    /**
     * name: predefined at 50
     * id: predefined at 40
     * parent_id: predefined at 53
     * depth: predefined at 34
     */
    children: string[];
    /** needed for automod tap/compare */
    banInfo?: BanInfo | undefined;
    /** PRIVATE - DO NOT SET FOR PUBLIC USE */
    markedSpam?: boolean | undefined;
    verdict?: string | undefined;
}
export declare const Comment: {
    $type: "devvit.reddit.Comment";
    encode(message: Comment, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Comment;
    fromJSON(object: any): Comment;
    toJSON(message: Comment): unknown;
    create(base?: DeepPartial<Comment>): Comment;
    fromPartial(object: DeepPartial<Comment>): Comment;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=comment.d.ts.map