/**
 * #comment.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { ListValue } from "../../google/protobuf/struct.js";
import { BoolValue, Int32Value, StringValue } from "../../google/protobuf/wrappers.js";
import { messageTypeRegistry } from "../../typeRegistry.js";
import { AuthorFlairRichText, Awarding, BanInfo, Gildings } from "./common.js";
function createBaseComment() {
    return {
        allAwardings: [],
        approved: undefined,
        approvedAtUtc: undefined,
        approvedBy: undefined,
        archived: undefined,
        associatedAward: undefined,
        author: undefined,
        authorFlairBackgroundColor: undefined,
        authorFlairCssClass: undefined,
        authorFlairRichtext: [],
        authorFlairTemplateId: undefined,
        authorFlairText: undefined,
        authorFlairTextColor: undefined,
        authorFlairType: undefined,
        authorFullname: undefined,
        authorIsBlocked: undefined,
        authorPatreonFlair: undefined,
        authorPremium: undefined,
        awarders: [],
        bannedAtUtc: undefined,
        bannedBy: undefined,
        body: undefined,
        bodyHtml: undefined,
        canGild: undefined,
        canModPost: undefined,
        collapsed: undefined,
        collapsedBecauseCrowdControl: undefined,
        collapsedReason: undefined,
        collapsedReasonCode: undefined,
        commentType: undefined,
        controversiality: undefined,
        created: undefined,
        createdUtc: undefined,
        depth: undefined,
        distinguished: undefined,
        downs: undefined,
        edited: undefined,
        gilded: undefined,
        gildings: undefined,
        id: undefined,
        ignoreReports: undefined,
        isSubmitter: undefined,
        likes: undefined,
        linkId: undefined,
        locked: undefined,
        modNote: undefined,
        modReasonBy: undefined,
        modReasonTitle: undefined,
        modReports: [],
        name: undefined,
        noFollow: undefined,
        numReports: undefined,
        parentId: undefined,
        permalink: undefined,
        removalReason: undefined,
        removed: undefined,
        replies: undefined,
        reportReasons: [],
        rteMode: undefined,
        saved: undefined,
        score: undefined,
        scoreHidden: undefined,
        sendReplies: undefined,
        spam: undefined,
        stickied: undefined,
        subreddit: undefined,
        subredditId: undefined,
        subredditNamePrefixed: undefined,
        subredditType: undefined,
        topAwardedType: undefined,
        totalAwardsReceived: undefined,
        treatmentTags: [],
        unrepliableReason: undefined,
        ups: undefined,
        userReports: [],
        count: undefined,
        children: [],
        banInfo: undefined,
        markedSpam: undefined,
        verdict: undefined,
    };
}
export const Comment = {
    $type: "devvit.reddit.Comment",
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.allAwardings) {
            Awarding.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.approved !== undefined) {
            BoolValue.encode({ value: message.approved }, writer.uint32(18).fork()).ldelim();
        }
        if (message.approvedAtUtc !== undefined) {
            Int32Value.encode({ value: message.approvedAtUtc }, writer.uint32(26).fork()).ldelim();
        }
        if (message.approvedBy !== undefined) {
            StringValue.encode({ value: message.approvedBy }, writer.uint32(34).fork()).ldelim();
        }
        if (message.archived !== undefined) {
            BoolValue.encode({ value: message.archived }, writer.uint32(42).fork()).ldelim();
        }
        if (message.associatedAward !== undefined) {
            StringValue.encode({ value: message.associatedAward }, writer.uint32(50).fork()).ldelim();
        }
        if (message.author !== undefined) {
            StringValue.encode({ value: message.author }, writer.uint32(58).fork()).ldelim();
        }
        if (message.authorFlairBackgroundColor !== undefined) {
            StringValue.encode({ value: message.authorFlairBackgroundColor }, writer.uint32(66).fork()).ldelim();
        }
        if (message.authorFlairCssClass !== undefined) {
            StringValue.encode({ value: message.authorFlairCssClass }, writer.uint32(74).fork()).ldelim();
        }
        for (const v of message.authorFlairRichtext) {
            AuthorFlairRichText.encode(v, writer.uint32(82).fork()).ldelim();
        }
        if (message.authorFlairTemplateId !== undefined) {
            StringValue.encode({ value: message.authorFlairTemplateId }, writer.uint32(90).fork()).ldelim();
        }
        if (message.authorFlairText !== undefined) {
            StringValue.encode({ value: message.authorFlairText }, writer.uint32(98).fork()).ldelim();
        }
        if (message.authorFlairTextColor !== undefined) {
            StringValue.encode({ value: message.authorFlairTextColor }, writer.uint32(106).fork()).ldelim();
        }
        if (message.authorFlairType !== undefined) {
            StringValue.encode({ value: message.authorFlairType }, writer.uint32(114).fork()).ldelim();
        }
        if (message.authorFullname !== undefined) {
            StringValue.encode({ value: message.authorFullname }, writer.uint32(122).fork()).ldelim();
        }
        if (message.authorIsBlocked !== undefined) {
            BoolValue.encode({ value: message.authorIsBlocked }, writer.uint32(130).fork()).ldelim();
        }
        if (message.authorPatreonFlair !== undefined) {
            BoolValue.encode({ value: message.authorPatreonFlair }, writer.uint32(138).fork()).ldelim();
        }
        if (message.authorPremium !== undefined) {
            BoolValue.encode({ value: message.authorPremium }, writer.uint32(146).fork()).ldelim();
        }
        for (const v of message.awarders) {
            StringValue.encode({ value: v }, writer.uint32(154).fork()).ldelim();
        }
        if (message.bannedAtUtc !== undefined) {
            Int32Value.encode({ value: message.bannedAtUtc }, writer.uint32(162).fork()).ldelim();
        }
        if (message.bannedBy !== undefined) {
            StringValue.encode({ value: message.bannedBy }, writer.uint32(170).fork()).ldelim();
        }
        if (message.body !== undefined) {
            StringValue.encode({ value: message.body }, writer.uint32(178).fork()).ldelim();
        }
        if (message.bodyHtml !== undefined) {
            StringValue.encode({ value: message.bodyHtml }, writer.uint32(186).fork()).ldelim();
        }
        if (message.canGild !== undefined) {
            BoolValue.encode({ value: message.canGild }, writer.uint32(194).fork()).ldelim();
        }
        if (message.canModPost !== undefined) {
            BoolValue.encode({ value: message.canModPost }, writer.uint32(202).fork()).ldelim();
        }
        if (message.collapsed !== undefined) {
            BoolValue.encode({ value: message.collapsed }, writer.uint32(210).fork()).ldelim();
        }
        if (message.collapsedBecauseCrowdControl !== undefined) {
            BoolValue.encode({ value: message.collapsedBecauseCrowdControl }, writer.uint32(218).fork()).ldelim();
        }
        if (message.collapsedReason !== undefined) {
            StringValue.encode({ value: message.collapsedReason }, writer.uint32(226).fork()).ldelim();
        }
        if (message.collapsedReasonCode !== undefined) {
            StringValue.encode({ value: message.collapsedReasonCode }, writer.uint32(234).fork()).ldelim();
        }
        if (message.commentType !== undefined) {
            StringValue.encode({ value: message.commentType }, writer.uint32(242).fork()).ldelim();
        }
        if (message.controversiality !== undefined) {
            Int32Value.encode({ value: message.controversiality }, writer.uint32(250).fork()).ldelim();
        }
        if (message.created !== undefined) {
            Int32Value.encode({ value: message.created }, writer.uint32(258).fork()).ldelim();
        }
        if (message.createdUtc !== undefined) {
            Int32Value.encode({ value: message.createdUtc }, writer.uint32(266).fork()).ldelim();
        }
        if (message.depth !== undefined) {
            Int32Value.encode({ value: message.depth }, writer.uint32(274).fork()).ldelim();
        }
        if (message.distinguished !== undefined) {
            StringValue.encode({ value: message.distinguished }, writer.uint32(282).fork()).ldelim();
        }
        if (message.downs !== undefined) {
            Int32Value.encode({ value: message.downs }, writer.uint32(290).fork()).ldelim();
        }
        if (message.edited !== undefined) {
            BoolValue.encode({ value: message.edited }, writer.uint32(298).fork()).ldelim();
        }
        if (message.gilded !== undefined) {
            Int32Value.encode({ value: message.gilded }, writer.uint32(306).fork()).ldelim();
        }
        if (message.gildings !== undefined) {
            Gildings.encode(message.gildings, writer.uint32(314).fork()).ldelim();
        }
        if (message.id !== undefined) {
            StringValue.encode({ value: message.id }, writer.uint32(322).fork()).ldelim();
        }
        if (message.ignoreReports !== undefined) {
            BoolValue.encode({ value: message.ignoreReports }, writer.uint32(330).fork()).ldelim();
        }
        if (message.isSubmitter !== undefined) {
            BoolValue.encode({ value: message.isSubmitter }, writer.uint32(338).fork()).ldelim();
        }
        if (message.likes !== undefined) {
            BoolValue.encode({ value: message.likes }, writer.uint32(346).fork()).ldelim();
        }
        if (message.linkId !== undefined) {
            StringValue.encode({ value: message.linkId }, writer.uint32(354).fork()).ldelim();
        }
        if (message.locked !== undefined) {
            BoolValue.encode({ value: message.locked }, writer.uint32(362).fork()).ldelim();
        }
        if (message.modNote !== undefined) {
            StringValue.encode({ value: message.modNote }, writer.uint32(370).fork()).ldelim();
        }
        if (message.modReasonBy !== undefined) {
            StringValue.encode({ value: message.modReasonBy }, writer.uint32(378).fork()).ldelim();
        }
        if (message.modReasonTitle !== undefined) {
            StringValue.encode({ value: message.modReasonTitle }, writer.uint32(386).fork()).ldelim();
        }
        for (const v of message.modReports) {
            ListValue.encode(ListValue.wrap(v), writer.uint32(394).fork()).ldelim();
        }
        if (message.name !== undefined) {
            StringValue.encode({ value: message.name }, writer.uint32(402).fork()).ldelim();
        }
        if (message.noFollow !== undefined) {
            BoolValue.encode({ value: message.noFollow }, writer.uint32(410).fork()).ldelim();
        }
        if (message.numReports !== undefined) {
            Int32Value.encode({ value: message.numReports }, writer.uint32(418).fork()).ldelim();
        }
        if (message.parentId !== undefined) {
            StringValue.encode({ value: message.parentId }, writer.uint32(426).fork()).ldelim();
        }
        if (message.permalink !== undefined) {
            StringValue.encode({ value: message.permalink }, writer.uint32(434).fork()).ldelim();
        }
        if (message.removalReason !== undefined) {
            StringValue.encode({ value: message.removalReason }, writer.uint32(442).fork()).ldelim();
        }
        if (message.removed !== undefined) {
            BoolValue.encode({ value: message.removed }, writer.uint32(450).fork()).ldelim();
        }
        if (message.replies !== undefined) {
            StringValue.encode({ value: message.replies }, writer.uint32(458).fork()).ldelim();
        }
        for (const v of message.reportReasons) {
            StringValue.encode({ value: v }, writer.uint32(466).fork()).ldelim();
        }
        if (message.rteMode !== undefined) {
            StringValue.encode({ value: message.rteMode }, writer.uint32(474).fork()).ldelim();
        }
        if (message.saved !== undefined) {
            BoolValue.encode({ value: message.saved }, writer.uint32(482).fork()).ldelim();
        }
        if (message.score !== undefined) {
            Int32Value.encode({ value: message.score }, writer.uint32(490).fork()).ldelim();
        }
        if (message.scoreHidden !== undefined) {
            BoolValue.encode({ value: message.scoreHidden }, writer.uint32(498).fork()).ldelim();
        }
        if (message.sendReplies !== undefined) {
            BoolValue.encode({ value: message.sendReplies }, writer.uint32(506).fork()).ldelim();
        }
        if (message.spam !== undefined) {
            BoolValue.encode({ value: message.spam }, writer.uint32(514).fork()).ldelim();
        }
        if (message.stickied !== undefined) {
            BoolValue.encode({ value: message.stickied }, writer.uint32(522).fork()).ldelim();
        }
        if (message.subreddit !== undefined) {
            StringValue.encode({ value: message.subreddit }, writer.uint32(530).fork()).ldelim();
        }
        if (message.subredditId !== undefined) {
            StringValue.encode({ value: message.subredditId }, writer.uint32(538).fork()).ldelim();
        }
        if (message.subredditNamePrefixed !== undefined) {
            StringValue.encode({ value: message.subredditNamePrefixed }, writer.uint32(546).fork()).ldelim();
        }
        if (message.subredditType !== undefined) {
            StringValue.encode({ value: message.subredditType }, writer.uint32(554).fork()).ldelim();
        }
        if (message.topAwardedType !== undefined) {
            StringValue.encode({ value: message.topAwardedType }, writer.uint32(562).fork()).ldelim();
        }
        if (message.totalAwardsReceived !== undefined) {
            Int32Value.encode({ value: message.totalAwardsReceived }, writer.uint32(570).fork()).ldelim();
        }
        for (const v of message.treatmentTags) {
            StringValue.encode({ value: v }, writer.uint32(578).fork()).ldelim();
        }
        if (message.unrepliableReason !== undefined) {
            StringValue.encode({ value: message.unrepliableReason }, writer.uint32(586).fork()).ldelim();
        }
        if (message.ups !== undefined) {
            Int32Value.encode({ value: message.ups }, writer.uint32(594).fork()).ldelim();
        }
        for (const v of message.userReports) {
            ListValue.encode(ListValue.wrap(v), writer.uint32(602).fork()).ldelim();
        }
        if (message.count !== undefined) {
            Int32Value.encode({ value: message.count }, writer.uint32(610).fork()).ldelim();
        }
        for (const v of message.children) {
            StringValue.encode({ value: v }, writer.uint32(618).fork()).ldelim();
        }
        if (message.banInfo !== undefined) {
            BanInfo.encode(message.banInfo, writer.uint32(626).fork()).ldelim();
        }
        if (message.markedSpam !== undefined) {
            BoolValue.encode({ value: message.markedSpam }, writer.uint32(634).fork()).ldelim();
        }
        if (message.verdict !== undefined) {
            StringValue.encode({ value: message.verdict }, writer.uint32(642).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseComment();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.allAwardings.push(Awarding.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.approved = BoolValue.decode(reader, reader.uint32()).value;
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.approvedAtUtc = Int32Value.decode(reader, reader.uint32()).value;
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.approvedBy = StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.archived = BoolValue.decode(reader, reader.uint32()).value;
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.associatedAward = StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.author = StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.authorFlairBackgroundColor = StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.authorFlairCssClass = StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.authorFlairRichtext.push(AuthorFlairRichText.decode(reader, reader.uint32()));
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.authorFlairTemplateId = StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    message.authorFlairText = StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 13:
                    if (tag !== 106) {
                        break;
                    }
                    message.authorFlairTextColor = StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 14:
                    if (tag !== 114) {
                        break;
                    }
                    message.authorFlairType = StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 15:
                    if (tag !== 122) {
                        break;
                    }
                    message.authorFullname = StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 16:
                    if (tag !== 130) {
                        break;
                    }
                    message.authorIsBlocked = BoolValue.decode(reader, reader.uint32()).value;
                    continue;
                case 17:
                    if (tag !== 138) {
                        break;
                    }
                    message.authorPatreonFlair = BoolValue.decode(reader, reader.uint32()).value;
                    continue;
                case 18:
                    if (tag !== 146) {
                        break;
                    }
                    message.authorPremium = BoolValue.decode(reader, reader.uint32()).value;
                    continue;
                case 19:
                    if (tag !== 154) {
                        break;
                    }
                    message.awarders.push(StringValue.decode(reader, reader.uint32()).value);
                    continue;
                case 20:
                    if (tag !== 162) {
                        break;
                    }
                    message.bannedAtUtc = Int32Value.decode(reader, reader.uint32()).value;
                    continue;
                case 21:
                    if (tag !== 170) {
                        break;
                    }
                    message.bannedBy = StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 22:
                    if (tag !== 178) {
                        break;
                    }
                    message.body = StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 23:
                    if (tag !== 186) {
                        break;
                    }
                    message.bodyHtml = StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 24:
                    if (tag !== 194) {
                        break;
                    }
                    message.canGild = BoolValue.decode(reader, reader.uint32()).value;
                    continue;
                case 25:
                    if (tag !== 202) {
                        break;
                    }
                    message.canModPost = BoolValue.decode(reader, reader.uint32()).value;
                    continue;
                case 26:
                    if (tag !== 210) {
                        break;
                    }
                    message.collapsed = BoolValue.decode(reader, reader.uint32()).value;
                    continue;
                case 27:
                    if (tag !== 218) {
                        break;
                    }
                    message.collapsedBecauseCrowdControl = BoolValue.decode(reader, reader.uint32()).value;
                    continue;
                case 28:
                    if (tag !== 226) {
                        break;
                    }
                    message.collapsedReason = StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 29:
                    if (tag !== 234) {
                        break;
                    }
                    message.collapsedReasonCode = StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 30:
                    if (tag !== 242) {
                        break;
                    }
                    message.commentType = StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 31:
                    if (tag !== 250) {
                        break;
                    }
                    message.controversiality = Int32Value.decode(reader, reader.uint32()).value;
                    continue;
                case 32:
                    if (tag !== 258) {
                        break;
                    }
                    message.created = Int32Value.decode(reader, reader.uint32()).value;
                    continue;
                case 33:
                    if (tag !== 266) {
                        break;
                    }
                    message.createdUtc = Int32Value.decode(reader, reader.uint32()).value;
                    continue;
                case 34:
                    if (tag !== 274) {
                        break;
                    }
                    message.depth = Int32Value.decode(reader, reader.uint32()).value;
                    continue;
                case 35:
                    if (tag !== 282) {
                        break;
                    }
                    message.distinguished = StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 36:
                    if (tag !== 290) {
                        break;
                    }
                    message.downs = Int32Value.decode(reader, reader.uint32()).value;
                    continue;
                case 37:
                    if (tag !== 298) {
                        break;
                    }
                    message.edited = BoolValue.decode(reader, reader.uint32()).value;
                    continue;
                case 38:
                    if (tag !== 306) {
                        break;
                    }
                    message.gilded = Int32Value.decode(reader, reader.uint32()).value;
                    continue;
                case 39:
                    if (tag !== 314) {
                        break;
                    }
                    message.gildings = Gildings.decode(reader, reader.uint32());
                    continue;
                case 40:
                    if (tag !== 322) {
                        break;
                    }
                    message.id = StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 41:
                    if (tag !== 330) {
                        break;
                    }
                    message.ignoreReports = BoolValue.decode(reader, reader.uint32()).value;
                    continue;
                case 42:
                    if (tag !== 338) {
                        break;
                    }
                    message.isSubmitter = BoolValue.decode(reader, reader.uint32()).value;
                    continue;
                case 43:
                    if (tag !== 346) {
                        break;
                    }
                    message.likes = BoolValue.decode(reader, reader.uint32()).value;
                    continue;
                case 44:
                    if (tag !== 354) {
                        break;
                    }
                    message.linkId = StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 45:
                    if (tag !== 362) {
                        break;
                    }
                    message.locked = BoolValue.decode(reader, reader.uint32()).value;
                    continue;
                case 46:
                    if (tag !== 370) {
                        break;
                    }
                    message.modNote = StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 47:
                    if (tag !== 378) {
                        break;
                    }
                    message.modReasonBy = StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 48:
                    if (tag !== 386) {
                        break;
                    }
                    message.modReasonTitle = StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 49:
                    if (tag !== 394) {
                        break;
                    }
                    message.modReports.push(ListValue.unwrap(ListValue.decode(reader, reader.uint32())));
                    continue;
                case 50:
                    if (tag !== 402) {
                        break;
                    }
                    message.name = StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 51:
                    if (tag !== 410) {
                        break;
                    }
                    message.noFollow = BoolValue.decode(reader, reader.uint32()).value;
                    continue;
                case 52:
                    if (tag !== 418) {
                        break;
                    }
                    message.numReports = Int32Value.decode(reader, reader.uint32()).value;
                    continue;
                case 53:
                    if (tag !== 426) {
                        break;
                    }
                    message.parentId = StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 54:
                    if (tag !== 434) {
                        break;
                    }
                    message.permalink = StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 55:
                    if (tag !== 442) {
                        break;
                    }
                    message.removalReason = StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 56:
                    if (tag !== 450) {
                        break;
                    }
                    message.removed = BoolValue.decode(reader, reader.uint32()).value;
                    continue;
                case 57:
                    if (tag !== 458) {
                        break;
                    }
                    message.replies = StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 58:
                    if (tag !== 466) {
                        break;
                    }
                    message.reportReasons.push(StringValue.decode(reader, reader.uint32()).value);
                    continue;
                case 59:
                    if (tag !== 474) {
                        break;
                    }
                    message.rteMode = StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 60:
                    if (tag !== 482) {
                        break;
                    }
                    message.saved = BoolValue.decode(reader, reader.uint32()).value;
                    continue;
                case 61:
                    if (tag !== 490) {
                        break;
                    }
                    message.score = Int32Value.decode(reader, reader.uint32()).value;
                    continue;
                case 62:
                    if (tag !== 498) {
                        break;
                    }
                    message.scoreHidden = BoolValue.decode(reader, reader.uint32()).value;
                    continue;
                case 63:
                    if (tag !== 506) {
                        break;
                    }
                    message.sendReplies = BoolValue.decode(reader, reader.uint32()).value;
                    continue;
                case 64:
                    if (tag !== 514) {
                        break;
                    }
                    message.spam = BoolValue.decode(reader, reader.uint32()).value;
                    continue;
                case 65:
                    if (tag !== 522) {
                        break;
                    }
                    message.stickied = BoolValue.decode(reader, reader.uint32()).value;
                    continue;
                case 66:
                    if (tag !== 530) {
                        break;
                    }
                    message.subreddit = StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 67:
                    if (tag !== 538) {
                        break;
                    }
                    message.subredditId = StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 68:
                    if (tag !== 546) {
                        break;
                    }
                    message.subredditNamePrefixed = StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 69:
                    if (tag !== 554) {
                        break;
                    }
                    message.subredditType = StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 70:
                    if (tag !== 562) {
                        break;
                    }
                    message.topAwardedType = StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 71:
                    if (tag !== 570) {
                        break;
                    }
                    message.totalAwardsReceived = Int32Value.decode(reader, reader.uint32()).value;
                    continue;
                case 72:
                    if (tag !== 578) {
                        break;
                    }
                    message.treatmentTags.push(StringValue.decode(reader, reader.uint32()).value);
                    continue;
                case 73:
                    if (tag !== 586) {
                        break;
                    }
                    message.unrepliableReason = StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 74:
                    if (tag !== 594) {
                        break;
                    }
                    message.ups = Int32Value.decode(reader, reader.uint32()).value;
                    continue;
                case 75:
                    if (tag !== 602) {
                        break;
                    }
                    message.userReports.push(ListValue.unwrap(ListValue.decode(reader, reader.uint32())));
                    continue;
                case 76:
                    if (tag !== 610) {
                        break;
                    }
                    message.count = Int32Value.decode(reader, reader.uint32()).value;
                    continue;
                case 77:
                    if (tag !== 618) {
                        break;
                    }
                    message.children.push(StringValue.decode(reader, reader.uint32()).value);
                    continue;
                case 78:
                    if (tag !== 626) {
                        break;
                    }
                    message.banInfo = BanInfo.decode(reader, reader.uint32());
                    continue;
                case 79:
                    if (tag !== 634) {
                        break;
                    }
                    message.markedSpam = BoolValue.decode(reader, reader.uint32()).value;
                    continue;
                case 80:
                    if (tag !== 642) {
                        break;
                    }
                    message.verdict = StringValue.decode(reader, reader.uint32()).value;
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            allAwardings: globalThis.Array.isArray(object?.allAwardings)
                ? object.allAwardings.map((e) => Awarding.fromJSON(e))
                : [],
            approved: isSet(object.approved) ? Boolean(object.approved) : undefined,
            approvedAtUtc: isSet(object.approvedAtUtc) ? Number(object.approvedAtUtc) : undefined,
            approvedBy: isSet(object.approvedBy) ? String(object.approvedBy) : undefined,
            archived: isSet(object.archived) ? Boolean(object.archived) : undefined,
            associatedAward: isSet(object.associatedAward) ? String(object.associatedAward) : undefined,
            author: isSet(object.author) ? String(object.author) : undefined,
            authorFlairBackgroundColor: isSet(object.authorFlairBackgroundColor)
                ? String(object.authorFlairBackgroundColor)
                : undefined,
            authorFlairCssClass: isSet(object.authorFlairCssClass) ? String(object.authorFlairCssClass) : undefined,
            authorFlairRichtext: globalThis.Array.isArray(object?.authorFlairRichtext)
                ? object.authorFlairRichtext.map((e) => AuthorFlairRichText.fromJSON(e))
                : [],
            authorFlairTemplateId: isSet(object.authorFlairTemplateId) ? String(object.authorFlairTemplateId) : undefined,
            authorFlairText: isSet(object.authorFlairText) ? String(object.authorFlairText) : undefined,
            authorFlairTextColor: isSet(object.authorFlairTextColor) ? String(object.authorFlairTextColor) : undefined,
            authorFlairType: isSet(object.authorFlairType) ? String(object.authorFlairType) : undefined,
            authorFullname: isSet(object.authorFullname) ? String(object.authorFullname) : undefined,
            authorIsBlocked: isSet(object.authorIsBlocked) ? Boolean(object.authorIsBlocked) : undefined,
            authorPatreonFlair: isSet(object.authorPatreonFlair) ? Boolean(object.authorPatreonFlair) : undefined,
            authorPremium: isSet(object.authorPremium) ? Boolean(object.authorPremium) : undefined,
            awarders: globalThis.Array.isArray(object?.awarders) ? object.awarders.map((e) => String(e)) : [],
            bannedAtUtc: isSet(object.bannedAtUtc) ? Number(object.bannedAtUtc) : undefined,
            bannedBy: isSet(object.bannedBy) ? String(object.bannedBy) : undefined,
            body: isSet(object.body) ? String(object.body) : undefined,
            bodyHtml: isSet(object.bodyHtml) ? String(object.bodyHtml) : undefined,
            canGild: isSet(object.canGild) ? Boolean(object.canGild) : undefined,
            canModPost: isSet(object.canModPost) ? Boolean(object.canModPost) : undefined,
            collapsed: isSet(object.collapsed) ? Boolean(object.collapsed) : undefined,
            collapsedBecauseCrowdControl: isSet(object.collapsedBecauseCrowdControl)
                ? Boolean(object.collapsedBecauseCrowdControl)
                : undefined,
            collapsedReason: isSet(object.collapsedReason) ? String(object.collapsedReason) : undefined,
            collapsedReasonCode: isSet(object.collapsedReasonCode) ? String(object.collapsedReasonCode) : undefined,
            commentType: isSet(object.commentType) ? String(object.commentType) : undefined,
            controversiality: isSet(object.controversiality) ? Number(object.controversiality) : undefined,
            created: isSet(object.created) ? Number(object.created) : undefined,
            createdUtc: isSet(object.createdUtc) ? Number(object.createdUtc) : undefined,
            depth: isSet(object.depth) ? Number(object.depth) : undefined,
            distinguished: isSet(object.distinguished) ? String(object.distinguished) : undefined,
            downs: isSet(object.downs) ? Number(object.downs) : undefined,
            edited: isSet(object.edited) ? Boolean(object.edited) : undefined,
            gilded: isSet(object.gilded) ? Number(object.gilded) : undefined,
            gildings: isSet(object.gildings) ? Gildings.fromJSON(object.gildings) : undefined,
            id: isSet(object.id) ? String(object.id) : undefined,
            ignoreReports: isSet(object.ignoreReports) ? Boolean(object.ignoreReports) : undefined,
            isSubmitter: isSet(object.isSubmitter) ? Boolean(object.isSubmitter) : undefined,
            likes: isSet(object.likes) ? Boolean(object.likes) : undefined,
            linkId: isSet(object.linkId) ? String(object.linkId) : undefined,
            locked: isSet(object.locked) ? Boolean(object.locked) : undefined,
            modNote: isSet(object.modNote) ? String(object.modNote) : undefined,
            modReasonBy: isSet(object.modReasonBy) ? String(object.modReasonBy) : undefined,
            modReasonTitle: isSet(object.modReasonTitle) ? String(object.modReasonTitle) : undefined,
            modReports: globalThis.Array.isArray(object?.modReports) ? object.modReports.map((e) => [...e]) : [],
            name: isSet(object.name) ? String(object.name) : undefined,
            noFollow: isSet(object.noFollow) ? Boolean(object.noFollow) : undefined,
            numReports: isSet(object.numReports) ? Number(object.numReports) : undefined,
            parentId: isSet(object.parentId) ? String(object.parentId) : undefined,
            permalink: isSet(object.permalink) ? String(object.permalink) : undefined,
            removalReason: isSet(object.removalReason) ? String(object.removalReason) : undefined,
            removed: isSet(object.removed) ? Boolean(object.removed) : undefined,
            replies: isSet(object.replies) ? String(object.replies) : undefined,
            reportReasons: globalThis.Array.isArray(object?.reportReasons)
                ? object.reportReasons.map((e) => String(e))
                : [],
            rteMode: isSet(object.rteMode) ? String(object.rteMode) : undefined,
            saved: isSet(object.saved) ? Boolean(object.saved) : undefined,
            score: isSet(object.score) ? Number(object.score) : undefined,
            scoreHidden: isSet(object.scoreHidden) ? Boolean(object.scoreHidden) : undefined,
            sendReplies: isSet(object.sendReplies) ? Boolean(object.sendReplies) : undefined,
            spam: isSet(object.spam) ? Boolean(object.spam) : undefined,
            stickied: isSet(object.stickied) ? Boolean(object.stickied) : undefined,
            subreddit: isSet(object.subreddit) ? String(object.subreddit) : undefined,
            subredditId: isSet(object.subredditId) ? String(object.subredditId) : undefined,
            subredditNamePrefixed: isSet(object.subredditNamePrefixed) ? String(object.subredditNamePrefixed) : undefined,
            subredditType: isSet(object.subredditType) ? String(object.subredditType) : undefined,
            topAwardedType: isSet(object.topAwardedType) ? String(object.topAwardedType) : undefined,
            totalAwardsReceived: isSet(object.totalAwardsReceived) ? Number(object.totalAwardsReceived) : undefined,
            treatmentTags: globalThis.Array.isArray(object?.treatmentTags)
                ? object.treatmentTags.map((e) => String(e))
                : [],
            unrepliableReason: isSet(object.unrepliableReason) ? String(object.unrepliableReason) : undefined,
            ups: isSet(object.ups) ? Number(object.ups) : undefined,
            userReports: globalThis.Array.isArray(object?.userReports) ? object.userReports.map((e) => [...e]) : [],
            count: isSet(object.count) ? Number(object.count) : undefined,
            children: globalThis.Array.isArray(object?.children) ? object.children.map((e) => String(e)) : [],
            banInfo: isSet(object.banInfo) ? BanInfo.fromJSON(object.banInfo) : undefined,
            markedSpam: isSet(object.markedSpam) ? Boolean(object.markedSpam) : undefined,
            verdict: isSet(object.verdict) ? String(object.verdict) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.allAwardings?.length) {
            obj.allAwardings = message.allAwardings.map((e) => Awarding.toJSON(e));
        }
        if (message.approved !== undefined) {
            obj.approved = message.approved;
        }
        if (message.approvedAtUtc !== undefined) {
            obj.approvedAtUtc = message.approvedAtUtc;
        }
        if (message.approvedBy !== undefined) {
            obj.approvedBy = message.approvedBy;
        }
        if (message.archived !== undefined) {
            obj.archived = message.archived;
        }
        if (message.associatedAward !== undefined) {
            obj.associatedAward = message.associatedAward;
        }
        if (message.author !== undefined) {
            obj.author = message.author;
        }
        if (message.authorFlairBackgroundColor !== undefined) {
            obj.authorFlairBackgroundColor = message.authorFlairBackgroundColor;
        }
        if (message.authorFlairCssClass !== undefined) {
            obj.authorFlairCssClass = message.authorFlairCssClass;
        }
        if (message.authorFlairRichtext?.length) {
            obj.authorFlairRichtext = message.authorFlairRichtext.map((e) => AuthorFlairRichText.toJSON(e));
        }
        if (message.authorFlairTemplateId !== undefined) {
            obj.authorFlairTemplateId = message.authorFlairTemplateId;
        }
        if (message.authorFlairText !== undefined) {
            obj.authorFlairText = message.authorFlairText;
        }
        if (message.authorFlairTextColor !== undefined) {
            obj.authorFlairTextColor = message.authorFlairTextColor;
        }
        if (message.authorFlairType !== undefined) {
            obj.authorFlairType = message.authorFlairType;
        }
        if (message.authorFullname !== undefined) {
            obj.authorFullname = message.authorFullname;
        }
        if (message.authorIsBlocked !== undefined) {
            obj.authorIsBlocked = message.authorIsBlocked;
        }
        if (message.authorPatreonFlair !== undefined) {
            obj.authorPatreonFlair = message.authorPatreonFlair;
        }
        if (message.authorPremium !== undefined) {
            obj.authorPremium = message.authorPremium;
        }
        if (message.awarders?.length) {
            obj.awarders = message.awarders;
        }
        if (message.bannedAtUtc !== undefined) {
            obj.bannedAtUtc = message.bannedAtUtc;
        }
        if (message.bannedBy !== undefined) {
            obj.bannedBy = message.bannedBy;
        }
        if (message.body !== undefined) {
            obj.body = message.body;
        }
        if (message.bodyHtml !== undefined) {
            obj.bodyHtml = message.bodyHtml;
        }
        if (message.canGild !== undefined) {
            obj.canGild = message.canGild;
        }
        if (message.canModPost !== undefined) {
            obj.canModPost = message.canModPost;
        }
        if (message.collapsed !== undefined) {
            obj.collapsed = message.collapsed;
        }
        if (message.collapsedBecauseCrowdControl !== undefined) {
            obj.collapsedBecauseCrowdControl = message.collapsedBecauseCrowdControl;
        }
        if (message.collapsedReason !== undefined) {
            obj.collapsedReason = message.collapsedReason;
        }
        if (message.collapsedReasonCode !== undefined) {
            obj.collapsedReasonCode = message.collapsedReasonCode;
        }
        if (message.commentType !== undefined) {
            obj.commentType = message.commentType;
        }
        if (message.controversiality !== undefined) {
            obj.controversiality = message.controversiality;
        }
        if (message.created !== undefined) {
            obj.created = message.created;
        }
        if (message.createdUtc !== undefined) {
            obj.createdUtc = message.createdUtc;
        }
        if (message.depth !== undefined) {
            obj.depth = message.depth;
        }
        if (message.distinguished !== undefined) {
            obj.distinguished = message.distinguished;
        }
        if (message.downs !== undefined) {
            obj.downs = message.downs;
        }
        if (message.edited !== undefined) {
            obj.edited = message.edited;
        }
        if (message.gilded !== undefined) {
            obj.gilded = message.gilded;
        }
        if (message.gildings !== undefined) {
            obj.gildings = Gildings.toJSON(message.gildings);
        }
        if (message.id !== undefined) {
            obj.id = message.id;
        }
        if (message.ignoreReports !== undefined) {
            obj.ignoreReports = message.ignoreReports;
        }
        if (message.isSubmitter !== undefined) {
            obj.isSubmitter = message.isSubmitter;
        }
        if (message.likes !== undefined) {
            obj.likes = message.likes;
        }
        if (message.linkId !== undefined) {
            obj.linkId = message.linkId;
        }
        if (message.locked !== undefined) {
            obj.locked = message.locked;
        }
        if (message.modNote !== undefined) {
            obj.modNote = message.modNote;
        }
        if (message.modReasonBy !== undefined) {
            obj.modReasonBy = message.modReasonBy;
        }
        if (message.modReasonTitle !== undefined) {
            obj.modReasonTitle = message.modReasonTitle;
        }
        if (message.modReports?.length) {
            obj.modReports = message.modReports;
        }
        if (message.name !== undefined) {
            obj.name = message.name;
        }
        if (message.noFollow !== undefined) {
            obj.noFollow = message.noFollow;
        }
        if (message.numReports !== undefined) {
            obj.numReports = message.numReports;
        }
        if (message.parentId !== undefined) {
            obj.parentId = message.parentId;
        }
        if (message.permalink !== undefined) {
            obj.permalink = message.permalink;
        }
        if (message.removalReason !== undefined) {
            obj.removalReason = message.removalReason;
        }
        if (message.removed !== undefined) {
            obj.removed = message.removed;
        }
        if (message.replies !== undefined) {
            obj.replies = message.replies;
        }
        if (message.reportReasons?.length) {
            obj.reportReasons = message.reportReasons;
        }
        if (message.rteMode !== undefined) {
            obj.rteMode = message.rteMode;
        }
        if (message.saved !== undefined) {
            obj.saved = message.saved;
        }
        if (message.score !== undefined) {
            obj.score = message.score;
        }
        if (message.scoreHidden !== undefined) {
            obj.scoreHidden = message.scoreHidden;
        }
        if (message.sendReplies !== undefined) {
            obj.sendReplies = message.sendReplies;
        }
        if (message.spam !== undefined) {
            obj.spam = message.spam;
        }
        if (message.stickied !== undefined) {
            obj.stickied = message.stickied;
        }
        if (message.subreddit !== undefined) {
            obj.subreddit = message.subreddit;
        }
        if (message.subredditId !== undefined) {
            obj.subredditId = message.subredditId;
        }
        if (message.subredditNamePrefixed !== undefined) {
            obj.subredditNamePrefixed = message.subredditNamePrefixed;
        }
        if (message.subredditType !== undefined) {
            obj.subredditType = message.subredditType;
        }
        if (message.topAwardedType !== undefined) {
            obj.topAwardedType = message.topAwardedType;
        }
        if (message.totalAwardsReceived !== undefined) {
            obj.totalAwardsReceived = message.totalAwardsReceived;
        }
        if (message.treatmentTags?.length) {
            obj.treatmentTags = message.treatmentTags;
        }
        if (message.unrepliableReason !== undefined) {
            obj.unrepliableReason = message.unrepliableReason;
        }
        if (message.ups !== undefined) {
            obj.ups = message.ups;
        }
        if (message.userReports?.length) {
            obj.userReports = message.userReports;
        }
        if (message.count !== undefined) {
            obj.count = message.count;
        }
        if (message.children?.length) {
            obj.children = message.children;
        }
        if (message.banInfo !== undefined) {
            obj.banInfo = BanInfo.toJSON(message.banInfo);
        }
        if (message.markedSpam !== undefined) {
            obj.markedSpam = message.markedSpam;
        }
        if (message.verdict !== undefined) {
            obj.verdict = message.verdict;
        }
        return obj;
    },
    create(base) {
        return Comment.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseComment();
        message.allAwardings = object.allAwardings?.map((e) => Awarding.fromPartial(e)) || [];
        message.approved = object.approved ?? undefined;
        message.approvedAtUtc = object.approvedAtUtc ?? undefined;
        message.approvedBy = object.approvedBy ?? undefined;
        message.archived = object.archived ?? undefined;
        message.associatedAward = object.associatedAward ?? undefined;
        message.author = object.author ?? undefined;
        message.authorFlairBackgroundColor = object.authorFlairBackgroundColor ?? undefined;
        message.authorFlairCssClass = object.authorFlairCssClass ?? undefined;
        message.authorFlairRichtext = object.authorFlairRichtext?.map((e) => AuthorFlairRichText.fromPartial(e)) || [];
        message.authorFlairTemplateId = object.authorFlairTemplateId ?? undefined;
        message.authorFlairText = object.authorFlairText ?? undefined;
        message.authorFlairTextColor = object.authorFlairTextColor ?? undefined;
        message.authorFlairType = object.authorFlairType ?? undefined;
        message.authorFullname = object.authorFullname ?? undefined;
        message.authorIsBlocked = object.authorIsBlocked ?? undefined;
        message.authorPatreonFlair = object.authorPatreonFlair ?? undefined;
        message.authorPremium = object.authorPremium ?? undefined;
        message.awarders = object.awarders?.map((e) => e) || [];
        message.bannedAtUtc = object.bannedAtUtc ?? undefined;
        message.bannedBy = object.bannedBy ?? undefined;
        message.body = object.body ?? undefined;
        message.bodyHtml = object.bodyHtml ?? undefined;
        message.canGild = object.canGild ?? undefined;
        message.canModPost = object.canModPost ?? undefined;
        message.collapsed = object.collapsed ?? undefined;
        message.collapsedBecauseCrowdControl = object.collapsedBecauseCrowdControl ?? undefined;
        message.collapsedReason = object.collapsedReason ?? undefined;
        message.collapsedReasonCode = object.collapsedReasonCode ?? undefined;
        message.commentType = object.commentType ?? undefined;
        message.controversiality = object.controversiality ?? undefined;
        message.created = object.created ?? undefined;
        message.createdUtc = object.createdUtc ?? undefined;
        message.depth = object.depth ?? undefined;
        message.distinguished = object.distinguished ?? undefined;
        message.downs = object.downs ?? undefined;
        message.edited = object.edited ?? undefined;
        message.gilded = object.gilded ?? undefined;
        message.gildings = (object.gildings !== undefined && object.gildings !== null)
            ? Gildings.fromPartial(object.gildings)
            : undefined;
        message.id = object.id ?? undefined;
        message.ignoreReports = object.ignoreReports ?? undefined;
        message.isSubmitter = object.isSubmitter ?? undefined;
        message.likes = object.likes ?? undefined;
        message.linkId = object.linkId ?? undefined;
        message.locked = object.locked ?? undefined;
        message.modNote = object.modNote ?? undefined;
        message.modReasonBy = object.modReasonBy ?? undefined;
        message.modReasonTitle = object.modReasonTitle ?? undefined;
        message.modReports = object.modReports?.map((e) => e) || [];
        message.name = object.name ?? undefined;
        message.noFollow = object.noFollow ?? undefined;
        message.numReports = object.numReports ?? undefined;
        message.parentId = object.parentId ?? undefined;
        message.permalink = object.permalink ?? undefined;
        message.removalReason = object.removalReason ?? undefined;
        message.removed = object.removed ?? undefined;
        message.replies = object.replies ?? undefined;
        message.reportReasons = object.reportReasons?.map((e) => e) || [];
        message.rteMode = object.rteMode ?? undefined;
        message.saved = object.saved ?? undefined;
        message.score = object.score ?? undefined;
        message.scoreHidden = object.scoreHidden ?? undefined;
        message.sendReplies = object.sendReplies ?? undefined;
        message.spam = object.spam ?? undefined;
        message.stickied = object.stickied ?? undefined;
        message.subreddit = object.subreddit ?? undefined;
        message.subredditId = object.subredditId ?? undefined;
        message.subredditNamePrefixed = object.subredditNamePrefixed ?? undefined;
        message.subredditType = object.subredditType ?? undefined;
        message.topAwardedType = object.topAwardedType ?? undefined;
        message.totalAwardsReceived = object.totalAwardsReceived ?? undefined;
        message.treatmentTags = object.treatmentTags?.map((e) => e) || [];
        message.unrepliableReason = object.unrepliableReason ?? undefined;
        message.ups = object.ups ?? undefined;
        message.userReports = object.userReports?.map((e) => e) || [];
        message.count = object.count ?? undefined;
        message.children = object.children?.map((e) => e) || [];
        message.banInfo = (object.banInfo !== undefined && object.banInfo !== null)
            ? BanInfo.fromPartial(object.banInfo)
            : undefined;
        message.markedSpam = object.markedSpam ?? undefined;
        message.verdict = object.verdict ?? undefined;
        return message;
    },
};
messageTypeRegistry.set(Comment.$type, Comment);
function isSet(value) {
    return value !== null && value !== undefined;
}
