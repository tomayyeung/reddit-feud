/**
 * #common.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
export interface AuthorFlairRichText {
    e?: string | undefined;
    t?: string | undefined;
}
/** https://github.snooguts.net/reddit/reddit-service-award/blob/f102a254636cd403627cc1125fcccab52972ea6b/award/models/award.py */
export interface Awarding {
    awardSubType?: string | undefined;
    awardType?: string | undefined;
    awardingsRequiredToGrantBenefits?: number | undefined;
    coinPrice?: number | undefined;
    coinReward?: number | undefined;
    count?: number | undefined;
    daysOfDripExtension?: number | undefined;
    daysOfPremium?: number | undefined;
    description?: string | undefined;
    endDate?: string | undefined;
    giverCoinReward?: number | undefined;
    iconFormat?: string | undefined;
    iconHeight?: number | undefined;
    iconUrl?: string | undefined;
    iconWidth?: number | undefined;
    id?: string | undefined;
    isEnabled?: boolean | undefined;
    isNew?: boolean | undefined;
    name?: string | undefined;
    pennyDonate?: number | undefined;
    pennyPrice?: number | undefined;
    resizedIcons: Awarding_Icon[];
    resizedStaticIcons: Awarding_Icon[];
    startDate?: string | undefined;
    staticIconHeight?: number | undefined;
    staticIconUrl?: string | undefined;
    staticIconWidth?: number | undefined;
    stickyDurationSeconds?: number | undefined;
    subredditCoinReward?: number | undefined;
    subredditId?: string | undefined;
    tiersByRequiredAwardings?: string | undefined;
}
export interface Awarding_Icon {
    height?: number | undefined;
    url?: string | undefined;
    width?: number | undefined;
}
export interface CommentContributionSettings {
    allowedMediaTypes: string[];
}
export interface Gildings {
    gid1?: number | undefined;
    gid2?: number | undefined;
    gid3?: number | undefined;
}
export interface MediaEmbed {
    content?: string | undefined;
    width?: number | undefined;
    height?: number | undefined;
    sandbox?: boolean | undefined;
    scrolling?: boolean | undefined;
    publicThumbnailUrl?: string | undefined;
}
export interface UserFlairRichtext {
    e?: string | undefined;
    t?: string | undefined;
}
export interface BanInfo {
    auto?: boolean | undefined;
    bannedAt?: number | undefined;
    banner?: string | undefined;
    moderatorBanned?: boolean | undefined;
    note?: string | undefined;
    unbanner?: string | undefined;
    unbannedAt?: number | undefined;
    resetUsed?: boolean | undefined;
    reasonId?: string | undefined;
    reasonTitle?: string | undefined;
    reasonMessage?: string | undefined;
    reasonBy?: string | undefined;
    modNote?: string | undefined;
    banAllTriggered?: boolean | undefined;
    subredditMessage?: string | undefined;
    removeAction: BanInfo_BanInfoAction;
}
export declare enum BanInfo_BanInfoAction {
    UNKNOWN = 0,
    SPAM = 1,
    FILTER = 2,
    REMOVE = 3,
    UNRECOGNIZED = -1
}
export declare function banInfo_BanInfoActionFromJSON(object: any): BanInfo_BanInfoAction;
export declare function banInfo_BanInfoActionToJSON(object: BanInfo_BanInfoAction): number;
export declare const AuthorFlairRichText: {
    $type: "devvit.reddit.AuthorFlairRichText";
    encode(message: AuthorFlairRichText, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AuthorFlairRichText;
    fromJSON(object: any): AuthorFlairRichText;
    toJSON(message: AuthorFlairRichText): unknown;
    create(base?: DeepPartial<AuthorFlairRichText>): AuthorFlairRichText;
    fromPartial(object: DeepPartial<AuthorFlairRichText>): AuthorFlairRichText;
};
export declare const Awarding: {
    $type: "devvit.reddit.Awarding";
    encode(message: Awarding, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Awarding;
    fromJSON(object: any): Awarding;
    toJSON(message: Awarding): unknown;
    create(base?: DeepPartial<Awarding>): Awarding;
    fromPartial(object: DeepPartial<Awarding>): Awarding;
};
export declare const Awarding_Icon: {
    $type: "devvit.reddit.Awarding.Icon";
    encode(message: Awarding_Icon, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Awarding_Icon;
    fromJSON(object: any): Awarding_Icon;
    toJSON(message: Awarding_Icon): unknown;
    create(base?: DeepPartial<Awarding_Icon>): Awarding_Icon;
    fromPartial(object: DeepPartial<Awarding_Icon>): Awarding_Icon;
};
export declare const CommentContributionSettings: {
    $type: "devvit.reddit.CommentContributionSettings";
    encode(message: CommentContributionSettings, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CommentContributionSettings;
    fromJSON(object: any): CommentContributionSettings;
    toJSON(message: CommentContributionSettings): unknown;
    create(base?: DeepPartial<CommentContributionSettings>): CommentContributionSettings;
    fromPartial(object: DeepPartial<CommentContributionSettings>): CommentContributionSettings;
};
export declare const Gildings: {
    $type: "devvit.reddit.Gildings";
    encode(message: Gildings, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Gildings;
    fromJSON(object: any): Gildings;
    toJSON(message: Gildings): unknown;
    create(base?: DeepPartial<Gildings>): Gildings;
    fromPartial(object: DeepPartial<Gildings>): Gildings;
};
export declare const MediaEmbed: {
    $type: "devvit.reddit.MediaEmbed";
    encode(message: MediaEmbed, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MediaEmbed;
    fromJSON(object: any): MediaEmbed;
    toJSON(message: MediaEmbed): unknown;
    create(base?: DeepPartial<MediaEmbed>): MediaEmbed;
    fromPartial(object: DeepPartial<MediaEmbed>): MediaEmbed;
};
export declare const UserFlairRichtext: {
    $type: "devvit.reddit.UserFlairRichtext";
    encode(message: UserFlairRichtext, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UserFlairRichtext;
    fromJSON(object: any): UserFlairRichtext;
    toJSON(message: UserFlairRichtext): unknown;
    create(base?: DeepPartial<UserFlairRichtext>): UserFlairRichtext;
    fromPartial(object: DeepPartial<UserFlairRichtext>): UserFlairRichtext;
};
export declare const BanInfo: {
    $type: "devvit.reddit.BanInfo";
    encode(message: BanInfo, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BanInfo;
    fromJSON(object: any): BanInfo;
    toJSON(message: BanInfo): unknown;
    create(base?: DeepPartial<BanInfo>): BanInfo;
    fromPartial(object: DeepPartial<BanInfo>): BanInfo;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=common.d.ts.map