/**
 * #custom_actions.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { Metadata } from "../../../../../lib/Types.js";
import { Effect } from "../../../ui/effects/v1alpha/effect.js";
import { ThingType } from "../../thing_type.js";
export interface CustomAction {
    /** Unique ID for this action */
    actionId: string;
    /** Text to display on the menu item */
    label: string;
    /** Short description for what the action will do */
    shortDescription: string;
    /** Which menus should get this action */
    menus?: CustomAction_Menus | undefined;
    /** Additional parameters to control where the action goes */
    options?: CustomAction_Options | undefined;
}
export interface CustomAction_Menus {
    subreddit?: boolean | undefined;
    post?: boolean | undefined;
    comment?: boolean | undefined;
}
export interface CustomAction_Options {
    /** If true, add to the mod tools menu and only allow a moderator to run the action */
    modTool?: boolean | undefined;
    /** Icon to show next to the label in the menu */
    icon?: string | undefined;
}
export interface GetActionsRequest {
}
export interface GetActionsResponse {
    /** List of actions provided by this actor */
    actions: CustomAction[];
}
export interface OnActionRequest {
    /** Matches the action_id in the action description */
    actionId: string;
    /** The type of menu from which the action was executed */
    thingType: ThingType;
    /** The source Thing ID from which the action was executed */
    thingId: string;
}
export interface OnActionResponse {
    /** Stateful data to send back to your app with events */
    state?: {
        [key: string]: any;
    } | undefined;
    /** Optional list of Effects to execute on the client */
    effects: Effect[];
}
export declare const CustomAction: {
    $type: "devvit.reddit.custom_actions.v2alpha.CustomAction";
    encode(message: CustomAction, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CustomAction;
    fromJSON(object: any): CustomAction;
    toJSON(message: CustomAction): unknown;
    create(base?: DeepPartial<CustomAction>): CustomAction;
    fromPartial(object: DeepPartial<CustomAction>): CustomAction;
};
export declare const CustomAction_Menus: {
    $type: "devvit.reddit.custom_actions.v2alpha.CustomAction.Menus";
    encode(message: CustomAction_Menus, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CustomAction_Menus;
    fromJSON(object: any): CustomAction_Menus;
    toJSON(message: CustomAction_Menus): unknown;
    create(base?: DeepPartial<CustomAction_Menus>): CustomAction_Menus;
    fromPartial(object: DeepPartial<CustomAction_Menus>): CustomAction_Menus;
};
export declare const CustomAction_Options: {
    $type: "devvit.reddit.custom_actions.v2alpha.CustomAction.Options";
    encode(message: CustomAction_Options, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CustomAction_Options;
    fromJSON(object: any): CustomAction_Options;
    toJSON(message: CustomAction_Options): unknown;
    create(base?: DeepPartial<CustomAction_Options>): CustomAction_Options;
    fromPartial(object: DeepPartial<CustomAction_Options>): CustomAction_Options;
};
export declare const GetActionsRequest: {
    $type: "devvit.reddit.custom_actions.v2alpha.GetActionsRequest";
    encode(_: GetActionsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetActionsRequest;
    fromJSON(_: any): GetActionsRequest;
    toJSON(_: GetActionsRequest): unknown;
    create(base?: DeepPartial<GetActionsRequest>): GetActionsRequest;
    fromPartial(_: DeepPartial<GetActionsRequest>): GetActionsRequest;
};
export declare const GetActionsResponse: {
    $type: "devvit.reddit.custom_actions.v2alpha.GetActionsResponse";
    encode(message: GetActionsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetActionsResponse;
    fromJSON(object: any): GetActionsResponse;
    toJSON(message: GetActionsResponse): unknown;
    create(base?: DeepPartial<GetActionsResponse>): GetActionsResponse;
    fromPartial(object: DeepPartial<GetActionsResponse>): GetActionsResponse;
};
export declare const OnActionRequest: {
    $type: "devvit.reddit.custom_actions.v2alpha.OnActionRequest";
    encode(message: OnActionRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): OnActionRequest;
    fromJSON(object: any): OnActionRequest;
    toJSON(message: OnActionRequest): unknown;
    create(base?: DeepPartial<OnActionRequest>): OnActionRequest;
    fromPartial(object: DeepPartial<OnActionRequest>): OnActionRequest;
};
export declare const OnActionResponse: {
    $type: "devvit.reddit.custom_actions.v2alpha.OnActionResponse";
    encode(message: OnActionResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): OnActionResponse;
    fromJSON(object: any): OnActionResponse;
    toJSON(message: OnActionResponse): unknown;
    create(base?: DeepPartial<OnActionResponse>): OnActionResponse;
    fromPartial(object: DeepPartial<OnActionResponse>): OnActionResponse;
};
export interface CustomActions {
    GetActions(request: GetActionsRequest, metadata?: Metadata): Promise<GetActionsResponse>;
    OnAction(request: OnActionRequest, metadata?: Metadata): Promise<OnActionResponse>;
}
export declare const CustomActionsServiceName = "devvit.reddit.custom_actions.v2alpha.CustomActions";
export declare class CustomActionsClientImpl implements CustomActions {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    GetActions(request: GetActionsRequest, metadata?: Metadata): Promise<GetActionsResponse>;
    OnAction(request: OnActionRequest, metadata?: Metadata): Promise<OnActionResponse>;
}
export type CustomActionsDefinition = typeof CustomActionsDefinition;
export declare const CustomActionsDefinition: {
    readonly name: "CustomActions";
    readonly fullName: "devvit.reddit.custom_actions.v2alpha.CustomActions";
    readonly methods: {
        readonly getActions: {
            readonly name: "GetActions";
            readonly requestType: {
                $type: "devvit.reddit.custom_actions.v2alpha.GetActionsRequest";
                encode(_: GetActionsRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): GetActionsRequest;
                fromJSON(_: any): GetActionsRequest;
                toJSON(_: GetActionsRequest): unknown;
                create(base?: DeepPartial<GetActionsRequest>): GetActionsRequest;
                fromPartial(_: DeepPartial<GetActionsRequest>): GetActionsRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.reddit.custom_actions.v2alpha.GetActionsResponse";
                encode(message: GetActionsResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): GetActionsResponse;
                fromJSON(object: any): GetActionsResponse;
                toJSON(message: GetActionsResponse): unknown;
                create(base?: DeepPartial<GetActionsResponse>): GetActionsResponse;
                fromPartial(object: DeepPartial<GetActionsResponse>): GetActionsResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly onAction: {
            readonly name: "OnAction";
            readonly requestType: {
                $type: "devvit.reddit.custom_actions.v2alpha.OnActionRequest";
                encode(message: OnActionRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): OnActionRequest;
                fromJSON(object: any): OnActionRequest;
                toJSON(message: OnActionRequest): unknown;
                create(base?: DeepPartial<OnActionRequest>): OnActionRequest;
                fromPartial(object: DeepPartial<OnActionRequest>): OnActionRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.reddit.custom_actions.v2alpha.OnActionResponse";
                encode(message: OnActionResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): OnActionResponse;
                fromJSON(object: any): OnActionResponse;
                toJSON(message: OnActionResponse): unknown;
                create(base?: DeepPartial<OnActionResponse>): OnActionResponse;
                fromPartial(object: DeepPartial<OnActionResponse>): OnActionResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array, metadata?: Metadata): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=custom_actions.d.ts.map