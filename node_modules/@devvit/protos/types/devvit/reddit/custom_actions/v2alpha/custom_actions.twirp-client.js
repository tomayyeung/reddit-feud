import { GetActionsRequest, GetActionsResponse, OnActionRequest, OnActionResponse, } from './custom_actions.js';
export class CustomActionsClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.GetActions.bind(this);
        this.OnAction.bind(this);
    }
    GetActions(request) {
        const data = GetActionsRequest.toJSON(request);
        const promise = this.rpc.request('devvit.reddit.custom_actions.v2alpha.CustomActions', 'GetActions', 'application/json', data);
        return promise.then((data) => GetActionsResponse.fromJSON(data));
    }
    OnAction(request) {
        const data = OnActionRequest.toJSON(request);
        const promise = this.rpc.request('devvit.reddit.custom_actions.v2alpha.CustomActions', 'OnAction', 'application/json', data);
        return promise.then((data) => OnActionResponse.fromJSON(data));
    }
}
export class CustomActionsClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.GetActions.bind(this);
        this.OnAction.bind(this);
    }
    GetActions(request) {
        const data = GetActionsRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.reddit.custom_actions.v2alpha.CustomActions', 'GetActions', 'application/protobuf', data);
        return promise.then((data) => GetActionsResponse.decode(data));
    }
    OnAction(request) {
        const data = OnActionRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.reddit.custom_actions.v2alpha.CustomActions', 'OnAction', 'application/protobuf', data);
        return promise.then((data) => OnActionResponse.decode(data));
    }
}
