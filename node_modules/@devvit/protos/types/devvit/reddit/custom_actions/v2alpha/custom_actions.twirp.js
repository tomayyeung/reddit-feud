import { TwirpServer, TwirpError, TwirpErrorCode, TwirpContentType, chainInterceptors, } from 'twirp-ts';
import { GetActionsRequest, GetActionsResponse, OnActionRequest, OnActionResponse, } from './custom_actions.js';
export var CustomActionsMethod;
(function (CustomActionsMethod) {
    CustomActionsMethod["GetActions"] = "GetActions";
    CustomActionsMethod["OnAction"] = "OnAction";
})(CustomActionsMethod || (CustomActionsMethod = {}));
export const CustomActionsMethodList = [
    CustomActionsMethod.GetActions,
    CustomActionsMethod.OnAction,
];
export function createCustomActionsServer(service) {
    return new TwirpServer({
        service,
        packageName: 'devvit.reddit.custom_actions.v2alpha',
        serviceName: 'CustomActions',
        methodList: CustomActionsMethodList,
        matchRoute: matchCustomActionsRoute,
    });
}
function matchCustomActionsRoute(method, events) {
    switch (method) {
        case 'GetActions':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'GetActions' };
                await events.onMatch(ctx);
                return handleCustomActionsGetActionsRequest(ctx, service, data, interceptors);
            };
        case 'OnAction':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'OnAction' };
                await events.onMatch(ctx);
                return handleCustomActionsOnActionRequest(ctx, service, data, interceptors);
            };
        default:
            events.onNotFound();
            const msg = `no handler found`;
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleCustomActionsGetActionsRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleCustomActionsGetActionsJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleCustomActionsGetActionsProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleCustomActionsOnActionRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleCustomActionsOnActionJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleCustomActionsOnActionProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
async function handleCustomActionsGetActionsJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = GetActionsRequest.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.GetActions(ctx, inputReq);
        });
    }
    else {
        response = await service.GetActions(ctx, request);
    }
    return JSON.stringify(GetActionsResponse.toJSON(response));
}
async function handleCustomActionsOnActionJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = OnActionRequest.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.OnAction(ctx, inputReq);
        });
    }
    else {
        response = await service.OnAction(ctx, request);
    }
    return JSON.stringify(OnActionResponse.toJSON(response));
}
async function handleCustomActionsGetActionsProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = GetActionsRequest.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.GetActions(ctx, inputReq);
        });
    }
    else {
        response = await service.GetActions(ctx, request);
    }
    return Buffer.from(GetActionsResponse.encode(response).finish());
}
async function handleCustomActionsOnActionProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = OnActionRequest.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.OnAction(ctx, inputReq);
        });
    }
    else {
        response = await service.OnAction(ctx, request);
    }
    return Buffer.from(OnActionResponse.encode(response).finish());
}
