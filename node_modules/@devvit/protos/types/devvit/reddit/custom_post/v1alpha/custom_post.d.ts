/**
 * #custom_post.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { Metadata } from "../../../../../lib/Types.js";
import { BlockRenderRequest, BlockRenderResponse } from "../../../ui/block_kit/v1beta/rendering.js";
import { UIRequest, UIResponse } from "../../../ui/block_kit/v1beta/ui.js";
import { Effect } from "../../../ui/effects/v1alpha/effect.js";
/**
 * Dimensions describe the layout characteristics of a custom post within Devvit.
 * They are used to allow Devvitors to create responsive experiences within their post. For
 * example, they can use this API to conditionally render an element on small viewports only.
 *
 * @deprecated Use devvit.ui.events.v1alpha.UIDimensions instead.
 *
 * @deprecated
 */
export interface Dimensions {
    /** Unitless pixels describing the content box height for the custom post */
    height: number;
    /** Unitless pixels describing the content box width for the custom post */
    width: number;
    /** Describes the device pixel ratio for a device. */
    scale: number;
    /** Web only: describes the font scaling pixel ratio for a browser window. */
    fontScale?: number | undefined;
}
/**
 * **DO NOT EDIT**
 *
 * This message is deprecated and should be fixed in time to maintain backwards compatability.
 *
 * @deprecated
 */
export interface RenderPostRequest {
    /** Stateful data received from a previous response */
    state?: {
        [key: string]: any;
    } | undefined;
    /** Render the post with Blocks */
    blocks?: BlockRenderRequest | undefined;
    /** Dimensions provides a way for the entry point to provide layout information to the proto. */
    dimensions?: Dimensions | undefined;
}
/**
 * **DO NOT EDIT**
 *
 * This message is deprecated and should be fixed in time to maintain backwards compatability.
 *
 * @deprecated
 */
export interface RenderPostResponse {
    /** Stateful data to send back to your app with events */
    state?: {
        [key: string]: any;
    } | undefined;
    /** Optional list of Effects to execute on the client */
    effects: Effect[];
    /** Blocks UI rendering of the post */
    blocks?: BlockRenderResponse | undefined;
}
export declare const Dimensions: {
    $type: "devvit.reddit.custom_post.v1alpha.Dimensions";
    encode(message: Dimensions, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Dimensions;
    fromJSON(object: any): Dimensions;
    toJSON(message: Dimensions): unknown;
    create(base?: DeepPartial<Dimensions>): Dimensions;
    fromPartial(object: DeepPartial<Dimensions>): Dimensions;
};
export declare const RenderPostRequest: {
    $type: "devvit.reddit.custom_post.v1alpha.RenderPostRequest";
    encode(message: RenderPostRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RenderPostRequest;
    fromJSON(object: any): RenderPostRequest;
    toJSON(message: RenderPostRequest): unknown;
    create(base?: DeepPartial<RenderPostRequest>): RenderPostRequest;
    fromPartial(object: DeepPartial<RenderPostRequest>): RenderPostRequest;
};
export declare const RenderPostResponse: {
    $type: "devvit.reddit.custom_post.v1alpha.RenderPostResponse";
    encode(message: RenderPostResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RenderPostResponse;
    fromJSON(object: any): RenderPostResponse;
    toJSON(message: RenderPostResponse): unknown;
    create(base?: DeepPartial<RenderPostResponse>): RenderPostResponse;
    fromPartial(object: DeepPartial<RenderPostResponse>): RenderPostResponse;
};
/**
 * Custom post type.  Most custom post types will also implement InstanceSettings,
 * which will allow them to be customized by the user in the post creation flow.
 *
 * Custom post types should also look up their instance and installation settings.
 */
export interface CustomPost {
    /**
     * This is deprecated and should be fixed in time to maintain backwards compatability.
     * Please call RenderPostBody instead.
     *
     * @deprecated
     */
    RenderPost(request: RenderPostRequest, metadata?: Metadata): Promise<RenderPostResponse>;
    RenderPostContent(request: UIRequest, metadata?: Metadata): Promise<UIResponse>;
    RenderPostComposer(request: UIRequest, metadata?: Metadata): Promise<UIResponse>;
}
export declare const CustomPostServiceName = "devvit.reddit.custom_post.v1alpha.CustomPost";
export declare class CustomPostClientImpl implements CustomPost {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    RenderPost(request: RenderPostRequest, metadata?: Metadata): Promise<RenderPostResponse>;
    RenderPostContent(request: UIRequest, metadata?: Metadata): Promise<UIResponse>;
    RenderPostComposer(request: UIRequest, metadata?: Metadata): Promise<UIResponse>;
}
/**
 * Custom post type.  Most custom post types will also implement InstanceSettings,
 * which will allow them to be customized by the user in the post creation flow.
 *
 * Custom post types should also look up their instance and installation settings.
 */
export type CustomPostDefinition = typeof CustomPostDefinition;
export declare const CustomPostDefinition: {
    readonly name: "CustomPost";
    readonly fullName: "devvit.reddit.custom_post.v1alpha.CustomPost";
    readonly methods: {
        /**
         * This is deprecated and should be fixed in time to maintain backwards compatability.
         * Please call RenderPostBody instead.
         *
         * @deprecated
         */
        readonly renderPost: {
            readonly name: "RenderPost";
            readonly requestType: {
                $type: "devvit.reddit.custom_post.v1alpha.RenderPostRequest";
                encode(message: RenderPostRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): RenderPostRequest;
                fromJSON(object: any): RenderPostRequest;
                toJSON(message: RenderPostRequest): unknown;
                create(base?: DeepPartial<RenderPostRequest>): RenderPostRequest;
                fromPartial(object: DeepPartial<RenderPostRequest>): RenderPostRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.reddit.custom_post.v1alpha.RenderPostResponse";
                encode(message: RenderPostResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): RenderPostResponse;
                fromJSON(object: any): RenderPostResponse;
                toJSON(message: RenderPostResponse): unknown;
                create(base?: DeepPartial<RenderPostResponse>): RenderPostResponse;
                fromPartial(object: DeepPartial<RenderPostResponse>): RenderPostResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly renderPostContent: {
            readonly name: "RenderPostContent";
            readonly requestType: {
                $type: "devvit.ui.block_kit.v1beta.UIRequest";
                encode(message: UIRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): UIRequest;
                fromJSON(object: any): UIRequest;
                toJSON(message: UIRequest): unknown;
                create(base?: {
                    env?: {
                        locale?: string | undefined;
                        colorScheme?: string | undefined;
                        dimensions?: {
                            height?: number;
                            width?: number;
                            scale?: number;
                            fontScale?: number | undefined;
                        } | undefined;
                        timezone?: string | undefined;
                    } | undefined;
                    props?: {
                        [x: string]: any;
                    } | undefined;
                    state?: {
                        [x: string]: any;
                    } | undefined;
                    events?: {
                        realtimeEvent?: {
                            event?: {
                                channel?: string;
                                data?: {
                                    [x: string]: any;
                                } | undefined;
                            } | undefined;
                            status?: import("../../../../../index.js").RealtimeSubscriptionStatus | undefined;
                        } | undefined;
                        formSubmitted?: {
                            results?: {
                                [x: string]: {
                                    fieldType?: import("../../../../../community.js").FormFieldType;
                                    isSecret?: boolean | undefined;
                                    stringValue?: string | undefined;
                                    numberValue?: number | undefined;
                                    boolValue?: boolean | undefined;
                                    listValue?: {
                                        itemType?: import("../../../../../community.js").FormFieldType;
                                        items?: any[];
                                    } | undefined;
                                    selectionValue?: {
                                        values?: string[];
                                    } | undefined;
                                    groupValue?: {} | undefined;
                                } | undefined;
                            };
                            formId?: string | undefined;
                        } | undefined;
                        orderResult?: {
                            errorMessage?: string | undefined;
                            orderId?: string | undefined;
                            order?: {
                                id?: string;
                                skus?: string[];
                                metadata?: {
                                    [x: string]: string | undefined;
                                };
                            } | undefined;
                            status?: import("../../../../../payments.js").OrderResultStatus;
                            errorCode?: number | undefined;
                        } | undefined;
                        toastAction?: {} | undefined;
                        userAction?: {
                            actionId?: string;
                            data?: {
                                [x: string]: any;
                            } | undefined;
                        } | undefined;
                        asyncRequest?: {
                            requestId?: string;
                            data?: {
                                [x: string]: any;
                            } | undefined;
                        } | undefined;
                        asyncResponse?: {
                            requestId?: string;
                            data?: {
                                [x: string]: any;
                            } | undefined;
                            error?: {
                                message?: string;
                                details?: string;
                            } | undefined;
                        } | undefined;
                        timer?: {} | undefined;
                        blocking?: {} | undefined;
                        resize?: {} | undefined;
                        webView?: {
                            postMessage?: {
                                message?: any;
                            } | undefined;
                            fullScreen?: {
                                visibility?: import("../../../ui/events/v1alpha/web_view.js").WebViewVisibility;
                            } | undefined;
                        } | undefined;
                        async?: boolean | undefined;
                        hook?: string | undefined;
                        retry?: boolean | undefined;
                        scope?: import("../../../../../index.js").UIEventScope | undefined;
                    }[];
                } | undefined): UIRequest;
                fromPartial(object: {
                    env?: {
                        locale?: string | undefined;
                        colorScheme?: string | undefined;
                        dimensions?: {
                            height?: number;
                            width?: number;
                            scale?: number;
                            fontScale?: number | undefined;
                        } | undefined;
                        timezone?: string | undefined;
                    } | undefined;
                    props?: {
                        [x: string]: any;
                    } | undefined;
                    state?: {
                        [x: string]: any;
                    } | undefined;
                    events?: {
                        realtimeEvent?: {
                            event?: {
                                channel?: string;
                                data?: {
                                    [x: string]: any;
                                } | undefined;
                            } | undefined;
                            status?: import("../../../../../index.js").RealtimeSubscriptionStatus | undefined;
                        } | undefined;
                        formSubmitted?: {
                            results?: {
                                [x: string]: {
                                    fieldType?: import("../../../../../community.js").FormFieldType;
                                    isSecret?: boolean | undefined;
                                    stringValue?: string | undefined;
                                    numberValue?: number | undefined;
                                    boolValue?: boolean | undefined;
                                    listValue?: {
                                        itemType?: import("../../../../../community.js").FormFieldType;
                                        items?: any[];
                                    } | undefined;
                                    selectionValue?: {
                                        values?: string[];
                                    } | undefined;
                                    groupValue?: {} | undefined;
                                } | undefined;
                            };
                            formId?: string | undefined;
                        } | undefined;
                        orderResult?: {
                            errorMessage?: string | undefined;
                            orderId?: string | undefined;
                            order?: {
                                id?: string;
                                skus?: string[];
                                metadata?: {
                                    [x: string]: string | undefined;
                                };
                            } | undefined;
                            status?: import("../../../../../payments.js").OrderResultStatus;
                            errorCode?: number | undefined;
                        } | undefined;
                        toastAction?: {} | undefined;
                        userAction?: {
                            actionId?: string;
                            data?: {
                                [x: string]: any;
                            } | undefined;
                        } | undefined;
                        asyncRequest?: {
                            requestId?: string;
                            data?: {
                                [x: string]: any;
                            } | undefined;
                        } | undefined;
                        asyncResponse?: {
                            requestId?: string;
                            data?: {
                                [x: string]: any;
                            } | undefined;
                            error?: {
                                message?: string;
                                details?: string;
                            } | undefined;
                        } | undefined;
                        timer?: {} | undefined;
                        blocking?: {} | undefined;
                        resize?: {} | undefined;
                        webView?: {
                            postMessage?: {
                                message?: any;
                            } | undefined;
                            fullScreen?: {
                                visibility?: import("../../../ui/events/v1alpha/web_view.js").WebViewVisibility;
                            } | undefined;
                        } | undefined;
                        async?: boolean | undefined;
                        hook?: string | undefined;
                        retry?: boolean | undefined;
                        scope?: import("../../../../../index.js").UIEventScope | undefined;
                    }[];
                }): UIRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.ui.block_kit.v1beta.UIResponse";
                encode(message: UIResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): UIResponse;
                fromJSON(object: any): UIResponse;
                toJSON(message: UIResponse): unknown;
                create(base?: {
                    state?: {
                        [x: string]: any;
                    } | undefined;
                    effects?: {
                        realtimeSubscriptions?: {
                            subscriptionIds?: string[];
                        } | undefined;
                        rerenderUi?: {
                            delaySeconds?: number | undefined;
                        } | undefined;
                        reloadPart?: {
                            subreddit?: {
                                subredditId?: string;
                            } | undefined;
                            post?: {
                                postId?: string;
                                body?: boolean | undefined;
                                comments?: boolean | undefined;
                            } | undefined;
                            comment?: {
                                postId?: string;
                                commentId?: string;
                                replies?: boolean | undefined;
                            } | undefined;
                        } | undefined;
                        showForm?: {
                            form?: {
                                fields?: {
                                    fieldId?: string;
                                    fieldType?: import("../../../../../community.js").FormFieldType;
                                    label?: string;
                                    helpText?: string | undefined;
                                    defaultValue?: {
                                        fieldType?: import("../../../../../community.js").FormFieldType;
                                        isSecret?: boolean | undefined;
                                        stringValue?: string | undefined;
                                        numberValue?: number | undefined;
                                        boolValue?: boolean | undefined;
                                        listValue?: {
                                            itemType?: import("../../../../../community.js").FormFieldType;
                                            items?: any[];
                                        } | undefined;
                                        selectionValue?: {
                                            values?: string[];
                                        } | undefined;
                                        groupValue?: {} | undefined;
                                    } | undefined;
                                    required?: boolean | undefined;
                                    disabled?: boolean | undefined;
                                    fieldConfig?: {
                                        stringConfig?: {
                                            minLength?: number | undefined;
                                            maxLength?: number | undefined;
                                            placeholder?: string | undefined;
                                        } | undefined;
                                        paragraphConfig?: {
                                            maxCharacters?: number | undefined;
                                            lineHeight?: number | undefined;
                                            placeholder?: string | undefined;
                                        } | undefined;
                                        numberConfig?: {
                                            step?: number | undefined;
                                            min?: number | undefined;
                                            max?: number | undefined;
                                        } | undefined;
                                        booleanConfig?: {} | undefined;
                                        listConfig?: {
                                            itemType?: import("../../../../../community.js").FormFieldType;
                                            itemConfig?: any | undefined;
                                            minEntries?: number | undefined;
                                            maxEntries?: number | undefined;
                                            entryLabel?: string | undefined;
                                        } | undefined;
                                        selectionConfig?: {
                                            choices?: {
                                                label?: string;
                                                value?: string;
                                            }[];
                                            multiSelect?: boolean | undefined;
                                            minSelections?: number | undefined;
                                            maxSelections?: number | undefined;
                                            renderAsList?: boolean | undefined;
                                        } | undefined;
                                        groupConfig?: {
                                            fields?: any[];
                                        } | undefined;
                                    } | undefined;
                                    isSecret?: boolean | undefined;
                                }[];
                                title?: string | undefined;
                                shortDescription?: string | undefined;
                                acceptLabel?: string | undefined;
                                cancelLabel?: string | undefined;
                                id?: string | undefined;
                            } | undefined;
                        } | undefined;
                        showToast?: {
                            toast?: {
                                text?: string;
                                appearance?: import("../../../ui/toast/toast.js").ToastAppearance | undefined;
                                leadingElement?: {
                                    icon?: string | undefined;
                                    emoji?: string | undefined;
                                    avatar?: string | undefined;
                                } | undefined;
                                trailingElement?: {
                                    label?: string | undefined;
                                    icon?: string | undefined;
                                } | undefined;
                            } | undefined;
                        } | undefined;
                        navigateToUrl?: {
                            url?: string;
                            target?: string | undefined;
                        } | undefined;
                        interval?: {
                            intervals?: {
                                [x: string]: {
                                    duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    } | undefined;
                                    async?: boolean | undefined;
                                } | undefined;
                            };
                        } | undefined;
                        createOrder?: {
                            id?: string;
                            skus?: string[];
                            metadata?: {
                                [x: string]: string | undefined;
                            };
                        } | undefined;
                        webView?: {
                            postMessage?: {
                                webViewId?: string;
                                app?: {
                                    message?: any;
                                } | undefined;
                                state?: {
                                    state?: {
                                        [x: string]: any;
                                    } | undefined;
                                } | undefined;
                            } | undefined;
                            fullscreen?: {
                                show?: boolean;
                                url?: string;
                            } | undefined;
                        } | undefined;
                        type?: import("../../../ui/effects/v1alpha/effect.js").EffectType;
                    }[];
                    events?: {
                        realtimeEvent?: {
                            event?: {
                                channel?: string;
                                data?: {
                                    [x: string]: any;
                                } | undefined;
                            } | undefined;
                            status?: import("../../../../../index.js").RealtimeSubscriptionStatus | undefined;
                        } | undefined;
                        formSubmitted?: {
                            results?: {
                                [x: string]: {
                                    fieldType?: import("../../../../../community.js").FormFieldType;
                                    isSecret?: boolean | undefined;
                                    stringValue?: string | undefined;
                                    numberValue?: number | undefined;
                                    boolValue?: boolean | undefined;
                                    listValue?: {
                                        itemType?: import("../../../../../community.js").FormFieldType;
                                        items?: any[];
                                    } | undefined;
                                    selectionValue?: {
                                        values?: string[];
                                    } | undefined;
                                    groupValue?: {} | undefined;
                                } | undefined;
                            };
                            formId?: string | undefined;
                        } | undefined;
                        orderResult?: {
                            errorMessage?: string | undefined;
                            orderId?: string | undefined;
                            order?: {
                                id?: string;
                                skus?: string[];
                                metadata?: {
                                    [x: string]: string | undefined;
                                };
                            } | undefined;
                            status?: import("../../../../../payments.js").OrderResultStatus;
                            errorCode?: number | undefined;
                        } | undefined;
                        toastAction?: {} | undefined;
                        userAction?: {
                            actionId?: string;
                            data?: {
                                [x: string]: any;
                            } | undefined;
                        } | undefined;
                        asyncRequest?: {
                            requestId?: string;
                            data?: {
                                [x: string]: any;
                            } | undefined;
                        } | undefined;
                        asyncResponse?: {
                            requestId?: string;
                            data?: {
                                [x: string]: any;
                            } | undefined;
                            error?: {
                                message?: string;
                                details?: string;
                            } | undefined;
                        } | undefined;
                        timer?: {} | undefined;
                        blocking?: {} | undefined;
                        resize?: {} | undefined;
                        webView?: {
                            postMessage?: {
                                message?: any;
                            } | undefined;
                            fullScreen?: {
                                visibility?: import("../../../ui/events/v1alpha/web_view.js").WebViewVisibility;
                            } | undefined;
                        } | undefined;
                        async?: boolean | undefined;
                        hook?: string | undefined;
                        retry?: boolean | undefined;
                        scope?: import("../../../../../index.js").UIEventScope | undefined;
                    }[];
                    blocks?: {
                        type?: import("../../../../../index.js").BlockType;
                        size?: {
                            grow?: boolean | undefined;
                            width?: number | undefined;
                            widthUnit?: import("../../../../../index.js").BlockSizeUnit | undefined;
                            height?: number | undefined;
                            heightUnit?: import("../../../../../index.js").BlockSizeUnit | undefined;
                        } | undefined;
                        sizes?: {
                            grow?: boolean | undefined;
                            width?: {
                                value?: {
                                    value?: number;
                                    unit?: import("../../../../../index.js").BlockSizeUnit;
                                } | undefined;
                                min?: {
                                    value?: number;
                                    unit?: import("../../../../../index.js").BlockSizeUnit;
                                } | undefined;
                                max?: {
                                    value?: number;
                                    unit?: import("../../../../../index.js").BlockSizeUnit;
                                } | undefined;
                            } | undefined;
                            height?: {
                                value?: {
                                    value?: number;
                                    unit?: import("../../../../../index.js").BlockSizeUnit;
                                } | undefined;
                                min?: {
                                    value?: number;
                                    unit?: import("../../../../../index.js").BlockSizeUnit;
                                } | undefined;
                                max?: {
                                    value?: number;
                                    unit?: import("../../../../../index.js").BlockSizeUnit;
                                } | undefined;
                            } | undefined;
                        } | undefined;
                        config?: {
                            rootConfig?: {
                                children?: any[];
                                height?: number;
                            } | undefined;
                            stackConfig?: {
                                direction?: import("../../../../../index.js").BlockStackDirection;
                                children?: any[];
                                reverse?: boolean | undefined;
                                alignment?: {
                                    vertical?: import("../../../../../index.js").BlockVerticalAlignment | undefined;
                                    horizontal?: import("../../../../../index.js").BlockHorizontalAlignment | undefined;
                                } | undefined;
                                padding?: import("../../../../../index.js").BlockPadding | undefined;
                                gap?: import("../../../../../index.js").BlockGap | undefined;
                                border?: {
                                    color?: string | undefined;
                                    width?: import("../../../../../index.js").BlockBorderWidth | undefined;
                                    colors?: {
                                        light?: string | undefined;
                                        dark?: string | undefined;
                                    } | undefined;
                                } | undefined;
                                cornerRadius?: import("../../../../../index.js").BlockRadius | undefined;
                                backgroundColor?: string | undefined;
                                backgroundColors?: {
                                    light?: string | undefined;
                                    dark?: string | undefined;
                                } | undefined;
                            } | undefined;
                            textConfig?: {
                                text?: string;
                                size?: import("../../../../../index.js").BlockTextSize | undefined;
                                weight?: import("../../../../../index.js").BlockTextWeight | undefined;
                                color?: string | undefined;
                                alignment?: {
                                    vertical?: import("../../../../../index.js").BlockVerticalAlignment | undefined;
                                    horizontal?: import("../../../../../index.js").BlockHorizontalAlignment | undefined;
                                } | undefined;
                                outline?: import("../../../../../index.js").BlockTextOutline | undefined;
                                style?: import("../../../../../index.js").BlockTextStyle | undefined;
                                selectable?: boolean | undefined;
                                colors?: {
                                    light?: string | undefined;
                                    dark?: string | undefined;
                                } | undefined;
                                wrap?: boolean | undefined;
                                overflow?: import("../../../../../index.js").BlockTextOverflow | undefined;
                            } | undefined;
                            buttonConfig?: {
                                text?: string | undefined;
                                icon?: string | undefined;
                                buttonSize?: import("../../../../../index.js").BlockButtonSize | undefined;
                                buttonAppearance?: import("../../../../../index.js").BlockButtonAppearance | undefined;
                                textColor?: string | undefined;
                                backgroundColor?: string | undefined;
                                disabled?: boolean | undefined;
                                textColors?: {
                                    light?: string | undefined;
                                    dark?: string | undefined;
                                } | undefined;
                                backgroundColors?: {
                                    light?: string | undefined;
                                    dark?: string | undefined;
                                } | undefined;
                            } | undefined;
                            imageConfig?: {
                                url?: string;
                                width?: number;
                                height?: number;
                                description?: string | undefined;
                                resizeMode?: import("../../../../../index.js").BlockImageResizeMode | undefined;
                            } | undefined;
                            spacerConfig?: {
                                size?: import("../../../../../index.js").BlockSpacerSize | undefined;
                                shape?: import("../../../../../index.js").BlockSpacerShape | undefined;
                            } | undefined;
                            iconConfig?: {
                                icon?: string;
                                color?: string | undefined;
                                size?: import("../../../../../index.js").BlockIconSize | undefined;
                                colors?: {
                                    light?: string | undefined;
                                    dark?: string | undefined;
                                } | undefined;
                            } | undefined;
                            avatarConfig?: {
                                thingId?: string;
                                facing?: import("../../../../../index.js").BlockAvatarFacing | undefined;
                                size?: import("../../../../../index.js").BlockAvatarSize | undefined;
                                background?: import("../../../../../index.js").BlockAvatarBackground | undefined;
                            } | undefined;
                            fullsnooConfig?: {
                                userId?: string;
                                facing?: import("../../../../../index.js").BlockAvatarFacing | undefined;
                                size?: import("../../../../../index.js").BlockFullSnooSize | undefined;
                            } | undefined;
                            animationConfig?: {
                                url?: string;
                                width?: number;
                                height?: number;
                                type?: import("../../../../../index.js").BlockAnimationType;
                                loop?: boolean | undefined;
                                loopMode?: import("../../../../../index.js").BlockAnimationLoopMode | undefined;
                                autoplay?: boolean | undefined;
                                speed?: number | undefined;
                                direction?: import("../../../../../index.js").BlockAnimationDirection | undefined;
                            } | undefined;
                            webviewConfig?: {
                                url?: string;
                                state?: {
                                    [x: string]: any;
                                } | undefined;
                            } | undefined;
                        } | undefined;
                        actions?: {
                            type?: import("../../../../../index.js").BlockActionType;
                            id?: string;
                            data?: {
                                [x: string]: any;
                            } | undefined;
                        }[];
                        id?: string | undefined;
                        key?: string | undefined;
                    } | undefined;
                } | undefined): UIResponse;
                fromPartial(object: {
                    state?: {
                        [x: string]: any;
                    } | undefined;
                    effects?: {
                        realtimeSubscriptions?: {
                            subscriptionIds?: string[];
                        } | undefined;
                        rerenderUi?: {
                            delaySeconds?: number | undefined;
                        } | undefined;
                        reloadPart?: {
                            subreddit?: {
                                subredditId?: string;
                            } | undefined;
                            post?: {
                                postId?: string;
                                body?: boolean | undefined;
                                comments?: boolean | undefined;
                            } | undefined;
                            comment?: {
                                postId?: string;
                                commentId?: string;
                                replies?: boolean | undefined;
                            } | undefined;
                        } | undefined;
                        showForm?: {
                            form?: {
                                fields?: {
                                    fieldId?: string;
                                    fieldType?: import("../../../../../community.js").FormFieldType;
                                    label?: string;
                                    helpText?: string | undefined;
                                    defaultValue?: {
                                        fieldType?: import("../../../../../community.js").FormFieldType;
                                        isSecret?: boolean | undefined;
                                        stringValue?: string | undefined;
                                        numberValue?: number | undefined;
                                        boolValue?: boolean | undefined;
                                        listValue?: {
                                            itemType?: import("../../../../../community.js").FormFieldType;
                                            items?: any[];
                                        } | undefined;
                                        selectionValue?: {
                                            values?: string[];
                                        } | undefined;
                                        groupValue?: {} | undefined;
                                    } | undefined;
                                    required?: boolean | undefined;
                                    disabled?: boolean | undefined;
                                    fieldConfig?: {
                                        stringConfig?: {
                                            minLength?: number | undefined;
                                            maxLength?: number | undefined;
                                            placeholder?: string | undefined;
                                        } | undefined;
                                        paragraphConfig?: {
                                            maxCharacters?: number | undefined;
                                            lineHeight?: number | undefined;
                                            placeholder?: string | undefined;
                                        } | undefined;
                                        numberConfig?: {
                                            step?: number | undefined;
                                            min?: number | undefined;
                                            max?: number | undefined;
                                        } | undefined;
                                        booleanConfig?: {} | undefined;
                                        listConfig?: {
                                            itemType?: import("../../../../../community.js").FormFieldType;
                                            itemConfig?: any | undefined;
                                            minEntries?: number | undefined;
                                            maxEntries?: number | undefined;
                                            entryLabel?: string | undefined;
                                        } | undefined;
                                        selectionConfig?: {
                                            choices?: {
                                                label?: string;
                                                value?: string;
                                            }[];
                                            multiSelect?: boolean | undefined;
                                            minSelections?: number | undefined;
                                            maxSelections?: number | undefined;
                                            renderAsList?: boolean | undefined;
                                        } | undefined;
                                        groupConfig?: {
                                            fields?: any[];
                                        } | undefined;
                                    } | undefined;
                                    isSecret?: boolean | undefined;
                                }[];
                                title?: string | undefined;
                                shortDescription?: string | undefined;
                                acceptLabel?: string | undefined;
                                cancelLabel?: string | undefined;
                                id?: string | undefined;
                            } | undefined;
                        } | undefined;
                        showToast?: {
                            toast?: {
                                text?: string;
                                appearance?: import("../../../ui/toast/toast.js").ToastAppearance | undefined;
                                leadingElement?: {
                                    icon?: string | undefined;
                                    emoji?: string | undefined;
                                    avatar?: string | undefined;
                                } | undefined;
                                trailingElement?: {
                                    label?: string | undefined;
                                    icon?: string | undefined;
                                } | undefined;
                            } | undefined;
                        } | undefined;
                        navigateToUrl?: {
                            url?: string;
                            target?: string | undefined;
                        } | undefined;
                        interval?: {
                            intervals?: {
                                [x: string]: {
                                    duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    } | undefined;
                                    async?: boolean | undefined;
                                } | undefined;
                            };
                        } | undefined;
                        createOrder?: {
                            id?: string;
                            skus?: string[];
                            metadata?: {
                                [x: string]: string | undefined;
                            };
                        } | undefined;
                        webView?: {
                            postMessage?: {
                                webViewId?: string;
                                app?: {
                                    message?: any;
                                } | undefined;
                                state?: {
                                    state?: {
                                        [x: string]: any;
                                    } | undefined;
                                } | undefined;
                            } | undefined;
                            fullscreen?: {
                                show?: boolean;
                                url?: string;
                            } | undefined;
                        } | undefined;
                        type?: import("../../../ui/effects/v1alpha/effect.js").EffectType;
                    }[];
                    events?: {
                        realtimeEvent?: {
                            event?: {
                                channel?: string;
                                data?: {
                                    [x: string]: any;
                                } | undefined;
                            } | undefined;
                            status?: import("../../../../../index.js").RealtimeSubscriptionStatus | undefined;
                        } | undefined;
                        formSubmitted?: {
                            results?: {
                                [x: string]: {
                                    fieldType?: import("../../../../../community.js").FormFieldType;
                                    isSecret?: boolean | undefined;
                                    stringValue?: string | undefined;
                                    numberValue?: number | undefined;
                                    boolValue?: boolean | undefined;
                                    listValue?: {
                                        itemType?: import("../../../../../community.js").FormFieldType;
                                        items?: any[];
                                    } | undefined;
                                    selectionValue?: {
                                        values?: string[];
                                    } | undefined;
                                    groupValue?: {} | undefined;
                                } | undefined;
                            };
                            formId?: string | undefined;
                        } | undefined;
                        orderResult?: {
                            errorMessage?: string | undefined;
                            orderId?: string | undefined;
                            order?: {
                                id?: string;
                                skus?: string[];
                                metadata?: {
                                    [x: string]: string | undefined;
                                };
                            } | undefined;
                            status?: import("../../../../../payments.js").OrderResultStatus;
                            errorCode?: number | undefined;
                        } | undefined;
                        toastAction?: {} | undefined;
                        userAction?: {
                            actionId?: string;
                            data?: {
                                [x: string]: any;
                            } | undefined;
                        } | undefined;
                        asyncRequest?: {
                            requestId?: string;
                            data?: {
                                [x: string]: any;
                            } | undefined;
                        } | undefined;
                        asyncResponse?: {
                            requestId?: string;
                            data?: {
                                [x: string]: any;
                            } | undefined;
                            error?: {
                                message?: string;
                                details?: string;
                            } | undefined;
                        } | undefined;
                        timer?: {} | undefined;
                        blocking?: {} | undefined;
                        resize?: {} | undefined;
                        webView?: {
                            postMessage?: {
                                message?: any;
                            } | undefined;
                            fullScreen?: {
                                visibility?: import("../../../ui/events/v1alpha/web_view.js").WebViewVisibility;
                            } | undefined;
                        } | undefined;
                        async?: boolean | undefined;
                        hook?: string | undefined;
                        retry?: boolean | undefined;
                        scope?: import("../../../../../index.js").UIEventScope | undefined;
                    }[];
                    blocks?: {
                        type?: import("../../../../../index.js").BlockType;
                        size?: {
                            grow?: boolean | undefined;
                            width?: number | undefined;
                            widthUnit?: import("../../../../../index.js").BlockSizeUnit | undefined;
                            height?: number | undefined;
                            heightUnit?: import("../../../../../index.js").BlockSizeUnit | undefined;
                        } | undefined;
                        sizes?: {
                            grow?: boolean | undefined;
                            width?: {
                                value?: {
                                    value?: number;
                                    unit?: import("../../../../../index.js").BlockSizeUnit;
                                } | undefined;
                                min?: {
                                    value?: number;
                                    unit?: import("../../../../../index.js").BlockSizeUnit;
                                } | undefined;
                                max?: {
                                    value?: number;
                                    unit?: import("../../../../../index.js").BlockSizeUnit;
                                } | undefined;
                            } | undefined;
                            height?: {
                                value?: {
                                    value?: number;
                                    unit?: import("../../../../../index.js").BlockSizeUnit;
                                } | undefined;
                                min?: {
                                    value?: number;
                                    unit?: import("../../../../../index.js").BlockSizeUnit;
                                } | undefined;
                                max?: {
                                    value?: number;
                                    unit?: import("../../../../../index.js").BlockSizeUnit;
                                } | undefined;
                            } | undefined;
                        } | undefined;
                        config?: {
                            rootConfig?: {
                                children?: any[];
                                height?: number;
                            } | undefined;
                            stackConfig?: {
                                direction?: import("../../../../../index.js").BlockStackDirection;
                                children?: any[];
                                reverse?: boolean | undefined;
                                alignment?: {
                                    vertical?: import("../../../../../index.js").BlockVerticalAlignment | undefined;
                                    horizontal?: import("../../../../../index.js").BlockHorizontalAlignment | undefined;
                                } | undefined;
                                padding?: import("../../../../../index.js").BlockPadding | undefined;
                                gap?: import("../../../../../index.js").BlockGap | undefined;
                                border?: {
                                    color?: string | undefined;
                                    width?: import("../../../../../index.js").BlockBorderWidth | undefined;
                                    colors?: {
                                        light?: string | undefined;
                                        dark?: string | undefined;
                                    } | undefined;
                                } | undefined;
                                cornerRadius?: import("../../../../../index.js").BlockRadius | undefined;
                                backgroundColor?: string | undefined;
                                backgroundColors?: {
                                    light?: string | undefined;
                                    dark?: string | undefined;
                                } | undefined;
                            } | undefined;
                            textConfig?: {
                                text?: string;
                                size?: import("../../../../../index.js").BlockTextSize | undefined;
                                weight?: import("../../../../../index.js").BlockTextWeight | undefined;
                                color?: string | undefined;
                                alignment?: {
                                    vertical?: import("../../../../../index.js").BlockVerticalAlignment | undefined;
                                    horizontal?: import("../../../../../index.js").BlockHorizontalAlignment | undefined;
                                } | undefined;
                                outline?: import("../../../../../index.js").BlockTextOutline | undefined;
                                style?: import("../../../../../index.js").BlockTextStyle | undefined;
                                selectable?: boolean | undefined;
                                colors?: {
                                    light?: string | undefined;
                                    dark?: string | undefined;
                                } | undefined;
                                wrap?: boolean | undefined;
                                overflow?: import("../../../../../index.js").BlockTextOverflow | undefined;
                            } | undefined;
                            buttonConfig?: {
                                text?: string | undefined;
                                icon?: string | undefined;
                                buttonSize?: import("../../../../../index.js").BlockButtonSize | undefined;
                                buttonAppearance?: import("../../../../../index.js").BlockButtonAppearance | undefined;
                                textColor?: string | undefined;
                                backgroundColor?: string | undefined;
                                disabled?: boolean | undefined;
                                textColors?: {
                                    light?: string | undefined;
                                    dark?: string | undefined;
                                } | undefined;
                                backgroundColors?: {
                                    light?: string | undefined;
                                    dark?: string | undefined;
                                } | undefined;
                            } | undefined;
                            imageConfig?: {
                                url?: string;
                                width?: number;
                                height?: number;
                                description?: string | undefined;
                                resizeMode?: import("../../../../../index.js").BlockImageResizeMode | undefined;
                            } | undefined;
                            spacerConfig?: {
                                size?: import("../../../../../index.js").BlockSpacerSize | undefined;
                                shape?: import("../../../../../index.js").BlockSpacerShape | undefined;
                            } | undefined;
                            iconConfig?: {
                                icon?: string;
                                color?: string | undefined;
                                size?: import("../../../../../index.js").BlockIconSize | undefined;
                                colors?: {
                                    light?: string | undefined;
                                    dark?: string | undefined;
                                } | undefined;
                            } | undefined;
                            avatarConfig?: {
                                thingId?: string;
                                facing?: import("../../../../../index.js").BlockAvatarFacing | undefined;
                                size?: import("../../../../../index.js").BlockAvatarSize | undefined;
                                background?: import("../../../../../index.js").BlockAvatarBackground | undefined;
                            } | undefined;
                            fullsnooConfig?: {
                                userId?: string;
                                facing?: import("../../../../../index.js").BlockAvatarFacing | undefined;
                                size?: import("../../../../../index.js").BlockFullSnooSize | undefined;
                            } | undefined;
                            animationConfig?: {
                                url?: string;
                                width?: number;
                                height?: number;
                                type?: import("../../../../../index.js").BlockAnimationType;
                                loop?: boolean | undefined;
                                loopMode?: import("../../../../../index.js").BlockAnimationLoopMode | undefined;
                                autoplay?: boolean | undefined;
                                speed?: number | undefined;
                                direction?: import("../../../../../index.js").BlockAnimationDirection | undefined;
                            } | undefined;
                            webviewConfig?: {
                                url?: string;
                                state?: {
                                    [x: string]: any;
                                } | undefined;
                            } | undefined;
                        } | undefined;
                        actions?: {
                            type?: import("../../../../../index.js").BlockActionType;
                            id?: string;
                            data?: {
                                [x: string]: any;
                            } | undefined;
                        }[];
                        id?: string | undefined;
                        key?: string | undefined;
                    } | undefined;
                }): UIResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly renderPostComposer: {
            readonly name: "RenderPostComposer";
            readonly requestType: {
                $type: "devvit.ui.block_kit.v1beta.UIRequest";
                encode(message: UIRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): UIRequest;
                fromJSON(object: any): UIRequest;
                toJSON(message: UIRequest): unknown;
                create(base?: {
                    env?: {
                        locale?: string | undefined;
                        colorScheme?: string | undefined;
                        dimensions?: {
                            height?: number;
                            width?: number;
                            scale?: number;
                            fontScale?: number | undefined;
                        } | undefined;
                        timezone?: string | undefined;
                    } | undefined;
                    props?: {
                        [x: string]: any;
                    } | undefined;
                    state?: {
                        [x: string]: any;
                    } | undefined;
                    events?: {
                        realtimeEvent?: {
                            event?: {
                                channel?: string;
                                data?: {
                                    [x: string]: any;
                                } | undefined;
                            } | undefined;
                            status?: import("../../../../../index.js").RealtimeSubscriptionStatus | undefined;
                        } | undefined;
                        formSubmitted?: {
                            results?: {
                                [x: string]: {
                                    fieldType?: import("../../../../../community.js").FormFieldType;
                                    isSecret?: boolean | undefined;
                                    stringValue?: string | undefined;
                                    numberValue?: number | undefined;
                                    boolValue?: boolean | undefined;
                                    listValue?: {
                                        itemType?: import("../../../../../community.js").FormFieldType;
                                        items?: any[];
                                    } | undefined;
                                    selectionValue?: {
                                        values?: string[];
                                    } | undefined;
                                    groupValue?: {} | undefined;
                                } | undefined;
                            };
                            formId?: string | undefined;
                        } | undefined;
                        orderResult?: {
                            errorMessage?: string | undefined;
                            orderId?: string | undefined;
                            order?: {
                                id?: string;
                                skus?: string[];
                                metadata?: {
                                    [x: string]: string | undefined;
                                };
                            } | undefined;
                            status?: import("../../../../../payments.js").OrderResultStatus;
                            errorCode?: number | undefined;
                        } | undefined;
                        toastAction?: {} | undefined;
                        userAction?: {
                            actionId?: string;
                            data?: {
                                [x: string]: any;
                            } | undefined;
                        } | undefined;
                        asyncRequest?: {
                            requestId?: string;
                            data?: {
                                [x: string]: any;
                            } | undefined;
                        } | undefined;
                        asyncResponse?: {
                            requestId?: string;
                            data?: {
                                [x: string]: any;
                            } | undefined;
                            error?: {
                                message?: string;
                                details?: string;
                            } | undefined;
                        } | undefined;
                        timer?: {} | undefined;
                        blocking?: {} | undefined;
                        resize?: {} | undefined;
                        webView?: {
                            postMessage?: {
                                message?: any;
                            } | undefined;
                            fullScreen?: {
                                visibility?: import("../../../ui/events/v1alpha/web_view.js").WebViewVisibility;
                            } | undefined;
                        } | undefined;
                        async?: boolean | undefined;
                        hook?: string | undefined;
                        retry?: boolean | undefined;
                        scope?: import("../../../../../index.js").UIEventScope | undefined;
                    }[];
                } | undefined): UIRequest;
                fromPartial(object: {
                    env?: {
                        locale?: string | undefined;
                        colorScheme?: string | undefined;
                        dimensions?: {
                            height?: number;
                            width?: number;
                            scale?: number;
                            fontScale?: number | undefined;
                        } | undefined;
                        timezone?: string | undefined;
                    } | undefined;
                    props?: {
                        [x: string]: any;
                    } | undefined;
                    state?: {
                        [x: string]: any;
                    } | undefined;
                    events?: {
                        realtimeEvent?: {
                            event?: {
                                channel?: string;
                                data?: {
                                    [x: string]: any;
                                } | undefined;
                            } | undefined;
                            status?: import("../../../../../index.js").RealtimeSubscriptionStatus | undefined;
                        } | undefined;
                        formSubmitted?: {
                            results?: {
                                [x: string]: {
                                    fieldType?: import("../../../../../community.js").FormFieldType;
                                    isSecret?: boolean | undefined;
                                    stringValue?: string | undefined;
                                    numberValue?: number | undefined;
                                    boolValue?: boolean | undefined;
                                    listValue?: {
                                        itemType?: import("../../../../../community.js").FormFieldType;
                                        items?: any[];
                                    } | undefined;
                                    selectionValue?: {
                                        values?: string[];
                                    } | undefined;
                                    groupValue?: {} | undefined;
                                } | undefined;
                            };
                            formId?: string | undefined;
                        } | undefined;
                        orderResult?: {
                            errorMessage?: string | undefined;
                            orderId?: string | undefined;
                            order?: {
                                id?: string;
                                skus?: string[];
                                metadata?: {
                                    [x: string]: string | undefined;
                                };
                            } | undefined;
                            status?: import("../../../../../payments.js").OrderResultStatus;
                            errorCode?: number | undefined;
                        } | undefined;
                        toastAction?: {} | undefined;
                        userAction?: {
                            actionId?: string;
                            data?: {
                                [x: string]: any;
                            } | undefined;
                        } | undefined;
                        asyncRequest?: {
                            requestId?: string;
                            data?: {
                                [x: string]: any;
                            } | undefined;
                        } | undefined;
                        asyncResponse?: {
                            requestId?: string;
                            data?: {
                                [x: string]: any;
                            } | undefined;
                            error?: {
                                message?: string;
                                details?: string;
                            } | undefined;
                        } | undefined;
                        timer?: {} | undefined;
                        blocking?: {} | undefined;
                        resize?: {} | undefined;
                        webView?: {
                            postMessage?: {
                                message?: any;
                            } | undefined;
                            fullScreen?: {
                                visibility?: import("../../../ui/events/v1alpha/web_view.js").WebViewVisibility;
                            } | undefined;
                        } | undefined;
                        async?: boolean | undefined;
                        hook?: string | undefined;
                        retry?: boolean | undefined;
                        scope?: import("../../../../../index.js").UIEventScope | undefined;
                    }[];
                }): UIRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.ui.block_kit.v1beta.UIResponse";
                encode(message: UIResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): UIResponse;
                fromJSON(object: any): UIResponse;
                toJSON(message: UIResponse): unknown;
                create(base?: {
                    state?: {
                        [x: string]: any;
                    } | undefined;
                    effects?: {
                        realtimeSubscriptions?: {
                            subscriptionIds?: string[];
                        } | undefined;
                        rerenderUi?: {
                            delaySeconds?: number | undefined;
                        } | undefined;
                        reloadPart?: {
                            subreddit?: {
                                subredditId?: string;
                            } | undefined;
                            post?: {
                                postId?: string;
                                body?: boolean | undefined;
                                comments?: boolean | undefined;
                            } | undefined;
                            comment?: {
                                postId?: string;
                                commentId?: string;
                                replies?: boolean | undefined;
                            } | undefined;
                        } | undefined;
                        showForm?: {
                            form?: {
                                fields?: {
                                    fieldId?: string;
                                    fieldType?: import("../../../../../community.js").FormFieldType;
                                    label?: string;
                                    helpText?: string | undefined;
                                    defaultValue?: {
                                        fieldType?: import("../../../../../community.js").FormFieldType;
                                        isSecret?: boolean | undefined;
                                        stringValue?: string | undefined;
                                        numberValue?: number | undefined;
                                        boolValue?: boolean | undefined;
                                        listValue?: {
                                            itemType?: import("../../../../../community.js").FormFieldType;
                                            items?: any[];
                                        } | undefined;
                                        selectionValue?: {
                                            values?: string[];
                                        } | undefined;
                                        groupValue?: {} | undefined;
                                    } | undefined;
                                    required?: boolean | undefined;
                                    disabled?: boolean | undefined;
                                    fieldConfig?: {
                                        stringConfig?: {
                                            minLength?: number | undefined;
                                            maxLength?: number | undefined;
                                            placeholder?: string | undefined;
                                        } | undefined;
                                        paragraphConfig?: {
                                            maxCharacters?: number | undefined;
                                            lineHeight?: number | undefined;
                                            placeholder?: string | undefined;
                                        } | undefined;
                                        numberConfig?: {
                                            step?: number | undefined;
                                            min?: number | undefined;
                                            max?: number | undefined;
                                        } | undefined;
                                        booleanConfig?: {} | undefined;
                                        listConfig?: {
                                            itemType?: import("../../../../../community.js").FormFieldType;
                                            itemConfig?: any | undefined;
                                            minEntries?: number | undefined;
                                            maxEntries?: number | undefined;
                                            entryLabel?: string | undefined;
                                        } | undefined;
                                        selectionConfig?: {
                                            choices?: {
                                                label?: string;
                                                value?: string;
                                            }[];
                                            multiSelect?: boolean | undefined;
                                            minSelections?: number | undefined;
                                            maxSelections?: number | undefined;
                                            renderAsList?: boolean | undefined;
                                        } | undefined;
                                        groupConfig?: {
                                            fields?: any[];
                                        } | undefined;
                                    } | undefined;
                                    isSecret?: boolean | undefined;
                                }[];
                                title?: string | undefined;
                                shortDescription?: string | undefined;
                                acceptLabel?: string | undefined;
                                cancelLabel?: string | undefined;
                                id?: string | undefined;
                            } | undefined;
                        } | undefined;
                        showToast?: {
                            toast?: {
                                text?: string;
                                appearance?: import("../../../ui/toast/toast.js").ToastAppearance | undefined;
                                leadingElement?: {
                                    icon?: string | undefined;
                                    emoji?: string | undefined;
                                    avatar?: string | undefined;
                                } | undefined;
                                trailingElement?: {
                                    label?: string | undefined;
                                    icon?: string | undefined;
                                } | undefined;
                            } | undefined;
                        } | undefined;
                        navigateToUrl?: {
                            url?: string;
                            target?: string | undefined;
                        } | undefined;
                        interval?: {
                            intervals?: {
                                [x: string]: {
                                    duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    } | undefined;
                                    async?: boolean | undefined;
                                } | undefined;
                            };
                        } | undefined;
                        createOrder?: {
                            id?: string;
                            skus?: string[];
                            metadata?: {
                                [x: string]: string | undefined;
                            };
                        } | undefined;
                        webView?: {
                            postMessage?: {
                                webViewId?: string;
                                app?: {
                                    message?: any;
                                } | undefined;
                                state?: {
                                    state?: {
                                        [x: string]: any;
                                    } | undefined;
                                } | undefined;
                            } | undefined;
                            fullscreen?: {
                                show?: boolean;
                                url?: string;
                            } | undefined;
                        } | undefined;
                        type?: import("../../../ui/effects/v1alpha/effect.js").EffectType;
                    }[];
                    events?: {
                        realtimeEvent?: {
                            event?: {
                                channel?: string;
                                data?: {
                                    [x: string]: any;
                                } | undefined;
                            } | undefined;
                            status?: import("../../../../../index.js").RealtimeSubscriptionStatus | undefined;
                        } | undefined;
                        formSubmitted?: {
                            results?: {
                                [x: string]: {
                                    fieldType?: import("../../../../../community.js").FormFieldType;
                                    isSecret?: boolean | undefined;
                                    stringValue?: string | undefined;
                                    numberValue?: number | undefined;
                                    boolValue?: boolean | undefined;
                                    listValue?: {
                                        itemType?: import("../../../../../community.js").FormFieldType;
                                        items?: any[];
                                    } | undefined;
                                    selectionValue?: {
                                        values?: string[];
                                    } | undefined;
                                    groupValue?: {} | undefined;
                                } | undefined;
                            };
                            formId?: string | undefined;
                        } | undefined;
                        orderResult?: {
                            errorMessage?: string | undefined;
                            orderId?: string | undefined;
                            order?: {
                                id?: string;
                                skus?: string[];
                                metadata?: {
                                    [x: string]: string | undefined;
                                };
                            } | undefined;
                            status?: import("../../../../../payments.js").OrderResultStatus;
                            errorCode?: number | undefined;
                        } | undefined;
                        toastAction?: {} | undefined;
                        userAction?: {
                            actionId?: string;
                            data?: {
                                [x: string]: any;
                            } | undefined;
                        } | undefined;
                        asyncRequest?: {
                            requestId?: string;
                            data?: {
                                [x: string]: any;
                            } | undefined;
                        } | undefined;
                        asyncResponse?: {
                            requestId?: string;
                            data?: {
                                [x: string]: any;
                            } | undefined;
                            error?: {
                                message?: string;
                                details?: string;
                            } | undefined;
                        } | undefined;
                        timer?: {} | undefined;
                        blocking?: {} | undefined;
                        resize?: {} | undefined;
                        webView?: {
                            postMessage?: {
                                message?: any;
                            } | undefined;
                            fullScreen?: {
                                visibility?: import("../../../ui/events/v1alpha/web_view.js").WebViewVisibility;
                            } | undefined;
                        } | undefined;
                        async?: boolean | undefined;
                        hook?: string | undefined;
                        retry?: boolean | undefined;
                        scope?: import("../../../../../index.js").UIEventScope | undefined;
                    }[];
                    blocks?: {
                        type?: import("../../../../../index.js").BlockType;
                        size?: {
                            grow?: boolean | undefined;
                            width?: number | undefined;
                            widthUnit?: import("../../../../../index.js").BlockSizeUnit | undefined;
                            height?: number | undefined;
                            heightUnit?: import("../../../../../index.js").BlockSizeUnit | undefined;
                        } | undefined;
                        sizes?: {
                            grow?: boolean | undefined;
                            width?: {
                                value?: {
                                    value?: number;
                                    unit?: import("../../../../../index.js").BlockSizeUnit;
                                } | undefined;
                                min?: {
                                    value?: number;
                                    unit?: import("../../../../../index.js").BlockSizeUnit;
                                } | undefined;
                                max?: {
                                    value?: number;
                                    unit?: import("../../../../../index.js").BlockSizeUnit;
                                } | undefined;
                            } | undefined;
                            height?: {
                                value?: {
                                    value?: number;
                                    unit?: import("../../../../../index.js").BlockSizeUnit;
                                } | undefined;
                                min?: {
                                    value?: number;
                                    unit?: import("../../../../../index.js").BlockSizeUnit;
                                } | undefined;
                                max?: {
                                    value?: number;
                                    unit?: import("../../../../../index.js").BlockSizeUnit;
                                } | undefined;
                            } | undefined;
                        } | undefined;
                        config?: {
                            rootConfig?: {
                                children?: any[];
                                height?: number;
                            } | undefined;
                            stackConfig?: {
                                direction?: import("../../../../../index.js").BlockStackDirection;
                                children?: any[];
                                reverse?: boolean | undefined;
                                alignment?: {
                                    vertical?: import("../../../../../index.js").BlockVerticalAlignment | undefined;
                                    horizontal?: import("../../../../../index.js").BlockHorizontalAlignment | undefined;
                                } | undefined;
                                padding?: import("../../../../../index.js").BlockPadding | undefined;
                                gap?: import("../../../../../index.js").BlockGap | undefined;
                                border?: {
                                    color?: string | undefined;
                                    width?: import("../../../../../index.js").BlockBorderWidth | undefined;
                                    colors?: {
                                        light?: string | undefined;
                                        dark?: string | undefined;
                                    } | undefined;
                                } | undefined;
                                cornerRadius?: import("../../../../../index.js").BlockRadius | undefined;
                                backgroundColor?: string | undefined;
                                backgroundColors?: {
                                    light?: string | undefined;
                                    dark?: string | undefined;
                                } | undefined;
                            } | undefined;
                            textConfig?: {
                                text?: string;
                                size?: import("../../../../../index.js").BlockTextSize | undefined;
                                weight?: import("../../../../../index.js").BlockTextWeight | undefined;
                                color?: string | undefined;
                                alignment?: {
                                    vertical?: import("../../../../../index.js").BlockVerticalAlignment | undefined;
                                    horizontal?: import("../../../../../index.js").BlockHorizontalAlignment | undefined;
                                } | undefined;
                                outline?: import("../../../../../index.js").BlockTextOutline | undefined;
                                style?: import("../../../../../index.js").BlockTextStyle | undefined;
                                selectable?: boolean | undefined;
                                colors?: {
                                    light?: string | undefined;
                                    dark?: string | undefined;
                                } | undefined;
                                wrap?: boolean | undefined;
                                overflow?: import("../../../../../index.js").BlockTextOverflow | undefined;
                            } | undefined;
                            buttonConfig?: {
                                text?: string | undefined;
                                icon?: string | undefined;
                                buttonSize?: import("../../../../../index.js").BlockButtonSize | undefined;
                                buttonAppearance?: import("../../../../../index.js").BlockButtonAppearance | undefined;
                                textColor?: string | undefined;
                                backgroundColor?: string | undefined;
                                disabled?: boolean | undefined;
                                textColors?: {
                                    light?: string | undefined;
                                    dark?: string | undefined;
                                } | undefined;
                                backgroundColors?: {
                                    light?: string | undefined;
                                    dark?: string | undefined;
                                } | undefined;
                            } | undefined;
                            imageConfig?: {
                                url?: string;
                                width?: number;
                                height?: number;
                                description?: string | undefined;
                                resizeMode?: import("../../../../../index.js").BlockImageResizeMode | undefined;
                            } | undefined;
                            spacerConfig?: {
                                size?: import("../../../../../index.js").BlockSpacerSize | undefined;
                                shape?: import("../../../../../index.js").BlockSpacerShape | undefined;
                            } | undefined;
                            iconConfig?: {
                                icon?: string;
                                color?: string | undefined;
                                size?: import("../../../../../index.js").BlockIconSize | undefined;
                                colors?: {
                                    light?: string | undefined;
                                    dark?: string | undefined;
                                } | undefined;
                            } | undefined;
                            avatarConfig?: {
                                thingId?: string;
                                facing?: import("../../../../../index.js").BlockAvatarFacing | undefined;
                                size?: import("../../../../../index.js").BlockAvatarSize | undefined;
                                background?: import("../../../../../index.js").BlockAvatarBackground | undefined;
                            } | undefined;
                            fullsnooConfig?: {
                                userId?: string;
                                facing?: import("../../../../../index.js").BlockAvatarFacing | undefined;
                                size?: import("../../../../../index.js").BlockFullSnooSize | undefined;
                            } | undefined;
                            animationConfig?: {
                                url?: string;
                                width?: number;
                                height?: number;
                                type?: import("../../../../../index.js").BlockAnimationType;
                                loop?: boolean | undefined;
                                loopMode?: import("../../../../../index.js").BlockAnimationLoopMode | undefined;
                                autoplay?: boolean | undefined;
                                speed?: number | undefined;
                                direction?: import("../../../../../index.js").BlockAnimationDirection | undefined;
                            } | undefined;
                            webviewConfig?: {
                                url?: string;
                                state?: {
                                    [x: string]: any;
                                } | undefined;
                            } | undefined;
                        } | undefined;
                        actions?: {
                            type?: import("../../../../../index.js").BlockActionType;
                            id?: string;
                            data?: {
                                [x: string]: any;
                            } | undefined;
                        }[];
                        id?: string | undefined;
                        key?: string | undefined;
                    } | undefined;
                } | undefined): UIResponse;
                fromPartial(object: {
                    state?: {
                        [x: string]: any;
                    } | undefined;
                    effects?: {
                        realtimeSubscriptions?: {
                            subscriptionIds?: string[];
                        } | undefined;
                        rerenderUi?: {
                            delaySeconds?: number | undefined;
                        } | undefined;
                        reloadPart?: {
                            subreddit?: {
                                subredditId?: string;
                            } | undefined;
                            post?: {
                                postId?: string;
                                body?: boolean | undefined;
                                comments?: boolean | undefined;
                            } | undefined;
                            comment?: {
                                postId?: string;
                                commentId?: string;
                                replies?: boolean | undefined;
                            } | undefined;
                        } | undefined;
                        showForm?: {
                            form?: {
                                fields?: {
                                    fieldId?: string;
                                    fieldType?: import("../../../../../community.js").FormFieldType;
                                    label?: string;
                                    helpText?: string | undefined;
                                    defaultValue?: {
                                        fieldType?: import("../../../../../community.js").FormFieldType;
                                        isSecret?: boolean | undefined;
                                        stringValue?: string | undefined;
                                        numberValue?: number | undefined;
                                        boolValue?: boolean | undefined;
                                        listValue?: {
                                            itemType?: import("../../../../../community.js").FormFieldType;
                                            items?: any[];
                                        } | undefined;
                                        selectionValue?: {
                                            values?: string[];
                                        } | undefined;
                                        groupValue?: {} | undefined;
                                    } | undefined;
                                    required?: boolean | undefined;
                                    disabled?: boolean | undefined;
                                    fieldConfig?: {
                                        stringConfig?: {
                                            minLength?: number | undefined;
                                            maxLength?: number | undefined;
                                            placeholder?: string | undefined;
                                        } | undefined;
                                        paragraphConfig?: {
                                            maxCharacters?: number | undefined;
                                            lineHeight?: number | undefined;
                                            placeholder?: string | undefined;
                                        } | undefined;
                                        numberConfig?: {
                                            step?: number | undefined;
                                            min?: number | undefined;
                                            max?: number | undefined;
                                        } | undefined;
                                        booleanConfig?: {} | undefined;
                                        listConfig?: {
                                            itemType?: import("../../../../../community.js").FormFieldType;
                                            itemConfig?: any | undefined;
                                            minEntries?: number | undefined;
                                            maxEntries?: number | undefined;
                                            entryLabel?: string | undefined;
                                        } | undefined;
                                        selectionConfig?: {
                                            choices?: {
                                                label?: string;
                                                value?: string;
                                            }[];
                                            multiSelect?: boolean | undefined;
                                            minSelections?: number | undefined;
                                            maxSelections?: number | undefined;
                                            renderAsList?: boolean | undefined;
                                        } | undefined;
                                        groupConfig?: {
                                            fields?: any[];
                                        } | undefined;
                                    } | undefined;
                                    isSecret?: boolean | undefined;
                                }[];
                                title?: string | undefined;
                                shortDescription?: string | undefined;
                                acceptLabel?: string | undefined;
                                cancelLabel?: string | undefined;
                                id?: string | undefined;
                            } | undefined;
                        } | undefined;
                        showToast?: {
                            toast?: {
                                text?: string;
                                appearance?: import("../../../ui/toast/toast.js").ToastAppearance | undefined;
                                leadingElement?: {
                                    icon?: string | undefined;
                                    emoji?: string | undefined;
                                    avatar?: string | undefined;
                                } | undefined;
                                trailingElement?: {
                                    label?: string | undefined;
                                    icon?: string | undefined;
                                } | undefined;
                            } | undefined;
                        } | undefined;
                        navigateToUrl?: {
                            url?: string;
                            target?: string | undefined;
                        } | undefined;
                        interval?: {
                            intervals?: {
                                [x: string]: {
                                    duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    } | undefined;
                                    async?: boolean | undefined;
                                } | undefined;
                            };
                        } | undefined;
                        createOrder?: {
                            id?: string;
                            skus?: string[];
                            metadata?: {
                                [x: string]: string | undefined;
                            };
                        } | undefined;
                        webView?: {
                            postMessage?: {
                                webViewId?: string;
                                app?: {
                                    message?: any;
                                } | undefined;
                                state?: {
                                    state?: {
                                        [x: string]: any;
                                    } | undefined;
                                } | undefined;
                            } | undefined;
                            fullscreen?: {
                                show?: boolean;
                                url?: string;
                            } | undefined;
                        } | undefined;
                        type?: import("../../../ui/effects/v1alpha/effect.js").EffectType;
                    }[];
                    events?: {
                        realtimeEvent?: {
                            event?: {
                                channel?: string;
                                data?: {
                                    [x: string]: any;
                                } | undefined;
                            } | undefined;
                            status?: import("../../../../../index.js").RealtimeSubscriptionStatus | undefined;
                        } | undefined;
                        formSubmitted?: {
                            results?: {
                                [x: string]: {
                                    fieldType?: import("../../../../../community.js").FormFieldType;
                                    isSecret?: boolean | undefined;
                                    stringValue?: string | undefined;
                                    numberValue?: number | undefined;
                                    boolValue?: boolean | undefined;
                                    listValue?: {
                                        itemType?: import("../../../../../community.js").FormFieldType;
                                        items?: any[];
                                    } | undefined;
                                    selectionValue?: {
                                        values?: string[];
                                    } | undefined;
                                    groupValue?: {} | undefined;
                                } | undefined;
                            };
                            formId?: string | undefined;
                        } | undefined;
                        orderResult?: {
                            errorMessage?: string | undefined;
                            orderId?: string | undefined;
                            order?: {
                                id?: string;
                                skus?: string[];
                                metadata?: {
                                    [x: string]: string | undefined;
                                };
                            } | undefined;
                            status?: import("../../../../../payments.js").OrderResultStatus;
                            errorCode?: number | undefined;
                        } | undefined;
                        toastAction?: {} | undefined;
                        userAction?: {
                            actionId?: string;
                            data?: {
                                [x: string]: any;
                            } | undefined;
                        } | undefined;
                        asyncRequest?: {
                            requestId?: string;
                            data?: {
                                [x: string]: any;
                            } | undefined;
                        } | undefined;
                        asyncResponse?: {
                            requestId?: string;
                            data?: {
                                [x: string]: any;
                            } | undefined;
                            error?: {
                                message?: string;
                                details?: string;
                            } | undefined;
                        } | undefined;
                        timer?: {} | undefined;
                        blocking?: {} | undefined;
                        resize?: {} | undefined;
                        webView?: {
                            postMessage?: {
                                message?: any;
                            } | undefined;
                            fullScreen?: {
                                visibility?: import("../../../ui/events/v1alpha/web_view.js").WebViewVisibility;
                            } | undefined;
                        } | undefined;
                        async?: boolean | undefined;
                        hook?: string | undefined;
                        retry?: boolean | undefined;
                        scope?: import("../../../../../index.js").UIEventScope | undefined;
                    }[];
                    blocks?: {
                        type?: import("../../../../../index.js").BlockType;
                        size?: {
                            grow?: boolean | undefined;
                            width?: number | undefined;
                            widthUnit?: import("../../../../../index.js").BlockSizeUnit | undefined;
                            height?: number | undefined;
                            heightUnit?: import("../../../../../index.js").BlockSizeUnit | undefined;
                        } | undefined;
                        sizes?: {
                            grow?: boolean | undefined;
                            width?: {
                                value?: {
                                    value?: number;
                                    unit?: import("../../../../../index.js").BlockSizeUnit;
                                } | undefined;
                                min?: {
                                    value?: number;
                                    unit?: import("../../../../../index.js").BlockSizeUnit;
                                } | undefined;
                                max?: {
                                    value?: number;
                                    unit?: import("../../../../../index.js").BlockSizeUnit;
                                } | undefined;
                            } | undefined;
                            height?: {
                                value?: {
                                    value?: number;
                                    unit?: import("../../../../../index.js").BlockSizeUnit;
                                } | undefined;
                                min?: {
                                    value?: number;
                                    unit?: import("../../../../../index.js").BlockSizeUnit;
                                } | undefined;
                                max?: {
                                    value?: number;
                                    unit?: import("../../../../../index.js").BlockSizeUnit;
                                } | undefined;
                            } | undefined;
                        } | undefined;
                        config?: {
                            rootConfig?: {
                                children?: any[];
                                height?: number;
                            } | undefined;
                            stackConfig?: {
                                direction?: import("../../../../../index.js").BlockStackDirection;
                                children?: any[];
                                reverse?: boolean | undefined;
                                alignment?: {
                                    vertical?: import("../../../../../index.js").BlockVerticalAlignment | undefined;
                                    horizontal?: import("../../../../../index.js").BlockHorizontalAlignment | undefined;
                                } | undefined;
                                padding?: import("../../../../../index.js").BlockPadding | undefined;
                                gap?: import("../../../../../index.js").BlockGap | undefined;
                                border?: {
                                    color?: string | undefined;
                                    width?: import("../../../../../index.js").BlockBorderWidth | undefined;
                                    colors?: {
                                        light?: string | undefined;
                                        dark?: string | undefined;
                                    } | undefined;
                                } | undefined;
                                cornerRadius?: import("../../../../../index.js").BlockRadius | undefined;
                                backgroundColor?: string | undefined;
                                backgroundColors?: {
                                    light?: string | undefined;
                                    dark?: string | undefined;
                                } | undefined;
                            } | undefined;
                            textConfig?: {
                                text?: string;
                                size?: import("../../../../../index.js").BlockTextSize | undefined;
                                weight?: import("../../../../../index.js").BlockTextWeight | undefined;
                                color?: string | undefined;
                                alignment?: {
                                    vertical?: import("../../../../../index.js").BlockVerticalAlignment | undefined;
                                    horizontal?: import("../../../../../index.js").BlockHorizontalAlignment | undefined;
                                } | undefined;
                                outline?: import("../../../../../index.js").BlockTextOutline | undefined;
                                style?: import("../../../../../index.js").BlockTextStyle | undefined;
                                selectable?: boolean | undefined;
                                colors?: {
                                    light?: string | undefined;
                                    dark?: string | undefined;
                                } | undefined;
                                wrap?: boolean | undefined;
                                overflow?: import("../../../../../index.js").BlockTextOverflow | undefined;
                            } | undefined;
                            buttonConfig?: {
                                text?: string | undefined;
                                icon?: string | undefined;
                                buttonSize?: import("../../../../../index.js").BlockButtonSize | undefined;
                                buttonAppearance?: import("../../../../../index.js").BlockButtonAppearance | undefined;
                                textColor?: string | undefined;
                                backgroundColor?: string | undefined;
                                disabled?: boolean | undefined;
                                textColors?: {
                                    light?: string | undefined;
                                    dark?: string | undefined;
                                } | undefined;
                                backgroundColors?: {
                                    light?: string | undefined;
                                    dark?: string | undefined;
                                } | undefined;
                            } | undefined;
                            imageConfig?: {
                                url?: string;
                                width?: number;
                                height?: number;
                                description?: string | undefined;
                                resizeMode?: import("../../../../../index.js").BlockImageResizeMode | undefined;
                            } | undefined;
                            spacerConfig?: {
                                size?: import("../../../../../index.js").BlockSpacerSize | undefined;
                                shape?: import("../../../../../index.js").BlockSpacerShape | undefined;
                            } | undefined;
                            iconConfig?: {
                                icon?: string;
                                color?: string | undefined;
                                size?: import("../../../../../index.js").BlockIconSize | undefined;
                                colors?: {
                                    light?: string | undefined;
                                    dark?: string | undefined;
                                } | undefined;
                            } | undefined;
                            avatarConfig?: {
                                thingId?: string;
                                facing?: import("../../../../../index.js").BlockAvatarFacing | undefined;
                                size?: import("../../../../../index.js").BlockAvatarSize | undefined;
                                background?: import("../../../../../index.js").BlockAvatarBackground | undefined;
                            } | undefined;
                            fullsnooConfig?: {
                                userId?: string;
                                facing?: import("../../../../../index.js").BlockAvatarFacing | undefined;
                                size?: import("../../../../../index.js").BlockFullSnooSize | undefined;
                            } | undefined;
                            animationConfig?: {
                                url?: string;
                                width?: number;
                                height?: number;
                                type?: import("../../../../../index.js").BlockAnimationType;
                                loop?: boolean | undefined;
                                loopMode?: import("../../../../../index.js").BlockAnimationLoopMode | undefined;
                                autoplay?: boolean | undefined;
                                speed?: number | undefined;
                                direction?: import("../../../../../index.js").BlockAnimationDirection | undefined;
                            } | undefined;
                            webviewConfig?: {
                                url?: string;
                                state?: {
                                    [x: string]: any;
                                } | undefined;
                            } | undefined;
                        } | undefined;
                        actions?: {
                            type?: import("../../../../../index.js").BlockActionType;
                            id?: string;
                            data?: {
                                [x: string]: any;
                            } | undefined;
                        }[];
                        id?: string | undefined;
                        key?: string | undefined;
                    } | undefined;
                }): UIResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array, metadata?: Metadata): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=custom_post.d.ts.map