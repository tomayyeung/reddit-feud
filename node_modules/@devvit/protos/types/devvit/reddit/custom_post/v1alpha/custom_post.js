/**
 * #custom_post.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { Struct } from "../../../../google/protobuf/struct.js";
import { messageTypeRegistry } from "../../../../typeRegistry.js";
import { BlockRenderRequest, BlockRenderResponse } from "../../../ui/block_kit/v1beta/rendering.js";
import { UIRequest, UIResponse } from "../../../ui/block_kit/v1beta/ui.js";
import { Effect } from "../../../ui/effects/v1alpha/effect.js";
function createBaseDimensions() {
    return { height: 0, width: 0, scale: 0, fontScale: undefined };
}
export const Dimensions = {
    $type: "devvit.reddit.custom_post.v1alpha.Dimensions",
    encode(message, writer = _m0.Writer.create()) {
        if (message.height !== 0) {
            writer.uint32(8).int32(message.height);
        }
        if (message.width !== 0) {
            writer.uint32(16).int32(message.width);
        }
        if (message.scale !== 0) {
            writer.uint32(29).float(message.scale);
        }
        if (message.fontScale !== undefined) {
            writer.uint32(37).float(message.fontScale);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDimensions();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.height = reader.int32();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.width = reader.int32();
                    continue;
                case 3:
                    if (tag !== 29) {
                        break;
                    }
                    message.scale = reader.float();
                    continue;
                case 4:
                    if (tag !== 37) {
                        break;
                    }
                    message.fontScale = reader.float();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            height: isSet(object.height) ? globalThis.Number(object.height) : 0,
            width: isSet(object.width) ? globalThis.Number(object.width) : 0,
            scale: isSet(object.scale) ? globalThis.Number(object.scale) : 0,
            fontScale: isSet(object.fontScale) ? globalThis.Number(object.fontScale) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.height !== 0) {
            obj.height = Math.round(message.height);
        }
        if (message.width !== 0) {
            obj.width = Math.round(message.width);
        }
        if (message.scale !== 0) {
            obj.scale = message.scale;
        }
        if (message.fontScale !== undefined) {
            obj.fontScale = message.fontScale;
        }
        return obj;
    },
    create(base) {
        return Dimensions.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDimensions();
        message.height = object.height ?? 0;
        message.width = object.width ?? 0;
        message.scale = object.scale ?? 0;
        message.fontScale = object.fontScale ?? undefined;
        return message;
    },
};
messageTypeRegistry.set(Dimensions.$type, Dimensions);
function createBaseRenderPostRequest() {
    return { state: undefined, blocks: undefined, dimensions: undefined };
}
export const RenderPostRequest = {
    $type: "devvit.reddit.custom_post.v1alpha.RenderPostRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.state !== undefined) {
            Struct.encode(Struct.wrap(message.state), writer.uint32(10).fork()).ldelim();
        }
        if (message.blocks !== undefined) {
            BlockRenderRequest.encode(message.blocks, writer.uint32(18).fork()).ldelim();
        }
        if (message.dimensions !== undefined) {
            Dimensions.encode(message.dimensions, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRenderPostRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.state = Struct.unwrap(Struct.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.blocks = BlockRenderRequest.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.dimensions = Dimensions.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            state: isObject(object.state) ? object.state : undefined,
            blocks: isSet(object.blocks) ? BlockRenderRequest.fromJSON(object.blocks) : undefined,
            dimensions: isSet(object.dimensions) ? Dimensions.fromJSON(object.dimensions) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.state !== undefined) {
            obj.state = message.state;
        }
        if (message.blocks !== undefined) {
            obj.blocks = BlockRenderRequest.toJSON(message.blocks);
        }
        if (message.dimensions !== undefined) {
            obj.dimensions = Dimensions.toJSON(message.dimensions);
        }
        return obj;
    },
    create(base) {
        return RenderPostRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRenderPostRequest();
        message.state = object.state ?? undefined;
        message.blocks = (object.blocks !== undefined && object.blocks !== null)
            ? BlockRenderRequest.fromPartial(object.blocks)
            : undefined;
        message.dimensions = (object.dimensions !== undefined && object.dimensions !== null)
            ? Dimensions.fromPartial(object.dimensions)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set(RenderPostRequest.$type, RenderPostRequest);
function createBaseRenderPostResponse() {
    return { state: undefined, effects: [], blocks: undefined };
}
export const RenderPostResponse = {
    $type: "devvit.reddit.custom_post.v1alpha.RenderPostResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.state !== undefined) {
            Struct.encode(Struct.wrap(message.state), writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.effects) {
            Effect.encode(v, writer.uint32(18).fork()).ldelim();
        }
        if (message.blocks !== undefined) {
            BlockRenderResponse.encode(message.blocks, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRenderPostResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.state = Struct.unwrap(Struct.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.effects.push(Effect.decode(reader, reader.uint32()));
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.blocks = BlockRenderResponse.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            state: isObject(object.state) ? object.state : undefined,
            effects: globalThis.Array.isArray(object?.effects) ? object.effects.map((e) => Effect.fromJSON(e)) : [],
            blocks: isSet(object.blocks) ? BlockRenderResponse.fromJSON(object.blocks) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.state !== undefined) {
            obj.state = message.state;
        }
        if (message.effects?.length) {
            obj.effects = message.effects.map((e) => Effect.toJSON(e));
        }
        if (message.blocks !== undefined) {
            obj.blocks = BlockRenderResponse.toJSON(message.blocks);
        }
        return obj;
    },
    create(base) {
        return RenderPostResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRenderPostResponse();
        message.state = object.state ?? undefined;
        message.effects = object.effects?.map((e) => Effect.fromPartial(e)) || [];
        message.blocks = (object.blocks !== undefined && object.blocks !== null)
            ? BlockRenderResponse.fromPartial(object.blocks)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set(RenderPostResponse.$type, RenderPostResponse);
export const CustomPostServiceName = "devvit.reddit.custom_post.v1alpha.CustomPost";
export class CustomPostClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || CustomPostServiceName;
        this.rpc = rpc;
        this.RenderPost = this.RenderPost.bind(this);
        this.RenderPostContent = this.RenderPostContent.bind(this);
        this.RenderPostComposer = this.RenderPostComposer.bind(this);
    }
    RenderPost(request, metadata) {
        const data = RenderPostRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "RenderPost", data, metadata);
        return promise.then((data) => RenderPostResponse.decode(_m0.Reader.create(data)));
    }
    RenderPostContent(request, metadata) {
        const data = UIRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "RenderPostContent", data, metadata);
        return promise.then((data) => UIResponse.decode(_m0.Reader.create(data)));
    }
    RenderPostComposer(request, metadata) {
        const data = UIRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "RenderPostComposer", data, metadata);
        return promise.then((data) => UIResponse.decode(_m0.Reader.create(data)));
    }
}
export const CustomPostDefinition = {
    name: "CustomPost",
    fullName: "devvit.reddit.custom_post.v1alpha.CustomPost",
    methods: {
        /**
         * This is deprecated and should be fixed in time to maintain backwards compatability.
         * Please call RenderPostBody instead.
         *
         * @deprecated
         */
        renderPost: {
            name: "RenderPost",
            requestType: RenderPostRequest,
            requestStream: false,
            responseType: RenderPostResponse,
            responseStream: false,
            options: {},
        },
        renderPostContent: {
            name: "RenderPostContent",
            requestType: UIRequest,
            requestStream: false,
            responseType: UIResponse,
            responseStream: false,
            options: {},
        },
        renderPostComposer: {
            name: "RenderPostComposer",
            requestType: UIRequest,
            requestStream: false,
            responseType: UIResponse,
            responseStream: false,
            options: {},
        },
    },
};
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
