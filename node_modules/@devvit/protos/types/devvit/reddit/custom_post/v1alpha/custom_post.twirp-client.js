import { RenderPostRequest, RenderPostResponse } from './custom_post.js';
import { UIRequest, UIResponse } from '../../../ui/block_kit/v1beta/ui.js';
export class CustomPostClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.RenderPost.bind(this);
        this.RenderPostContent.bind(this);
        this.RenderPostComposer.bind(this);
    }
    RenderPost(request) {
        const data = RenderPostRequest.toJSON(request);
        const promise = this.rpc.request('devvit.reddit.custom_post.v1alpha.CustomPost', 'RenderPost', 'application/json', data);
        return promise.then((data) => RenderPostResponse.fromJSON(data));
    }
    RenderPostContent(request) {
        const data = UIRequest.toJSON(request);
        const promise = this.rpc.request('devvit.reddit.custom_post.v1alpha.CustomPost', 'RenderPostContent', 'application/json', data);
        return promise.then((data) => UIResponse.fromJSON(data));
    }
    RenderPostComposer(request) {
        const data = UIRequest.toJSON(request);
        const promise = this.rpc.request('devvit.reddit.custom_post.v1alpha.CustomPost', 'RenderPostComposer', 'application/json', data);
        return promise.then((data) => UIResponse.fromJSON(data));
    }
}
export class CustomPostClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.RenderPost.bind(this);
        this.RenderPostContent.bind(this);
        this.RenderPostComposer.bind(this);
    }
    RenderPost(request) {
        const data = RenderPostRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.reddit.custom_post.v1alpha.CustomPost', 'RenderPost', 'application/protobuf', data);
        return promise.then((data) => RenderPostResponse.decode(data));
    }
    RenderPostContent(request) {
        const data = UIRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.reddit.custom_post.v1alpha.CustomPost', 'RenderPostContent', 'application/protobuf', data);
        return promise.then((data) => UIResponse.decode(data));
    }
    RenderPostComposer(request) {
        const data = UIRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.reddit.custom_post.v1alpha.CustomPost', 'RenderPostComposer', 'application/protobuf', data);
        return promise.then((data) => UIResponse.decode(data));
    }
}
