import { TwirpServer, TwirpError, TwirpErrorCode, TwirpContentType, chainInterceptors, } from 'twirp-ts';
import { RenderPostRequest, RenderPostResponse } from './custom_post.js';
import { UIRequest, UIResponse } from '../../../ui/block_kit/v1beta/ui.js';
export var CustomPostMethod;
(function (CustomPostMethod) {
    CustomPostMethod["RenderPost"] = "RenderPost";
    CustomPostMethod["RenderPostContent"] = "RenderPostContent";
    CustomPostMethod["RenderPostComposer"] = "RenderPostComposer";
})(CustomPostMethod || (CustomPostMethod = {}));
export const CustomPostMethodList = [
    CustomPostMethod.RenderPost,
    CustomPostMethod.RenderPostContent,
    CustomPostMethod.RenderPostComposer,
];
export function createCustomPostServer(service) {
    return new TwirpServer({
        service,
        packageName: 'devvit.reddit.custom_post.v1alpha',
        serviceName: 'CustomPost',
        methodList: CustomPostMethodList,
        matchRoute: matchCustomPostRoute,
    });
}
function matchCustomPostRoute(method, events) {
    switch (method) {
        case 'RenderPost':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'RenderPost' };
                await events.onMatch(ctx);
                return handleCustomPostRenderPostRequest(ctx, service, data, interceptors);
            };
        case 'RenderPostContent':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'RenderPostContent' };
                await events.onMatch(ctx);
                return handleCustomPostRenderPostContentRequest(ctx, service, data, interceptors);
            };
        case 'RenderPostComposer':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'RenderPostComposer' };
                await events.onMatch(ctx);
                return handleCustomPostRenderPostComposerRequest(ctx, service, data, interceptors);
            };
        default:
            events.onNotFound();
            const msg = `no handler found`;
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleCustomPostRenderPostRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleCustomPostRenderPostJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleCustomPostRenderPostProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleCustomPostRenderPostContentRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleCustomPostRenderPostContentJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleCustomPostRenderPostContentProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleCustomPostRenderPostComposerRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleCustomPostRenderPostComposerJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleCustomPostRenderPostComposerProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
async function handleCustomPostRenderPostJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = RenderPostRequest.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.RenderPost(ctx, inputReq);
        });
    }
    else {
        response = await service.RenderPost(ctx, request);
    }
    return JSON.stringify(RenderPostResponse.toJSON(response));
}
async function handleCustomPostRenderPostContentJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = UIRequest.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.RenderPostContent(ctx, inputReq);
        });
    }
    else {
        response = await service.RenderPostContent(ctx, request);
    }
    return JSON.stringify(UIResponse.toJSON(response));
}
async function handleCustomPostRenderPostComposerJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = UIRequest.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.RenderPostComposer(ctx, inputReq);
        });
    }
    else {
        response = await service.RenderPostComposer(ctx, request);
    }
    return JSON.stringify(UIResponse.toJSON(response));
}
async function handleCustomPostRenderPostProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = RenderPostRequest.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.RenderPost(ctx, inputReq);
        });
    }
    else {
        response = await service.RenderPost(ctx, request);
    }
    return Buffer.from(RenderPostResponse.encode(response).finish());
}
async function handleCustomPostRenderPostContentProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = UIRequest.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.RenderPostContent(ctx, inputReq);
        });
    }
    else {
        response = await service.RenderPostContent(ctx, request);
    }
    return Buffer.from(UIResponse.encode(response).finish());
}
async function handleCustomPostRenderPostComposerProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = UIRequest.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.RenderPostComposer(ctx, inputReq);
        });
    }
    else {
        response = await service.RenderPostComposer(ctx, request);
    }
    return Buffer.from(UIResponse.encode(response).finish());
}
