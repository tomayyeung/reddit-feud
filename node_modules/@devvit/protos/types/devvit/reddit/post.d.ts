/**
 * #post.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { AuthorFlairRichText, Awarding, BanInfo, Gildings, MediaEmbed } from "./common.js";
export interface Post {
    allAwardings: Awarding[];
    allowLiveComments?: boolean | undefined;
    approved?: boolean | undefined;
    approvedAtUtc?: number | undefined;
    approvedBy?: string | undefined;
    archived?: boolean | undefined;
    author?: string | undefined;
    authorFlairBackgroundColor?: string | undefined;
    authorFlairCssClass?: string | undefined;
    authorFlairRichtext: AuthorFlairRichText[];
    authorFlairTemplateId?: string | undefined;
    authorFlairText?: string | undefined;
    authorFlairTextColor?: string | undefined;
    authorFlairType?: string | undefined;
    authorFullname?: string | undefined;
    authorIsBlocked?: boolean | undefined;
    authorPatreonFlair?: boolean | undefined;
    authorPremium?: boolean | undefined;
    awarders: string[];
    bannedAtUtc?: number | undefined;
    bannedBy?: string | undefined;
    canGild?: boolean | undefined;
    canModPost?: boolean | undefined;
    category?: string | undefined;
    clicked?: boolean | undefined;
    contentCategories: string[];
    contestMode?: boolean | undefined;
    created?: number | undefined;
    createdUtc?: number | undefined;
    discussionType?: string | undefined;
    distinguished?: string | undefined;
    domain?: string | undefined;
    downs?: number | undefined;
    edited?: boolean | undefined;
    gilded?: number | undefined;
    gildings?: Gildings | undefined;
    hidden?: boolean | undefined;
    hideScore?: boolean | undefined;
    id?: string | undefined;
    ignoreReports?: boolean | undefined;
    isCreatedFromAdsUi?: boolean | undefined;
    isCrosspostable?: boolean | undefined;
    isMeta?: boolean | undefined;
    isOriginalContent?: boolean | undefined;
    isRedditMediaDomain?: boolean | undefined;
    isRobotIndexable?: boolean | undefined;
    isSelf?: boolean | undefined;
    isVideo?: boolean | undefined;
    likes?: boolean | undefined;
    linkFlairBackgroundColor?: string | undefined;
    linkFlairCssClass?: string | undefined;
    linkFlairRichtext: string[];
    linkFlairTextColor?: string | undefined;
    linkFlairText?: string | undefined;
    linkFlairType?: string | undefined;
    locked?: boolean | undefined;
    mediaEmbed?: MediaEmbed | undefined;
    mediaOnly?: boolean | undefined;
    media?: Media | undefined;
    modNote?: string | undefined;
    modReasonBy?: string | undefined;
    modReasonTitle?: string | undefined;
    /** array of array of strings :-/ */
    modReports: Array<any>[];
    name?: string | undefined;
    noFollow?: boolean | undefined;
    numComments?: number | undefined;
    numCrossposts?: number | undefined;
    numDuplicates?: number | undefined;
    numReports?: number | undefined;
    over18?: boolean | undefined;
    parentWhitelistStatus?: string | undefined;
    permalink?: string | undefined;
    pinned?: boolean | undefined;
    postHint?: string | undefined;
    preview?: Preview | undefined;
    pwls?: number | undefined;
    quarantine?: boolean | undefined;
    removalReason?: string | undefined;
    removedByCategory?: string | undefined;
    removedBy?: string | undefined;
    removed?: boolean | undefined;
    reportReasons: string[];
    rteMode?: string | undefined;
    saved?: boolean | undefined;
    score?: number | undefined;
    secureMediaEmbed?: MediaEmbed | undefined;
    secureMedia?: Media | undefined;
    selftextHtml?: string | undefined;
    selftext?: string | undefined;
    sendReplies?: boolean | undefined;
    spam?: boolean | undefined;
    spoiler?: boolean | undefined;
    stickied?: boolean | undefined;
    subredditId?: string | undefined;
    subredditNamePrefixed?: string | undefined;
    subredditSubscribers?: number | undefined;
    subredditType?: string | undefined;
    subreddit?: string | undefined;
    suggestedSort?: string | undefined;
    thumbnailHeight?: number | undefined;
    thumbnailWidth?: number | undefined;
    thumbnail?: string | undefined;
    title?: string | undefined;
    topAwardedType?: string | undefined;
    totalAwardsReceived?: number | undefined;
    treatmentTags: string[];
    ups?: number | undefined;
    upvoteRatio?: number | undefined;
    urlOverriddenByDest?: string | undefined;
    url?: string | undefined;
    /** array of array of strings :-/ */
    userReports: Array<any>[];
    viewCount?: number | undefined;
    visited?: boolean | undefined;
    whitelistStatus?: string | undefined;
    wls?: number | undefined;
    /** properties for automod invocation */
    linkFlairTemplateId?: string | undefined;
    crowdControlLevel?: number | undefined;
    isGallery?: boolean | undefined;
    isLiveStream?: boolean | undefined;
    isMetaDiscussion?: boolean | undefined;
    oembed?: OEmbed | undefined;
    banInfo?: BanInfo | undefined;
    /** PRIVATE - DO NOT SET FOR PUBLIC USE */
    markedSpam?: boolean | undefined;
    /** properties for automod invocation */
    verdict?: string | undefined;
    gallery?: RedditPostGallery | undefined;
}
export interface Media {
    redditVideo?: Media_RedditVideo | undefined;
}
export interface Media_RedditVideo {
    bitrateKbps?: number | undefined;
    dashUrl?: string | undefined;
    duration?: number | undefined;
    fallbackUrl?: string | undefined;
    height?: number | undefined;
    hlsUrl?: string | undefined;
    isGif?: boolean | undefined;
    scrubberMediaUrl?: string | undefined;
    transcodingStatus?: string | undefined;
    width?: number | undefined;
}
export interface Preview {
    enabled?: boolean | undefined;
    images: Preview_PreviewImage[];
}
export interface Preview_PreviewImage {
    id?: string | undefined;
    resolutions: Preview_PreviewImage_Image[];
    source?: Preview_PreviewImage_Image | undefined;
    variants?: Preview_PreviewImage_Image | undefined;
}
export interface Preview_PreviewImage_Image {
    height?: number | undefined;
    url?: string | undefined;
    width?: number | undefined;
}
export interface OEmbed {
    authorName?: string | undefined;
    authorUrl?: string | undefined;
    description?: string | undefined;
    title?: string | undefined;
}
export interface RedditPostGallery {
    body?: string | undefined;
    domain?: string | undefined;
    url?: string | undefined;
}
export declare const Post: {
    $type: "devvit.reddit.Post";
    encode(message: Post, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Post;
    fromJSON(object: any): Post;
    toJSON(message: Post): unknown;
    create(base?: DeepPartial<Post>): Post;
    fromPartial(object: DeepPartial<Post>): Post;
};
export declare const Media: {
    $type: "devvit.reddit.Media";
    encode(message: Media, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Media;
    fromJSON(object: any): Media;
    toJSON(message: Media): unknown;
    create(base?: DeepPartial<Media>): Media;
    fromPartial(object: DeepPartial<Media>): Media;
};
export declare const Media_RedditVideo: {
    $type: "devvit.reddit.Media.RedditVideo";
    encode(message: Media_RedditVideo, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Media_RedditVideo;
    fromJSON(object: any): Media_RedditVideo;
    toJSON(message: Media_RedditVideo): unknown;
    create(base?: DeepPartial<Media_RedditVideo>): Media_RedditVideo;
    fromPartial(object: DeepPartial<Media_RedditVideo>): Media_RedditVideo;
};
export declare const Preview: {
    $type: "devvit.reddit.Preview";
    encode(message: Preview, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Preview;
    fromJSON(object: any): Preview;
    toJSON(message: Preview): unknown;
    create(base?: DeepPartial<Preview>): Preview;
    fromPartial(object: DeepPartial<Preview>): Preview;
};
export declare const Preview_PreviewImage: {
    $type: "devvit.reddit.Preview.PreviewImage";
    encode(message: Preview_PreviewImage, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Preview_PreviewImage;
    fromJSON(object: any): Preview_PreviewImage;
    toJSON(message: Preview_PreviewImage): unknown;
    create(base?: DeepPartial<Preview_PreviewImage>): Preview_PreviewImage;
    fromPartial(object: DeepPartial<Preview_PreviewImage>): Preview_PreviewImage;
};
export declare const Preview_PreviewImage_Image: {
    $type: "devvit.reddit.Preview.PreviewImage.Image";
    encode(message: Preview_PreviewImage_Image, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Preview_PreviewImage_Image;
    fromJSON(object: any): Preview_PreviewImage_Image;
    toJSON(message: Preview_PreviewImage_Image): unknown;
    create(base?: DeepPartial<Preview_PreviewImage_Image>): Preview_PreviewImage_Image;
    fromPartial(object: DeepPartial<Preview_PreviewImage_Image>): Preview_PreviewImage_Image;
};
export declare const OEmbed: {
    $type: "devvit.reddit.OEmbed";
    encode(message: OEmbed, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): OEmbed;
    fromJSON(object: any): OEmbed;
    toJSON(message: OEmbed): unknown;
    create(base?: DeepPartial<OEmbed>): OEmbed;
    fromPartial(object: DeepPartial<OEmbed>): OEmbed;
};
export declare const RedditPostGallery: {
    $type: "devvit.reddit.RedditPostGallery";
    encode(message: RedditPostGallery, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RedditPostGallery;
    fromJSON(object: any): RedditPostGallery;
    toJSON(message: RedditPostGallery): unknown;
    create(base?: DeepPartial<RedditPostGallery>): RedditPostGallery;
    fromPartial(object: DeepPartial<RedditPostGallery>): RedditPostGallery;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=post.d.ts.map