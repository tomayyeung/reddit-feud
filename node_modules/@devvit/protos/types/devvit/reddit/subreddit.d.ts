/**
 * #subreddit.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { CommentContributionSettings, UserFlairRichtext } from "./common.js";
export interface Subreddit {
    acceptFollowers?: boolean | undefined;
    accountsActiveIsFuzzed?: boolean | undefined;
    accountsActive?: number | undefined;
    activeUserCount?: number | undefined;
    advertiserCategory?: string | undefined;
    allOriginalContent?: boolean | undefined;
    allowChatPostCreation?: boolean | undefined;
    allowDiscovery?: boolean | undefined;
    allowGalleries?: boolean | undefined;
    allowImages?: boolean | undefined;
    allowPolls?: boolean | undefined;
    allowPredictionContributors?: boolean | undefined;
    allowPredictionsTournament?: boolean | undefined;
    allowPredictions?: boolean | undefined;
    allowTalks?: boolean | undefined;
    allowVideogifs?: boolean | undefined;
    allowVideos?: boolean | undefined;
    allowedMediaInComments: string[];
    bannerBackgroundColor?: string | undefined;
    bannerBackgroundImage?: string | undefined;
    bannerImg?: string | undefined;
    bannerSize: number[];
    canAssignLinkFlair?: boolean | undefined;
    canAssignUserFlair?: boolean | undefined;
    coins?: number | undefined;
    collapseDeletedComments?: boolean | undefined;
    commentContributionSettings?: CommentContributionSettings | undefined;
    commentScoreHideMins?: number | undefined;
    communityIcon?: string | undefined;
    communityReviewed?: boolean | undefined;
    contentCategory?: string | undefined;
    createdUtc?: number | undefined;
    created?: number | undefined;
    defaultSet?: boolean | undefined;
    description?: string | undefined;
    descriptionHtml?: string | undefined;
    disableContributorRequests?: boolean | undefined;
    displayName?: string | undefined;
    displayNamePrefixed?: string | undefined;
    emojisCustomSize: number[];
    emojisEnabled?: boolean | undefined;
    freeFormReports?: boolean | undefined;
    hasMenuWidget?: boolean | undefined;
    headerImg?: string | undefined;
    headerSize: number[];
    headerTitle?: string | undefined;
    hideAds?: boolean | undefined;
    iconColor?: string | undefined;
    iconImg?: string | undefined;
    iconSize: number[];
    id?: string | undefined;
    isChatPostFeatureEnabled?: boolean | undefined;
    isCrosspostableSubreddit?: boolean | undefined;
    isDefaultBanner?: boolean | undefined;
    isDefaultIcon?: boolean | undefined;
    isEnrolledInNewModmail?: boolean | undefined;
    keyColor?: string | undefined;
    lang?: string | undefined;
    linkFlairEnabled?: boolean | undefined;
    linkFlairPosition?: string | undefined;
    mobileBannerImage?: string | undefined;
    name?: string | undefined;
    notificationLevel?: string | undefined;
    originalContentTagEnabled?: string | undefined;
    over18?: boolean | undefined;
    predictionLeaderboardEntryType?: string | undefined;
    previousNames: string[];
    primaryColor?: string | undefined;
    publicDescription?: string | undefined;
    publicDescriptionHtml?: string | undefined;
    publicTraffic?: boolean | undefined;
    quarantine?: boolean | undefined;
    restrictCommenting?: boolean | undefined;
    restrictPosting?: boolean | undefined;
    shouldArchivePosts?: boolean | undefined;
    shouldShowMediaInCommentsSetting?: boolean | undefined;
    showMedia?: boolean | undefined;
    showMediaPreview?: boolean | undefined;
    spoilersEnabled?: boolean | undefined;
    submissionType?: string | undefined;
    submitLinkLabel?: string | undefined;
    submitText?: string | undefined;
    submitTextHtml?: string | undefined;
    submitTextLabel?: string | undefined;
    subredditType?: string | undefined;
    subscribers?: number | undefined;
    suggestedCommentSort?: string | undefined;
    title?: string | undefined;
    url?: string | undefined;
    userCanFlairInSr?: boolean | undefined;
    userFlairBackgroundColor?: string | undefined;
    userFlairCssClass?: string | undefined;
    userFlairEnabledInSr?: boolean | undefined;
    userFlairPosition?: string | undefined;
    userFlairRichtext: UserFlairRichtext[];
    userFlairTemplateId?: string | undefined;
    userFlairText?: string | undefined;
    userFlairTextColor?: string | undefined;
    userFlairType?: string | undefined;
    userHasFavorited?: boolean | undefined;
    userIsBanned?: boolean | undefined;
    userIsContributor?: boolean | undefined;
    userIsModerator?: boolean | undefined;
    userIsSubscriber?: boolean | undefined;
    userSrFlairEnabled?: boolean | undefined;
    userSrThemeEnabled?: boolean | undefined;
    videostreamLinksCount?: number | undefined;
    whitelistStatus?: string | undefined;
    wikiEnabled?: boolean | undefined;
    wls?: number | undefined;
    /** PRIVATE - DO NOT SET FOR PUBLIC USE */
    markedSpam?: boolean | undefined;
    /**
     * previously used for post guidance
     *
     * @deprecated
     */
    postRequirements?: Subreddit_PostRequirements | undefined;
    /** If `true`, the current user may not send messages to moderators */
    userIsMuted: boolean;
}
export interface Subreddit_PostRequirements {
    bodyRestrictionPolicy?: string | undefined;
}
export declare const Subreddit: {
    $type: "devvit.reddit.Subreddit";
    encode(message: Subreddit, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Subreddit;
    fromJSON(object: any): Subreddit;
    toJSON(message: Subreddit): unknown;
    create(base?: DeepPartial<Subreddit>): Subreddit;
    fromPartial(object: DeepPartial<Subreddit>): Subreddit;
};
export declare const Subreddit_PostRequirements: {
    $type: "devvit.reddit.Subreddit.PostRequirements";
    encode(message: Subreddit_PostRequirements, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Subreddit_PostRequirements;
    fromJSON(object: any): Subreddit_PostRequirements;
    toJSON(message: Subreddit_PostRequirements): unknown;
    create(base?: DeepPartial<Subreddit_PostRequirements>): Subreddit_PostRequirements;
    fromPartial(object: DeepPartial<Subreddit_PostRequirements>): Subreddit_PostRequirements;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=subreddit.d.ts.map