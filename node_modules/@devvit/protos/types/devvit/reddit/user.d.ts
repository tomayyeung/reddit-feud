/**
 * #user.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { Subreddit } from "./subreddit.js";
export interface User {
    acceptChats?: boolean | undefined;
    acceptFollowers?: boolean | undefined;
    acceptPms?: boolean | undefined;
    awardeeKarma?: number | undefined;
    awarderKarma?: number | undefined;
    canCreateSubreddit?: boolean | undefined;
    canEditName?: boolean | undefined;
    coins?: number | undefined;
    commentKarma?: number | undefined;
    created?: number | undefined;
    createdUtc?: number | undefined;
    features?: UserFeatures | undefined;
    forcePasswordReset?: boolean | undefined;
    goldCreddits?: number | undefined;
    goldExpiration?: string | undefined;
    hasAndroidSubscription?: boolean | undefined;
    hasExternalAccount?: boolean | undefined;
    hasGoldSubscription?: boolean | undefined;
    hasIosSubscription?: boolean | undefined;
    hasMail?: boolean | undefined;
    hasModMail?: boolean | undefined;
    hasPaypalSubscription?: boolean | undefined;
    hasStripeSubscription?: boolean | undefined;
    hasSubscribed?: boolean | undefined;
    hasSubscribedToPremium?: boolean | undefined;
    hasVerifiedEmail?: boolean | undefined;
    hasVisitedNewProfile?: boolean | undefined;
    hideFromRobots?: boolean | undefined;
    iconImg?: string | undefined;
    id?: string | undefined;
    inBeta?: boolean | undefined;
    inChat?: boolean | undefined;
    inRedesignBeta?: boolean | undefined;
    inboxCount?: number | undefined;
    isBlocked?: boolean | undefined;
    isEmployee?: boolean | undefined;
    isFriend?: boolean | undefined;
    isGold?: boolean | undefined;
    isMod?: boolean | undefined;
    isSponsor?: boolean | undefined;
    isSuspended?: boolean | undefined;
    linkKarma?: number | undefined;
    modhash?: string | undefined;
    name?: string | undefined;
    newModmailExists?: boolean | undefined;
    numFriends?: number | undefined;
    over18?: boolean | undefined;
    passwordSet?: boolean | undefined;
    prefAutoplay?: boolean | undefined;
    prefClickgadget?: number | undefined;
    prefGeopopular?: string | undefined;
    prefNightmode?: boolean | undefined;
    prefNoProfanity?: boolean | undefined;
    prefShowPresence?: boolean | undefined;
    prefShowSnoovatar?: boolean | undefined;
    prefShowTrending?: boolean | undefined;
    prefShowTwitter?: boolean | undefined;
    prefTopKarmaSubreddits?: boolean | undefined;
    prefVideoAutoplay?: boolean | undefined;
    snoovatarImg?: string | undefined;
    snoovatarSize: number[];
    subreddit?: Subreddit | undefined;
    suspensionExpirationUtc?: string | undefined;
    totalKarma?: number | undefined;
    verified?: boolean | undefined;
    hasPhoneNumber?: boolean | undefined;
    /** user properties for automod invocation */
    subredditsModerated?: number | undefined;
    hasMetaSubscription?: boolean | undefined;
    metaSubscriptionAge?: number | undefined;
    metaPointsBalance?: string | undefined;
    metaLockedPointsBalance?: string | undefined;
    commentSubredditKarma?: number | undefined;
    postSubredditKarma?: number | undefined;
    /** PRIVATE - DO NOT SET FOR PUBLIC USE */
    markedSpam?: boolean | undefined;
    isSubredditProxyAccount?: boolean | undefined;
}
export interface UserFeatures {
    awardsOnStreams?: boolean | undefined;
    canMakeMobileTestBuildPurchases?: boolean | undefined;
    chatGroupRollout?: boolean | undefined;
    chatSubreddit?: boolean | undefined;
    chatUserSettings?: boolean | undefined;
    chat?: boolean | undefined;
    cookieConsentBanner?: boolean | undefined;
    crosspostNotif?: boolean | undefined;
    crowdControlForPost?: boolean | undefined;
    customFeedImage?: boolean | undefined;
    doNotTrack?: boolean | undefined;
    expensiveCoinsPackage?: boolean | undefined;
    isEmailPermissionRequired?: boolean | undefined;
    liveComments?: boolean | undefined;
    liveOrangereds?: boolean | undefined;
    modAwards?: boolean | undefined;
    modServiceMuteReads?: boolean | undefined;
    modServiceMuteWrites?: boolean | undefined;
    modlogCopyrightRemoval?: boolean | undefined;
    mwebNsfwXpromo?: UserFeatures_Experiment | undefined;
    mwebXpromoInterstitialCommentsAndroid?: boolean | undefined;
    mwebXpromoInterstitialCommentsIos?: boolean | undefined;
    mwebXpromoModalListingClickDailyDismissibleAndroid?: boolean | undefined;
    mwebXpromoModalListingClickDailyDismissibleIos?: boolean | undefined;
    mwebXpromoRevampV2?: UserFeatures_Experiment | undefined;
    mwebXpromoRevampV3?: UserFeatures_Experiment | undefined;
    noreferrerToNoopener?: boolean | undefined;
    pollsMobile?: boolean | undefined;
    premiumSubscriptionsTable?: boolean | undefined;
    promotedTrendBlanks?: boolean | undefined;
    resizedStylesImages?: boolean | undefined;
    showAmpLink?: boolean | undefined;
    showNpsSurvey?: boolean | undefined;
    spezModal?: boolean | undefined;
    usePrefAccountDeployment?: boolean | undefined;
    userFlairMigrationTesting?: boolean | undefined;
    webhookConfig?: boolean | undefined;
}
export interface UserFeatures_Experiment {
    experimentId?: number | undefined;
    owner?: string | undefined;
    variant?: string | undefined;
}
export declare const User: {
    $type: "devvit.reddit.User";
    encode(message: User, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): User;
    fromJSON(object: any): User;
    toJSON(message: User): unknown;
    create(base?: DeepPartial<User>): User;
    fromPartial(object: DeepPartial<User>): User;
};
export declare const UserFeatures: {
    $type: "devvit.reddit.UserFeatures";
    encode(message: UserFeatures, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UserFeatures;
    fromJSON(object: any): UserFeatures;
    toJSON(message: UserFeatures): unknown;
    create(base?: DeepPartial<UserFeatures>): UserFeatures;
    fromPartial(object: DeepPartial<UserFeatures>): UserFeatures;
};
export declare const UserFeatures_Experiment: {
    $type: "devvit.reddit.UserFeatures.Experiment";
    encode(message: UserFeatures_Experiment, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UserFeatures_Experiment;
    fromJSON(object: any): UserFeatures_Experiment;
    toJSON(message: UserFeatures_Experiment): unknown;
    create(base?: DeepPartial<UserFeatures_Experiment>): UserFeatures_Experiment;
    fromPartial(object: DeepPartial<UserFeatures_Experiment>): UserFeatures_Experiment;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=user.d.ts.map