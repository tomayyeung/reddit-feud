/**
 * #commentv2.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
export interface CommentV2 {
    id: string;
    parentId: string;
    body: string;
    author: string;
    numReports: number;
    collapsedBecauseCrowdControl: boolean;
    spam: boolean;
    deleted: boolean;
    createdAt: number;
    upvotes: number;
    downvotes: number;
    languageCode: string;
    lastModifiedAt: number;
    gilded: boolean;
    score: number;
    permalink: string;
    hasMedia: boolean;
    postId: string;
    subredditId: string;
    elementTypes: string[];
}
export declare const CommentV2: {
    $type: "devvit.reddit.v2alpha.CommentV2";
    encode(message: CommentV2, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CommentV2;
    fromJSON(object: any): CommentV2;
    toJSON(message: CommentV2): unknown;
    create(base?: DeepPartial<CommentV2>): CommentV2;
    fromPartial(object: DeepPartial<CommentV2>): CommentV2;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=commentv2.d.ts.map