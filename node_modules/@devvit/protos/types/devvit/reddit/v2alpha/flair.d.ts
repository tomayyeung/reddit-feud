/**
 * #flair.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
export interface LinkFlairV2 {
    text: string;
    cssClass: string;
    backgroundColor: string;
    templateId: string;
    textColor: string;
}
export interface UserFlairV2 {
    userId: string;
    subredditId: string;
    text: string;
    cssClass: string;
    templateId: string;
    textColor: string;
    backgroundColor: string;
    enabled: boolean;
}
export declare const LinkFlairV2: {
    $type: "devvit.reddit.v2alpha.LinkFlairV2";
    encode(message: LinkFlairV2, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): LinkFlairV2;
    fromJSON(object: any): LinkFlairV2;
    toJSON(message: LinkFlairV2): unknown;
    create(base?: DeepPartial<LinkFlairV2>): LinkFlairV2;
    fromPartial(object: DeepPartial<LinkFlairV2>): LinkFlairV2;
};
export declare const UserFlairV2: {
    $type: "devvit.reddit.v2alpha.UserFlairV2";
    encode(message: UserFlairV2, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UserFlairV2;
    fromJSON(object: any): UserFlairV2;
    toJSON(message: UserFlairV2): unknown;
    create(base?: DeepPartial<UserFlairV2>): UserFlairV2;
    fromPartial(object: DeepPartial<UserFlairV2>): UserFlairV2;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=flair.d.ts.map