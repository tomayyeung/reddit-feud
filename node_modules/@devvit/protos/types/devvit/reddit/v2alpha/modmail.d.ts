/**
 * #modmail.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { SubredditV2 } from "./subredditv2.js";
import { UserV2 } from "./userv2.js";
export interface ModMail {
    /** author of the message */
    messageAuthor?: UserV2 | undefined;
    /** message creation timestamp */
    createdAt?: Date | undefined;
    /**
     * what type of user is the message author participating as:
     * moderator - as a mod of the owning subreddit
     * participant_user - as a non-mod user
     * participant_sr - as a mod of the participant subreddit (see conversation_type field)
     */
    messageAuthorType: string;
    /** state of the conversation: new, in-progress, archived */
    conversationState: string;
    /** type of conversation: internal (mod discussion), sr_user (between a subreddit and user), sr_sr (between two subreddits) */
    conversationType: string;
    /** is the conversation auto generated? (from automod, u/reddit etc) */
    isAutoGenerated: boolean;
    /** subreddit owning the modmail conversation */
    conversationSubreddit?: SubredditV2 | undefined;
    /** the subreddit that the modmail is sent to or nil */
    destinationSubreddit?: SubredditV2 | undefined;
    /** Conversation ID (base36 encoded string, does not have a thing-type prefix) */
    conversationId: string;
    /** Message ID (base36 encoded string, does not have a thing-type prefix) */
    messageId: string;
}
export declare const ModMail: {
    $type: "devvit.reddit.v2alpha.ModMail";
    encode(message: ModMail, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ModMail;
    fromJSON(object: any): ModMail;
    toJSON(message: ModMail): unknown;
    create(base?: DeepPartial<ModMail>): ModMail;
    fromPartial(object: DeepPartial<ModMail>): ModMail;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=modmail.d.ts.map