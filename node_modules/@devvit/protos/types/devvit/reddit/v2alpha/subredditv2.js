/**
 * #subredditv2.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { messageTypeRegistry } from "../../../typeRegistry.js";
export var SubredditType;
(function (SubredditType) {
    SubredditType[SubredditType["ARCHIVED"] = 0] = "ARCHIVED";
    SubredditType[SubredditType["EMPLOYEES_ONLY"] = 1] = "EMPLOYEES_ONLY";
    SubredditType[SubredditType["GOLD_ONLY"] = 2] = "GOLD_ONLY";
    SubredditType[SubredditType["GOLD_RESTRICTED"] = 3] = "GOLD_RESTRICTED";
    SubredditType[SubredditType["PRIVATE"] = 4] = "PRIVATE";
    SubredditType[SubredditType["PUBLIC"] = 5] = "PUBLIC";
    SubredditType[SubredditType["RESTRICTED"] = 6] = "RESTRICTED";
    SubredditType[SubredditType["USER"] = 7] = "USER";
    SubredditType[SubredditType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(SubredditType || (SubredditType = {}));
export function subredditTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "ARCHIVED":
            return SubredditType.ARCHIVED;
        case 1:
        case "EMPLOYEES_ONLY":
            return SubredditType.EMPLOYEES_ONLY;
        case 2:
        case "GOLD_ONLY":
            return SubredditType.GOLD_ONLY;
        case 3:
        case "GOLD_RESTRICTED":
            return SubredditType.GOLD_RESTRICTED;
        case 4:
        case "PRIVATE":
            return SubredditType.PRIVATE;
        case 5:
        case "PUBLIC":
            return SubredditType.PUBLIC;
        case 6:
        case "RESTRICTED":
            return SubredditType.RESTRICTED;
        case 7:
        case "USER":
            return SubredditType.USER;
        case -1:
        case "UNRECOGNIZED":
        default:
            return SubredditType.UNRECOGNIZED;
    }
}
export function subredditTypeToJSON(object) {
    switch (object) {
        case SubredditType.ARCHIVED:
            return 0;
        case SubredditType.EMPLOYEES_ONLY:
            return 1;
        case SubredditType.GOLD_ONLY:
            return 2;
        case SubredditType.GOLD_RESTRICTED:
            return 3;
        case SubredditType.PRIVATE:
            return 4;
        case SubredditType.PUBLIC:
            return 5;
        case SubredditType.RESTRICTED:
            return 6;
        case SubredditType.USER:
            return 7;
        case SubredditType.UNRECOGNIZED:
        default:
            return -1;
    }
}
/** used with data-api */
export var SubredditRating;
(function (SubredditRating) {
    SubredditRating[SubredditRating["UNKNOWN_SUBREDDIT_RATING"] = 0] = "UNKNOWN_SUBREDDIT_RATING";
    /** E - everyone */
    SubredditRating[SubredditRating["E"] = 1] = "E";
    /** M1 - mature 1 */
    SubredditRating[SubredditRating["M1"] = 2] = "M1";
    /** M2 - mature 2 */
    SubredditRating[SubredditRating["M2"] = 3] = "M2";
    /** D - high-risk drug use */
    SubredditRating[SubredditRating["D"] = 4] = "D";
    /** V - violence & gore */
    SubredditRating[SubredditRating["V"] = 5] = "V";
    /** X - sexually explicit */
    SubredditRating[SubredditRating["X"] = 6] = "X";
    SubredditRating[SubredditRating["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(SubredditRating || (SubredditRating = {}));
export function subredditRatingFromJSON(object) {
    switch (object) {
        case 0:
        case "UNKNOWN_SUBREDDIT_RATING":
            return SubredditRating.UNKNOWN_SUBREDDIT_RATING;
        case 1:
        case "E":
            return SubredditRating.E;
        case 2:
        case "M1":
            return SubredditRating.M1;
        case 3:
        case "M2":
            return SubredditRating.M2;
        case 4:
        case "D":
            return SubredditRating.D;
        case 5:
        case "V":
            return SubredditRating.V;
        case 6:
        case "X":
            return SubredditRating.X;
        case -1:
        case "UNRECOGNIZED":
        default:
            return SubredditRating.UNRECOGNIZED;
    }
}
export function subredditRatingToJSON(object) {
    switch (object) {
        case SubredditRating.UNKNOWN_SUBREDDIT_RATING:
            return 0;
        case SubredditRating.E:
            return 1;
        case SubredditRating.M1:
            return 2;
        case SubredditRating.M2:
            return 3;
        case SubredditRating.D:
            return 4;
        case SubredditRating.V:
            return 5;
        case SubredditRating.X:
            return 6;
        case SubredditRating.UNRECOGNIZED:
        default:
            return -1;
    }
}
function createBaseSubredditV2() {
    return {
        id: "",
        name: "",
        nsfw: false,
        type: 0,
        spam: false,
        quarantined: false,
        topics: [],
        rating: 0,
        subscribersCount: 0,
        permalink: "",
    };
}
export const SubredditV2 = {
    $type: "devvit.reddit.v2alpha.SubredditV2",
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.nsfw !== false) {
            writer.uint32(24).bool(message.nsfw);
        }
        if (message.type !== 0) {
            writer.uint32(32).int32(message.type);
        }
        if (message.spam !== false) {
            writer.uint32(40).bool(message.spam);
        }
        if (message.quarantined !== false) {
            writer.uint32(48).bool(message.quarantined);
        }
        for (const v of message.topics) {
            writer.uint32(58).string(v);
        }
        if (message.rating !== 0) {
            writer.uint32(64).int32(message.rating);
        }
        if (message.subscribersCount !== 0) {
            writer.uint32(72).int32(message.subscribersCount);
        }
        if (message.permalink !== "") {
            writer.uint32(82).string(message.permalink);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSubredditV2();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.nsfw = reader.bool();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.type = reader.int32();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.spam = reader.bool();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.quarantined = reader.bool();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.topics.push(reader.string());
                    continue;
                case 8:
                    if (tag !== 64) {
                        break;
                    }
                    message.rating = reader.int32();
                    continue;
                case 9:
                    if (tag !== 72) {
                        break;
                    }
                    message.subscribersCount = reader.int32();
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.permalink = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            nsfw: isSet(object.nsfw) ? globalThis.Boolean(object.nsfw) : false,
            type: isSet(object.type) ? subredditTypeFromJSON(object.type) : 0,
            spam: isSet(object.spam) ? globalThis.Boolean(object.spam) : false,
            quarantined: isSet(object.quarantined) ? globalThis.Boolean(object.quarantined) : false,
            topics: globalThis.Array.isArray(object?.topics) ? object.topics.map((e) => globalThis.String(e)) : [],
            rating: isSet(object.rating) ? subredditRatingFromJSON(object.rating) : 0,
            subscribersCount: isSet(object.subscribersCount) ? globalThis.Number(object.subscribersCount) : 0,
            permalink: isSet(object.permalink) ? globalThis.String(object.permalink) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.nsfw !== false) {
            obj.nsfw = message.nsfw;
        }
        if (message.type !== 0) {
            obj.type = subredditTypeToJSON(message.type);
        }
        if (message.spam !== false) {
            obj.spam = message.spam;
        }
        if (message.quarantined !== false) {
            obj.quarantined = message.quarantined;
        }
        if (message.topics?.length) {
            obj.topics = message.topics;
        }
        if (message.rating !== 0) {
            obj.rating = subredditRatingToJSON(message.rating);
        }
        if (message.subscribersCount !== 0) {
            obj.subscribersCount = Math.round(message.subscribersCount);
        }
        if (message.permalink !== "") {
            obj.permalink = message.permalink;
        }
        return obj;
    },
    create(base) {
        return SubredditV2.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSubredditV2();
        message.id = object.id ?? "";
        message.name = object.name ?? "";
        message.nsfw = object.nsfw ?? false;
        message.type = object.type ?? 0;
        message.spam = object.spam ?? false;
        message.quarantined = object.quarantined ?? false;
        message.topics = object.topics?.map((e) => e) || [];
        message.rating = object.rating ?? 0;
        message.subscribersCount = object.subscribersCount ?? 0;
        message.permalink = object.permalink ?? "";
        return message;
    },
};
messageTypeRegistry.set(SubredditV2.$type, SubredditV2);
function isSet(value) {
    return value !== null && value !== undefined;
}
