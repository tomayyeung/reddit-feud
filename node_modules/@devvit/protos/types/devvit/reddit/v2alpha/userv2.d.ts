/**
 * #userv2.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { UserFlairV2 } from "./flair.js";
export interface UserV2 {
    id: string;
    name: string;
    isGold: boolean;
    snoovatarImage: string;
    url: string;
    spam: boolean;
    banned: boolean;
    flair?: UserFlairV2 | undefined;
    karma: number;
    iconImage: string;
    description: string;
    suspended: boolean;
}
export declare const UserV2: {
    $type: "devvit.reddit.v2alpha.UserV2";
    encode(message: UserV2, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UserV2;
    fromJSON(object: any): UserV2;
    toJSON(message: UserV2): unknown;
    create(base?: DeepPartial<UserV2>): UserV2;
    fromPartial(object: DeepPartial<UserV2>): UserV2;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=userv2.d.ts.map