/**
 * #remote_logger.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { Observable } from "rxjs";
import { Metadata } from "../../../lib/Types.js";
import { LogErrorMessage, LogEventMessage, LogMessage } from "../plugin/logger/logger.js";
export declare enum RemoteLogType {
    LOG = 0,
    ERROR = 1,
    EVENT = 2,
    UNRECOGNIZED = -1
}
export declare function remoteLogTypeFromJSON(object: any): RemoteLogType;
export declare function remoteLogTypeToJSON(object: RemoteLogType): number;
export interface RemoteLogMessages {
    messages: RemoteLogMessage[];
}
export interface RemoteLogPutResponse {
}
export interface KeepAliveMessage {
    timestamp?: Date | undefined;
}
export interface RemoteLogMessage {
    log?: LogMessage | undefined;
    error?: LogErrorMessage | undefined;
    keepalive?: KeepAliveMessage | undefined;
    event?: LogEventMessage | undefined;
}
/** Filter on installation ID (encoded subreddit name AND app name). */
export interface RemoteLogInstallationFilter {
    installationId: string;
}
/**
 * Filter on subreddit name and / or app name. Not all combinations are
 * available on all streams.
 */
export interface RemoteLogSubredditAppNameFilter {
    subreddit: string;
    appName: string;
}
export interface RemoteLogQuery {
    installation?: RemoteLogInstallationFilter | undefined;
    subredditAppName?: RemoteLogSubredditAppNameFilter | undefined;
    type: RemoteLogType;
    since?: Date | undefined;
}
export declare const RemoteLogMessages: {
    $type: "devvit.remote_logger.RemoteLogMessages";
    encode(message: RemoteLogMessages, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RemoteLogMessages;
    fromJSON(object: any): RemoteLogMessages;
    toJSON(message: RemoteLogMessages): unknown;
    create(base?: DeepPartial<RemoteLogMessages>): RemoteLogMessages;
    fromPartial(object: DeepPartial<RemoteLogMessages>): RemoteLogMessages;
};
export declare const RemoteLogPutResponse: {
    $type: "devvit.remote_logger.RemoteLogPutResponse";
    encode(_: RemoteLogPutResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RemoteLogPutResponse;
    fromJSON(_: any): RemoteLogPutResponse;
    toJSON(_: RemoteLogPutResponse): unknown;
    create(base?: DeepPartial<RemoteLogPutResponse>): RemoteLogPutResponse;
    fromPartial(_: DeepPartial<RemoteLogPutResponse>): RemoteLogPutResponse;
};
export declare const KeepAliveMessage: {
    $type: "devvit.remote_logger.KeepAliveMessage";
    encode(message: KeepAliveMessage, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): KeepAliveMessage;
    fromJSON(object: any): KeepAliveMessage;
    toJSON(message: KeepAliveMessage): unknown;
    create(base?: DeepPartial<KeepAliveMessage>): KeepAliveMessage;
    fromPartial(object: DeepPartial<KeepAliveMessage>): KeepAliveMessage;
};
export declare const RemoteLogMessage: {
    $type: "devvit.remote_logger.RemoteLogMessage";
    encode(message: RemoteLogMessage, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RemoteLogMessage;
    fromJSON(object: any): RemoteLogMessage;
    toJSON(message: RemoteLogMessage): unknown;
    create(base?: DeepPartial<RemoteLogMessage>): RemoteLogMessage;
    fromPartial(object: DeepPartial<RemoteLogMessage>): RemoteLogMessage;
};
export declare const RemoteLogInstallationFilter: {
    $type: "devvit.remote_logger.RemoteLogInstallationFilter";
    encode(message: RemoteLogInstallationFilter, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RemoteLogInstallationFilter;
    fromJSON(object: any): RemoteLogInstallationFilter;
    toJSON(message: RemoteLogInstallationFilter): unknown;
    create(base?: DeepPartial<RemoteLogInstallationFilter>): RemoteLogInstallationFilter;
    fromPartial(object: DeepPartial<RemoteLogInstallationFilter>): RemoteLogInstallationFilter;
};
export declare const RemoteLogSubredditAppNameFilter: {
    $type: "devvit.remote_logger.RemoteLogSubredditAppNameFilter";
    encode(message: RemoteLogSubredditAppNameFilter, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RemoteLogSubredditAppNameFilter;
    fromJSON(object: any): RemoteLogSubredditAppNameFilter;
    toJSON(message: RemoteLogSubredditAppNameFilter): unknown;
    create(base?: DeepPartial<RemoteLogSubredditAppNameFilter>): RemoteLogSubredditAppNameFilter;
    fromPartial(object: DeepPartial<RemoteLogSubredditAppNameFilter>): RemoteLogSubredditAppNameFilter;
};
export declare const RemoteLogQuery: {
    $type: "devvit.remote_logger.RemoteLogQuery";
    encode(message: RemoteLogQuery, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RemoteLogQuery;
    fromJSON(object: any): RemoteLogQuery;
    toJSON(message: RemoteLogQuery): unknown;
    create(base?: DeepPartial<RemoteLogQuery>): RemoteLogQuery;
    fromPartial(object: DeepPartial<RemoteLogQuery>): RemoteLogQuery;
};
export interface RemoteLogPublisher {
    Put(request: RemoteLogMessage, metadata?: Metadata): Promise<RemoteLogPutResponse>;
    PutAll(request: RemoteLogMessages, metadata?: Metadata): Promise<RemoteLogPutResponse>;
}
export declare const RemoteLogPublisherServiceName = "devvit.remote_logger.RemoteLogPublisher";
export declare class RemoteLogPublisherClientImpl implements RemoteLogPublisher {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Put(request: RemoteLogMessage, metadata?: Metadata): Promise<RemoteLogPutResponse>;
    PutAll(request: RemoteLogMessages, metadata?: Metadata): Promise<RemoteLogPutResponse>;
}
export type RemoteLogPublisherDefinition = typeof RemoteLogPublisherDefinition;
export declare const RemoteLogPublisherDefinition: {
    readonly name: "RemoteLogPublisher";
    readonly fullName: "devvit.remote_logger.RemoteLogPublisher";
    readonly methods: {
        readonly put: {
            readonly name: "Put";
            readonly requestType: {
                $type: "devvit.remote_logger.RemoteLogMessage";
                encode(message: RemoteLogMessage, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): RemoteLogMessage;
                fromJSON(object: any): RemoteLogMessage;
                toJSON(message: RemoteLogMessage): unknown;
                create(base?: DeepPartial<RemoteLogMessage>): RemoteLogMessage;
                fromPartial(object: DeepPartial<RemoteLogMessage>): RemoteLogMessage;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.remote_logger.RemoteLogPutResponse";
                encode(_: RemoteLogPutResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): RemoteLogPutResponse;
                fromJSON(_: any): RemoteLogPutResponse;
                toJSON(_: RemoteLogPutResponse): unknown;
                create(base?: DeepPartial<RemoteLogPutResponse>): RemoteLogPutResponse;
                fromPartial(_: DeepPartial<RemoteLogPutResponse>): RemoteLogPutResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly putAll: {
            readonly name: "PutAll";
            readonly requestType: {
                $type: "devvit.remote_logger.RemoteLogMessages";
                encode(message: RemoteLogMessages, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): RemoteLogMessages;
                fromJSON(object: any): RemoteLogMessages;
                toJSON(message: RemoteLogMessages): unknown;
                create(base?: DeepPartial<RemoteLogMessages>): RemoteLogMessages;
                fromPartial(object: DeepPartial<RemoteLogMessages>): RemoteLogMessages;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.remote_logger.RemoteLogPutResponse";
                encode(_: RemoteLogPutResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): RemoteLogPutResponse;
                fromJSON(_: any): RemoteLogPutResponse;
                toJSON(_: RemoteLogPutResponse): unknown;
                create(base?: DeepPartial<RemoteLogPutResponse>): RemoteLogPutResponse;
                fromPartial(_: DeepPartial<RemoteLogPutResponse>): RemoteLogPutResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
export interface RemoteLogConsumer {
    Tail(request: RemoteLogQuery, metadata?: Metadata): Observable<RemoteLogMessage>;
}
export declare const RemoteLogConsumerServiceName = "devvit.remote_logger.RemoteLogConsumer";
export declare class RemoteLogConsumerClientImpl implements RemoteLogConsumer {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Tail(request: RemoteLogQuery, metadata?: Metadata): Observable<RemoteLogMessage>;
}
export type RemoteLogConsumerDefinition = typeof RemoteLogConsumerDefinition;
export declare const RemoteLogConsumerDefinition: {
    readonly name: "RemoteLogConsumer";
    readonly fullName: "devvit.remote_logger.RemoteLogConsumer";
    readonly methods: {
        readonly tail: {
            readonly name: "Tail";
            readonly requestType: {
                $type: "devvit.remote_logger.RemoteLogQuery";
                encode(message: RemoteLogQuery, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): RemoteLogQuery;
                fromJSON(object: any): RemoteLogQuery;
                toJSON(message: RemoteLogQuery): unknown;
                create(base?: DeepPartial<RemoteLogQuery>): RemoteLogQuery;
                fromPartial(object: DeepPartial<RemoteLogQuery>): RemoteLogQuery;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.remote_logger.RemoteLogMessage";
                encode(message: RemoteLogMessage, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): RemoteLogMessage;
                fromJSON(object: any): RemoteLogMessage;
                toJSON(message: RemoteLogMessage): unknown;
                create(base?: DeepPartial<RemoteLogMessage>): RemoteLogMessage;
                fromPartial(object: DeepPartial<RemoteLogMessage>): RemoteLogMessage;
            };
            readonly responseStream: true;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array, metadata?: Metadata): Promise<Uint8Array>;
    clientStreamingRequest(service: string, method: string, data: Observable<Uint8Array>, metadata?: Metadata): Promise<Uint8Array>;
    serverStreamingRequest(service: string, method: string, data: Uint8Array, metadata?: Metadata): Observable<Uint8Array>;
    bidirectionalStreamingRequest(service: string, method: string, data: Observable<Uint8Array>, metadata?: Metadata): Observable<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=remote_logger.d.ts.map