/**
 * #remote_logger.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { map } from "rxjs/operators";
import { Timestamp } from "../../google/protobuf/timestamp.js";
import { messageTypeRegistry } from "../../typeRegistry.js";
import { LogErrorMessage, LogEventMessage, LogMessage } from "../plugin/logger/logger.js";
export var RemoteLogType;
(function (RemoteLogType) {
    RemoteLogType[RemoteLogType["LOG"] = 0] = "LOG";
    RemoteLogType[RemoteLogType["ERROR"] = 1] = "ERROR";
    RemoteLogType[RemoteLogType["EVENT"] = 2] = "EVENT";
    RemoteLogType[RemoteLogType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(RemoteLogType || (RemoteLogType = {}));
export function remoteLogTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "LOG":
            return RemoteLogType.LOG;
        case 1:
        case "ERROR":
            return RemoteLogType.ERROR;
        case 2:
        case "EVENT":
            return RemoteLogType.EVENT;
        case -1:
        case "UNRECOGNIZED":
        default:
            return RemoteLogType.UNRECOGNIZED;
    }
}
export function remoteLogTypeToJSON(object) {
    switch (object) {
        case RemoteLogType.LOG:
            return 0;
        case RemoteLogType.ERROR:
            return 1;
        case RemoteLogType.EVENT:
            return 2;
        case RemoteLogType.UNRECOGNIZED:
        default:
            return -1;
    }
}
function createBaseRemoteLogMessages() {
    return { messages: [] };
}
export const RemoteLogMessages = {
    $type: "devvit.remote_logger.RemoteLogMessages",
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.messages) {
            RemoteLogMessage.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoteLogMessages();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.messages.push(RemoteLogMessage.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            messages: globalThis.Array.isArray(object?.messages)
                ? object.messages.map((e) => RemoteLogMessage.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.messages?.length) {
            obj.messages = message.messages.map((e) => RemoteLogMessage.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return RemoteLogMessages.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRemoteLogMessages();
        message.messages = object.messages?.map((e) => RemoteLogMessage.fromPartial(e)) || [];
        return message;
    },
};
messageTypeRegistry.set(RemoteLogMessages.$type, RemoteLogMessages);
function createBaseRemoteLogPutResponse() {
    return {};
}
export const RemoteLogPutResponse = {
    $type: "devvit.remote_logger.RemoteLogPutResponse",
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoteLogPutResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return RemoteLogPutResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseRemoteLogPutResponse();
        return message;
    },
};
messageTypeRegistry.set(RemoteLogPutResponse.$type, RemoteLogPutResponse);
function createBaseKeepAliveMessage() {
    return { timestamp: undefined };
}
export const KeepAliveMessage = {
    $type: "devvit.remote_logger.KeepAliveMessage",
    encode(message, writer = _m0.Writer.create()) {
        if (message.timestamp !== undefined) {
            Timestamp.encode(toTimestamp(message.timestamp), writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseKeepAliveMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.timestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { timestamp: isSet(object.timestamp) ? fromJsonTimestamp(object.timestamp) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.timestamp !== undefined) {
            obj.timestamp = message.timestamp.toISOString();
        }
        return obj;
    },
    create(base) {
        return KeepAliveMessage.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseKeepAliveMessage();
        message.timestamp = object.timestamp ?? undefined;
        return message;
    },
};
messageTypeRegistry.set(KeepAliveMessage.$type, KeepAliveMessage);
function createBaseRemoteLogMessage() {
    return { log: undefined, error: undefined, keepalive: undefined, event: undefined };
}
export const RemoteLogMessage = {
    $type: "devvit.remote_logger.RemoteLogMessage",
    encode(message, writer = _m0.Writer.create()) {
        if (message.log !== undefined) {
            LogMessage.encode(message.log, writer.uint32(10).fork()).ldelim();
        }
        if (message.error !== undefined) {
            LogErrorMessage.encode(message.error, writer.uint32(18).fork()).ldelim();
        }
        if (message.keepalive !== undefined) {
            KeepAliveMessage.encode(message.keepalive, writer.uint32(26).fork()).ldelim();
        }
        if (message.event !== undefined) {
            LogEventMessage.encode(message.event, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoteLogMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.log = LogMessage.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.error = LogErrorMessage.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.keepalive = KeepAliveMessage.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.event = LogEventMessage.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            log: isSet(object.log) ? LogMessage.fromJSON(object.log) : undefined,
            error: isSet(object.error) ? LogErrorMessage.fromJSON(object.error) : undefined,
            keepalive: isSet(object.keepalive) ? KeepAliveMessage.fromJSON(object.keepalive) : undefined,
            event: isSet(object.event) ? LogEventMessage.fromJSON(object.event) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.log !== undefined) {
            obj.log = LogMessage.toJSON(message.log);
        }
        if (message.error !== undefined) {
            obj.error = LogErrorMessage.toJSON(message.error);
        }
        if (message.keepalive !== undefined) {
            obj.keepalive = KeepAliveMessage.toJSON(message.keepalive);
        }
        if (message.event !== undefined) {
            obj.event = LogEventMessage.toJSON(message.event);
        }
        return obj;
    },
    create(base) {
        return RemoteLogMessage.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRemoteLogMessage();
        message.log = (object.log !== undefined && object.log !== null) ? LogMessage.fromPartial(object.log) : undefined;
        message.error = (object.error !== undefined && object.error !== null)
            ? LogErrorMessage.fromPartial(object.error)
            : undefined;
        message.keepalive = (object.keepalive !== undefined && object.keepalive !== null)
            ? KeepAliveMessage.fromPartial(object.keepalive)
            : undefined;
        message.event = (object.event !== undefined && object.event !== null)
            ? LogEventMessage.fromPartial(object.event)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set(RemoteLogMessage.$type, RemoteLogMessage);
function createBaseRemoteLogInstallationFilter() {
    return { installationId: "" };
}
export const RemoteLogInstallationFilter = {
    $type: "devvit.remote_logger.RemoteLogInstallationFilter",
    encode(message, writer = _m0.Writer.create()) {
        if (message.installationId !== "") {
            writer.uint32(10).string(message.installationId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoteLogInstallationFilter();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.installationId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { installationId: isSet(object.installationId) ? globalThis.String(object.installationId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.installationId !== "") {
            obj.installationId = message.installationId;
        }
        return obj;
    },
    create(base) {
        return RemoteLogInstallationFilter.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRemoteLogInstallationFilter();
        message.installationId = object.installationId ?? "";
        return message;
    },
};
messageTypeRegistry.set(RemoteLogInstallationFilter.$type, RemoteLogInstallationFilter);
function createBaseRemoteLogSubredditAppNameFilter() {
    return { subreddit: "", appName: "" };
}
export const RemoteLogSubredditAppNameFilter = {
    $type: "devvit.remote_logger.RemoteLogSubredditAppNameFilter",
    encode(message, writer = _m0.Writer.create()) {
        if (message.subreddit !== "") {
            writer.uint32(18).string(message.subreddit);
        }
        if (message.appName !== "") {
            writer.uint32(26).string(message.appName);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoteLogSubredditAppNameFilter();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.subreddit = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.appName = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            subreddit: isSet(object.subreddit) ? globalThis.String(object.subreddit) : "",
            appName: isSet(object.appName) ? globalThis.String(object.appName) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.subreddit !== "") {
            obj.subreddit = message.subreddit;
        }
        if (message.appName !== "") {
            obj.appName = message.appName;
        }
        return obj;
    },
    create(base) {
        return RemoteLogSubredditAppNameFilter.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRemoteLogSubredditAppNameFilter();
        message.subreddit = object.subreddit ?? "";
        message.appName = object.appName ?? "";
        return message;
    },
};
messageTypeRegistry.set(RemoteLogSubredditAppNameFilter.$type, RemoteLogSubredditAppNameFilter);
function createBaseRemoteLogQuery() {
    return { installation: undefined, subredditAppName: undefined, type: 0, since: undefined };
}
export const RemoteLogQuery = {
    $type: "devvit.remote_logger.RemoteLogQuery",
    encode(message, writer = _m0.Writer.create()) {
        if (message.installation !== undefined) {
            RemoteLogInstallationFilter.encode(message.installation, writer.uint32(10).fork()).ldelim();
        }
        if (message.subredditAppName !== undefined) {
            RemoteLogSubredditAppNameFilter.encode(message.subredditAppName, writer.uint32(18).fork()).ldelim();
        }
        if (message.type !== 0) {
            writer.uint32(24).int32(message.type);
        }
        if (message.since !== undefined) {
            Timestamp.encode(toTimestamp(message.since), writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoteLogQuery();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.installation = RemoteLogInstallationFilter.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.subredditAppName = RemoteLogSubredditAppNameFilter.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.type = reader.int32();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.since = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            installation: isSet(object.installation) ? RemoteLogInstallationFilter.fromJSON(object.installation) : undefined,
            subredditAppName: isSet(object.subredditAppName)
                ? RemoteLogSubredditAppNameFilter.fromJSON(object.subredditAppName)
                : undefined,
            type: isSet(object.type) ? remoteLogTypeFromJSON(object.type) : 0,
            since: isSet(object.since) ? fromJsonTimestamp(object.since) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.installation !== undefined) {
            obj.installation = RemoteLogInstallationFilter.toJSON(message.installation);
        }
        if (message.subredditAppName !== undefined) {
            obj.subredditAppName = RemoteLogSubredditAppNameFilter.toJSON(message.subredditAppName);
        }
        if (message.type !== 0) {
            obj.type = remoteLogTypeToJSON(message.type);
        }
        if (message.since !== undefined) {
            obj.since = message.since.toISOString();
        }
        return obj;
    },
    create(base) {
        return RemoteLogQuery.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRemoteLogQuery();
        message.installation = (object.installation !== undefined && object.installation !== null)
            ? RemoteLogInstallationFilter.fromPartial(object.installation)
            : undefined;
        message.subredditAppName = (object.subredditAppName !== undefined && object.subredditAppName !== null)
            ? RemoteLogSubredditAppNameFilter.fromPartial(object.subredditAppName)
            : undefined;
        message.type = object.type ?? 0;
        message.since = object.since ?? undefined;
        return message;
    },
};
messageTypeRegistry.set(RemoteLogQuery.$type, RemoteLogQuery);
export const RemoteLogPublisherServiceName = "devvit.remote_logger.RemoteLogPublisher";
export class RemoteLogPublisherClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || RemoteLogPublisherServiceName;
        this.rpc = rpc;
        this.Put = this.Put.bind(this);
        this.PutAll = this.PutAll.bind(this);
    }
    Put(request, metadata) {
        const data = RemoteLogMessage.encode(request).finish();
        const promise = this.rpc.request(this.service, "Put", data, metadata);
        return promise.then((data) => RemoteLogPutResponse.decode(_m0.Reader.create(data)));
    }
    PutAll(request, metadata) {
        const data = RemoteLogMessages.encode(request).finish();
        const promise = this.rpc.request(this.service, "PutAll", data, metadata);
        return promise.then((data) => RemoteLogPutResponse.decode(_m0.Reader.create(data)));
    }
}
export const RemoteLogPublisherDefinition = {
    name: "RemoteLogPublisher",
    fullName: "devvit.remote_logger.RemoteLogPublisher",
    methods: {
        put: {
            name: "Put",
            requestType: RemoteLogMessage,
            requestStream: false,
            responseType: RemoteLogPutResponse,
            responseStream: false,
            options: {},
        },
        putAll: {
            name: "PutAll",
            requestType: RemoteLogMessages,
            requestStream: false,
            responseType: RemoteLogPutResponse,
            responseStream: false,
            options: {},
        },
    },
};
export const RemoteLogConsumerServiceName = "devvit.remote_logger.RemoteLogConsumer";
export class RemoteLogConsumerClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || RemoteLogConsumerServiceName;
        this.rpc = rpc;
        this.Tail = this.Tail.bind(this);
    }
    Tail(request, metadata) {
        const data = RemoteLogQuery.encode(request).finish();
        const result = this.rpc.serverStreamingRequest(this.service, "Tail", data, metadata);
        return result.pipe(map((data) => RemoteLogMessage.decode(_m0.Reader.create(data))));
    }
}
export const RemoteLogConsumerDefinition = {
    name: "RemoteLogConsumer",
    fullName: "devvit.remote_logger.RemoteLogConsumer",
    methods: {
        tail: {
            name: "Tail",
            requestType: RemoteLogQuery,
            requestStream: false,
            responseType: RemoteLogMessage,
            responseStream: true,
            options: {},
        },
    },
};
function toTimestamp(date) {
    const seconds = Math.trunc(date.getTime() / 1000);
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (t.seconds || 0) * 1000;
    millis += (t.nanos || 0) / 1000000;
    return new globalThis.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof globalThis.Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new globalThis.Date(o);
    }
    else {
        return fromTimestamp(Timestamp.fromJSON(o));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
