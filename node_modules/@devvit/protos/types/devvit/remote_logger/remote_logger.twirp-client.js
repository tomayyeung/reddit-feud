import { RemoteLogMessage, RemoteLogPutResponse, RemoteLogMessages, RemoteLogQuery, } from './remote_logger.js';
export class RemoteLogPublisherClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.Put.bind(this);
        this.PutAll.bind(this);
    }
    Put(request) {
        const data = RemoteLogMessage.toJSON(request);
        const promise = this.rpc.request('devvit.remote_logger.RemoteLogPublisher', 'Put', 'application/json', data);
        return promise.then((data) => RemoteLogPutResponse.fromJSON(data));
    }
    PutAll(request) {
        const data = RemoteLogMessages.toJSON(request);
        const promise = this.rpc.request('devvit.remote_logger.RemoteLogPublisher', 'PutAll', 'application/json', data);
        return promise.then((data) => RemoteLogPutResponse.fromJSON(data));
    }
}
export class RemoteLogPublisherClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.Put.bind(this);
        this.PutAll.bind(this);
    }
    Put(request) {
        const data = RemoteLogMessage.encode(request).finish();
        const promise = this.rpc.request('devvit.remote_logger.RemoteLogPublisher', 'Put', 'application/protobuf', data);
        return promise.then((data) => RemoteLogPutResponse.decode(data));
    }
    PutAll(request) {
        const data = RemoteLogMessages.encode(request).finish();
        const promise = this.rpc.request('devvit.remote_logger.RemoteLogPublisher', 'PutAll', 'application/protobuf', data);
        return promise.then((data) => RemoteLogPutResponse.decode(data));
    }
}
export class RemoteLogConsumerClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.Tail.bind(this);
    }
    Tail(request) {
        const data = RemoteLogQuery.toJSON(request);
        const promise = this.rpc.request('devvit.remote_logger.RemoteLogConsumer', 'Tail', 'application/json', data);
        return promise.then((data) => RemoteLogMessage.fromJSON(data));
    }
}
export class RemoteLogConsumerClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.Tail.bind(this);
    }
    Tail(request) {
        const data = RemoteLogQuery.encode(request).finish();
        const promise = this.rpc.request('devvit.remote_logger.RemoteLogConsumer', 'Tail', 'application/protobuf', data);
        return promise.then((data) => RemoteLogMessage.decode(data));
    }
}
