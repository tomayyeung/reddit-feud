/**
 * #bootstrap.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { Metadata } from "../../../../lib/Types.js";
import { Empty } from "../../../google/protobuf/empty.js";
import { LinkedBundle } from "../bundle.js";
/** Bootstraper used to load an actual Actor into the Worker */
export interface BootstrapActor {
    /** Loads an Actor into the Worker and binds its service to a URL */
    LoadActor(request: LinkedBundle, metadata?: Metadata): Promise<Empty>;
    IsResponding(request: Empty, metadata?: Metadata): Promise<Empty>;
}
export declare const BootstrapActorServiceName = "devvit.runtime.actor.BootstrapActor";
export declare class BootstrapActorClientImpl implements BootstrapActor {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    LoadActor(request: LinkedBundle, metadata?: Metadata): Promise<Empty>;
    IsResponding(request: Empty, metadata?: Metadata): Promise<Empty>;
}
/** Bootstraper used to load an actual Actor into the Worker */
export type BootstrapActorDefinition = typeof BootstrapActorDefinition;
export declare const BootstrapActorDefinition: {
    readonly name: "BootstrapActor";
    readonly fullName: "devvit.runtime.actor.BootstrapActor";
    readonly methods: {
        /** Loads an Actor into the Worker and binds its service to a URL */
        readonly loadActor: {
            readonly name: "LoadActor";
            readonly requestType: {
                $type: "devvit.runtime.LinkedBundle";
                encode(message: LinkedBundle, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): LinkedBundle;
                fromJSON(object: any): LinkedBundle;
                toJSON(message: LinkedBundle): unknown;
                create(base?: {
                    actor?: {
                        name?: string;
                        owner?: string;
                        version?: string;
                    } | undefined;
                    code?: string;
                    sourceMap?: string | undefined;
                    hostname?: string;
                    provides?: {
                        fullName?: string;
                        methods?: {
                            fullName?: string;
                            name?: string;
                            requestStream?: boolean;
                            responseStream?: boolean;
                            requestType?: string;
                            responseType?: string;
                        }[];
                        name?: string;
                        version?: string;
                    }[];
                    uses?: any[];
                    buildInfo?: {
                        created?: Date | undefined;
                        dependencies?: {
                            [x: string]: string | undefined;
                        };
                        targetRuntime?: import("../bundle.js").TargetRuntime;
                    } | undefined;
                    assetsUrl?: string | undefined;
                    assets?: {
                        [x: string]: string | undefined;
                    };
                    webviewAssets?: {
                        [x: string]: string | undefined;
                    };
                    products?: {
                        [x: string]: string | undefined;
                    };
                } | undefined): LinkedBundle;
                fromPartial(object: {
                    actor?: {
                        name?: string;
                        owner?: string;
                        version?: string;
                    } | undefined;
                    code?: string;
                    sourceMap?: string | undefined;
                    hostname?: string;
                    provides?: {
                        fullName?: string;
                        methods?: {
                            fullName?: string;
                            name?: string;
                            requestStream?: boolean;
                            responseStream?: boolean;
                            requestType?: string;
                            responseType?: string;
                        }[];
                        name?: string;
                        version?: string;
                    }[];
                    uses?: any[];
                    buildInfo?: {
                        created?: Date | undefined;
                        dependencies?: {
                            [x: string]: string | undefined;
                        };
                        targetRuntime?: import("../bundle.js").TargetRuntime;
                    } | undefined;
                    assetsUrl?: string | undefined;
                    assets?: {
                        [x: string]: string | undefined;
                    };
                    webviewAssets?: {
                        [x: string]: string | undefined;
                    };
                    products?: {
                        [x: string]: string | undefined;
                    };
                }): LinkedBundle;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {} | undefined): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly isResponding: {
            readonly name: "IsResponding";
            readonly requestType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {} | undefined): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {} | undefined): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array, metadata?: Metadata): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=bootstrap.d.ts.map