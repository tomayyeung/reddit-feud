import { LinkedBundle } from '../bundle.js';
import { Empty } from '../../../google/protobuf/empty.js';
export class BootstrapActorClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.LoadActor.bind(this);
        this.IsResponding.bind(this);
    }
    LoadActor(request) {
        const data = LinkedBundle.toJSON(request);
        const promise = this.rpc.request('devvit.runtime.actor.BootstrapActor', 'LoadActor', 'application/json', data);
        return promise.then((data) => Empty.fromJSON(data));
    }
    IsResponding(request) {
        const data = Empty.toJSON(request);
        const promise = this.rpc.request('devvit.runtime.actor.BootstrapActor', 'IsResponding', 'application/json', data);
        return promise.then((data) => Empty.fromJSON(data));
    }
}
export class BootstrapActorClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.LoadActor.bind(this);
        this.IsResponding.bind(this);
    }
    LoadActor(request) {
        const data = LinkedBundle.encode(request).finish();
        const promise = this.rpc.request('devvit.runtime.actor.BootstrapActor', 'LoadActor', 'application/protobuf', data);
        return promise.then((data) => Empty.decode(data));
    }
    IsResponding(request) {
        const data = Empty.encode(request).finish();
        const promise = this.rpc.request('devvit.runtime.actor.BootstrapActor', 'IsResponding', 'application/protobuf', data);
        return promise.then((data) => Empty.decode(data));
    }
}
