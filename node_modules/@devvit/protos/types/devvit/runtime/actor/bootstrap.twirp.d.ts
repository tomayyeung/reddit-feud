/// <reference types="node" resolution-mode="require"/>
import { TwirpContext, TwirpServer } from 'twirp-ts';
import { LinkedBundle } from '../bundle.js';
import { Empty } from '../../../google/protobuf/empty.js';
export interface BootstrapActorTwirp<T extends TwirpContext = TwirpContext> {
    LoadActor(ctx: T, request: LinkedBundle): Promise<Empty>;
    IsResponding(ctx: T, request: Empty): Promise<Empty>;
}
export declare enum BootstrapActorMethod {
    LoadActor = "LoadActor",
    IsResponding = "IsResponding"
}
export declare const BootstrapActorMethodList: BootstrapActorMethod[];
export declare function createBootstrapActorServer<T extends TwirpContext = TwirpContext>(service: BootstrapActorTwirp<T>): TwirpServer<BootstrapActorTwirp<TwirpContext<import("http").IncomingMessage, import("http").ServerResponse<import("http").IncomingMessage>>>, T>;
//# sourceMappingURL=bootstrap.twirp.d.ts.map