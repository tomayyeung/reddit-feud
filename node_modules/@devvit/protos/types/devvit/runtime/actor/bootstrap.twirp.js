import { TwirpServer, TwirpError, TwirpErrorCode, TwirpContentType, chainInterceptors, } from 'twirp-ts';
import { LinkedBundle } from '../bundle.js';
import { Empty } from '../../../google/protobuf/empty.js';
export var BootstrapActorMethod;
(function (BootstrapActorMethod) {
    BootstrapActorMethod["LoadActor"] = "LoadActor";
    BootstrapActorMethod["IsResponding"] = "IsResponding";
})(BootstrapActorMethod || (BootstrapActorMethod = {}));
export const BootstrapActorMethodList = [
    BootstrapActorMethod.LoadActor,
    BootstrapActorMethod.IsResponding,
];
export function createBootstrapActorServer(service) {
    return new TwirpServer({
        service,
        packageName: 'devvit.runtime.actor',
        serviceName: 'BootstrapActor',
        methodList: BootstrapActorMethodList,
        matchRoute: matchBootstrapActorRoute,
    });
}
function matchBootstrapActorRoute(method, events) {
    switch (method) {
        case 'LoadActor':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'LoadActor' };
                await events.onMatch(ctx);
                return handleBootstrapActorLoadActorRequest(ctx, service, data, interceptors);
            };
        case 'IsResponding':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'IsResponding' };
                await events.onMatch(ctx);
                return handleBootstrapActorIsRespondingRequest(ctx, service, data, interceptors);
            };
        default:
            events.onNotFound();
            const msg = `no handler found`;
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleBootstrapActorLoadActorRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleBootstrapActorLoadActorJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleBootstrapActorLoadActorProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleBootstrapActorIsRespondingRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleBootstrapActorIsRespondingJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleBootstrapActorIsRespondingProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
async function handleBootstrapActorLoadActorJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = LinkedBundle.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.LoadActor(ctx, inputReq);
        });
    }
    else {
        response = await service.LoadActor(ctx, request);
    }
    return JSON.stringify(Empty.toJSON(response));
}
async function handleBootstrapActorIsRespondingJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = Empty.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.IsResponding(ctx, inputReq);
        });
    }
    else {
        response = await service.IsResponding(ctx, request);
    }
    return JSON.stringify(Empty.toJSON(response));
}
async function handleBootstrapActorLoadActorProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = LinkedBundle.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.LoadActor(ctx, inputReq);
        });
    }
    else {
        response = await service.LoadActor(ctx, request);
    }
    return Buffer.from(Empty.encode(response).finish());
}
async function handleBootstrapActorIsRespondingProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = Empty.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.IsResponding(ctx, inputReq);
        });
    }
    else {
        response = await service.IsResponding(ctx, request);
    }
    return Buffer.from(Empty.encode(response).finish());
}
