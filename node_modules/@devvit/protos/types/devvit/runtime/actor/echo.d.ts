/**
 * #echo.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { Metadata } from "../../../../lib/Types.js";
import { StringValue } from "../../../google/protobuf/wrappers.js";
export interface Echo {
    Echo(request: StringValue, metadata?: Metadata): Promise<StringValue>;
}
export declare const EchoServiceName = "devvit.runtime.actor.Echo";
export declare class EchoClientImpl implements Echo {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Echo(request: StringValue, metadata?: Metadata): Promise<StringValue>;
}
export type EchoDefinition = typeof EchoDefinition;
export declare const EchoDefinition: {
    readonly name: "Echo";
    readonly fullName: "devvit.runtime.actor.Echo";
    readonly methods: {
        readonly echo: {
            readonly name: "Echo";
            readonly requestType: {
                $type: "google.protobuf.StringValue";
                encode(message: StringValue, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): StringValue;
                fromJSON(object: any): StringValue;
                toJSON(message: StringValue): unknown;
                create(base?: {
                    value?: string;
                } | undefined): StringValue;
                fromPartial(object: {
                    value?: string;
                }): StringValue;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.StringValue";
                encode(message: StringValue, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): StringValue;
                fromJSON(object: any): StringValue;
                toJSON(message: StringValue): unknown;
                create(base?: {
                    value?: string;
                } | undefined): StringValue;
                fromPartial(object: {
                    value?: string;
                }): StringValue;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array, metadata?: Metadata): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=echo.d.ts.map