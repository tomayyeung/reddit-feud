/// <reference types="node" resolution-mode="require"/>
import { TwirpContext, TwirpServer } from 'twirp-ts';
import { LinkedBundle } from '../bundle.js';
import { Empty } from '../../../google/protobuf/empty.js';
import { WorkerQuery } from './runtime.js';
export interface RuntimeActorTwirp<T extends TwirpContext = TwirpContext> {
    NewWorker(ctx: T, request: LinkedBundle): Promise<Empty>;
    TerminateWorker(ctx: T, request: WorkerQuery): Promise<Empty>;
}
export declare enum RuntimeActorMethod {
    NewWorker = "NewWorker",
    TerminateWorker = "TerminateWorker"
}
export declare const RuntimeActorMethodList: RuntimeActorMethod[];
export declare function createRuntimeActorServer<T extends TwirpContext = TwirpContext>(service: RuntimeActorTwirp<T>): TwirpServer<RuntimeActorTwirp<TwirpContext<import("http").IncomingMessage, import("http").ServerResponse<import("http").IncomingMessage>>>, T>;
//# sourceMappingURL=runtime.twirp.d.ts.map