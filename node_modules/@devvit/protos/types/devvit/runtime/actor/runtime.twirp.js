import { TwirpServer, TwirpError, TwirpErrorCode, TwirpContentType, chainInterceptors, } from 'twirp-ts';
import { LinkedBundle } from '../bundle.js';
import { Empty } from '../../../google/protobuf/empty.js';
import { WorkerQuery } from './runtime.js';
export var RuntimeActorMethod;
(function (RuntimeActorMethod) {
    RuntimeActorMethod["NewWorker"] = "NewWorker";
    RuntimeActorMethod["TerminateWorker"] = "TerminateWorker";
})(RuntimeActorMethod || (RuntimeActorMethod = {}));
export const RuntimeActorMethodList = [
    RuntimeActorMethod.NewWorker,
    RuntimeActorMethod.TerminateWorker,
];
export function createRuntimeActorServer(service) {
    return new TwirpServer({
        service,
        packageName: 'devvit.runtime.actor',
        serviceName: 'RuntimeActor',
        methodList: RuntimeActorMethodList,
        matchRoute: matchRuntimeActorRoute,
    });
}
function matchRuntimeActorRoute(method, events) {
    switch (method) {
        case 'NewWorker':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'NewWorker' };
                await events.onMatch(ctx);
                return handleRuntimeActorNewWorkerRequest(ctx, service, data, interceptors);
            };
        case 'TerminateWorker':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'TerminateWorker' };
                await events.onMatch(ctx);
                return handleRuntimeActorTerminateWorkerRequest(ctx, service, data, interceptors);
            };
        default:
            events.onNotFound();
            const msg = `no handler found`;
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleRuntimeActorNewWorkerRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleRuntimeActorNewWorkerJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleRuntimeActorNewWorkerProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleRuntimeActorTerminateWorkerRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleRuntimeActorTerminateWorkerJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleRuntimeActorTerminateWorkerProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
async function handleRuntimeActorNewWorkerJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = LinkedBundle.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.NewWorker(ctx, inputReq);
        });
    }
    else {
        response = await service.NewWorker(ctx, request);
    }
    return JSON.stringify(Empty.toJSON(response));
}
async function handleRuntimeActorTerminateWorkerJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = WorkerQuery.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.TerminateWorker(ctx, inputReq);
        });
    }
    else {
        response = await service.TerminateWorker(ctx, request);
    }
    return JSON.stringify(Empty.toJSON(response));
}
async function handleRuntimeActorNewWorkerProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = LinkedBundle.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.NewWorker(ctx, inputReq);
        });
    }
    else {
        response = await service.NewWorker(ctx, request);
    }
    return Buffer.from(Empty.encode(response).finish());
}
async function handleRuntimeActorTerminateWorkerProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = WorkerQuery.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.TerminateWorker(ctx, inputReq);
        });
    }
    else {
        response = await service.TerminateWorker(ctx, request);
    }
    return Buffer.from(Empty.encode(response).finish());
}
