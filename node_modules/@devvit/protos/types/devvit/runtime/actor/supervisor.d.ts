/**
 * #supervisor.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { Metadata } from "../../../../lib/Types.js";
import { Empty } from "../../../google/protobuf/empty.js";
import { LinkedBundle } from "../bundle.js";
import { Envelope } from "../envelope.js";
export interface UnloadRequest {
    force: boolean;
    hostname: string;
}
export declare const UnloadRequest: {
    $type: "devvit.runtime.actor.UnloadRequest";
    encode(message: UnloadRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UnloadRequest;
    fromJSON(object: any): UnloadRequest;
    toJSON(message: UnloadRequest): unknown;
    create(base?: DeepPartial<UnloadRequest>): UnloadRequest;
    fromPartial(object: DeepPartial<UnloadRequest>): UnloadRequest;
};
/**
 * Root Worker, responsible for RPC and loading additional Workers
 * local://supervisor
 */
export interface Supervisor {
    /**
     * Transform an incoming envelope.
     *
     * Because the input and outputs are Envelopes, they are actually Envelopes
     * wrapped in Envelopes. That is, Envelope.message is an Envelope. The outer
     * Envelope.success flag indicates filter status.
     */
    Filter(request: Envelope, metadata?: Metadata): Promise<Envelope>;
    /** Unpacks and loads each bundled Actor into their own Workers */
    Load(request: LinkedBundle, metadata?: Metadata): Promise<Empty>;
    /** Unloads the actor at the provided URI, and unloads dependencies if needed */
    Unload(request: UnloadRequest, metadata?: Metadata): Promise<Empty>;
}
export declare const SupervisorServiceName = "devvit.runtime.actor.Supervisor";
export declare class SupervisorClientImpl implements Supervisor {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Filter(request: Envelope, metadata?: Metadata): Promise<Envelope>;
    Load(request: LinkedBundle, metadata?: Metadata): Promise<Empty>;
    Unload(request: UnloadRequest, metadata?: Metadata): Promise<Empty>;
}
/**
 * Root Worker, responsible for RPC and loading additional Workers
 * local://supervisor
 */
export type SupervisorDefinition = typeof SupervisorDefinition;
export declare const SupervisorDefinition: {
    readonly name: "Supervisor";
    readonly fullName: "devvit.runtime.actor.Supervisor";
    readonly methods: {
        /**
         * Transform an incoming envelope.
         *
         * Because the input and outputs are Envelopes, they are actually Envelopes
         * wrapped in Envelopes. That is, Envelope.message is an Envelope. The outer
         * Envelope.success flag indicates filter status.
         */
        readonly filter: {
            readonly name: "Filter";
            readonly requestType: {
                $type: "devvit.runtime.Envelope";
                encode(message: Envelope, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Envelope;
                fromJSON(object: any): Envelope;
                toJSON(message: Envelope): unknown;
                create(base?: {
                    id?: string;
                    src?: string;
                    dst?: string;
                    method?: string;
                    streamId?: string;
                    traceId?: string;
                    success?: boolean;
                    message?: any;
                    request?: boolean;
                    complete?: boolean;
                    metadata?: {
                        [x: string]: {
                            values?: string[];
                        } | undefined;
                    };
                } | undefined): Envelope;
                fromPartial(object: {
                    id?: string;
                    src?: string;
                    dst?: string;
                    method?: string;
                    streamId?: string;
                    traceId?: string;
                    success?: boolean;
                    message?: any;
                    request?: boolean;
                    complete?: boolean;
                    metadata?: {
                        [x: string]: {
                            values?: string[];
                        } | undefined;
                    };
                }): Envelope;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.runtime.Envelope";
                encode(message: Envelope, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Envelope;
                fromJSON(object: any): Envelope;
                toJSON(message: Envelope): unknown;
                create(base?: {
                    id?: string;
                    src?: string;
                    dst?: string;
                    method?: string;
                    streamId?: string;
                    traceId?: string;
                    success?: boolean;
                    message?: any;
                    request?: boolean;
                    complete?: boolean;
                    metadata?: {
                        [x: string]: {
                            values?: string[];
                        } | undefined;
                    };
                } | undefined): Envelope;
                fromPartial(object: {
                    id?: string;
                    src?: string;
                    dst?: string;
                    method?: string;
                    streamId?: string;
                    traceId?: string;
                    success?: boolean;
                    message?: any;
                    request?: boolean;
                    complete?: boolean;
                    metadata?: {
                        [x: string]: {
                            values?: string[];
                        } | undefined;
                    };
                }): Envelope;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Unpacks and loads each bundled Actor into their own Workers */
        readonly load: {
            readonly name: "Load";
            readonly requestType: {
                $type: "devvit.runtime.LinkedBundle";
                encode(message: LinkedBundle, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): LinkedBundle;
                fromJSON(object: any): LinkedBundle;
                toJSON(message: LinkedBundle): unknown;
                create(base?: {
                    actor?: {
                        name?: string;
                        owner?: string;
                        version?: string;
                    } | undefined;
                    code?: string;
                    sourceMap?: string | undefined;
                    hostname?: string;
                    provides?: {
                        fullName?: string;
                        methods?: {
                            fullName?: string;
                            name?: string;
                            requestStream?: boolean;
                            responseStream?: boolean;
                            requestType?: string;
                            responseType?: string;
                        }[];
                        name?: string;
                        version?: string;
                    }[];
                    uses?: any[];
                    buildInfo?: {
                        created?: Date | undefined;
                        dependencies?: {
                            [x: string]: string | undefined;
                        };
                        targetRuntime?: import("../bundle.js").TargetRuntime;
                    } | undefined;
                    assetsUrl?: string | undefined;
                    assets?: {
                        [x: string]: string | undefined;
                    };
                    webviewAssets?: {
                        [x: string]: string | undefined;
                    };
                    products?: {
                        [x: string]: string | undefined;
                    };
                } | undefined): LinkedBundle;
                fromPartial(object: {
                    actor?: {
                        name?: string;
                        owner?: string;
                        version?: string;
                    } | undefined;
                    code?: string;
                    sourceMap?: string | undefined;
                    hostname?: string;
                    provides?: {
                        fullName?: string;
                        methods?: {
                            fullName?: string;
                            name?: string;
                            requestStream?: boolean;
                            responseStream?: boolean;
                            requestType?: string;
                            responseType?: string;
                        }[];
                        name?: string;
                        version?: string;
                    }[];
                    uses?: any[];
                    buildInfo?: {
                        created?: Date | undefined;
                        dependencies?: {
                            [x: string]: string | undefined;
                        };
                        targetRuntime?: import("../bundle.js").TargetRuntime;
                    } | undefined;
                    assetsUrl?: string | undefined;
                    assets?: {
                        [x: string]: string | undefined;
                    };
                    webviewAssets?: {
                        [x: string]: string | undefined;
                    };
                    products?: {
                        [x: string]: string | undefined;
                    };
                }): LinkedBundle;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {} | undefined): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Unloads the actor at the provided URI, and unloads dependencies if needed */
        readonly unload: {
            readonly name: "Unload";
            readonly requestType: {
                $type: "devvit.runtime.actor.UnloadRequest";
                encode(message: UnloadRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): UnloadRequest;
                fromJSON(object: any): UnloadRequest;
                toJSON(message: UnloadRequest): unknown;
                create(base?: DeepPartial<UnloadRequest>): UnloadRequest;
                fromPartial(object: DeepPartial<UnloadRequest>): UnloadRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {} | undefined): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array, metadata?: Metadata): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=supervisor.d.ts.map