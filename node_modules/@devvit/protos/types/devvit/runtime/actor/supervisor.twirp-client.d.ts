import { Envelope } from '../envelope.js';
import { LinkedBundle } from '../bundle.js';
import { Empty } from '../../../google/protobuf/empty.js';
import { UnloadRequest } from './supervisor.js';
interface Rpc {
    request(service: string, method: string, contentType: 'application/json' | 'application/protobuf', data: object | Uint8Array): Promise<object | Uint8Array>;
}
export interface SupervisorClient {
    Filter(request: Envelope): Promise<Envelope>;
    Load(request: LinkedBundle): Promise<Empty>;
    Unload(request: UnloadRequest): Promise<Empty>;
}
export declare class SupervisorClientJSON implements SupervisorClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    Filter(request: Envelope): Promise<Envelope>;
    Load(request: LinkedBundle): Promise<Empty>;
    Unload(request: UnloadRequest): Promise<Empty>;
}
export declare class SupervisorClientProtobuf implements SupervisorClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    Filter(request: Envelope): Promise<Envelope>;
    Load(request: LinkedBundle): Promise<Empty>;
    Unload(request: UnloadRequest): Promise<Empty>;
}
export {};
//# sourceMappingURL=supervisor.twirp-client.d.ts.map