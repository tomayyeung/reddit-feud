import { Envelope } from '../envelope.js';
import { LinkedBundle } from '../bundle.js';
import { Empty } from '../../../google/protobuf/empty.js';
import { UnloadRequest } from './supervisor.js';
export class SupervisorClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.Filter.bind(this);
        this.Load.bind(this);
        this.Unload.bind(this);
    }
    Filter(request) {
        const data = Envelope.toJSON(request);
        const promise = this.rpc.request('devvit.runtime.actor.Supervisor', 'Filter', 'application/json', data);
        return promise.then((data) => Envelope.fromJSON(data));
    }
    Load(request) {
        const data = LinkedBundle.toJSON(request);
        const promise = this.rpc.request('devvit.runtime.actor.Supervisor', 'Load', 'application/json', data);
        return promise.then((data) => Empty.fromJSON(data));
    }
    Unload(request) {
        const data = UnloadRequest.toJSON(request);
        const promise = this.rpc.request('devvit.runtime.actor.Supervisor', 'Unload', 'application/json', data);
        return promise.then((data) => Empty.fromJSON(data));
    }
}
export class SupervisorClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.Filter.bind(this);
        this.Load.bind(this);
        this.Unload.bind(this);
    }
    Filter(request) {
        const data = Envelope.encode(request).finish();
        const promise = this.rpc.request('devvit.runtime.actor.Supervisor', 'Filter', 'application/protobuf', data);
        return promise.then((data) => Envelope.decode(data));
    }
    Load(request) {
        const data = LinkedBundle.encode(request).finish();
        const promise = this.rpc.request('devvit.runtime.actor.Supervisor', 'Load', 'application/protobuf', data);
        return promise.then((data) => Empty.decode(data));
    }
    Unload(request) {
        const data = UnloadRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.runtime.actor.Supervisor', 'Unload', 'application/protobuf', data);
        return promise.then((data) => Empty.decode(data));
    }
}
