/// <reference types="node" resolution-mode="require"/>
import { TwirpContext, TwirpServer } from 'twirp-ts';
import { Envelope } from '../envelope.js';
import { LinkedBundle } from '../bundle.js';
import { Empty } from '../../../google/protobuf/empty.js';
import { UnloadRequest } from './supervisor.js';
export interface SupervisorTwirp<T extends TwirpContext = TwirpContext> {
    Filter(ctx: T, request: Envelope): Promise<Envelope>;
    Load(ctx: T, request: LinkedBundle): Promise<Empty>;
    Unload(ctx: T, request: UnloadRequest): Promise<Empty>;
}
export declare enum SupervisorMethod {
    Filter = "Filter",
    Load = "Load",
    Unload = "Unload"
}
export declare const SupervisorMethodList: SupervisorMethod[];
export declare function createSupervisorServer<T extends TwirpContext = TwirpContext>(service: SupervisorTwirp<T>): TwirpServer<SupervisorTwirp<TwirpContext<import("http").IncomingMessage, import("http").ServerResponse<import("http").IncomingMessage>>>, T>;
//# sourceMappingURL=supervisor.twirp.d.ts.map