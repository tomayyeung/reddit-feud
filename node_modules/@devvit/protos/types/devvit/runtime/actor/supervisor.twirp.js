import { TwirpServer, TwirpError, TwirpErrorCode, TwirpContentType, chainInterceptors, } from 'twirp-ts';
import { Envelope } from '../envelope.js';
import { LinkedBundle } from '../bundle.js';
import { Empty } from '../../../google/protobuf/empty.js';
import { UnloadRequest } from './supervisor.js';
export var SupervisorMethod;
(function (SupervisorMethod) {
    SupervisorMethod["Filter"] = "Filter";
    SupervisorMethod["Load"] = "Load";
    SupervisorMethod["Unload"] = "Unload";
})(SupervisorMethod || (SupervisorMethod = {}));
export const SupervisorMethodList = [
    SupervisorMethod.Filter,
    SupervisorMethod.Load,
    SupervisorMethod.Unload,
];
export function createSupervisorServer(service) {
    return new TwirpServer({
        service,
        packageName: 'devvit.runtime.actor',
        serviceName: 'Supervisor',
        methodList: SupervisorMethodList,
        matchRoute: matchSupervisorRoute,
    });
}
function matchSupervisorRoute(method, events) {
    switch (method) {
        case 'Filter':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'Filter' };
                await events.onMatch(ctx);
                return handleSupervisorFilterRequest(ctx, service, data, interceptors);
            };
        case 'Load':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'Load' };
                await events.onMatch(ctx);
                return handleSupervisorLoadRequest(ctx, service, data, interceptors);
            };
        case 'Unload':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'Unload' };
                await events.onMatch(ctx);
                return handleSupervisorUnloadRequest(ctx, service, data, interceptors);
            };
        default:
            events.onNotFound();
            const msg = `no handler found`;
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleSupervisorFilterRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleSupervisorFilterJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleSupervisorFilterProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleSupervisorLoadRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleSupervisorLoadJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleSupervisorLoadProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleSupervisorUnloadRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleSupervisorUnloadJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleSupervisorUnloadProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
async function handleSupervisorFilterJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = Envelope.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.Filter(ctx, inputReq);
        });
    }
    else {
        response = await service.Filter(ctx, request);
    }
    return JSON.stringify(Envelope.toJSON(response));
}
async function handleSupervisorLoadJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = LinkedBundle.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.Load(ctx, inputReq);
        });
    }
    else {
        response = await service.Load(ctx, request);
    }
    return JSON.stringify(Empty.toJSON(response));
}
async function handleSupervisorUnloadJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = UnloadRequest.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.Unload(ctx, inputReq);
        });
    }
    else {
        response = await service.Unload(ctx, request);
    }
    return JSON.stringify(Empty.toJSON(response));
}
async function handleSupervisorFilterProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = Envelope.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.Filter(ctx, inputReq);
        });
    }
    else {
        response = await service.Filter(ctx, request);
    }
    return Buffer.from(Envelope.encode(response).finish());
}
async function handleSupervisorLoadProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = LinkedBundle.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.Load(ctx, inputReq);
        });
    }
    else {
        response = await service.Load(ctx, request);
    }
    return Buffer.from(Empty.encode(response).finish());
}
async function handleSupervisorUnloadProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = UnloadRequest.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.Unload(ctx, inputReq);
        });
    }
    else {
        response = await service.Unload(ctx, request);
    }
    return Buffer.from(Empty.encode(response).finish());
}
