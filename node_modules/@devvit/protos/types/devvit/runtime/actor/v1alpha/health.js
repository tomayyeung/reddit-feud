/**
 * #health.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { Empty } from "../../../../google/protobuf/empty.js";
import { Timestamp } from "../../../../google/protobuf/timestamp.js";
import { messageTypeRegistry } from "../../../../typeRegistry.js";
function createBaseHealthStatus() {
    return { start: undefined, end: undefined };
}
export const HealthStatus = {
    $type: "devvit.runtime.actor.v1alpha.HealthStatus",
    encode(message, writer = _m0.Writer.create()) {
        if (message.start !== undefined) {
            Timestamp.encode(toTimestamp(message.start), writer.uint32(10).fork()).ldelim();
        }
        if (message.end !== undefined) {
            Timestamp.encode(toTimestamp(message.end), writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHealthStatus();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.start = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.end = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            start: isSet(object.start) ? fromJsonTimestamp(object.start) : undefined,
            end: isSet(object.end) ? fromJsonTimestamp(object.end) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.start !== undefined) {
            obj.start = message.start.toISOString();
        }
        if (message.end !== undefined) {
            obj.end = message.end.toISOString();
        }
        return obj;
    },
    create(base) {
        return HealthStatus.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseHealthStatus();
        message.start = object.start ?? undefined;
        message.end = object.end ?? undefined;
        return message;
    },
};
messageTypeRegistry.set(HealthStatus.$type, HealthStatus);
export const HealthServiceName = "devvit.runtime.actor.v1alpha.Health";
export class HealthClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || HealthServiceName;
        this.rpc = rpc;
        this.Check = this.Check.bind(this);
    }
    Check(request, metadata) {
        const data = Empty.encode(request).finish();
        const promise = this.rpc.request(this.service, "Check", data, metadata);
        return promise.then((data) => HealthStatus.decode(_m0.Reader.create(data)));
    }
}
export const HealthDefinition = {
    name: "Health",
    fullName: "devvit.runtime.actor.v1alpha.Health",
    methods: {
        check: {
            name: "Check",
            requestType: Empty,
            requestStream: false,
            responseType: HealthStatus,
            responseStream: false,
            options: {},
        },
    },
};
function toTimestamp(date) {
    const seconds = Math.trunc(date.getTime() / 1000);
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (t.seconds || 0) * 1000;
    millis += (t.nanos || 0) / 1000000;
    return new globalThis.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof globalThis.Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new globalThis.Date(o);
    }
    else {
        return fromTimestamp(Timestamp.fromJSON(o));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
