/**
 * #bundle.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { SerializableServiceDefinition } from "./serializable.js";
/** See also LinkedBundle. */
export declare enum LinkedBundleTargetPlatform {
    /** BROWSER - A LinkedBundle for browser runtimes. */
    BROWSER = 0,
    /** V8 - A LinkedBundle for V8 runtimes. */
    V8 = 1,
    /**
     * SKINNY - An API definition that cannot be executed. This is a LinkedBundle with no
     * code and no dependencies.
     */
    SKINNY = 2,
    UNRECOGNIZED = -1
}
export declare function linkedBundleTargetPlatformFromJSON(object: any): LinkedBundleTargetPlatform;
export declare function linkedBundleTargetPlatformToJSON(object: LinkedBundleTargetPlatform): number;
export declare enum TargetRuntime {
    UNIVERSAL = 0,
    /** CLIENT - SERVER = 2; */
    CLIENT = 1,
    UNRECOGNIZED = -1
}
export declare function targetRuntimeFromJSON(object: any): TargetRuntime;
export declare function targetRuntimeToJSON(object: TargetRuntime): number;
/**
 * Bundle or plugin configuration. This config is usually set by Config.init()
 * but some plugins may configure differently.
 */
export interface ActorSpec {
    /**
     * Bundle or plugin (PLUGIN_APP_NAME) name. This should be unique across app
     * actors. Usually just "main".
     */
    name: string;
    /** Bundle or plugin (PLUGIN_OWNER) owner. Eg, "spez". */
    owner: string;
    /** Bundle or plugin version. Eg, 1.2.3 or 1.2.3.0. */
    version: string;
}
/** Permitted and forbidden execution environments. */
export interface LocationFilter {
    allow: string[];
    deny: string[];
}
/**
 * A provided implementation specified by a Bundle or plugin. See
 * Config.provides() and DependencySpec.provides.
 */
export interface PackageSpec {
    actor?: ActorSpec | undefined;
    /** The version provided. */
    definition?: SerializableServiceDefinition | undefined;
    locations?: LocationFilter | undefined;
    partitionsBy: string[];
}
/**
 * A dependency use requirement specified by a Bundle or plugin. See
 * Config.use() and DependencySpec.uses. Dependencies may resolve to different
 * implementations in different execution environments.
 */
export interface PackageQuery {
    /**
     * Limit resolution to a Bundle or plugins (PLUGIN_APP_NAME). Eg,
     * com.devvit.example/foo.
     */
    name?: string | undefined;
    /** Limit resolution to owner. Eg, com.reddit. */
    owner?: string | undefined;
    /**
     * Limit resolution to type. No slashes. Eg,
     * "devvit.plugin.logger.Logger". See Definition.fullName.
     */
    typeName: string;
    /** Limit resolution to versions. Eg, ">=0" or "1.0.0". */
    versions?: string | undefined;
}
/** Dependencies offered and required by a Bundle or plugin. See Config.export(). */
export interface DependencySpec {
    actor?: ActorSpec | undefined;
    /**
     * Actor hostname. This may be a plugin or a user actor. Eg,
     * "fd23937c-2891-44ed-a66c-5277265cfd54.pixelary-game.main.devvit-gateway.reddit.com":
     *
     * | Prisma Installation.id               | devvit.yaml app name / slug | ActorSpec.name |                           |
     * | ------------------------------------ | --------------------------- | -------------- | ------------------------- |
     * | fd23937c-2891-44ed-a66c-5277265cfd54 | pixelary-game               | main           | devvit-gateway.reddit.com |
     *
     * Which corresponds to the V8 LinkedBundle at
     * https://devvit-gateway.reddit.com/bundles/fd23937c-2891-44ed-a66c-5277265cfd54/main/0.0.8-359.
     *
     * Multi-actor apps are deprecated so app name is usually what's most
     * important. Plugins are simpler. Eg, "http.plugins.local".
     */
    hostname: string;
    provides: PackageSpec[];
    uses: PackageQuery[];
}
/**
 * A fully built actor (either a user app or plugin). This resolved Bundle is
 * ready for execution by the runtime.
 */
export interface LinkedBundle {
    actor?: ActorSpec | undefined;
    /**
     * Compiled bundle or plugin code. A hostname and empty code implies that the
     * runtime should resolve this as a remote actor accessible over the network;
     * this is empty for "skinny bundles" (AKA Gateway bundles).
     */
    code: string;
    /**
     * Source map accompanying code. This should be a JSON string containing the
     * source map bundle accompanying the code. Not required.
     */
    sourceMap?: string | undefined;
    /**
     * Actor hostname. This may be a plugin or a user. See DependencySpec.hostname
     * which Community Portal copies here.
     */
    hostname: string;
    provides: SerializableServiceDefinition[];
    /**
     * True dependencies. This is empty for skinny bundles which describe the
     * input / output API only. They have no code and cannot be executed so their
     * dependencies are not needed.
     */
    uses: LinkedBundle[];
    /**
     * Optional information about the environment the code was built in. Outdated
     * dependencies may indicate an invalid build.
     */
    buildInfo?: BuildInfo | undefined;
    /**
     * Where did the uploaded ./assets folder land?  This is a URL to the FileSystem
     * as JSON that contains the assets.
     *
     * @deprecated
     */
    assetsUrl?: string | undefined;
    /**
     * This map is used to resolve relative asset paths to URLs. The key
     * is the path to the asset, and the value is the URL to the asset.
     * e.g. "images/example.png": "https://i.redd.it/example.png",
     */
    assets: {
        [key: string]: string;
    };
    /**
     * This map is used to resolve assets for the webview block. It will only
     * contain references to the html files in the webroot assets directory.
     */
    webviewAssets: {
        [key: string]: string;
    };
    /** This map is used to resolve a sku to a UUID used by the Payment platform to identify the product */
    products: {
        [key: string]: string;
    };
}
export interface LinkedBundle_AssetsEntry {
    key: string;
    value: string;
}
export interface LinkedBundle_WebviewAssetsEntry {
    key: string;
    value: string;
}
export interface LinkedBundle_ProductsEntry {
    key: string;
    value: string;
}
/** Detail about the tooling used to construct a LinkedBundle. */
export interface BuildInfo {
    /** When the LinkedBundle was built. */
    created?: Date | undefined;
    /**
     * Notable package.json versions recorded at build time. Eg:
     *
     *   @devvit/protos → 1.2.3
     *   @devvit/public-api → 4.5.6
     *   node → 7.8.9
     */
    dependencies: {
        [key: string]: string;
    };
    /** Where the bundle can be executed */
    targetRuntime: TargetRuntime;
}
export interface BuildInfo_DependenciesEntry {
    key: string;
    value: string;
}
export declare const ActorSpec: {
    $type: "devvit.runtime.ActorSpec";
    encode(message: ActorSpec, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ActorSpec;
    fromJSON(object: any): ActorSpec;
    toJSON(message: ActorSpec): unknown;
    create(base?: DeepPartial<ActorSpec>): ActorSpec;
    fromPartial(object: DeepPartial<ActorSpec>): ActorSpec;
};
export declare const LocationFilter: {
    $type: "devvit.runtime.LocationFilter";
    encode(message: LocationFilter, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): LocationFilter;
    fromJSON(object: any): LocationFilter;
    toJSON(message: LocationFilter): unknown;
    create(base?: DeepPartial<LocationFilter>): LocationFilter;
    fromPartial(object: DeepPartial<LocationFilter>): LocationFilter;
};
export declare const PackageSpec: {
    $type: "devvit.runtime.PackageSpec";
    encode(message: PackageSpec, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PackageSpec;
    fromJSON(object: any): PackageSpec;
    toJSON(message: PackageSpec): unknown;
    create(base?: DeepPartial<PackageSpec>): PackageSpec;
    fromPartial(object: DeepPartial<PackageSpec>): PackageSpec;
};
export declare const PackageQuery: {
    $type: "devvit.runtime.PackageQuery";
    encode(message: PackageQuery, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PackageQuery;
    fromJSON(object: any): PackageQuery;
    toJSON(message: PackageQuery): unknown;
    create(base?: DeepPartial<PackageQuery>): PackageQuery;
    fromPartial(object: DeepPartial<PackageQuery>): PackageQuery;
};
export declare const DependencySpec: {
    $type: "devvit.runtime.DependencySpec";
    encode(message: DependencySpec, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DependencySpec;
    fromJSON(object: any): DependencySpec;
    toJSON(message: DependencySpec): unknown;
    create(base?: DeepPartial<DependencySpec>): DependencySpec;
    fromPartial(object: DeepPartial<DependencySpec>): DependencySpec;
};
export declare const LinkedBundle: {
    $type: "devvit.runtime.LinkedBundle";
    encode(message: LinkedBundle, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): LinkedBundle;
    fromJSON(object: any): LinkedBundle;
    toJSON(message: LinkedBundle): unknown;
    create(base?: DeepPartial<LinkedBundle>): LinkedBundle;
    fromPartial(object: DeepPartial<LinkedBundle>): LinkedBundle;
};
export declare const LinkedBundle_AssetsEntry: {
    $type: "devvit.runtime.LinkedBundle.AssetsEntry";
    encode(message: LinkedBundle_AssetsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): LinkedBundle_AssetsEntry;
    fromJSON(object: any): LinkedBundle_AssetsEntry;
    toJSON(message: LinkedBundle_AssetsEntry): unknown;
    create(base?: DeepPartial<LinkedBundle_AssetsEntry>): LinkedBundle_AssetsEntry;
    fromPartial(object: DeepPartial<LinkedBundle_AssetsEntry>): LinkedBundle_AssetsEntry;
};
export declare const LinkedBundle_WebviewAssetsEntry: {
    $type: "devvit.runtime.LinkedBundle.WebviewAssetsEntry";
    encode(message: LinkedBundle_WebviewAssetsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): LinkedBundle_WebviewAssetsEntry;
    fromJSON(object: any): LinkedBundle_WebviewAssetsEntry;
    toJSON(message: LinkedBundle_WebviewAssetsEntry): unknown;
    create(base?: DeepPartial<LinkedBundle_WebviewAssetsEntry>): LinkedBundle_WebviewAssetsEntry;
    fromPartial(object: DeepPartial<LinkedBundle_WebviewAssetsEntry>): LinkedBundle_WebviewAssetsEntry;
};
export declare const LinkedBundle_ProductsEntry: {
    $type: "devvit.runtime.LinkedBundle.ProductsEntry";
    encode(message: LinkedBundle_ProductsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): LinkedBundle_ProductsEntry;
    fromJSON(object: any): LinkedBundle_ProductsEntry;
    toJSON(message: LinkedBundle_ProductsEntry): unknown;
    create(base?: DeepPartial<LinkedBundle_ProductsEntry>): LinkedBundle_ProductsEntry;
    fromPartial(object: DeepPartial<LinkedBundle_ProductsEntry>): LinkedBundle_ProductsEntry;
};
export declare const BuildInfo: {
    $type: "devvit.runtime.BuildInfo";
    encode(message: BuildInfo, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BuildInfo;
    fromJSON(object: any): BuildInfo;
    toJSON(message: BuildInfo): unknown;
    create(base?: DeepPartial<BuildInfo>): BuildInfo;
    fromPartial(object: DeepPartial<BuildInfo>): BuildInfo;
};
export declare const BuildInfo_DependenciesEntry: {
    $type: "devvit.runtime.BuildInfo.DependenciesEntry";
    encode(message: BuildInfo_DependenciesEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BuildInfo_DependenciesEntry;
    fromJSON(object: any): BuildInfo_DependenciesEntry;
    toJSON(message: BuildInfo_DependenciesEntry): unknown;
    create(base?: DeepPartial<BuildInfo_DependenciesEntry>): BuildInfo_DependenciesEntry;
    fromPartial(object: DeepPartial<BuildInfo_DependenciesEntry>): BuildInfo_DependenciesEntry;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=bundle.d.ts.map