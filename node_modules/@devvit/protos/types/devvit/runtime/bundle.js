/**
 * #bundle.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { Timestamp } from "../../google/protobuf/timestamp.js";
import { StringValue } from "../../google/protobuf/wrappers.js";
import { messageTypeRegistry } from "../../typeRegistry.js";
import { SerializableServiceDefinition } from "./serializable.js";
/** See also LinkedBundle. */
export var LinkedBundleTargetPlatform;
(function (LinkedBundleTargetPlatform) {
    /** BROWSER - A LinkedBundle for browser runtimes. */
    LinkedBundleTargetPlatform[LinkedBundleTargetPlatform["BROWSER"] = 0] = "BROWSER";
    /** V8 - A LinkedBundle for V8 runtimes. */
    LinkedBundleTargetPlatform[LinkedBundleTargetPlatform["V8"] = 1] = "V8";
    /**
     * SKINNY - An API definition that cannot be executed. This is a LinkedBundle with no
     * code and no dependencies.
     */
    LinkedBundleTargetPlatform[LinkedBundleTargetPlatform["SKINNY"] = 2] = "SKINNY";
    LinkedBundleTargetPlatform[LinkedBundleTargetPlatform["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(LinkedBundleTargetPlatform || (LinkedBundleTargetPlatform = {}));
export function linkedBundleTargetPlatformFromJSON(object) {
    switch (object) {
        case 0:
        case "BROWSER":
            return LinkedBundleTargetPlatform.BROWSER;
        case 1:
        case "V8":
            return LinkedBundleTargetPlatform.V8;
        case 2:
        case "SKINNY":
            return LinkedBundleTargetPlatform.SKINNY;
        case -1:
        case "UNRECOGNIZED":
        default:
            return LinkedBundleTargetPlatform.UNRECOGNIZED;
    }
}
export function linkedBundleTargetPlatformToJSON(object) {
    switch (object) {
        case LinkedBundleTargetPlatform.BROWSER:
            return 0;
        case LinkedBundleTargetPlatform.V8:
            return 1;
        case LinkedBundleTargetPlatform.SKINNY:
            return 2;
        case LinkedBundleTargetPlatform.UNRECOGNIZED:
        default:
            return -1;
    }
}
export var TargetRuntime;
(function (TargetRuntime) {
    TargetRuntime[TargetRuntime["UNIVERSAL"] = 0] = "UNIVERSAL";
    /** CLIENT - SERVER = 2; */
    TargetRuntime[TargetRuntime["CLIENT"] = 1] = "CLIENT";
    TargetRuntime[TargetRuntime["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(TargetRuntime || (TargetRuntime = {}));
export function targetRuntimeFromJSON(object) {
    switch (object) {
        case 0:
        case "UNIVERSAL":
            return TargetRuntime.UNIVERSAL;
        case 1:
        case "CLIENT":
            return TargetRuntime.CLIENT;
        case -1:
        case "UNRECOGNIZED":
        default:
            return TargetRuntime.UNRECOGNIZED;
    }
}
export function targetRuntimeToJSON(object) {
    switch (object) {
        case TargetRuntime.UNIVERSAL:
            return 0;
        case TargetRuntime.CLIENT:
            return 1;
        case TargetRuntime.UNRECOGNIZED:
        default:
            return -1;
    }
}
function createBaseActorSpec() {
    return { name: "", owner: "", version: "" };
}
export const ActorSpec = {
    $type: "devvit.runtime.ActorSpec",
    encode(message, writer = _m0.Writer.create()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.owner !== "") {
            writer.uint32(18).string(message.owner);
        }
        if (message.version !== "") {
            writer.uint32(26).string(message.version);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseActorSpec();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.owner = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.version = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
            version: isSet(object.version) ? globalThis.String(object.version) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.owner !== "") {
            obj.owner = message.owner;
        }
        if (message.version !== "") {
            obj.version = message.version;
        }
        return obj;
    },
    create(base) {
        return ActorSpec.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseActorSpec();
        message.name = object.name ?? "";
        message.owner = object.owner ?? "";
        message.version = object.version ?? "";
        return message;
    },
};
messageTypeRegistry.set(ActorSpec.$type, ActorSpec);
function createBaseLocationFilter() {
    return { allow: [], deny: [] };
}
export const LocationFilter = {
    $type: "devvit.runtime.LocationFilter",
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.allow) {
            writer.uint32(10).string(v);
        }
        for (const v of message.deny) {
            writer.uint32(18).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLocationFilter();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.allow.push(reader.string());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.deny.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            allow: globalThis.Array.isArray(object?.allow) ? object.allow.map((e) => globalThis.String(e)) : [],
            deny: globalThis.Array.isArray(object?.deny) ? object.deny.map((e) => globalThis.String(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.allow?.length) {
            obj.allow = message.allow;
        }
        if (message.deny?.length) {
            obj.deny = message.deny;
        }
        return obj;
    },
    create(base) {
        return LocationFilter.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseLocationFilter();
        message.allow = object.allow?.map((e) => e) || [];
        message.deny = object.deny?.map((e) => e) || [];
        return message;
    },
};
messageTypeRegistry.set(LocationFilter.$type, LocationFilter);
function createBasePackageSpec() {
    return { actor: undefined, definition: undefined, locations: undefined, partitionsBy: [] };
}
export const PackageSpec = {
    $type: "devvit.runtime.PackageSpec",
    encode(message, writer = _m0.Writer.create()) {
        if (message.actor !== undefined) {
            ActorSpec.encode(message.actor, writer.uint32(10).fork()).ldelim();
        }
        if (message.definition !== undefined) {
            SerializableServiceDefinition.encode(message.definition, writer.uint32(18).fork()).ldelim();
        }
        if (message.locations !== undefined) {
            LocationFilter.encode(message.locations, writer.uint32(26).fork()).ldelim();
        }
        for (const v of message.partitionsBy) {
            writer.uint32(34).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePackageSpec();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.actor = ActorSpec.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.definition = SerializableServiceDefinition.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.locations = LocationFilter.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.partitionsBy.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            actor: isSet(object.actor) ? ActorSpec.fromJSON(object.actor) : undefined,
            definition: isSet(object.definition) ? SerializableServiceDefinition.fromJSON(object.definition) : undefined,
            locations: isSet(object.locations) ? LocationFilter.fromJSON(object.locations) : undefined,
            partitionsBy: globalThis.Array.isArray(object?.partitionsBy)
                ? object.partitionsBy.map((e) => globalThis.String(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.actor !== undefined) {
            obj.actor = ActorSpec.toJSON(message.actor);
        }
        if (message.definition !== undefined) {
            obj.definition = SerializableServiceDefinition.toJSON(message.definition);
        }
        if (message.locations !== undefined) {
            obj.locations = LocationFilter.toJSON(message.locations);
        }
        if (message.partitionsBy?.length) {
            obj.partitionsBy = message.partitionsBy;
        }
        return obj;
    },
    create(base) {
        return PackageSpec.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePackageSpec();
        message.actor = (object.actor !== undefined && object.actor !== null)
            ? ActorSpec.fromPartial(object.actor)
            : undefined;
        message.definition = (object.definition !== undefined && object.definition !== null)
            ? SerializableServiceDefinition.fromPartial(object.definition)
            : undefined;
        message.locations = (object.locations !== undefined && object.locations !== null)
            ? LocationFilter.fromPartial(object.locations)
            : undefined;
        message.partitionsBy = object.partitionsBy?.map((e) => e) || [];
        return message;
    },
};
messageTypeRegistry.set(PackageSpec.$type, PackageSpec);
function createBasePackageQuery() {
    return { name: undefined, owner: undefined, typeName: "", versions: undefined };
}
export const PackageQuery = {
    $type: "devvit.runtime.PackageQuery",
    encode(message, writer = _m0.Writer.create()) {
        if (message.name !== undefined) {
            StringValue.encode({ value: message.name }, writer.uint32(10).fork()).ldelim();
        }
        if (message.owner !== undefined) {
            StringValue.encode({ value: message.owner }, writer.uint32(18).fork()).ldelim();
        }
        if (message.typeName !== "") {
            writer.uint32(26).string(message.typeName);
        }
        if (message.versions !== undefined) {
            StringValue.encode({ value: message.versions }, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePackageQuery();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.owner = StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.typeName = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.versions = StringValue.decode(reader, reader.uint32()).value;
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? String(object.name) : undefined,
            owner: isSet(object.owner) ? String(object.owner) : undefined,
            typeName: isSet(object.typeName) ? globalThis.String(object.typeName) : "",
            versions: isSet(object.versions) ? String(object.versions) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== undefined) {
            obj.name = message.name;
        }
        if (message.owner !== undefined) {
            obj.owner = message.owner;
        }
        if (message.typeName !== "") {
            obj.typeName = message.typeName;
        }
        if (message.versions !== undefined) {
            obj.versions = message.versions;
        }
        return obj;
    },
    create(base) {
        return PackageQuery.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePackageQuery();
        message.name = object.name ?? undefined;
        message.owner = object.owner ?? undefined;
        message.typeName = object.typeName ?? "";
        message.versions = object.versions ?? undefined;
        return message;
    },
};
messageTypeRegistry.set(PackageQuery.$type, PackageQuery);
function createBaseDependencySpec() {
    return { actor: undefined, hostname: "", provides: [], uses: [] };
}
export const DependencySpec = {
    $type: "devvit.runtime.DependencySpec",
    encode(message, writer = _m0.Writer.create()) {
        if (message.actor !== undefined) {
            ActorSpec.encode(message.actor, writer.uint32(10).fork()).ldelim();
        }
        if (message.hostname !== "") {
            writer.uint32(18).string(message.hostname);
        }
        for (const v of message.provides) {
            PackageSpec.encode(v, writer.uint32(26).fork()).ldelim();
        }
        for (const v of message.uses) {
            PackageQuery.encode(v, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDependencySpec();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.actor = ActorSpec.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.hostname = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.provides.push(PackageSpec.decode(reader, reader.uint32()));
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.uses.push(PackageQuery.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            actor: isSet(object.actor) ? ActorSpec.fromJSON(object.actor) : undefined,
            hostname: isSet(object.hostname) ? globalThis.String(object.hostname) : "",
            provides: globalThis.Array.isArray(object?.provides)
                ? object.provides.map((e) => PackageSpec.fromJSON(e))
                : [],
            uses: globalThis.Array.isArray(object?.uses) ? object.uses.map((e) => PackageQuery.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.actor !== undefined) {
            obj.actor = ActorSpec.toJSON(message.actor);
        }
        if (message.hostname !== "") {
            obj.hostname = message.hostname;
        }
        if (message.provides?.length) {
            obj.provides = message.provides.map((e) => PackageSpec.toJSON(e));
        }
        if (message.uses?.length) {
            obj.uses = message.uses.map((e) => PackageQuery.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return DependencySpec.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDependencySpec();
        message.actor = (object.actor !== undefined && object.actor !== null)
            ? ActorSpec.fromPartial(object.actor)
            : undefined;
        message.hostname = object.hostname ?? "";
        message.provides = object.provides?.map((e) => PackageSpec.fromPartial(e)) || [];
        message.uses = object.uses?.map((e) => PackageQuery.fromPartial(e)) || [];
        return message;
    },
};
messageTypeRegistry.set(DependencySpec.$type, DependencySpec);
function createBaseLinkedBundle() {
    return {
        actor: undefined,
        code: "",
        sourceMap: undefined,
        hostname: "",
        provides: [],
        uses: [],
        buildInfo: undefined,
        assetsUrl: undefined,
        assets: {},
        webviewAssets: {},
        products: {},
    };
}
export const LinkedBundle = {
    $type: "devvit.runtime.LinkedBundle",
    encode(message, writer = _m0.Writer.create()) {
        if (message.actor !== undefined) {
            ActorSpec.encode(message.actor, writer.uint32(10).fork()).ldelim();
        }
        if (message.code !== "") {
            writer.uint32(18).string(message.code);
        }
        if (message.sourceMap !== undefined) {
            StringValue.encode({ value: message.sourceMap }, writer.uint32(82).fork()).ldelim();
        }
        if (message.hostname !== "") {
            writer.uint32(26).string(message.hostname);
        }
        for (const v of message.provides) {
            SerializableServiceDefinition.encode(v, writer.uint32(34).fork()).ldelim();
        }
        for (const v of message.uses) {
            LinkedBundle.encode(v, writer.uint32(42).fork()).ldelim();
        }
        if (message.buildInfo !== undefined) {
            BuildInfo.encode(message.buildInfo, writer.uint32(50).fork()).ldelim();
        }
        if (message.assetsUrl !== undefined) {
            StringValue.encode({ value: message.assetsUrl }, writer.uint32(58).fork()).ldelim();
        }
        Object.entries(message.assets).forEach(([key, value]) => {
            LinkedBundle_AssetsEntry.encode({ key: key, value }, writer.uint32(66).fork()).ldelim();
        });
        Object.entries(message.webviewAssets).forEach(([key, value]) => {
            LinkedBundle_WebviewAssetsEntry.encode({ key: key, value }, writer.uint32(74).fork()).ldelim();
        });
        Object.entries(message.products).forEach(([key, value]) => {
            LinkedBundle_ProductsEntry.encode({ key: key, value }, writer.uint32(90).fork()).ldelim();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLinkedBundle();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.actor = ActorSpec.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.code = reader.string();
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.sourceMap = StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.hostname = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.provides.push(SerializableServiceDefinition.decode(reader, reader.uint32()));
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.uses.push(LinkedBundle.decode(reader, reader.uint32()));
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.buildInfo = BuildInfo.decode(reader, reader.uint32());
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.assetsUrl = StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    const entry8 = LinkedBundle_AssetsEntry.decode(reader, reader.uint32());
                    if (entry8.value !== undefined) {
                        message.assets[entry8.key] = entry8.value;
                    }
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    const entry9 = LinkedBundle_WebviewAssetsEntry.decode(reader, reader.uint32());
                    if (entry9.value !== undefined) {
                        message.webviewAssets[entry9.key] = entry9.value;
                    }
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    const entry11 = LinkedBundle_ProductsEntry.decode(reader, reader.uint32());
                    if (entry11.value !== undefined) {
                        message.products[entry11.key] = entry11.value;
                    }
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            actor: isSet(object.actor) ? ActorSpec.fromJSON(object.actor) : undefined,
            code: isSet(object.code) ? globalThis.String(object.code) : "",
            sourceMap: isSet(object.sourceMap) ? String(object.sourceMap) : undefined,
            hostname: isSet(object.hostname) ? globalThis.String(object.hostname) : "",
            provides: globalThis.Array.isArray(object?.provides)
                ? object.provides.map((e) => SerializableServiceDefinition.fromJSON(e))
                : [],
            uses: globalThis.Array.isArray(object?.uses) ? object.uses.map((e) => LinkedBundle.fromJSON(e)) : [],
            buildInfo: isSet(object.buildInfo) ? BuildInfo.fromJSON(object.buildInfo) : undefined,
            assetsUrl: isSet(object.assetsUrl) ? String(object.assetsUrl) : undefined,
            assets: isObject(object.assets)
                ? Object.entries(object.assets).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
            webviewAssets: isObject(object.webviewAssets)
                ? Object.entries(object.webviewAssets).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
            products: isObject(object.products)
                ? Object.entries(object.products).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.actor !== undefined) {
            obj.actor = ActorSpec.toJSON(message.actor);
        }
        if (message.code !== "") {
            obj.code = message.code;
        }
        if (message.sourceMap !== undefined) {
            obj.sourceMap = message.sourceMap;
        }
        if (message.hostname !== "") {
            obj.hostname = message.hostname;
        }
        if (message.provides?.length) {
            obj.provides = message.provides.map((e) => SerializableServiceDefinition.toJSON(e));
        }
        if (message.uses?.length) {
            obj.uses = message.uses.map((e) => LinkedBundle.toJSON(e));
        }
        if (message.buildInfo !== undefined) {
            obj.buildInfo = BuildInfo.toJSON(message.buildInfo);
        }
        if (message.assetsUrl !== undefined) {
            obj.assetsUrl = message.assetsUrl;
        }
        if (message.assets) {
            const entries = Object.entries(message.assets);
            if (entries.length > 0) {
                obj.assets = {};
                entries.forEach(([k, v]) => {
                    obj.assets[k] = v;
                });
            }
        }
        if (message.webviewAssets) {
            const entries = Object.entries(message.webviewAssets);
            if (entries.length > 0) {
                obj.webviewAssets = {};
                entries.forEach(([k, v]) => {
                    obj.webviewAssets[k] = v;
                });
            }
        }
        if (message.products) {
            const entries = Object.entries(message.products);
            if (entries.length > 0) {
                obj.products = {};
                entries.forEach(([k, v]) => {
                    obj.products[k] = v;
                });
            }
        }
        return obj;
    },
    create(base) {
        return LinkedBundle.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseLinkedBundle();
        message.actor = (object.actor !== undefined && object.actor !== null)
            ? ActorSpec.fromPartial(object.actor)
            : undefined;
        message.code = object.code ?? "";
        message.sourceMap = object.sourceMap ?? undefined;
        message.hostname = object.hostname ?? "";
        message.provides = object.provides?.map((e) => SerializableServiceDefinition.fromPartial(e)) || [];
        message.uses = object.uses?.map((e) => LinkedBundle.fromPartial(e)) || [];
        message.buildInfo = (object.buildInfo !== undefined && object.buildInfo !== null)
            ? BuildInfo.fromPartial(object.buildInfo)
            : undefined;
        message.assetsUrl = object.assetsUrl ?? undefined;
        message.assets = Object.entries(object.assets ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = globalThis.String(value);
            }
            return acc;
        }, {});
        message.webviewAssets = Object.entries(object.webviewAssets ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = globalThis.String(value);
            }
            return acc;
        }, {});
        message.products = Object.entries(object.products ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = globalThis.String(value);
            }
            return acc;
        }, {});
        return message;
    },
};
messageTypeRegistry.set(LinkedBundle.$type, LinkedBundle);
function createBaseLinkedBundle_AssetsEntry() {
    return { key: "", value: "" };
}
export const LinkedBundle_AssetsEntry = {
    $type: "devvit.runtime.LinkedBundle.AssetsEntry",
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLinkedBundle_AssetsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? globalThis.String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return LinkedBundle_AssetsEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseLinkedBundle_AssetsEntry();
        message.key = object.key ?? "";
        message.value = object.value ?? "";
        return message;
    },
};
messageTypeRegistry.set(LinkedBundle_AssetsEntry.$type, LinkedBundle_AssetsEntry);
function createBaseLinkedBundle_WebviewAssetsEntry() {
    return { key: "", value: "" };
}
export const LinkedBundle_WebviewAssetsEntry = {
    $type: "devvit.runtime.LinkedBundle.WebviewAssetsEntry",
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLinkedBundle_WebviewAssetsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? globalThis.String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return LinkedBundle_WebviewAssetsEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseLinkedBundle_WebviewAssetsEntry();
        message.key = object.key ?? "";
        message.value = object.value ?? "";
        return message;
    },
};
messageTypeRegistry.set(LinkedBundle_WebviewAssetsEntry.$type, LinkedBundle_WebviewAssetsEntry);
function createBaseLinkedBundle_ProductsEntry() {
    return { key: "", value: "" };
}
export const LinkedBundle_ProductsEntry = {
    $type: "devvit.runtime.LinkedBundle.ProductsEntry",
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLinkedBundle_ProductsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? globalThis.String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return LinkedBundle_ProductsEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseLinkedBundle_ProductsEntry();
        message.key = object.key ?? "";
        message.value = object.value ?? "";
        return message;
    },
};
messageTypeRegistry.set(LinkedBundle_ProductsEntry.$type, LinkedBundle_ProductsEntry);
function createBaseBuildInfo() {
    return { created: undefined, dependencies: {}, targetRuntime: 0 };
}
export const BuildInfo = {
    $type: "devvit.runtime.BuildInfo",
    encode(message, writer = _m0.Writer.create()) {
        if (message.created !== undefined) {
            Timestamp.encode(toTimestamp(message.created), writer.uint32(10).fork()).ldelim();
        }
        Object.entries(message.dependencies).forEach(([key, value]) => {
            BuildInfo_DependenciesEntry.encode({ key: key, value }, writer.uint32(18).fork()).ldelim();
        });
        if (message.targetRuntime !== 0) {
            writer.uint32(24).int32(message.targetRuntime);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBuildInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.created = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    const entry2 = BuildInfo_DependenciesEntry.decode(reader, reader.uint32());
                    if (entry2.value !== undefined) {
                        message.dependencies[entry2.key] = entry2.value;
                    }
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.targetRuntime = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            created: isSet(object.created) ? fromJsonTimestamp(object.created) : undefined,
            dependencies: isObject(object.dependencies)
                ? Object.entries(object.dependencies).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
            targetRuntime: isSet(object.targetRuntime) ? targetRuntimeFromJSON(object.targetRuntime) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.created !== undefined) {
            obj.created = message.created.toISOString();
        }
        if (message.dependencies) {
            const entries = Object.entries(message.dependencies);
            if (entries.length > 0) {
                obj.dependencies = {};
                entries.forEach(([k, v]) => {
                    obj.dependencies[k] = v;
                });
            }
        }
        if (message.targetRuntime !== 0) {
            obj.targetRuntime = targetRuntimeToJSON(message.targetRuntime);
        }
        return obj;
    },
    create(base) {
        return BuildInfo.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBuildInfo();
        message.created = object.created ?? undefined;
        message.dependencies = Object.entries(object.dependencies ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = globalThis.String(value);
            }
            return acc;
        }, {});
        message.targetRuntime = object.targetRuntime ?? 0;
        return message;
    },
};
messageTypeRegistry.set(BuildInfo.$type, BuildInfo);
function createBaseBuildInfo_DependenciesEntry() {
    return { key: "", value: "" };
}
export const BuildInfo_DependenciesEntry = {
    $type: "devvit.runtime.BuildInfo.DependenciesEntry",
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBuildInfo_DependenciesEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? globalThis.String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return BuildInfo_DependenciesEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBuildInfo_DependenciesEntry();
        message.key = object.key ?? "";
        message.value = object.value ?? "";
        return message;
    },
};
messageTypeRegistry.set(BuildInfo_DependenciesEntry.$type, BuildInfo_DependenciesEntry);
function toTimestamp(date) {
    const seconds = Math.trunc(date.getTime() / 1000);
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (t.seconds || 0) * 1000;
    millis += (t.nanos || 0) / 1000000;
    return new globalThis.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof globalThis.Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new globalThis.Date(o);
    }
    else {
        return fromTimestamp(Timestamp.fromJSON(o));
    }
}
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
