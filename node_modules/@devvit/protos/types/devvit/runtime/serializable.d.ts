/**
 * #serializable.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
/** A Definition subset representable as JSON. */
export interface SerializableServiceDefinition {
    /** No slashes. Eg, "devvit.plugin.logger.Logger". */
    fullName: string;
    methods: SerializableMethodDefinition[];
    /** Eg, "Logger". */
    name: string;
    version: string;
}
/** A MethodDefinition subset representable as JSON. */
export interface SerializableMethodDefinition {
    /** Leading slash. Eg, "/devvit.plugin.logger.Logger/Log". */
    fullName: string;
    /** Eg, "Log". */
    name: string;
    requestStream: boolean;
    responseStream: boolean;
    requestType: string;
    responseType: string;
}
export declare const SerializableServiceDefinition: {
    $type: "devvit.runtime.SerializableServiceDefinition";
    encode(message: SerializableServiceDefinition, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SerializableServiceDefinition;
    fromJSON(object: any): SerializableServiceDefinition;
    toJSON(message: SerializableServiceDefinition): unknown;
    create(base?: DeepPartial<SerializableServiceDefinition>): SerializableServiceDefinition;
    fromPartial(object: DeepPartial<SerializableServiceDefinition>): SerializableServiceDefinition;
};
export declare const SerializableMethodDefinition: {
    $type: "devvit.runtime.SerializableMethodDefinition";
    encode(message: SerializableMethodDefinition, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SerializableMethodDefinition;
    fromJSON(object: any): SerializableMethodDefinition;
    toJSON(message: SerializableMethodDefinition): unknown;
    create(base?: DeepPartial<SerializableMethodDefinition>): SerializableMethodDefinition;
    fromPartial(object: DeepPartial<SerializableMethodDefinition>): SerializableMethodDefinition;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=serializable.d.ts.map