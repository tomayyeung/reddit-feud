/**
 * #bundle_service.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { Metadata } from "../../../lib/Types.js";
import { Empty } from "../../google/protobuf/empty.js";
import { LinkedBundle } from "../runtime/bundle.js";
/** Fetch a bundle by its hostname */
export interface BundleRequest {
    /** Must be legal name for filesystem. Eg, LinkedBundle.hostname. 'main.local' */
    hostname: string;
}
export declare const BundleRequest: {
    $type: "devvit.service.BundleRequest";
    encode(message: BundleRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BundleRequest;
    fromJSON(object: any): BundleRequest;
    toJSON(message: BundleRequest): unknown;
    create(base?: DeepPartial<BundleRequest>): BundleRequest;
    fromPartial(object: DeepPartial<BundleRequest>): BundleRequest;
};
export interface BundleService {
    /** Upload a bundle to the bundle repo */
    Upload(request: LinkedBundle, metadata?: Metadata): Promise<Empty>;
    /** Retrieve a bundle from the bundle repo */
    Fetch(request: BundleRequest, metadata?: Metadata): Promise<LinkedBundle>;
}
export declare const BundleServiceServiceName = "devvit.service.BundleService";
export declare class BundleServiceClientImpl implements BundleService {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Upload(request: LinkedBundle, metadata?: Metadata): Promise<Empty>;
    Fetch(request: BundleRequest, metadata?: Metadata): Promise<LinkedBundle>;
}
export type BundleServiceDefinition = typeof BundleServiceDefinition;
export declare const BundleServiceDefinition: {
    readonly name: "BundleService";
    readonly fullName: "devvit.service.BundleService";
    readonly methods: {
        /** Upload a bundle to the bundle repo */
        readonly upload: {
            readonly name: "Upload";
            readonly requestType: {
                $type: "devvit.runtime.LinkedBundle";
                encode(message: LinkedBundle, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): LinkedBundle;
                fromJSON(object: any): LinkedBundle;
                toJSON(message: LinkedBundle): unknown;
                create(base?: {
                    actor?: {
                        name?: string;
                        owner?: string;
                        version?: string;
                    } | undefined;
                    code?: string;
                    sourceMap?: string | undefined;
                    hostname?: string;
                    provides?: {
                        fullName?: string;
                        methods?: {
                            fullName?: string;
                            name?: string;
                            requestStream?: boolean;
                            responseStream?: boolean;
                            requestType?: string;
                            responseType?: string;
                        }[];
                        name?: string;
                        version?: string;
                    }[];
                    uses?: any[];
                    buildInfo?: {
                        created?: Date | undefined;
                        dependencies?: {
                            [x: string]: string | undefined;
                        };
                        targetRuntime?: import("../runtime/bundle.js").TargetRuntime;
                    } | undefined;
                    assetsUrl?: string | undefined;
                    assets?: {
                        [x: string]: string | undefined;
                    };
                    webviewAssets?: {
                        [x: string]: string | undefined;
                    };
                    products?: {
                        [x: string]: string | undefined;
                    };
                } | undefined): LinkedBundle;
                fromPartial(object: {
                    actor?: {
                        name?: string;
                        owner?: string;
                        version?: string;
                    } | undefined;
                    code?: string;
                    sourceMap?: string | undefined;
                    hostname?: string;
                    provides?: {
                        fullName?: string;
                        methods?: {
                            fullName?: string;
                            name?: string;
                            requestStream?: boolean;
                            responseStream?: boolean;
                            requestType?: string;
                            responseType?: string;
                        }[];
                        name?: string;
                        version?: string;
                    }[];
                    uses?: any[];
                    buildInfo?: {
                        created?: Date | undefined;
                        dependencies?: {
                            [x: string]: string | undefined;
                        };
                        targetRuntime?: import("../runtime/bundle.js").TargetRuntime;
                    } | undefined;
                    assetsUrl?: string | undefined;
                    assets?: {
                        [x: string]: string | undefined;
                    };
                    webviewAssets?: {
                        [x: string]: string | undefined;
                    };
                    products?: {
                        [x: string]: string | undefined;
                    };
                }): LinkedBundle;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {} | undefined): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        /** Retrieve a bundle from the bundle repo */
        readonly fetch: {
            readonly name: "Fetch";
            readonly requestType: {
                $type: "devvit.service.BundleRequest";
                encode(message: BundleRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): BundleRequest;
                fromJSON(object: any): BundleRequest;
                toJSON(message: BundleRequest): unknown;
                create(base?: DeepPartial<BundleRequest>): BundleRequest;
                fromPartial(object: DeepPartial<BundleRequest>): BundleRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.runtime.LinkedBundle";
                encode(message: LinkedBundle, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): LinkedBundle;
                fromJSON(object: any): LinkedBundle;
                toJSON(message: LinkedBundle): unknown;
                create(base?: {
                    actor?: {
                        name?: string;
                        owner?: string;
                        version?: string;
                    } | undefined;
                    code?: string;
                    sourceMap?: string | undefined;
                    hostname?: string;
                    provides?: {
                        fullName?: string;
                        methods?: {
                            fullName?: string;
                            name?: string;
                            requestStream?: boolean;
                            responseStream?: boolean;
                            requestType?: string;
                            responseType?: string;
                        }[];
                        name?: string;
                        version?: string;
                    }[];
                    uses?: any[];
                    buildInfo?: {
                        created?: Date | undefined;
                        dependencies?: {
                            [x: string]: string | undefined;
                        };
                        targetRuntime?: import("../runtime/bundle.js").TargetRuntime;
                    } | undefined;
                    assetsUrl?: string | undefined;
                    assets?: {
                        [x: string]: string | undefined;
                    };
                    webviewAssets?: {
                        [x: string]: string | undefined;
                    };
                    products?: {
                        [x: string]: string | undefined;
                    };
                } | undefined): LinkedBundle;
                fromPartial(object: {
                    actor?: {
                        name?: string;
                        owner?: string;
                        version?: string;
                    } | undefined;
                    code?: string;
                    sourceMap?: string | undefined;
                    hostname?: string;
                    provides?: {
                        fullName?: string;
                        methods?: {
                            fullName?: string;
                            name?: string;
                            requestStream?: boolean;
                            responseStream?: boolean;
                            requestType?: string;
                            responseType?: string;
                        }[];
                        name?: string;
                        version?: string;
                    }[];
                    uses?: any[];
                    buildInfo?: {
                        created?: Date | undefined;
                        dependencies?: {
                            [x: string]: string | undefined;
                        };
                        targetRuntime?: import("../runtime/bundle.js").TargetRuntime;
                    } | undefined;
                    assetsUrl?: string | undefined;
                    assets?: {
                        [x: string]: string | undefined;
                    };
                    webviewAssets?: {
                        [x: string]: string | undefined;
                    };
                    products?: {
                        [x: string]: string | undefined;
                    };
                }): LinkedBundle;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array, metadata?: Metadata): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=bundle_service.d.ts.map