/**
 * #bundle_service.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { Empty } from "../../google/protobuf/empty.js";
import { messageTypeRegistry } from "../../typeRegistry.js";
import { LinkedBundle } from "../runtime/bundle.js";
function createBaseBundleRequest() {
    return { hostname: "" };
}
export const BundleRequest = {
    $type: "devvit.service.BundleRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.hostname !== "") {
            writer.uint32(10).string(message.hostname);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBundleRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.hostname = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { hostname: isSet(object.hostname) ? globalThis.String(object.hostname) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.hostname !== "") {
            obj.hostname = message.hostname;
        }
        return obj;
    },
    create(base) {
        return BundleRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBundleRequest();
        message.hostname = object.hostname ?? "";
        return message;
    },
};
messageTypeRegistry.set(BundleRequest.$type, BundleRequest);
export const BundleServiceServiceName = "devvit.service.BundleService";
export class BundleServiceClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || BundleServiceServiceName;
        this.rpc = rpc;
        this.Upload = this.Upload.bind(this);
        this.Fetch = this.Fetch.bind(this);
    }
    Upload(request, metadata) {
        const data = LinkedBundle.encode(request).finish();
        const promise = this.rpc.request(this.service, "Upload", data, metadata);
        return promise.then((data) => Empty.decode(_m0.Reader.create(data)));
    }
    Fetch(request, metadata) {
        const data = BundleRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Fetch", data, metadata);
        return promise.then((data) => LinkedBundle.decode(_m0.Reader.create(data)));
    }
}
export const BundleServiceDefinition = {
    name: "BundleService",
    fullName: "devvit.service.BundleService",
    methods: {
        /** Upload a bundle to the bundle repo */
        upload: {
            name: "Upload",
            requestType: LinkedBundle,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
        /** Retrieve a bundle from the bundle repo */
        fetch: {
            name: "Fetch",
            requestType: BundleRequest,
            requestStream: false,
            responseType: LinkedBundle,
            responseStream: false,
            options: {},
        },
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
