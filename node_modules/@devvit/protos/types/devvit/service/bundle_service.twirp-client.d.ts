import { LinkedBundle } from '../runtime/bundle.js';
import { Empty } from '../../google/protobuf/empty.js';
import { BundleRequest } from './bundle_service.js';
interface Rpc {
    request(service: string, method: string, contentType: 'application/json' | 'application/protobuf', data: object | Uint8Array): Promise<object | Uint8Array>;
}
export interface BundleServiceClient {
    Upload(request: LinkedBundle): Promise<Empty>;
    Fetch(request: BundleRequest): Promise<LinkedBundle>;
}
export declare class BundleServiceClientJSON implements BundleServiceClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    Upload(request: LinkedBundle): Promise<Empty>;
    Fetch(request: BundleRequest): Promise<LinkedBundle>;
}
export declare class BundleServiceClientProtobuf implements BundleServiceClient {
    private readonly rpc;
    constructor(rpc: Rpc);
    Upload(request: LinkedBundle): Promise<Empty>;
    Fetch(request: BundleRequest): Promise<LinkedBundle>;
}
export {};
//# sourceMappingURL=bundle_service.twirp-client.d.ts.map