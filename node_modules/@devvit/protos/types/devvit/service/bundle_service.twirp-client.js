import { LinkedBundle } from '../runtime/bundle.js';
import { Empty } from '../../google/protobuf/empty.js';
import { BundleRequest } from './bundle_service.js';
export class BundleServiceClientJSON {
    constructor(rpc) {
        this.rpc = rpc;
        this.Upload.bind(this);
        this.Fetch.bind(this);
    }
    Upload(request) {
        const data = LinkedBundle.toJSON(request);
        const promise = this.rpc.request('devvit.service.BundleService', 'Upload', 'application/json', data);
        return promise.then((data) => Empty.fromJSON(data));
    }
    Fetch(request) {
        const data = BundleRequest.toJSON(request);
        const promise = this.rpc.request('devvit.service.BundleService', 'Fetch', 'application/json', data);
        return promise.then((data) => LinkedBundle.fromJSON(data));
    }
}
export class BundleServiceClientProtobuf {
    constructor(rpc) {
        this.rpc = rpc;
        this.Upload.bind(this);
        this.Fetch.bind(this);
    }
    Upload(request) {
        const data = LinkedBundle.encode(request).finish();
        const promise = this.rpc.request('devvit.service.BundleService', 'Upload', 'application/protobuf', data);
        return promise.then((data) => Empty.decode(data));
    }
    Fetch(request) {
        const data = BundleRequest.encode(request).finish();
        const promise = this.rpc.request('devvit.service.BundleService', 'Fetch', 'application/protobuf', data);
        return promise.then((data) => LinkedBundle.decode(data));
    }
}
