/// <reference types="node" resolution-mode="require"/>
import { TwirpContext, TwirpServer } from 'twirp-ts';
import { LinkedBundle } from '../runtime/bundle.js';
import { Empty } from '../../google/protobuf/empty.js';
import { BundleRequest } from './bundle_service.js';
export interface BundleServiceTwirp<T extends TwirpContext = TwirpContext> {
    Upload(ctx: T, request: LinkedBundle): Promise<Empty>;
    Fetch(ctx: T, request: BundleRequest): Promise<LinkedBundle>;
}
export declare enum BundleServiceMethod {
    Upload = "Upload",
    Fetch = "Fetch"
}
export declare const BundleServiceMethodList: BundleServiceMethod[];
export declare function createBundleServiceServer<T extends TwirpContext = TwirpContext>(service: BundleServiceTwirp<T>): TwirpServer<BundleServiceTwirp<TwirpContext<import("http").IncomingMessage, import("http").ServerResponse<import("http").IncomingMessage>>>, T>;
//# sourceMappingURL=bundle_service.twirp.d.ts.map