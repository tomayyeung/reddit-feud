import { TwirpServer, TwirpError, TwirpErrorCode, TwirpContentType, chainInterceptors, } from 'twirp-ts';
import { LinkedBundle } from '../runtime/bundle.js';
import { Empty } from '../../google/protobuf/empty.js';
import { BundleRequest } from './bundle_service.js';
export var BundleServiceMethod;
(function (BundleServiceMethod) {
    BundleServiceMethod["Upload"] = "Upload";
    BundleServiceMethod["Fetch"] = "Fetch";
})(BundleServiceMethod || (BundleServiceMethod = {}));
export const BundleServiceMethodList = [
    BundleServiceMethod.Upload,
    BundleServiceMethod.Fetch,
];
export function createBundleServiceServer(service) {
    return new TwirpServer({
        service,
        packageName: 'devvit.service',
        serviceName: 'BundleService',
        methodList: BundleServiceMethodList,
        matchRoute: matchBundleServiceRoute,
    });
}
function matchBundleServiceRoute(method, events) {
    switch (method) {
        case 'Upload':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'Upload' };
                await events.onMatch(ctx);
                return handleBundleServiceUploadRequest(ctx, service, data, interceptors);
            };
        case 'Fetch':
            return async (ctx, service, data, interceptors) => {
                ctx = { ...ctx, methodName: 'Fetch' };
                await events.onMatch(ctx);
                return handleBundleServiceFetchRequest(ctx, service, data, interceptors);
            };
        default:
            events.onNotFound();
            const msg = `no handler found`;
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleBundleServiceUploadRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleBundleServiceUploadJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleBundleServiceUploadProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
function handleBundleServiceFetchRequest(ctx, service, data, interceptors) {
    switch (ctx.contentType) {
        case TwirpContentType.JSON:
            return handleBundleServiceFetchJSON(ctx, service, data, interceptors);
        case TwirpContentType.Protobuf:
            return handleBundleServiceFetchProtobuf(ctx, service, data, interceptors);
        default:
            const msg = 'unexpected Content-Type';
            throw new TwirpError(TwirpErrorCode.BadRoute, msg);
    }
}
async function handleBundleServiceUploadJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = LinkedBundle.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.Upload(ctx, inputReq);
        });
    }
    else {
        response = await service.Upload(ctx, request);
    }
    return JSON.stringify(Empty.toJSON(response));
}
async function handleBundleServiceFetchJSON(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        const body = JSON.parse(data.toString() || '{}');
        request = BundleRequest.fromJSON(body);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the json request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.Fetch(ctx, inputReq);
        });
    }
    else {
        response = await service.Fetch(ctx, request);
    }
    return JSON.stringify(LinkedBundle.toJSON(response));
}
async function handleBundleServiceUploadProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = LinkedBundle.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.Upload(ctx, inputReq);
        });
    }
    else {
        response = await service.Upload(ctx, request);
    }
    return Buffer.from(Empty.encode(response).finish());
}
async function handleBundleServiceFetchProtobuf(ctx, service, data, interceptors) {
    let request;
    let response;
    try {
        request = BundleRequest.decode(data);
    }
    catch (e) {
        if (e instanceof Error) {
            const msg = 'the protobuf request could not be decoded';
            throw new TwirpError(TwirpErrorCode.Malformed, msg).withCause(e, true);
        }
    }
    if (interceptors && interceptors.length > 0) {
        const interceptor = chainInterceptors(...interceptors);
        response = await interceptor(ctx, request, (ctx, inputReq) => {
            return service.Fetch(ctx, inputReq);
        });
    }
    else {
        response = await service.Fetch(ctx, request);
    }
    return Buffer.from(LinkedBundle.encode(response).finish());
}
