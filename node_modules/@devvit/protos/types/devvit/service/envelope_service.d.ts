/**
 * #envelope_service.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { Metadata } from "../../../lib/Types.js";
import { Empty } from "../../google/protobuf/empty.js";
import { Envelope } from "../runtime/envelope.js";
/** Generic interface for a service that receives Envelopes */
export interface EnvelopeReceiverPort {
    Post(request: Envelope, metadata?: Metadata): Promise<Empty>;
}
export declare const EnvelopeReceiverPortServiceName = "devvit.service.EnvelopeReceiverPort";
export declare class EnvelopeReceiverPortClientImpl implements EnvelopeReceiverPort {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Post(request: Envelope, metadata?: Metadata): Promise<Empty>;
}
/** Generic interface for a service that receives Envelopes */
export type EnvelopeReceiverPortDefinition = typeof EnvelopeReceiverPortDefinition;
export declare const EnvelopeReceiverPortDefinition: {
    readonly name: "EnvelopeReceiverPort";
    readonly fullName: "devvit.service.EnvelopeReceiverPort";
    readonly methods: {
        readonly post: {
            readonly name: "Post";
            readonly requestType: {
                $type: "devvit.runtime.Envelope";
                encode(message: Envelope, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Envelope;
                fromJSON(object: any): Envelope;
                toJSON(message: Envelope): unknown;
                create(base?: {
                    id?: string;
                    src?: string;
                    dst?: string;
                    method?: string;
                    streamId?: string;
                    traceId?: string;
                    success?: boolean;
                    message?: any;
                    request?: boolean;
                    complete?: boolean;
                    metadata?: {
                        [x: string]: {
                            values?: string[];
                        } | undefined;
                    };
                } | undefined): Envelope;
                fromPartial(object: {
                    id?: string;
                    src?: string;
                    dst?: string;
                    method?: string;
                    streamId?: string;
                    traceId?: string;
                    success?: boolean;
                    message?: any;
                    request?: boolean;
                    complete?: boolean;
                    metadata?: {
                        [x: string]: {
                            values?: string[];
                        } | undefined;
                    };
                }): Envelope;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "google.protobuf.Empty";
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {} | undefined): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array, metadata?: Metadata): Promise<Uint8Array>;
}
export {};
//# sourceMappingURL=envelope_service.d.ts.map