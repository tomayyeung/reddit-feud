/**
 * #triggers.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { AccountDelete, AppInstall, AppUpgrade, AutomoderatorFilterComment, AutomoderatorFilterPost, CommentApprove, CommentCreate, CommentDelete, CommentReport, CommentSubmit, CommentUpdate, PostApprove, PostCreate, PostDelete, PostFlairUpdate, PostNsfwUpdate, PostReport, PostSpoilerUpdate, PostSubmit, PostUpdate, SubredditSubscribe, Vote } from "../../events/v1alpha/events.js";
import { ModAction } from "../../reddit/v2alpha/modaction.js";
import { ModMail } from "../../reddit/v2alpha/modmail.js";
export interface TriggerEvent {
    /** UUID for the event */
    id: string;
    /** Event timestamp */
    timestamp?: Date | undefined;
    subreddit: string;
    postSubmit?: PostSubmit | undefined;
    postCreate?: PostCreate | undefined;
    postUpdate?: PostUpdate | undefined;
    postReport?: PostReport | undefined;
    postFlairUpdate?: PostFlairUpdate | undefined;
    postDelete?: PostDelete | undefined;
    commentSubmit?: CommentSubmit | undefined;
    commentCreate?: CommentCreate | undefined;
    commentUpdate?: CommentUpdate | undefined;
    commentReport?: CommentReport | undefined;
    commentDelete?: CommentDelete | undefined;
    subredditSubscribe?: SubredditSubscribe | undefined;
    appInstall?: AppInstall | undefined;
    appUpgrade?: AppUpgrade | undefined;
    modAction?: ModAction | undefined;
    modMail?: ModMail | undefined;
    accountDelete?: AccountDelete | undefined;
    vote?: Vote | undefined;
    postApprove?: PostApprove | undefined;
    commentApprove?: CommentApprove | undefined;
    nsfwPostUpdate?: PostNsfwUpdate | undefined;
    spoilerPostUpdate?: PostSpoilerUpdate | undefined;
    automoderatorFilterPost?: AutomoderatorFilterPost | undefined;
    /** NEXT: 124 */
    automoderatorFilterComment?: AutomoderatorFilterComment | undefined;
}
export declare const TriggerEvent: {
    $type: "devvit.data.triggers.v1alpha.TriggerEvent";
    encode(message: TriggerEvent, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TriggerEvent;
    fromJSON(object: any): TriggerEvent;
    toJSON(message: TriggerEvent): unknown;
    create(base?: DeepPartial<TriggerEvent>): TriggerEvent;
    fromPartial(object: DeepPartial<TriggerEvent>): TriggerEvent;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=triggers.d.ts.map