/**
 * #triggers.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { Timestamp } from "../../../google/protobuf/timestamp.js";
import { messageTypeRegistry } from "../../../typeRegistry.js";
import { AccountDelete, AppInstall, AppUpgrade, AutomoderatorFilterComment, AutomoderatorFilterPost, CommentApprove, CommentCreate, CommentDelete, CommentReport, CommentSubmit, CommentUpdate, PostApprove, PostCreate, PostDelete, PostFlairUpdate, PostNsfwUpdate, PostReport, PostSpoilerUpdate, PostSubmit, PostUpdate, SubredditSubscribe, Vote, } from "../../events/v1alpha/events.js";
import { ModAction } from "../../reddit/v2alpha/modaction.js";
import { ModMail } from "../../reddit/v2alpha/modmail.js";
function createBaseTriggerEvent() {
    return {
        id: "",
        timestamp: undefined,
        subreddit: "",
        postSubmit: undefined,
        postCreate: undefined,
        postUpdate: undefined,
        postReport: undefined,
        postFlairUpdate: undefined,
        postDelete: undefined,
        commentSubmit: undefined,
        commentCreate: undefined,
        commentUpdate: undefined,
        commentReport: undefined,
        commentDelete: undefined,
        subredditSubscribe: undefined,
        appInstall: undefined,
        appUpgrade: undefined,
        modAction: undefined,
        modMail: undefined,
        accountDelete: undefined,
        vote: undefined,
        postApprove: undefined,
        commentApprove: undefined,
        nsfwPostUpdate: undefined,
        spoilerPostUpdate: undefined,
        automoderatorFilterPost: undefined,
        automoderatorFilterComment: undefined,
    };
}
export const TriggerEvent = {
    $type: "devvit.data.triggers.v1alpha.TriggerEvent",
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.timestamp !== undefined) {
            Timestamp.encode(toTimestamp(message.timestamp), writer.uint32(18).fork()).ldelim();
        }
        if (message.subreddit !== "") {
            writer.uint32(26).string(message.subreddit);
        }
        if (message.postSubmit !== undefined) {
            PostSubmit.encode(message.postSubmit, writer.uint32(802).fork()).ldelim();
        }
        if (message.postCreate !== undefined) {
            PostCreate.encode(message.postCreate, writer.uint32(906).fork()).ldelim();
        }
        if (message.postUpdate !== undefined) {
            PostUpdate.encode(message.postUpdate, writer.uint32(810).fork()).ldelim();
        }
        if (message.postReport !== undefined) {
            PostReport.encode(message.postReport, writer.uint32(818).fork()).ldelim();
        }
        if (message.postFlairUpdate !== undefined) {
            PostFlairUpdate.encode(message.postFlairUpdate, writer.uint32(874).fork()).ldelim();
        }
        if (message.postDelete !== undefined) {
            PostDelete.encode(message.postDelete, writer.uint32(890).fork()).ldelim();
        }
        if (message.commentSubmit !== undefined) {
            CommentSubmit.encode(message.commentSubmit, writer.uint32(826).fork()).ldelim();
        }
        if (message.commentCreate !== undefined) {
            CommentCreate.encode(message.commentCreate, writer.uint32(914).fork()).ldelim();
        }
        if (message.commentUpdate !== undefined) {
            CommentUpdate.encode(message.commentUpdate, writer.uint32(834).fork()).ldelim();
        }
        if (message.commentReport !== undefined) {
            CommentReport.encode(message.commentReport, writer.uint32(842).fork()).ldelim();
        }
        if (message.commentDelete !== undefined) {
            CommentDelete.encode(message.commentDelete, writer.uint32(898).fork()).ldelim();
        }
        if (message.subredditSubscribe !== undefined) {
            SubredditSubscribe.encode(message.subredditSubscribe, writer.uint32(850).fork()).ldelim();
        }
        if (message.appInstall !== undefined) {
            AppInstall.encode(message.appInstall, writer.uint32(858).fork()).ldelim();
        }
        if (message.appUpgrade !== undefined) {
            AppUpgrade.encode(message.appUpgrade, writer.uint32(866).fork()).ldelim();
        }
        if (message.modAction !== undefined) {
            ModAction.encode(message.modAction, writer.uint32(882).fork()).ldelim();
        }
        if (message.modMail !== undefined) {
            ModMail.encode(message.modMail, writer.uint32(922).fork()).ldelim();
        }
        if (message.accountDelete !== undefined) {
            AccountDelete.encode(message.accountDelete, writer.uint32(930).fork()).ldelim();
        }
        if (message.vote !== undefined) {
            Vote.encode(message.vote, writer.uint32(938).fork()).ldelim();
        }
        if (message.postApprove !== undefined) {
            PostApprove.encode(message.postApprove, writer.uint32(946).fork()).ldelim();
        }
        if (message.commentApprove !== undefined) {
            CommentApprove.encode(message.commentApprove, writer.uint32(954).fork()).ldelim();
        }
        if (message.nsfwPostUpdate !== undefined) {
            PostNsfwUpdate.encode(message.nsfwPostUpdate, writer.uint32(962).fork()).ldelim();
        }
        if (message.spoilerPostUpdate !== undefined) {
            PostSpoilerUpdate.encode(message.spoilerPostUpdate, writer.uint32(970).fork()).ldelim();
        }
        if (message.automoderatorFilterPost !== undefined) {
            AutomoderatorFilterPost.encode(message.automoderatorFilterPost, writer.uint32(978).fork()).ldelim();
        }
        if (message.automoderatorFilterComment !== undefined) {
            AutomoderatorFilterComment.encode(message.automoderatorFilterComment, writer.uint32(986).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTriggerEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.timestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.subreddit = reader.string();
                    continue;
                case 100:
                    if (tag !== 802) {
                        break;
                    }
                    message.postSubmit = PostSubmit.decode(reader, reader.uint32());
                    continue;
                case 113:
                    if (tag !== 906) {
                        break;
                    }
                    message.postCreate = PostCreate.decode(reader, reader.uint32());
                    continue;
                case 101:
                    if (tag !== 810) {
                        break;
                    }
                    message.postUpdate = PostUpdate.decode(reader, reader.uint32());
                    continue;
                case 102:
                    if (tag !== 818) {
                        break;
                    }
                    message.postReport = PostReport.decode(reader, reader.uint32());
                    continue;
                case 109:
                    if (tag !== 874) {
                        break;
                    }
                    message.postFlairUpdate = PostFlairUpdate.decode(reader, reader.uint32());
                    continue;
                case 111:
                    if (tag !== 890) {
                        break;
                    }
                    message.postDelete = PostDelete.decode(reader, reader.uint32());
                    continue;
                case 103:
                    if (tag !== 826) {
                        break;
                    }
                    message.commentSubmit = CommentSubmit.decode(reader, reader.uint32());
                    continue;
                case 114:
                    if (tag !== 914) {
                        break;
                    }
                    message.commentCreate = CommentCreate.decode(reader, reader.uint32());
                    continue;
                case 104:
                    if (tag !== 834) {
                        break;
                    }
                    message.commentUpdate = CommentUpdate.decode(reader, reader.uint32());
                    continue;
                case 105:
                    if (tag !== 842) {
                        break;
                    }
                    message.commentReport = CommentReport.decode(reader, reader.uint32());
                    continue;
                case 112:
                    if (tag !== 898) {
                        break;
                    }
                    message.commentDelete = CommentDelete.decode(reader, reader.uint32());
                    continue;
                case 106:
                    if (tag !== 850) {
                        break;
                    }
                    message.subredditSubscribe = SubredditSubscribe.decode(reader, reader.uint32());
                    continue;
                case 107:
                    if (tag !== 858) {
                        break;
                    }
                    message.appInstall = AppInstall.decode(reader, reader.uint32());
                    continue;
                case 108:
                    if (tag !== 866) {
                        break;
                    }
                    message.appUpgrade = AppUpgrade.decode(reader, reader.uint32());
                    continue;
                case 110:
                    if (tag !== 882) {
                        break;
                    }
                    message.modAction = ModAction.decode(reader, reader.uint32());
                    continue;
                case 115:
                    if (tag !== 922) {
                        break;
                    }
                    message.modMail = ModMail.decode(reader, reader.uint32());
                    continue;
                case 116:
                    if (tag !== 930) {
                        break;
                    }
                    message.accountDelete = AccountDelete.decode(reader, reader.uint32());
                    continue;
                case 117:
                    if (tag !== 938) {
                        break;
                    }
                    message.vote = Vote.decode(reader, reader.uint32());
                    continue;
                case 118:
                    if (tag !== 946) {
                        break;
                    }
                    message.postApprove = PostApprove.decode(reader, reader.uint32());
                    continue;
                case 119:
                    if (tag !== 954) {
                        break;
                    }
                    message.commentApprove = CommentApprove.decode(reader, reader.uint32());
                    continue;
                case 120:
                    if (tag !== 962) {
                        break;
                    }
                    message.nsfwPostUpdate = PostNsfwUpdate.decode(reader, reader.uint32());
                    continue;
                case 121:
                    if (tag !== 970) {
                        break;
                    }
                    message.spoilerPostUpdate = PostSpoilerUpdate.decode(reader, reader.uint32());
                    continue;
                case 122:
                    if (tag !== 978) {
                        break;
                    }
                    message.automoderatorFilterPost = AutomoderatorFilterPost.decode(reader, reader.uint32());
                    continue;
                case 123:
                    if (tag !== 986) {
                        break;
                    }
                    message.automoderatorFilterComment = AutomoderatorFilterComment.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            timestamp: isSet(object.timestamp) ? fromJsonTimestamp(object.timestamp) : undefined,
            subreddit: isSet(object.subreddit) ? globalThis.String(object.subreddit) : "",
            postSubmit: isSet(object.postSubmit) ? PostSubmit.fromJSON(object.postSubmit) : undefined,
            postCreate: isSet(object.postCreate) ? PostCreate.fromJSON(object.postCreate) : undefined,
            postUpdate: isSet(object.postUpdate) ? PostUpdate.fromJSON(object.postUpdate) : undefined,
            postReport: isSet(object.postReport) ? PostReport.fromJSON(object.postReport) : undefined,
            postFlairUpdate: isSet(object.postFlairUpdate) ? PostFlairUpdate.fromJSON(object.postFlairUpdate) : undefined,
            postDelete: isSet(object.postDelete) ? PostDelete.fromJSON(object.postDelete) : undefined,
            commentSubmit: isSet(object.commentSubmit) ? CommentSubmit.fromJSON(object.commentSubmit) : undefined,
            commentCreate: isSet(object.commentCreate) ? CommentCreate.fromJSON(object.commentCreate) : undefined,
            commentUpdate: isSet(object.commentUpdate) ? CommentUpdate.fromJSON(object.commentUpdate) : undefined,
            commentReport: isSet(object.commentReport) ? CommentReport.fromJSON(object.commentReport) : undefined,
            commentDelete: isSet(object.commentDelete) ? CommentDelete.fromJSON(object.commentDelete) : undefined,
            subredditSubscribe: isSet(object.subredditSubscribe)
                ? SubredditSubscribe.fromJSON(object.subredditSubscribe)
                : undefined,
            appInstall: isSet(object.appInstall) ? AppInstall.fromJSON(object.appInstall) : undefined,
            appUpgrade: isSet(object.appUpgrade) ? AppUpgrade.fromJSON(object.appUpgrade) : undefined,
            modAction: isSet(object.modAction) ? ModAction.fromJSON(object.modAction) : undefined,
            modMail: isSet(object.modMail) ? ModMail.fromJSON(object.modMail) : undefined,
            accountDelete: isSet(object.accountDelete) ? AccountDelete.fromJSON(object.accountDelete) : undefined,
            vote: isSet(object.vote) ? Vote.fromJSON(object.vote) : undefined,
            postApprove: isSet(object.postApprove) ? PostApprove.fromJSON(object.postApprove) : undefined,
            commentApprove: isSet(object.commentApprove) ? CommentApprove.fromJSON(object.commentApprove) : undefined,
            nsfwPostUpdate: isSet(object.nsfwPostUpdate) ? PostNsfwUpdate.fromJSON(object.nsfwPostUpdate) : undefined,
            spoilerPostUpdate: isSet(object.spoilerPostUpdate)
                ? PostSpoilerUpdate.fromJSON(object.spoilerPostUpdate)
                : undefined,
            automoderatorFilterPost: isSet(object.automoderatorFilterPost)
                ? AutomoderatorFilterPost.fromJSON(object.automoderatorFilterPost)
                : undefined,
            automoderatorFilterComment: isSet(object.automoderatorFilterComment)
                ? AutomoderatorFilterComment.fromJSON(object.automoderatorFilterComment)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.timestamp !== undefined) {
            obj.timestamp = message.timestamp.toISOString();
        }
        if (message.subreddit !== "") {
            obj.subreddit = message.subreddit;
        }
        if (message.postSubmit !== undefined) {
            obj.postSubmit = PostSubmit.toJSON(message.postSubmit);
        }
        if (message.postCreate !== undefined) {
            obj.postCreate = PostCreate.toJSON(message.postCreate);
        }
        if (message.postUpdate !== undefined) {
            obj.postUpdate = PostUpdate.toJSON(message.postUpdate);
        }
        if (message.postReport !== undefined) {
            obj.postReport = PostReport.toJSON(message.postReport);
        }
        if (message.postFlairUpdate !== undefined) {
            obj.postFlairUpdate = PostFlairUpdate.toJSON(message.postFlairUpdate);
        }
        if (message.postDelete !== undefined) {
            obj.postDelete = PostDelete.toJSON(message.postDelete);
        }
        if (message.commentSubmit !== undefined) {
            obj.commentSubmit = CommentSubmit.toJSON(message.commentSubmit);
        }
        if (message.commentCreate !== undefined) {
            obj.commentCreate = CommentCreate.toJSON(message.commentCreate);
        }
        if (message.commentUpdate !== undefined) {
            obj.commentUpdate = CommentUpdate.toJSON(message.commentUpdate);
        }
        if (message.commentReport !== undefined) {
            obj.commentReport = CommentReport.toJSON(message.commentReport);
        }
        if (message.commentDelete !== undefined) {
            obj.commentDelete = CommentDelete.toJSON(message.commentDelete);
        }
        if (message.subredditSubscribe !== undefined) {
            obj.subredditSubscribe = SubredditSubscribe.toJSON(message.subredditSubscribe);
        }
        if (message.appInstall !== undefined) {
            obj.appInstall = AppInstall.toJSON(message.appInstall);
        }
        if (message.appUpgrade !== undefined) {
            obj.appUpgrade = AppUpgrade.toJSON(message.appUpgrade);
        }
        if (message.modAction !== undefined) {
            obj.modAction = ModAction.toJSON(message.modAction);
        }
        if (message.modMail !== undefined) {
            obj.modMail = ModMail.toJSON(message.modMail);
        }
        if (message.accountDelete !== undefined) {
            obj.accountDelete = AccountDelete.toJSON(message.accountDelete);
        }
        if (message.vote !== undefined) {
            obj.vote = Vote.toJSON(message.vote);
        }
        if (message.postApprove !== undefined) {
            obj.postApprove = PostApprove.toJSON(message.postApprove);
        }
        if (message.commentApprove !== undefined) {
            obj.commentApprove = CommentApprove.toJSON(message.commentApprove);
        }
        if (message.nsfwPostUpdate !== undefined) {
            obj.nsfwPostUpdate = PostNsfwUpdate.toJSON(message.nsfwPostUpdate);
        }
        if (message.spoilerPostUpdate !== undefined) {
            obj.spoilerPostUpdate = PostSpoilerUpdate.toJSON(message.spoilerPostUpdate);
        }
        if (message.automoderatorFilterPost !== undefined) {
            obj.automoderatorFilterPost = AutomoderatorFilterPost.toJSON(message.automoderatorFilterPost);
        }
        if (message.automoderatorFilterComment !== undefined) {
            obj.automoderatorFilterComment = AutomoderatorFilterComment.toJSON(message.automoderatorFilterComment);
        }
        return obj;
    },
    create(base) {
        return TriggerEvent.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseTriggerEvent();
        message.id = object.id ?? "";
        message.timestamp = object.timestamp ?? undefined;
        message.subreddit = object.subreddit ?? "";
        message.postSubmit = (object.postSubmit !== undefined && object.postSubmit !== null)
            ? PostSubmit.fromPartial(object.postSubmit)
            : undefined;
        message.postCreate = (object.postCreate !== undefined && object.postCreate !== null)
            ? PostCreate.fromPartial(object.postCreate)
            : undefined;
        message.postUpdate = (object.postUpdate !== undefined && object.postUpdate !== null)
            ? PostUpdate.fromPartial(object.postUpdate)
            : undefined;
        message.postReport = (object.postReport !== undefined && object.postReport !== null)
            ? PostReport.fromPartial(object.postReport)
            : undefined;
        message.postFlairUpdate = (object.postFlairUpdate !== undefined && object.postFlairUpdate !== null)
            ? PostFlairUpdate.fromPartial(object.postFlairUpdate)
            : undefined;
        message.postDelete = (object.postDelete !== undefined && object.postDelete !== null)
            ? PostDelete.fromPartial(object.postDelete)
            : undefined;
        message.commentSubmit = (object.commentSubmit !== undefined && object.commentSubmit !== null)
            ? CommentSubmit.fromPartial(object.commentSubmit)
            : undefined;
        message.commentCreate = (object.commentCreate !== undefined && object.commentCreate !== null)
            ? CommentCreate.fromPartial(object.commentCreate)
            : undefined;
        message.commentUpdate = (object.commentUpdate !== undefined && object.commentUpdate !== null)
            ? CommentUpdate.fromPartial(object.commentUpdate)
            : undefined;
        message.commentReport = (object.commentReport !== undefined && object.commentReport !== null)
            ? CommentReport.fromPartial(object.commentReport)
            : undefined;
        message.commentDelete = (object.commentDelete !== undefined && object.commentDelete !== null)
            ? CommentDelete.fromPartial(object.commentDelete)
            : undefined;
        message.subredditSubscribe = (object.subredditSubscribe !== undefined && object.subredditSubscribe !== null)
            ? SubredditSubscribe.fromPartial(object.subredditSubscribe)
            : undefined;
        message.appInstall = (object.appInstall !== undefined && object.appInstall !== null)
            ? AppInstall.fromPartial(object.appInstall)
            : undefined;
        message.appUpgrade = (object.appUpgrade !== undefined && object.appUpgrade !== null)
            ? AppUpgrade.fromPartial(object.appUpgrade)
            : undefined;
        message.modAction = (object.modAction !== undefined && object.modAction !== null)
            ? ModAction.fromPartial(object.modAction)
            : undefined;
        message.modMail = (object.modMail !== undefined && object.modMail !== null)
            ? ModMail.fromPartial(object.modMail)
            : undefined;
        message.accountDelete = (object.accountDelete !== undefined && object.accountDelete !== null)
            ? AccountDelete.fromPartial(object.accountDelete)
            : undefined;
        message.vote = (object.vote !== undefined && object.vote !== null) ? Vote.fromPartial(object.vote) : undefined;
        message.postApprove = (object.postApprove !== undefined && object.postApprove !== null)
            ? PostApprove.fromPartial(object.postApprove)
            : undefined;
        message.commentApprove = (object.commentApprove !== undefined && object.commentApprove !== null)
            ? CommentApprove.fromPartial(object.commentApprove)
            : undefined;
        message.nsfwPostUpdate = (object.nsfwPostUpdate !== undefined && object.nsfwPostUpdate !== null)
            ? PostNsfwUpdate.fromPartial(object.nsfwPostUpdate)
            : undefined;
        message.spoilerPostUpdate = (object.spoilerPostUpdate !== undefined && object.spoilerPostUpdate !== null)
            ? PostSpoilerUpdate.fromPartial(object.spoilerPostUpdate)
            : undefined;
        message.automoderatorFilterPost =
            (object.automoderatorFilterPost !== undefined && object.automoderatorFilterPost !== null)
                ? AutomoderatorFilterPost.fromPartial(object.automoderatorFilterPost)
                : undefined;
        message.automoderatorFilterComment =
            (object.automoderatorFilterComment !== undefined && object.automoderatorFilterComment !== null)
                ? AutomoderatorFilterComment.fromPartial(object.automoderatorFilterComment)
                : undefined;
        return message;
    },
};
messageTypeRegistry.set(TriggerEvent.$type, TriggerEvent);
function toTimestamp(date) {
    const seconds = Math.trunc(date.getTime() / 1000);
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (t.seconds || 0) * 1000;
    millis += (t.nanos || 0) / 1000000;
    return new globalThis.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof globalThis.Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new globalThis.Date(o);
    }
    else {
        return fromTimestamp(Timestamp.fromJSON(o));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
