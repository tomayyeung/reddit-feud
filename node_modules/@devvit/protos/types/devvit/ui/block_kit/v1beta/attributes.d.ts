/**
 * #attributes.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { BlockActionType, BlockBorderWidth, BlockHorizontalAlignment, BlockSizeUnit, BlockVerticalAlignment } from "./enums.js";
export interface BlockAlignment {
    vertical?: BlockVerticalAlignment | undefined;
    horizontal?: BlockHorizontalAlignment | undefined;
}
export interface BlockBorder {
    /**
     * @deprecated use colors instead
     *
     * @deprecated
     */
    color?: string | undefined;
    width?: BlockBorderWidth | undefined;
    colors?: BlockColor | undefined;
}
export interface BlockSizes {
    grow?: boolean | undefined;
    width?: BlockSizes_Dimension | undefined;
    height?: BlockSizes_Dimension | undefined;
}
export interface BlockSizes_Dimension {
    value?: BlockSizes_Dimension_Value | undefined;
    min?: BlockSizes_Dimension_Value | undefined;
    max?: BlockSizes_Dimension_Value | undefined;
}
export interface BlockSizes_Dimension_Value {
    value: number;
    unit: BlockSizeUnit;
}
/** @deprecated Use BlockSizing */
export interface BlockSize {
    /** Grow this element to fill any free space in the container */
    grow?: boolean | undefined;
    /** Width */
    width?: number | undefined;
    /** Unit of the width value */
    widthUnit?: BlockSizeUnit | undefined;
    /** Height */
    height?: number | undefined;
    /** Unit of the height value */
    heightUnit?: BlockSizeUnit | undefined;
}
export interface BlockAction {
    type: BlockActionType;
    id: string;
    data?: {
        [key: string]: any;
    } | undefined;
}
export interface BlockColor {
    light?: string | undefined;
    dark?: string | undefined;
}
export declare const BlockAlignment: {
    $type: "devvit.ui.block_kit.v1beta.BlockAlignment";
    encode(message: BlockAlignment, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BlockAlignment;
    fromJSON(object: any): BlockAlignment;
    toJSON(message: BlockAlignment): unknown;
    create(base?: DeepPartial<BlockAlignment>): BlockAlignment;
    fromPartial(object: DeepPartial<BlockAlignment>): BlockAlignment;
};
export declare const BlockBorder: {
    $type: "devvit.ui.block_kit.v1beta.BlockBorder";
    encode(message: BlockBorder, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BlockBorder;
    fromJSON(object: any): BlockBorder;
    toJSON(message: BlockBorder): unknown;
    create(base?: DeepPartial<BlockBorder>): BlockBorder;
    fromPartial(object: DeepPartial<BlockBorder>): BlockBorder;
};
export declare const BlockSizes: {
    $type: "devvit.ui.block_kit.v1beta.BlockSizes";
    encode(message: BlockSizes, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BlockSizes;
    fromJSON(object: any): BlockSizes;
    toJSON(message: BlockSizes): unknown;
    create(base?: DeepPartial<BlockSizes>): BlockSizes;
    fromPartial(object: DeepPartial<BlockSizes>): BlockSizes;
};
export declare const BlockSizes_Dimension: {
    $type: "devvit.ui.block_kit.v1beta.BlockSizes.Dimension";
    encode(message: BlockSizes_Dimension, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BlockSizes_Dimension;
    fromJSON(object: any): BlockSizes_Dimension;
    toJSON(message: BlockSizes_Dimension): unknown;
    create(base?: DeepPartial<BlockSizes_Dimension>): BlockSizes_Dimension;
    fromPartial(object: DeepPartial<BlockSizes_Dimension>): BlockSizes_Dimension;
};
export declare const BlockSizes_Dimension_Value: {
    $type: "devvit.ui.block_kit.v1beta.BlockSizes.Dimension.Value";
    encode(message: BlockSizes_Dimension_Value, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BlockSizes_Dimension_Value;
    fromJSON(object: any): BlockSizes_Dimension_Value;
    toJSON(message: BlockSizes_Dimension_Value): unknown;
    create(base?: DeepPartial<BlockSizes_Dimension_Value>): BlockSizes_Dimension_Value;
    fromPartial(object: DeepPartial<BlockSizes_Dimension_Value>): BlockSizes_Dimension_Value;
};
export declare const BlockSize: {
    $type: "devvit.ui.block_kit.v1beta.BlockSize";
    encode(message: BlockSize, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BlockSize;
    fromJSON(object: any): BlockSize;
    toJSON(message: BlockSize): unknown;
    create(base?: DeepPartial<BlockSize>): BlockSize;
    fromPartial(object: DeepPartial<BlockSize>): BlockSize;
};
export declare const BlockAction: {
    $type: "devvit.ui.block_kit.v1beta.BlockAction";
    encode(message: BlockAction, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BlockAction;
    fromJSON(object: any): BlockAction;
    toJSON(message: BlockAction): unknown;
    create(base?: DeepPartial<BlockAction>): BlockAction;
    fromPartial(object: DeepPartial<BlockAction>): BlockAction;
};
export declare const BlockColor: {
    $type: "devvit.ui.block_kit.v1beta.BlockColor";
    encode(message: BlockColor, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BlockColor;
    fromJSON(object: any): BlockColor;
    toJSON(message: BlockColor): unknown;
    create(base?: DeepPartial<BlockColor>): BlockColor;
    fromPartial(object: DeepPartial<BlockColor>): BlockColor;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=attributes.d.ts.map