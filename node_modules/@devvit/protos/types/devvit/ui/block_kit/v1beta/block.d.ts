/**
 * #block.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { BlockAction, BlockAlignment, BlockBorder, BlockColor, BlockSize, BlockSizes } from "./attributes.js";
import { BlockAnimationDirection, BlockAnimationLoopMode, BlockAnimationType, BlockAvatarBackground, BlockAvatarFacing, BlockAvatarSize, BlockButtonAppearance, BlockButtonSize, BlockFullSnooSize, BlockGap, BlockIconSize, BlockImageResizeMode, BlockPadding, BlockRadius, BlockSpacerShape, BlockSpacerSize, BlockStackDirection, BlockTextOutline, BlockTextOverflow, BlockTextSize, BlockTextStyle, BlockTextWeight, BlockType } from "./enums.js";
export interface Block {
    type: BlockType;
    /**
     * @deprecated Use sizes instead
     * Common attributes
     *
     * @deprecated
     */
    size?: BlockSize | undefined;
    /** Size constraints */
    sizes?: BlockSizes | undefined;
    /** Block-specific config */
    config?: BlockConfig | undefined;
    /** List of possible actions */
    actions: BlockAction[];
    /**
     * Unique identifier for the block, if we have one.  This is designed to
     * facilitate component re-use.
     *
     * If this is not set, the block is considered to be a new instance of a
     * component, or the client may use heuristics to determine if the component
     * appears similar enough to reuse.
     */
    id?: string | undefined;
    /**
     * Key for the block, if we have one.  This is designed to handle
     * component re-ordering within a list or parent.
     *
     * Keys are not required to be unique, but they should be stable across
     * re-orderings of the same list or parent.
     */
    key?: string | undefined;
}
export interface BlockConfig {
    rootConfig?: BlockConfig_Root | undefined;
    stackConfig?: BlockConfig_Stack | undefined;
    textConfig?: BlockConfig_Text | undefined;
    buttonConfig?: BlockConfig_Button | undefined;
    imageConfig?: BlockConfig_Image | undefined;
    spacerConfig?: BlockConfig_Spacer | undefined;
    iconConfig?: BlockConfig_Icon | undefined;
    avatarConfig?: BlockConfig_Avatar | undefined;
    fullsnooConfig?: BlockConfig_FullSnoo | undefined;
    animationConfig?: BlockConfig_Animation | undefined;
    webviewConfig?: BlockConfig_WebView | undefined;
}
export interface BlockConfig_Root {
    children: Block[];
    /** Height of the UI */
    height: number;
}
export interface BlockConfig_Stack {
    /** How blocks should be laid out in this stack */
    direction: BlockStackDirection;
    /** Blocks to layout in the stack */
    children: Block[];
    /** Stack the child blocks in reverse order */
    reverse?: boolean | undefined;
    /** Horizontal and vertical alignment of elements within the stack */
    alignment?: BlockAlignment | undefined;
    /** Distance between child elements and the container border */
    padding?: BlockPadding | undefined;
    /** Distance between child elements */
    gap?: BlockGap | undefined;
    /** Display a border around the stack */
    border?: BlockBorder | undefined;
    /** Round the corners of the stack */
    cornerRadius?: BlockRadius | undefined;
    /**
     * Set a custom background color for the stack
     * @deprecated Use background_colors instead
     *
     * @deprecated
     */
    backgroundColor?: string | undefined;
    /** Set a custom background color for the stack */
    backgroundColors?: BlockColor | undefined;
}
export interface BlockConfig_Text {
    text: string;
    size?: BlockTextSize | undefined;
    weight?: BlockTextWeight | undefined;
    /**
     * @deprecated use colors instead
     *
     * @deprecated
     */
    color?: string | undefined;
    alignment?: BlockAlignment | undefined;
    outline?: BlockTextOutline | undefined;
    style?: BlockTextStyle | undefined;
    selectable?: boolean | undefined;
    colors?: BlockColor | undefined;
    wrap?: boolean | undefined;
    overflow?: BlockTextOverflow | undefined;
}
export interface BlockConfig_Button {
    text?: string | undefined;
    icon?: string | undefined;
    buttonSize?: BlockButtonSize | undefined;
    buttonAppearance?: BlockButtonAppearance | undefined;
    /**
     * @deprecated use text_colors instead
     *
     * @deprecated
     */
    textColor?: string | undefined;
    /**
     * @deprecated use background_colors instead
     *
     * @deprecated
     */
    backgroundColor?: string | undefined;
    disabled?: boolean | undefined;
    textColors?: BlockColor | undefined;
    backgroundColors?: BlockColor | undefined;
}
export interface BlockConfig_Image {
    /** URL to the image */
    url: string;
    /** Target width, in pixels */
    width: number;
    /** Target height, in pixels */
    height: number;
    /** Description for accessibility */
    description?: string | undefined;
    /** How to resize the image if the target resolution can't be achieved */
    resizeMode?: BlockImageResizeMode | undefined;
}
export interface BlockConfig_Spacer {
    size?: BlockSpacerSize | undefined;
    shape?: BlockSpacerShape | undefined;
}
export interface BlockConfig_Icon {
    icon: string;
    /**
     * @deprecated use colors instead
     *
     * @deprecated
     */
    color?: string | undefined;
    size?: BlockIconSize | undefined;
    colors?: BlockColor | undefined;
}
export interface BlockConfig_Avatar {
    thingId: string;
    facing?: BlockAvatarFacing | undefined;
    size?: BlockAvatarSize | undefined;
    background?: BlockAvatarBackground | undefined;
}
/** @deprecated */
export interface BlockConfig_FullSnoo {
    userId: string;
    facing?: BlockAvatarFacing | undefined;
    size?: BlockFullSnooSize | undefined;
}
export interface BlockConfig_Animation {
    /** URL to the animation */
    url: string;
    /** Target width, in pixels */
    width: number;
    /** Target height, in pixels */
    height: number;
    /** Type of player needed */
    type: BlockAnimationType;
    /** Set loop mode. Defaults to true. */
    loop?: boolean | undefined;
    /** How looping should occur */
    loopMode?: BlockAnimationLoopMode | undefined;
    /** Autoplay the animation as soon as it's loaded */
    autoplay?: boolean | undefined;
    /** Playback speed multiplier, when supported by type */
    speed?: number | undefined;
    /** Play the animation forward or backward, when supported by type */
    direction?: BlockAnimationDirection | undefined;
}
export interface BlockConfig_WebView {
    /** URL to load in the webview */
    url: string;
    /** State to pass in to the webview */
    state?: {
        [key: string]: any;
    } | undefined;
}
export declare const Block: {
    $type: "devvit.ui.block_kit.v1beta.Block";
    encode(message: Block, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Block;
    fromJSON(object: any): Block;
    toJSON(message: Block): unknown;
    create(base?: DeepPartial<Block>): Block;
    fromPartial(object: DeepPartial<Block>): Block;
};
export declare const BlockConfig: {
    $type: "devvit.ui.block_kit.v1beta.BlockConfig";
    encode(message: BlockConfig, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BlockConfig;
    fromJSON(object: any): BlockConfig;
    toJSON(message: BlockConfig): unknown;
    create(base?: DeepPartial<BlockConfig>): BlockConfig;
    fromPartial(object: DeepPartial<BlockConfig>): BlockConfig;
};
export declare const BlockConfig_Root: {
    $type: "devvit.ui.block_kit.v1beta.BlockConfig.Root";
    encode(message: BlockConfig_Root, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BlockConfig_Root;
    fromJSON(object: any): BlockConfig_Root;
    toJSON(message: BlockConfig_Root): unknown;
    create(base?: DeepPartial<BlockConfig_Root>): BlockConfig_Root;
    fromPartial(object: DeepPartial<BlockConfig_Root>): BlockConfig_Root;
};
export declare const BlockConfig_Stack: {
    $type: "devvit.ui.block_kit.v1beta.BlockConfig.Stack";
    encode(message: BlockConfig_Stack, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BlockConfig_Stack;
    fromJSON(object: any): BlockConfig_Stack;
    toJSON(message: BlockConfig_Stack): unknown;
    create(base?: DeepPartial<BlockConfig_Stack>): BlockConfig_Stack;
    fromPartial(object: DeepPartial<BlockConfig_Stack>): BlockConfig_Stack;
};
export declare const BlockConfig_Text: {
    $type: "devvit.ui.block_kit.v1beta.BlockConfig.Text";
    encode(message: BlockConfig_Text, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BlockConfig_Text;
    fromJSON(object: any): BlockConfig_Text;
    toJSON(message: BlockConfig_Text): unknown;
    create(base?: DeepPartial<BlockConfig_Text>): BlockConfig_Text;
    fromPartial(object: DeepPartial<BlockConfig_Text>): BlockConfig_Text;
};
export declare const BlockConfig_Button: {
    $type: "devvit.ui.block_kit.v1beta.BlockConfig.Button";
    encode(message: BlockConfig_Button, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BlockConfig_Button;
    fromJSON(object: any): BlockConfig_Button;
    toJSON(message: BlockConfig_Button): unknown;
    create(base?: DeepPartial<BlockConfig_Button>): BlockConfig_Button;
    fromPartial(object: DeepPartial<BlockConfig_Button>): BlockConfig_Button;
};
export declare const BlockConfig_Image: {
    $type: "devvit.ui.block_kit.v1beta.BlockConfig.Image";
    encode(message: BlockConfig_Image, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BlockConfig_Image;
    fromJSON(object: any): BlockConfig_Image;
    toJSON(message: BlockConfig_Image): unknown;
    create(base?: DeepPartial<BlockConfig_Image>): BlockConfig_Image;
    fromPartial(object: DeepPartial<BlockConfig_Image>): BlockConfig_Image;
};
export declare const BlockConfig_Spacer: {
    $type: "devvit.ui.block_kit.v1beta.BlockConfig.Spacer";
    encode(message: BlockConfig_Spacer, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BlockConfig_Spacer;
    fromJSON(object: any): BlockConfig_Spacer;
    toJSON(message: BlockConfig_Spacer): unknown;
    create(base?: DeepPartial<BlockConfig_Spacer>): BlockConfig_Spacer;
    fromPartial(object: DeepPartial<BlockConfig_Spacer>): BlockConfig_Spacer;
};
export declare const BlockConfig_Icon: {
    $type: "devvit.ui.block_kit.v1beta.BlockConfig.Icon";
    encode(message: BlockConfig_Icon, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BlockConfig_Icon;
    fromJSON(object: any): BlockConfig_Icon;
    toJSON(message: BlockConfig_Icon): unknown;
    create(base?: DeepPartial<BlockConfig_Icon>): BlockConfig_Icon;
    fromPartial(object: DeepPartial<BlockConfig_Icon>): BlockConfig_Icon;
};
export declare const BlockConfig_Avatar: {
    $type: "devvit.ui.block_kit.v1beta.BlockConfig.Avatar";
    encode(message: BlockConfig_Avatar, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BlockConfig_Avatar;
    fromJSON(object: any): BlockConfig_Avatar;
    toJSON(message: BlockConfig_Avatar): unknown;
    create(base?: DeepPartial<BlockConfig_Avatar>): BlockConfig_Avatar;
    fromPartial(object: DeepPartial<BlockConfig_Avatar>): BlockConfig_Avatar;
};
export declare const BlockConfig_FullSnoo: {
    $type: "devvit.ui.block_kit.v1beta.BlockConfig.FullSnoo";
    encode(message: BlockConfig_FullSnoo, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BlockConfig_FullSnoo;
    fromJSON(object: any): BlockConfig_FullSnoo;
    toJSON(message: BlockConfig_FullSnoo): unknown;
    create(base?: DeepPartial<BlockConfig_FullSnoo>): BlockConfig_FullSnoo;
    fromPartial(object: DeepPartial<BlockConfig_FullSnoo>): BlockConfig_FullSnoo;
};
export declare const BlockConfig_Animation: {
    $type: "devvit.ui.block_kit.v1beta.BlockConfig.Animation";
    encode(message: BlockConfig_Animation, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BlockConfig_Animation;
    fromJSON(object: any): BlockConfig_Animation;
    toJSON(message: BlockConfig_Animation): unknown;
    create(base?: DeepPartial<BlockConfig_Animation>): BlockConfig_Animation;
    fromPartial(object: DeepPartial<BlockConfig_Animation>): BlockConfig_Animation;
};
export declare const BlockConfig_WebView: {
    $type: "devvit.ui.block_kit.v1beta.BlockConfig.WebView";
    encode(message: BlockConfig_WebView, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BlockConfig_WebView;
    fromJSON(object: any): BlockConfig_WebView;
    toJSON(message: BlockConfig_WebView): unknown;
    create(base?: DeepPartial<BlockConfig_WebView>): BlockConfig_WebView;
    fromPartial(object: DeepPartial<BlockConfig_WebView>): BlockConfig_WebView;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=block.d.ts.map