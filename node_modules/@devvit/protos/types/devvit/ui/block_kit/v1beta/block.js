/**
 * #block.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { Struct } from "../../../../google/protobuf/struct.js";
import { messageTypeRegistry } from "../../../../typeRegistry.js";
import { BlockAction, BlockAlignment, BlockBorder, BlockColor, BlockSize, BlockSizes } from "./attributes.js";
import { blockAnimationDirectionFromJSON, blockAnimationDirectionToJSON, blockAnimationLoopModeFromJSON, blockAnimationLoopModeToJSON, blockAnimationTypeFromJSON, blockAnimationTypeToJSON, blockAvatarBackgroundFromJSON, blockAvatarBackgroundToJSON, blockAvatarFacingFromJSON, blockAvatarFacingToJSON, blockAvatarSizeFromJSON, blockAvatarSizeToJSON, blockButtonAppearanceFromJSON, blockButtonAppearanceToJSON, blockButtonSizeFromJSON, blockButtonSizeToJSON, blockFullSnooSizeFromJSON, blockFullSnooSizeToJSON, blockGapFromJSON, blockGapToJSON, blockIconSizeFromJSON, blockIconSizeToJSON, blockImageResizeModeFromJSON, blockImageResizeModeToJSON, blockPaddingFromJSON, blockPaddingToJSON, blockRadiusFromJSON, blockRadiusToJSON, blockSpacerShapeFromJSON, blockSpacerShapeToJSON, blockSpacerSizeFromJSON, blockSpacerSizeToJSON, blockStackDirectionFromJSON, blockStackDirectionToJSON, blockTextOutlineFromJSON, blockTextOutlineToJSON, blockTextOverflowFromJSON, blockTextOverflowToJSON, blockTextSizeFromJSON, blockTextSizeToJSON, blockTextStyleFromJSON, blockTextStyleToJSON, blockTextWeightFromJSON, blockTextWeightToJSON, blockTypeFromJSON, blockTypeToJSON, } from "./enums.js";
function createBaseBlock() {
    return { type: 0, size: undefined, sizes: undefined, config: undefined, actions: [], id: undefined, key: undefined };
}
export const Block = {
    $type: "devvit.ui.block_kit.v1beta.Block",
    encode(message, writer = _m0.Writer.create()) {
        if (message.type !== 0) {
            writer.uint32(8).int32(message.type);
        }
        if (message.size !== undefined) {
            BlockSize.encode(message.size, writer.uint32(18).fork()).ldelim();
        }
        if (message.sizes !== undefined) {
            BlockSizes.encode(message.sizes, writer.uint32(42).fork()).ldelim();
        }
        if (message.config !== undefined) {
            BlockConfig.encode(message.config, writer.uint32(26).fork()).ldelim();
        }
        for (const v of message.actions) {
            BlockAction.encode(v, writer.uint32(34).fork()).ldelim();
        }
        if (message.id !== undefined) {
            writer.uint32(50).string(message.id);
        }
        if (message.key !== undefined) {
            writer.uint32(58).string(message.key);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBlock();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.type = reader.int32();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.size = BlockSize.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.sizes = BlockSizes.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.config = BlockConfig.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.actions.push(BlockAction.decode(reader, reader.uint32()));
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            type: isSet(object.type) ? blockTypeFromJSON(object.type) : 0,
            size: isSet(object.size) ? BlockSize.fromJSON(object.size) : undefined,
            sizes: isSet(object.sizes) ? BlockSizes.fromJSON(object.sizes) : undefined,
            config: isSet(object.config) ? BlockConfig.fromJSON(object.config) : undefined,
            actions: globalThis.Array.isArray(object?.actions) ? object.actions.map((e) => BlockAction.fromJSON(e)) : [],
            id: isSet(object.id) ? globalThis.String(object.id) : undefined,
            key: isSet(object.key) ? globalThis.String(object.key) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.type !== 0) {
            obj.type = blockTypeToJSON(message.type);
        }
        if (message.size !== undefined) {
            obj.size = BlockSize.toJSON(message.size);
        }
        if (message.sizes !== undefined) {
            obj.sizes = BlockSizes.toJSON(message.sizes);
        }
        if (message.config !== undefined) {
            obj.config = BlockConfig.toJSON(message.config);
        }
        if (message.actions?.length) {
            obj.actions = message.actions.map((e) => BlockAction.toJSON(e));
        }
        if (message.id !== undefined) {
            obj.id = message.id;
        }
        if (message.key !== undefined) {
            obj.key = message.key;
        }
        return obj;
    },
    create(base) {
        return Block.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBlock();
        message.type = object.type ?? 0;
        message.size = (object.size !== undefined && object.size !== null) ? BlockSize.fromPartial(object.size) : undefined;
        message.sizes = (object.sizes !== undefined && object.sizes !== null)
            ? BlockSizes.fromPartial(object.sizes)
            : undefined;
        message.config = (object.config !== undefined && object.config !== null)
            ? BlockConfig.fromPartial(object.config)
            : undefined;
        message.actions = object.actions?.map((e) => BlockAction.fromPartial(e)) || [];
        message.id = object.id ?? undefined;
        message.key = object.key ?? undefined;
        return message;
    },
};
messageTypeRegistry.set(Block.$type, Block);
function createBaseBlockConfig() {
    return {
        rootConfig: undefined,
        stackConfig: undefined,
        textConfig: undefined,
        buttonConfig: undefined,
        imageConfig: undefined,
        spacerConfig: undefined,
        iconConfig: undefined,
        avatarConfig: undefined,
        fullsnooConfig: undefined,
        animationConfig: undefined,
        webviewConfig: undefined,
    };
}
export const BlockConfig = {
    $type: "devvit.ui.block_kit.v1beta.BlockConfig",
    encode(message, writer = _m0.Writer.create()) {
        if (message.rootConfig !== undefined) {
            BlockConfig_Root.encode(message.rootConfig, writer.uint32(10).fork()).ldelim();
        }
        if (message.stackConfig !== undefined) {
            BlockConfig_Stack.encode(message.stackConfig, writer.uint32(18).fork()).ldelim();
        }
        if (message.textConfig !== undefined) {
            BlockConfig_Text.encode(message.textConfig, writer.uint32(26).fork()).ldelim();
        }
        if (message.buttonConfig !== undefined) {
            BlockConfig_Button.encode(message.buttonConfig, writer.uint32(34).fork()).ldelim();
        }
        if (message.imageConfig !== undefined) {
            BlockConfig_Image.encode(message.imageConfig, writer.uint32(42).fork()).ldelim();
        }
        if (message.spacerConfig !== undefined) {
            BlockConfig_Spacer.encode(message.spacerConfig, writer.uint32(50).fork()).ldelim();
        }
        if (message.iconConfig !== undefined) {
            BlockConfig_Icon.encode(message.iconConfig, writer.uint32(58).fork()).ldelim();
        }
        if (message.avatarConfig !== undefined) {
            BlockConfig_Avatar.encode(message.avatarConfig, writer.uint32(66).fork()).ldelim();
        }
        if (message.fullsnooConfig !== undefined) {
            BlockConfig_FullSnoo.encode(message.fullsnooConfig, writer.uint32(74).fork()).ldelim();
        }
        if (message.animationConfig !== undefined) {
            BlockConfig_Animation.encode(message.animationConfig, writer.uint32(82).fork()).ldelim();
        }
        if (message.webviewConfig !== undefined) {
            BlockConfig_WebView.encode(message.webviewConfig, writer.uint32(802).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBlockConfig();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.rootConfig = BlockConfig_Root.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.stackConfig = BlockConfig_Stack.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.textConfig = BlockConfig_Text.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.buttonConfig = BlockConfig_Button.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.imageConfig = BlockConfig_Image.decode(reader, reader.uint32());
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.spacerConfig = BlockConfig_Spacer.decode(reader, reader.uint32());
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.iconConfig = BlockConfig_Icon.decode(reader, reader.uint32());
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.avatarConfig = BlockConfig_Avatar.decode(reader, reader.uint32());
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.fullsnooConfig = BlockConfig_FullSnoo.decode(reader, reader.uint32());
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.animationConfig = BlockConfig_Animation.decode(reader, reader.uint32());
                    continue;
                case 100:
                    if (tag !== 802) {
                        break;
                    }
                    message.webviewConfig = BlockConfig_WebView.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            rootConfig: isSet(object.rootConfig) ? BlockConfig_Root.fromJSON(object.rootConfig) : undefined,
            stackConfig: isSet(object.stackConfig) ? BlockConfig_Stack.fromJSON(object.stackConfig) : undefined,
            textConfig: isSet(object.textConfig) ? BlockConfig_Text.fromJSON(object.textConfig) : undefined,
            buttonConfig: isSet(object.buttonConfig) ? BlockConfig_Button.fromJSON(object.buttonConfig) : undefined,
            imageConfig: isSet(object.imageConfig) ? BlockConfig_Image.fromJSON(object.imageConfig) : undefined,
            spacerConfig: isSet(object.spacerConfig) ? BlockConfig_Spacer.fromJSON(object.spacerConfig) : undefined,
            iconConfig: isSet(object.iconConfig) ? BlockConfig_Icon.fromJSON(object.iconConfig) : undefined,
            avatarConfig: isSet(object.avatarConfig) ? BlockConfig_Avatar.fromJSON(object.avatarConfig) : undefined,
            fullsnooConfig: isSet(object.fullsnooConfig) ? BlockConfig_FullSnoo.fromJSON(object.fullsnooConfig) : undefined,
            animationConfig: isSet(object.animationConfig)
                ? BlockConfig_Animation.fromJSON(object.animationConfig)
                : undefined,
            webviewConfig: isSet(object.webviewConfig) ? BlockConfig_WebView.fromJSON(object.webviewConfig) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.rootConfig !== undefined) {
            obj.rootConfig = BlockConfig_Root.toJSON(message.rootConfig);
        }
        if (message.stackConfig !== undefined) {
            obj.stackConfig = BlockConfig_Stack.toJSON(message.stackConfig);
        }
        if (message.textConfig !== undefined) {
            obj.textConfig = BlockConfig_Text.toJSON(message.textConfig);
        }
        if (message.buttonConfig !== undefined) {
            obj.buttonConfig = BlockConfig_Button.toJSON(message.buttonConfig);
        }
        if (message.imageConfig !== undefined) {
            obj.imageConfig = BlockConfig_Image.toJSON(message.imageConfig);
        }
        if (message.spacerConfig !== undefined) {
            obj.spacerConfig = BlockConfig_Spacer.toJSON(message.spacerConfig);
        }
        if (message.iconConfig !== undefined) {
            obj.iconConfig = BlockConfig_Icon.toJSON(message.iconConfig);
        }
        if (message.avatarConfig !== undefined) {
            obj.avatarConfig = BlockConfig_Avatar.toJSON(message.avatarConfig);
        }
        if (message.fullsnooConfig !== undefined) {
            obj.fullsnooConfig = BlockConfig_FullSnoo.toJSON(message.fullsnooConfig);
        }
        if (message.animationConfig !== undefined) {
            obj.animationConfig = BlockConfig_Animation.toJSON(message.animationConfig);
        }
        if (message.webviewConfig !== undefined) {
            obj.webviewConfig = BlockConfig_WebView.toJSON(message.webviewConfig);
        }
        return obj;
    },
    create(base) {
        return BlockConfig.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBlockConfig();
        message.rootConfig = (object.rootConfig !== undefined && object.rootConfig !== null)
            ? BlockConfig_Root.fromPartial(object.rootConfig)
            : undefined;
        message.stackConfig = (object.stackConfig !== undefined && object.stackConfig !== null)
            ? BlockConfig_Stack.fromPartial(object.stackConfig)
            : undefined;
        message.textConfig = (object.textConfig !== undefined && object.textConfig !== null)
            ? BlockConfig_Text.fromPartial(object.textConfig)
            : undefined;
        message.buttonConfig = (object.buttonConfig !== undefined && object.buttonConfig !== null)
            ? BlockConfig_Button.fromPartial(object.buttonConfig)
            : undefined;
        message.imageConfig = (object.imageConfig !== undefined && object.imageConfig !== null)
            ? BlockConfig_Image.fromPartial(object.imageConfig)
            : undefined;
        message.spacerConfig = (object.spacerConfig !== undefined && object.spacerConfig !== null)
            ? BlockConfig_Spacer.fromPartial(object.spacerConfig)
            : undefined;
        message.iconConfig = (object.iconConfig !== undefined && object.iconConfig !== null)
            ? BlockConfig_Icon.fromPartial(object.iconConfig)
            : undefined;
        message.avatarConfig = (object.avatarConfig !== undefined && object.avatarConfig !== null)
            ? BlockConfig_Avatar.fromPartial(object.avatarConfig)
            : undefined;
        message.fullsnooConfig = (object.fullsnooConfig !== undefined && object.fullsnooConfig !== null)
            ? BlockConfig_FullSnoo.fromPartial(object.fullsnooConfig)
            : undefined;
        message.animationConfig = (object.animationConfig !== undefined && object.animationConfig !== null)
            ? BlockConfig_Animation.fromPartial(object.animationConfig)
            : undefined;
        message.webviewConfig = (object.webviewConfig !== undefined && object.webviewConfig !== null)
            ? BlockConfig_WebView.fromPartial(object.webviewConfig)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set(BlockConfig.$type, BlockConfig);
function createBaseBlockConfig_Root() {
    return { children: [], height: 0 };
}
export const BlockConfig_Root = {
    $type: "devvit.ui.block_kit.v1beta.BlockConfig.Root",
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.children) {
            Block.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.height !== 0) {
            writer.uint32(16).int32(message.height);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBlockConfig_Root();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.children.push(Block.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.height = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            children: globalThis.Array.isArray(object?.children) ? object.children.map((e) => Block.fromJSON(e)) : [],
            height: isSet(object.height) ? globalThis.Number(object.height) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.children?.length) {
            obj.children = message.children.map((e) => Block.toJSON(e));
        }
        if (message.height !== 0) {
            obj.height = Math.round(message.height);
        }
        return obj;
    },
    create(base) {
        return BlockConfig_Root.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBlockConfig_Root();
        message.children = object.children?.map((e) => Block.fromPartial(e)) || [];
        message.height = object.height ?? 0;
        return message;
    },
};
messageTypeRegistry.set(BlockConfig_Root.$type, BlockConfig_Root);
function createBaseBlockConfig_Stack() {
    return {
        direction: 0,
        children: [],
        reverse: undefined,
        alignment: undefined,
        padding: undefined,
        gap: undefined,
        border: undefined,
        cornerRadius: undefined,
        backgroundColor: undefined,
        backgroundColors: undefined,
    };
}
export const BlockConfig_Stack = {
    $type: "devvit.ui.block_kit.v1beta.BlockConfig.Stack",
    encode(message, writer = _m0.Writer.create()) {
        if (message.direction !== 0) {
            writer.uint32(8).int32(message.direction);
        }
        for (const v of message.children) {
            Block.encode(v, writer.uint32(18).fork()).ldelim();
        }
        if (message.reverse !== undefined) {
            writer.uint32(24).bool(message.reverse);
        }
        if (message.alignment !== undefined) {
            BlockAlignment.encode(message.alignment, writer.uint32(34).fork()).ldelim();
        }
        if (message.padding !== undefined) {
            writer.uint32(40).int32(message.padding);
        }
        if (message.gap !== undefined) {
            writer.uint32(48).int32(message.gap);
        }
        if (message.border !== undefined) {
            BlockBorder.encode(message.border, writer.uint32(58).fork()).ldelim();
        }
        if (message.cornerRadius !== undefined) {
            writer.uint32(64).int32(message.cornerRadius);
        }
        if (message.backgroundColor !== undefined) {
            writer.uint32(74).string(message.backgroundColor);
        }
        if (message.backgroundColors !== undefined) {
            BlockColor.encode(message.backgroundColors, writer.uint32(82).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBlockConfig_Stack();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.direction = reader.int32();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.children.push(Block.decode(reader, reader.uint32()));
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.reverse = reader.bool();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.alignment = BlockAlignment.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.padding = reader.int32();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.gap = reader.int32();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.border = BlockBorder.decode(reader, reader.uint32());
                    continue;
                case 8:
                    if (tag !== 64) {
                        break;
                    }
                    message.cornerRadius = reader.int32();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.backgroundColor = reader.string();
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.backgroundColors = BlockColor.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            direction: isSet(object.direction) ? blockStackDirectionFromJSON(object.direction) : 0,
            children: globalThis.Array.isArray(object?.children) ? object.children.map((e) => Block.fromJSON(e)) : [],
            reverse: isSet(object.reverse) ? globalThis.Boolean(object.reverse) : undefined,
            alignment: isSet(object.alignment) ? BlockAlignment.fromJSON(object.alignment) : undefined,
            padding: isSet(object.padding) ? blockPaddingFromJSON(object.padding) : undefined,
            gap: isSet(object.gap) ? blockGapFromJSON(object.gap) : undefined,
            border: isSet(object.border) ? BlockBorder.fromJSON(object.border) : undefined,
            cornerRadius: isSet(object.cornerRadius) ? blockRadiusFromJSON(object.cornerRadius) : undefined,
            backgroundColor: isSet(object.backgroundColor) ? globalThis.String(object.backgroundColor) : undefined,
            backgroundColors: isSet(object.backgroundColors) ? BlockColor.fromJSON(object.backgroundColors) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.direction !== 0) {
            obj.direction = blockStackDirectionToJSON(message.direction);
        }
        if (message.children?.length) {
            obj.children = message.children.map((e) => Block.toJSON(e));
        }
        if (message.reverse !== undefined) {
            obj.reverse = message.reverse;
        }
        if (message.alignment !== undefined) {
            obj.alignment = BlockAlignment.toJSON(message.alignment);
        }
        if (message.padding !== undefined) {
            obj.padding = blockPaddingToJSON(message.padding);
        }
        if (message.gap !== undefined) {
            obj.gap = blockGapToJSON(message.gap);
        }
        if (message.border !== undefined) {
            obj.border = BlockBorder.toJSON(message.border);
        }
        if (message.cornerRadius !== undefined) {
            obj.cornerRadius = blockRadiusToJSON(message.cornerRadius);
        }
        if (message.backgroundColor !== undefined) {
            obj.backgroundColor = message.backgroundColor;
        }
        if (message.backgroundColors !== undefined) {
            obj.backgroundColors = BlockColor.toJSON(message.backgroundColors);
        }
        return obj;
    },
    create(base) {
        return BlockConfig_Stack.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBlockConfig_Stack();
        message.direction = object.direction ?? 0;
        message.children = object.children?.map((e) => Block.fromPartial(e)) || [];
        message.reverse = object.reverse ?? undefined;
        message.alignment = (object.alignment !== undefined && object.alignment !== null)
            ? BlockAlignment.fromPartial(object.alignment)
            : undefined;
        message.padding = object.padding ?? undefined;
        message.gap = object.gap ?? undefined;
        message.border = (object.border !== undefined && object.border !== null)
            ? BlockBorder.fromPartial(object.border)
            : undefined;
        message.cornerRadius = object.cornerRadius ?? undefined;
        message.backgroundColor = object.backgroundColor ?? undefined;
        message.backgroundColors = (object.backgroundColors !== undefined && object.backgroundColors !== null)
            ? BlockColor.fromPartial(object.backgroundColors)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set(BlockConfig_Stack.$type, BlockConfig_Stack);
function createBaseBlockConfig_Text() {
    return {
        text: "",
        size: undefined,
        weight: undefined,
        color: undefined,
        alignment: undefined,
        outline: undefined,
        style: undefined,
        selectable: undefined,
        colors: undefined,
        wrap: undefined,
        overflow: undefined,
    };
}
export const BlockConfig_Text = {
    $type: "devvit.ui.block_kit.v1beta.BlockConfig.Text",
    encode(message, writer = _m0.Writer.create()) {
        if (message.text !== "") {
            writer.uint32(10).string(message.text);
        }
        if (message.size !== undefined) {
            writer.uint32(16).int32(message.size);
        }
        if (message.weight !== undefined) {
            writer.uint32(24).int32(message.weight);
        }
        if (message.color !== undefined) {
            writer.uint32(34).string(message.color);
        }
        if (message.alignment !== undefined) {
            BlockAlignment.encode(message.alignment, writer.uint32(42).fork()).ldelim();
        }
        if (message.outline !== undefined) {
            writer.uint32(48).int32(message.outline);
        }
        if (message.style !== undefined) {
            writer.uint32(56).int32(message.style);
        }
        if (message.selectable !== undefined) {
            writer.uint32(64).bool(message.selectable);
        }
        if (message.colors !== undefined) {
            BlockColor.encode(message.colors, writer.uint32(74).fork()).ldelim();
        }
        if (message.wrap !== undefined) {
            writer.uint32(80).bool(message.wrap);
        }
        if (message.overflow !== undefined) {
            writer.uint32(88).int32(message.overflow);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBlockConfig_Text();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.text = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.size = reader.int32();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.weight = reader.int32();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.color = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.alignment = BlockAlignment.decode(reader, reader.uint32());
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.outline = reader.int32();
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.style = reader.int32();
                    continue;
                case 8:
                    if (tag !== 64) {
                        break;
                    }
                    message.selectable = reader.bool();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.colors = BlockColor.decode(reader, reader.uint32());
                    continue;
                case 10:
                    if (tag !== 80) {
                        break;
                    }
                    message.wrap = reader.bool();
                    continue;
                case 11:
                    if (tag !== 88) {
                        break;
                    }
                    message.overflow = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            text: isSet(object.text) ? globalThis.String(object.text) : "",
            size: isSet(object.size) ? blockTextSizeFromJSON(object.size) : undefined,
            weight: isSet(object.weight) ? blockTextWeightFromJSON(object.weight) : undefined,
            color: isSet(object.color) ? globalThis.String(object.color) : undefined,
            alignment: isSet(object.alignment) ? BlockAlignment.fromJSON(object.alignment) : undefined,
            outline: isSet(object.outline) ? blockTextOutlineFromJSON(object.outline) : undefined,
            style: isSet(object.style) ? blockTextStyleFromJSON(object.style) : undefined,
            selectable: isSet(object.selectable) ? globalThis.Boolean(object.selectable) : undefined,
            colors: isSet(object.colors) ? BlockColor.fromJSON(object.colors) : undefined,
            wrap: isSet(object.wrap) ? globalThis.Boolean(object.wrap) : undefined,
            overflow: isSet(object.overflow) ? blockTextOverflowFromJSON(object.overflow) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.text !== "") {
            obj.text = message.text;
        }
        if (message.size !== undefined) {
            obj.size = blockTextSizeToJSON(message.size);
        }
        if (message.weight !== undefined) {
            obj.weight = blockTextWeightToJSON(message.weight);
        }
        if (message.color !== undefined) {
            obj.color = message.color;
        }
        if (message.alignment !== undefined) {
            obj.alignment = BlockAlignment.toJSON(message.alignment);
        }
        if (message.outline !== undefined) {
            obj.outline = blockTextOutlineToJSON(message.outline);
        }
        if (message.style !== undefined) {
            obj.style = blockTextStyleToJSON(message.style);
        }
        if (message.selectable !== undefined) {
            obj.selectable = message.selectable;
        }
        if (message.colors !== undefined) {
            obj.colors = BlockColor.toJSON(message.colors);
        }
        if (message.wrap !== undefined) {
            obj.wrap = message.wrap;
        }
        if (message.overflow !== undefined) {
            obj.overflow = blockTextOverflowToJSON(message.overflow);
        }
        return obj;
    },
    create(base) {
        return BlockConfig_Text.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBlockConfig_Text();
        message.text = object.text ?? "";
        message.size = object.size ?? undefined;
        message.weight = object.weight ?? undefined;
        message.color = object.color ?? undefined;
        message.alignment = (object.alignment !== undefined && object.alignment !== null)
            ? BlockAlignment.fromPartial(object.alignment)
            : undefined;
        message.outline = object.outline ?? undefined;
        message.style = object.style ?? undefined;
        message.selectable = object.selectable ?? undefined;
        message.colors = (object.colors !== undefined && object.colors !== null)
            ? BlockColor.fromPartial(object.colors)
            : undefined;
        message.wrap = object.wrap ?? undefined;
        message.overflow = object.overflow ?? undefined;
        return message;
    },
};
messageTypeRegistry.set(BlockConfig_Text.$type, BlockConfig_Text);
function createBaseBlockConfig_Button() {
    return {
        text: undefined,
        icon: undefined,
        buttonSize: undefined,
        buttonAppearance: undefined,
        textColor: undefined,
        backgroundColor: undefined,
        disabled: undefined,
        textColors: undefined,
        backgroundColors: undefined,
    };
}
export const BlockConfig_Button = {
    $type: "devvit.ui.block_kit.v1beta.BlockConfig.Button",
    encode(message, writer = _m0.Writer.create()) {
        if (message.text !== undefined) {
            writer.uint32(10).string(message.text);
        }
        if (message.icon !== undefined) {
            writer.uint32(18).string(message.icon);
        }
        if (message.buttonSize !== undefined) {
            writer.uint32(24).int32(message.buttonSize);
        }
        if (message.buttonAppearance !== undefined) {
            writer.uint32(32).int32(message.buttonAppearance);
        }
        if (message.textColor !== undefined) {
            writer.uint32(42).string(message.textColor);
        }
        if (message.backgroundColor !== undefined) {
            writer.uint32(50).string(message.backgroundColor);
        }
        if (message.disabled !== undefined) {
            writer.uint32(56).bool(message.disabled);
        }
        if (message.textColors !== undefined) {
            BlockColor.encode(message.textColors, writer.uint32(66).fork()).ldelim();
        }
        if (message.backgroundColors !== undefined) {
            BlockColor.encode(message.backgroundColors, writer.uint32(74).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBlockConfig_Button();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.text = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.icon = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.buttonSize = reader.int32();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.buttonAppearance = reader.int32();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.textColor = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.backgroundColor = reader.string();
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.disabled = reader.bool();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.textColors = BlockColor.decode(reader, reader.uint32());
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.backgroundColors = BlockColor.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            text: isSet(object.text) ? globalThis.String(object.text) : undefined,
            icon: isSet(object.icon) ? globalThis.String(object.icon) : undefined,
            buttonSize: isSet(object.buttonSize) ? blockButtonSizeFromJSON(object.buttonSize) : undefined,
            buttonAppearance: isSet(object.buttonAppearance)
                ? blockButtonAppearanceFromJSON(object.buttonAppearance)
                : undefined,
            textColor: isSet(object.textColor) ? globalThis.String(object.textColor) : undefined,
            backgroundColor: isSet(object.backgroundColor) ? globalThis.String(object.backgroundColor) : undefined,
            disabled: isSet(object.disabled) ? globalThis.Boolean(object.disabled) : undefined,
            textColors: isSet(object.textColors) ? BlockColor.fromJSON(object.textColors) : undefined,
            backgroundColors: isSet(object.backgroundColors) ? BlockColor.fromJSON(object.backgroundColors) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.text !== undefined) {
            obj.text = message.text;
        }
        if (message.icon !== undefined) {
            obj.icon = message.icon;
        }
        if (message.buttonSize !== undefined) {
            obj.buttonSize = blockButtonSizeToJSON(message.buttonSize);
        }
        if (message.buttonAppearance !== undefined) {
            obj.buttonAppearance = blockButtonAppearanceToJSON(message.buttonAppearance);
        }
        if (message.textColor !== undefined) {
            obj.textColor = message.textColor;
        }
        if (message.backgroundColor !== undefined) {
            obj.backgroundColor = message.backgroundColor;
        }
        if (message.disabled !== undefined) {
            obj.disabled = message.disabled;
        }
        if (message.textColors !== undefined) {
            obj.textColors = BlockColor.toJSON(message.textColors);
        }
        if (message.backgroundColors !== undefined) {
            obj.backgroundColors = BlockColor.toJSON(message.backgroundColors);
        }
        return obj;
    },
    create(base) {
        return BlockConfig_Button.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBlockConfig_Button();
        message.text = object.text ?? undefined;
        message.icon = object.icon ?? undefined;
        message.buttonSize = object.buttonSize ?? undefined;
        message.buttonAppearance = object.buttonAppearance ?? undefined;
        message.textColor = object.textColor ?? undefined;
        message.backgroundColor = object.backgroundColor ?? undefined;
        message.disabled = object.disabled ?? undefined;
        message.textColors = (object.textColors !== undefined && object.textColors !== null)
            ? BlockColor.fromPartial(object.textColors)
            : undefined;
        message.backgroundColors = (object.backgroundColors !== undefined && object.backgroundColors !== null)
            ? BlockColor.fromPartial(object.backgroundColors)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set(BlockConfig_Button.$type, BlockConfig_Button);
function createBaseBlockConfig_Image() {
    return { url: "", width: 0, height: 0, description: undefined, resizeMode: undefined };
}
export const BlockConfig_Image = {
    $type: "devvit.ui.block_kit.v1beta.BlockConfig.Image",
    encode(message, writer = _m0.Writer.create()) {
        if (message.url !== "") {
            writer.uint32(10).string(message.url);
        }
        if (message.width !== 0) {
            writer.uint32(16).int32(message.width);
        }
        if (message.height !== 0) {
            writer.uint32(24).int32(message.height);
        }
        if (message.description !== undefined) {
            writer.uint32(34).string(message.description);
        }
        if (message.resizeMode !== undefined) {
            writer.uint32(40).int32(message.resizeMode);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBlockConfig_Image();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.url = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.width = reader.int32();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.height = reader.int32();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.resizeMode = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            url: isSet(object.url) ? globalThis.String(object.url) : "",
            width: isSet(object.width) ? globalThis.Number(object.width) : 0,
            height: isSet(object.height) ? globalThis.Number(object.height) : 0,
            description: isSet(object.description) ? globalThis.String(object.description) : undefined,
            resizeMode: isSet(object.resizeMode) ? blockImageResizeModeFromJSON(object.resizeMode) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.url !== "") {
            obj.url = message.url;
        }
        if (message.width !== 0) {
            obj.width = Math.round(message.width);
        }
        if (message.height !== 0) {
            obj.height = Math.round(message.height);
        }
        if (message.description !== undefined) {
            obj.description = message.description;
        }
        if (message.resizeMode !== undefined) {
            obj.resizeMode = blockImageResizeModeToJSON(message.resizeMode);
        }
        return obj;
    },
    create(base) {
        return BlockConfig_Image.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBlockConfig_Image();
        message.url = object.url ?? "";
        message.width = object.width ?? 0;
        message.height = object.height ?? 0;
        message.description = object.description ?? undefined;
        message.resizeMode = object.resizeMode ?? undefined;
        return message;
    },
};
messageTypeRegistry.set(BlockConfig_Image.$type, BlockConfig_Image);
function createBaseBlockConfig_Spacer() {
    return { size: undefined, shape: undefined };
}
export const BlockConfig_Spacer = {
    $type: "devvit.ui.block_kit.v1beta.BlockConfig.Spacer",
    encode(message, writer = _m0.Writer.create()) {
        if (message.size !== undefined) {
            writer.uint32(8).int32(message.size);
        }
        if (message.shape !== undefined) {
            writer.uint32(16).int32(message.shape);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBlockConfig_Spacer();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.size = reader.int32();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.shape = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            size: isSet(object.size) ? blockSpacerSizeFromJSON(object.size) : undefined,
            shape: isSet(object.shape) ? blockSpacerShapeFromJSON(object.shape) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.size !== undefined) {
            obj.size = blockSpacerSizeToJSON(message.size);
        }
        if (message.shape !== undefined) {
            obj.shape = blockSpacerShapeToJSON(message.shape);
        }
        return obj;
    },
    create(base) {
        return BlockConfig_Spacer.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBlockConfig_Spacer();
        message.size = object.size ?? undefined;
        message.shape = object.shape ?? undefined;
        return message;
    },
};
messageTypeRegistry.set(BlockConfig_Spacer.$type, BlockConfig_Spacer);
function createBaseBlockConfig_Icon() {
    return { icon: "", color: undefined, size: undefined, colors: undefined };
}
export const BlockConfig_Icon = {
    $type: "devvit.ui.block_kit.v1beta.BlockConfig.Icon",
    encode(message, writer = _m0.Writer.create()) {
        if (message.icon !== "") {
            writer.uint32(10).string(message.icon);
        }
        if (message.color !== undefined) {
            writer.uint32(18).string(message.color);
        }
        if (message.size !== undefined) {
            writer.uint32(24).int32(message.size);
        }
        if (message.colors !== undefined) {
            BlockColor.encode(message.colors, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBlockConfig_Icon();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.icon = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.color = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.size = reader.int32();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.colors = BlockColor.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            icon: isSet(object.icon) ? globalThis.String(object.icon) : "",
            color: isSet(object.color) ? globalThis.String(object.color) : undefined,
            size: isSet(object.size) ? blockIconSizeFromJSON(object.size) : undefined,
            colors: isSet(object.colors) ? BlockColor.fromJSON(object.colors) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.icon !== "") {
            obj.icon = message.icon;
        }
        if (message.color !== undefined) {
            obj.color = message.color;
        }
        if (message.size !== undefined) {
            obj.size = blockIconSizeToJSON(message.size);
        }
        if (message.colors !== undefined) {
            obj.colors = BlockColor.toJSON(message.colors);
        }
        return obj;
    },
    create(base) {
        return BlockConfig_Icon.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBlockConfig_Icon();
        message.icon = object.icon ?? "";
        message.color = object.color ?? undefined;
        message.size = object.size ?? undefined;
        message.colors = (object.colors !== undefined && object.colors !== null)
            ? BlockColor.fromPartial(object.colors)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set(BlockConfig_Icon.$type, BlockConfig_Icon);
function createBaseBlockConfig_Avatar() {
    return { thingId: "", facing: undefined, size: undefined, background: undefined };
}
export const BlockConfig_Avatar = {
    $type: "devvit.ui.block_kit.v1beta.BlockConfig.Avatar",
    encode(message, writer = _m0.Writer.create()) {
        if (message.thingId !== "") {
            writer.uint32(10).string(message.thingId);
        }
        if (message.facing !== undefined) {
            writer.uint32(16).int32(message.facing);
        }
        if (message.size !== undefined) {
            writer.uint32(24).int32(message.size);
        }
        if (message.background !== undefined) {
            writer.uint32(32).int32(message.background);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBlockConfig_Avatar();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.thingId = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.facing = reader.int32();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.size = reader.int32();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.background = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            thingId: isSet(object.thingId) ? globalThis.String(object.thingId) : "",
            facing: isSet(object.facing) ? blockAvatarFacingFromJSON(object.facing) : undefined,
            size: isSet(object.size) ? blockAvatarSizeFromJSON(object.size) : undefined,
            background: isSet(object.background) ? blockAvatarBackgroundFromJSON(object.background) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.thingId !== "") {
            obj.thingId = message.thingId;
        }
        if (message.facing !== undefined) {
            obj.facing = blockAvatarFacingToJSON(message.facing);
        }
        if (message.size !== undefined) {
            obj.size = blockAvatarSizeToJSON(message.size);
        }
        if (message.background !== undefined) {
            obj.background = blockAvatarBackgroundToJSON(message.background);
        }
        return obj;
    },
    create(base) {
        return BlockConfig_Avatar.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBlockConfig_Avatar();
        message.thingId = object.thingId ?? "";
        message.facing = object.facing ?? undefined;
        message.size = object.size ?? undefined;
        message.background = object.background ?? undefined;
        return message;
    },
};
messageTypeRegistry.set(BlockConfig_Avatar.$type, BlockConfig_Avatar);
function createBaseBlockConfig_FullSnoo() {
    return { userId: "", facing: undefined, size: undefined };
}
export const BlockConfig_FullSnoo = {
    $type: "devvit.ui.block_kit.v1beta.BlockConfig.FullSnoo",
    encode(message, writer = _m0.Writer.create()) {
        if (message.userId !== "") {
            writer.uint32(10).string(message.userId);
        }
        if (message.facing !== undefined) {
            writer.uint32(16).int32(message.facing);
        }
        if (message.size !== undefined) {
            writer.uint32(24).int32(message.size);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBlockConfig_FullSnoo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.facing = reader.int32();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.size = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
            facing: isSet(object.facing) ? blockAvatarFacingFromJSON(object.facing) : undefined,
            size: isSet(object.size) ? blockFullSnooSizeFromJSON(object.size) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        if (message.facing !== undefined) {
            obj.facing = blockAvatarFacingToJSON(message.facing);
        }
        if (message.size !== undefined) {
            obj.size = blockFullSnooSizeToJSON(message.size);
        }
        return obj;
    },
    create(base) {
        return BlockConfig_FullSnoo.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBlockConfig_FullSnoo();
        message.userId = object.userId ?? "";
        message.facing = object.facing ?? undefined;
        message.size = object.size ?? undefined;
        return message;
    },
};
messageTypeRegistry.set(BlockConfig_FullSnoo.$type, BlockConfig_FullSnoo);
function createBaseBlockConfig_Animation() {
    return {
        url: "",
        width: 0,
        height: 0,
        type: 0,
        loop: undefined,
        loopMode: undefined,
        autoplay: undefined,
        speed: undefined,
        direction: undefined,
    };
}
export const BlockConfig_Animation = {
    $type: "devvit.ui.block_kit.v1beta.BlockConfig.Animation",
    encode(message, writer = _m0.Writer.create()) {
        if (message.url !== "") {
            writer.uint32(10).string(message.url);
        }
        if (message.width !== 0) {
            writer.uint32(16).int32(message.width);
        }
        if (message.height !== 0) {
            writer.uint32(24).int32(message.height);
        }
        if (message.type !== 0) {
            writer.uint32(32).int32(message.type);
        }
        if (message.loop !== undefined) {
            writer.uint32(40).bool(message.loop);
        }
        if (message.loopMode !== undefined) {
            writer.uint32(48).int32(message.loopMode);
        }
        if (message.autoplay !== undefined) {
            writer.uint32(56).bool(message.autoplay);
        }
        if (message.speed !== undefined) {
            writer.uint32(69).float(message.speed);
        }
        if (message.direction !== undefined) {
            writer.uint32(72).int32(message.direction);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBlockConfig_Animation();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.url = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.width = reader.int32();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.height = reader.int32();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.type = reader.int32();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.loop = reader.bool();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.loopMode = reader.int32();
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.autoplay = reader.bool();
                    continue;
                case 8:
                    if (tag !== 69) {
                        break;
                    }
                    message.speed = reader.float();
                    continue;
                case 9:
                    if (tag !== 72) {
                        break;
                    }
                    message.direction = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            url: isSet(object.url) ? globalThis.String(object.url) : "",
            width: isSet(object.width) ? globalThis.Number(object.width) : 0,
            height: isSet(object.height) ? globalThis.Number(object.height) : 0,
            type: isSet(object.type) ? blockAnimationTypeFromJSON(object.type) : 0,
            loop: isSet(object.loop) ? globalThis.Boolean(object.loop) : undefined,
            loopMode: isSet(object.loopMode) ? blockAnimationLoopModeFromJSON(object.loopMode) : undefined,
            autoplay: isSet(object.autoplay) ? globalThis.Boolean(object.autoplay) : undefined,
            speed: isSet(object.speed) ? globalThis.Number(object.speed) : undefined,
            direction: isSet(object.direction) ? blockAnimationDirectionFromJSON(object.direction) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.url !== "") {
            obj.url = message.url;
        }
        if (message.width !== 0) {
            obj.width = Math.round(message.width);
        }
        if (message.height !== 0) {
            obj.height = Math.round(message.height);
        }
        if (message.type !== 0) {
            obj.type = blockAnimationTypeToJSON(message.type);
        }
        if (message.loop !== undefined) {
            obj.loop = message.loop;
        }
        if (message.loopMode !== undefined) {
            obj.loopMode = blockAnimationLoopModeToJSON(message.loopMode);
        }
        if (message.autoplay !== undefined) {
            obj.autoplay = message.autoplay;
        }
        if (message.speed !== undefined) {
            obj.speed = message.speed;
        }
        if (message.direction !== undefined) {
            obj.direction = blockAnimationDirectionToJSON(message.direction);
        }
        return obj;
    },
    create(base) {
        return BlockConfig_Animation.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBlockConfig_Animation();
        message.url = object.url ?? "";
        message.width = object.width ?? 0;
        message.height = object.height ?? 0;
        message.type = object.type ?? 0;
        message.loop = object.loop ?? undefined;
        message.loopMode = object.loopMode ?? undefined;
        message.autoplay = object.autoplay ?? undefined;
        message.speed = object.speed ?? undefined;
        message.direction = object.direction ?? undefined;
        return message;
    },
};
messageTypeRegistry.set(BlockConfig_Animation.$type, BlockConfig_Animation);
function createBaseBlockConfig_WebView() {
    return { url: "", state: undefined };
}
export const BlockConfig_WebView = {
    $type: "devvit.ui.block_kit.v1beta.BlockConfig.WebView",
    encode(message, writer = _m0.Writer.create()) {
        if (message.url !== "") {
            writer.uint32(10).string(message.url);
        }
        if (message.state !== undefined) {
            Struct.encode(Struct.wrap(message.state), writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBlockConfig_WebView();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.url = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.state = Struct.unwrap(Struct.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            url: isSet(object.url) ? globalThis.String(object.url) : "",
            state: isObject(object.state) ? object.state : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.url !== "") {
            obj.url = message.url;
        }
        if (message.state !== undefined) {
            obj.state = message.state;
        }
        return obj;
    },
    create(base) {
        return BlockConfig_WebView.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBlockConfig_WebView();
        message.url = object.url ?? "";
        message.state = object.state ?? undefined;
        return message;
    },
};
messageTypeRegistry.set(BlockConfig_WebView.$type, BlockConfig_WebView);
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
