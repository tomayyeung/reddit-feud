/**
 * #rendering.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { Struct } from "../../../../google/protobuf/struct.js";
import { messageTypeRegistry } from "../../../../typeRegistry.js";
import { Block } from "./block.js";
import { blockRenderEventTypeFromJSON, blockRenderEventTypeToJSON } from "./enums.js";
function createBaseBlockRenderRequest() {
    return { type: 0, id: undefined, data: undefined };
}
export const BlockRenderRequest = {
    $type: "devvit.ui.block_kit.v1beta.BlockRenderRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.type !== 0) {
            writer.uint32(8).int32(message.type);
        }
        if (message.id !== undefined) {
            writer.uint32(18).string(message.id);
        }
        if (message.data !== undefined) {
            Struct.encode(Struct.wrap(message.data), writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBlockRenderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.type = reader.int32();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.data = Struct.unwrap(Struct.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            type: isSet(object.type) ? blockRenderEventTypeFromJSON(object.type) : 0,
            id: isSet(object.id) ? globalThis.String(object.id) : undefined,
            data: isObject(object.data) ? object.data : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.type !== 0) {
            obj.type = blockRenderEventTypeToJSON(message.type);
        }
        if (message.id !== undefined) {
            obj.id = message.id;
        }
        if (message.data !== undefined) {
            obj.data = message.data;
        }
        return obj;
    },
    create(base) {
        return BlockRenderRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBlockRenderRequest();
        message.type = object.type ?? 0;
        message.id = object.id ?? undefined;
        message.data = object.data ?? undefined;
        return message;
    },
};
messageTypeRegistry.set(BlockRenderRequest.$type, BlockRenderRequest);
function createBaseBlockRenderResponse() {
    return { ui: undefined };
}
export const BlockRenderResponse = {
    $type: "devvit.ui.block_kit.v1beta.BlockRenderResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.ui !== undefined) {
            Block.encode(message.ui, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBlockRenderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.ui = Block.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { ui: isSet(object.ui) ? Block.fromJSON(object.ui) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.ui !== undefined) {
            obj.ui = Block.toJSON(message.ui);
        }
        return obj;
    },
    create(base) {
        return BlockRenderResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBlockRenderResponse();
        message.ui = (object.ui !== undefined && object.ui !== null) ? Block.fromPartial(object.ui) : undefined;
        return message;
    },
};
messageTypeRegistry.set(BlockRenderResponse.$type, BlockRenderResponse);
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
