/**
 * #ui.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { Struct } from "../../../../google/protobuf/struct.js";
import { messageTypeRegistry } from "../../../../typeRegistry.js";
import { UIDimensions } from "../../common/v1alpha/common.js";
import { Effect } from "../../effects/v1alpha/effect.js";
import { UIEvent } from "../../events/v1alpha/event.js";
import { Block } from "./block.js";
function createBaseUIRequest() {
    return { env: undefined, props: undefined, state: undefined, events: [] };
}
export const UIRequest = {
    $type: "devvit.ui.block_kit.v1beta.UIRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.env !== undefined) {
            UIEnvironment.encode(message.env, writer.uint32(42).fork()).ldelim();
        }
        if (message.props !== undefined) {
            Struct.encode(Struct.wrap(message.props), writer.uint32(10).fork()).ldelim();
        }
        if (message.state !== undefined) {
            Struct.encode(Struct.wrap(message.state), writer.uint32(18).fork()).ldelim();
        }
        for (const v of message.events) {
            UIEvent.encode(v, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUIRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.env = UIEnvironment.decode(reader, reader.uint32());
                    continue;
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.props = Struct.unwrap(Struct.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.state = Struct.unwrap(Struct.decode(reader, reader.uint32()));
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.events.push(UIEvent.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            env: isSet(object.env) ? UIEnvironment.fromJSON(object.env) : undefined,
            props: isObject(object.props) ? object.props : undefined,
            state: isObject(object.state) ? object.state : undefined,
            events: globalThis.Array.isArray(object?.events) ? object.events.map((e) => UIEvent.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.env !== undefined) {
            obj.env = UIEnvironment.toJSON(message.env);
        }
        if (message.props !== undefined) {
            obj.props = message.props;
        }
        if (message.state !== undefined) {
            obj.state = message.state;
        }
        if (message.events?.length) {
            obj.events = message.events.map((e) => UIEvent.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return UIRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUIRequest();
        message.env = (object.env !== undefined && object.env !== null) ? UIEnvironment.fromPartial(object.env) : undefined;
        message.props = object.props ?? undefined;
        message.state = object.state ?? undefined;
        message.events = object.events?.map((e) => UIEvent.fromPartial(e)) || [];
        return message;
    },
};
messageTypeRegistry.set(UIRequest.$type, UIRequest);
function createBaseUIResponse() {
    return { state: undefined, effects: [], events: [], blocks: undefined };
}
export const UIResponse = {
    $type: "devvit.ui.block_kit.v1beta.UIResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.state !== undefined) {
            Struct.encode(Struct.wrap(message.state), writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.effects) {
            Effect.encode(v, writer.uint32(18).fork()).ldelim();
        }
        for (const v of message.events) {
            UIEvent.encode(v, writer.uint32(42).fork()).ldelim();
        }
        if (message.blocks !== undefined) {
            Block.encode(message.blocks, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUIResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.state = Struct.unwrap(Struct.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.effects.push(Effect.decode(reader, reader.uint32()));
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.events.push(UIEvent.decode(reader, reader.uint32()));
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.blocks = Block.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            state: isObject(object.state) ? object.state : undefined,
            effects: globalThis.Array.isArray(object?.effects) ? object.effects.map((e) => Effect.fromJSON(e)) : [],
            events: globalThis.Array.isArray(object?.events) ? object.events.map((e) => UIEvent.fromJSON(e)) : [],
            blocks: isSet(object.blocks) ? Block.fromJSON(object.blocks) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.state !== undefined) {
            obj.state = message.state;
        }
        if (message.effects?.length) {
            obj.effects = message.effects.map((e) => Effect.toJSON(e));
        }
        if (message.events?.length) {
            obj.events = message.events.map((e) => UIEvent.toJSON(e));
        }
        if (message.blocks !== undefined) {
            obj.blocks = Block.toJSON(message.blocks);
        }
        return obj;
    },
    create(base) {
        return UIResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUIResponse();
        message.state = object.state ?? undefined;
        message.effects = object.effects?.map((e) => Effect.fromPartial(e)) || [];
        message.events = object.events?.map((e) => UIEvent.fromPartial(e)) || [];
        message.blocks = (object.blocks !== undefined && object.blocks !== null)
            ? Block.fromPartial(object.blocks)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set(UIResponse.$type, UIResponse);
function createBaseUIEnvironment() {
    return { locale: undefined, colorScheme: undefined, dimensions: undefined, timezone: undefined };
}
export const UIEnvironment = {
    $type: "devvit.ui.block_kit.v1beta.UIEnvironment",
    encode(message, writer = _m0.Writer.create()) {
        if (message.locale !== undefined) {
            writer.uint32(10).string(message.locale);
        }
        if (message.colorScheme !== undefined) {
            writer.uint32(18).string(message.colorScheme);
        }
        if (message.dimensions !== undefined) {
            UIDimensions.encode(message.dimensions, writer.uint32(26).fork()).ldelim();
        }
        if (message.timezone !== undefined) {
            writer.uint32(42).string(message.timezone);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUIEnvironment();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.locale = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.colorScheme = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.dimensions = UIDimensions.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.timezone = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            locale: isSet(object.locale) ? globalThis.String(object.locale) : undefined,
            colorScheme: isSet(object.colorScheme) ? globalThis.String(object.colorScheme) : undefined,
            dimensions: isSet(object.dimensions) ? UIDimensions.fromJSON(object.dimensions) : undefined,
            timezone: isSet(object.timezone) ? globalThis.String(object.timezone) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.locale !== undefined) {
            obj.locale = message.locale;
        }
        if (message.colorScheme !== undefined) {
            obj.colorScheme = message.colorScheme;
        }
        if (message.dimensions !== undefined) {
            obj.dimensions = UIDimensions.toJSON(message.dimensions);
        }
        if (message.timezone !== undefined) {
            obj.timezone = message.timezone;
        }
        return obj;
    },
    create(base) {
        return UIEnvironment.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUIEnvironment();
        message.locale = object.locale ?? undefined;
        message.colorScheme = object.colorScheme ?? undefined;
        message.dimensions = (object.dimensions !== undefined && object.dimensions !== null)
            ? UIDimensions.fromPartial(object.dimensions)
            : undefined;
        message.timezone = object.timezone ?? undefined;
        return message;
    },
};
messageTypeRegistry.set(UIEnvironment.$type, UIEnvironment);
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
