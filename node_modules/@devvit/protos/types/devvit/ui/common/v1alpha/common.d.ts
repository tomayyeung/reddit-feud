/**
 * #common.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
/**
 * Dimensions describe the layout characteristics of a custom post within
 * Devvit. They are used to allow Devvitors to create responsive experiences
 * within their post. For example, they can use this API to conditionally render
 * an element on small viewports only.
 */
export interface UIDimensions {
    /** Unitless pixels describing the content box height for the custom post. */
    height: number;
    /** Unitless pixels describing the content box width for the custom post. */
    width: number;
    /** Describes the device pixel ratio for a device. */
    scale: number;
    /** Web only: describes the font scaling pixel ratio for a browser window. */
    fontScale?: number | undefined;
}
export declare const UIDimensions: {
    $type: "devvit.ui.common.v1alpha.UIDimensions";
    encode(message: UIDimensions, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UIDimensions;
    fromJSON(object: any): UIDimensions;
    toJSON(message: UIDimensions): unknown;
    create(base?: DeepPartial<UIDimensions>): UIDimensions;
    fromPartial(object: DeepPartial<UIDimensions>): UIDimensions;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=common.d.ts.map