/**
 * #common.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { messageTypeRegistry } from "../../../../typeRegistry.js";
function createBaseUIDimensions() {
    return { height: 0, width: 0, scale: 0, fontScale: undefined };
}
export const UIDimensions = {
    $type: "devvit.ui.common.v1alpha.UIDimensions",
    encode(message, writer = _m0.Writer.create()) {
        if (message.height !== 0) {
            writer.uint32(8).int32(message.height);
        }
        if (message.width !== 0) {
            writer.uint32(16).int32(message.width);
        }
        if (message.scale !== 0) {
            writer.uint32(29).float(message.scale);
        }
        if (message.fontScale !== undefined) {
            writer.uint32(37).float(message.fontScale);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUIDimensions();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.height = reader.int32();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.width = reader.int32();
                    continue;
                case 3:
                    if (tag !== 29) {
                        break;
                    }
                    message.scale = reader.float();
                    continue;
                case 4:
                    if (tag !== 37) {
                        break;
                    }
                    message.fontScale = reader.float();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            height: isSet(object.height) ? globalThis.Number(object.height) : 0,
            width: isSet(object.width) ? globalThis.Number(object.width) : 0,
            scale: isSet(object.scale) ? globalThis.Number(object.scale) : 0,
            fontScale: isSet(object.fontScale) ? globalThis.Number(object.fontScale) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.height !== 0) {
            obj.height = Math.round(message.height);
        }
        if (message.width !== 0) {
            obj.width = Math.round(message.width);
        }
        if (message.scale !== 0) {
            obj.scale = message.scale;
        }
        if (message.fontScale !== undefined) {
            obj.fontScale = message.fontScale;
        }
        return obj;
    },
    create(base) {
        return UIDimensions.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUIDimensions();
        message.height = object.height ?? 0;
        message.width = object.width ?? 0;
        message.scale = object.scale ?? 0;
        message.fontScale = object.fontScale ?? undefined;
        return message;
    },
};
messageTypeRegistry.set(UIDimensions.$type, UIDimensions);
function isSet(value) {
    return value !== null && value !== undefined;
}
