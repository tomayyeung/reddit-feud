/**
 * #create_order.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { messageTypeRegistry } from "../../../../typeRegistry.js";
export var OrderResultStatus;
(function (OrderResultStatus) {
    OrderResultStatus[OrderResultStatus["STATUS_CANCELLED"] = 0] = "STATUS_CANCELLED";
    OrderResultStatus[OrderResultStatus["STATUS_SUCCESS"] = 1] = "STATUS_SUCCESS";
    OrderResultStatus[OrderResultStatus["STATUS_ERROR"] = 2] = "STATUS_ERROR";
    OrderResultStatus[OrderResultStatus["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(OrderResultStatus || (OrderResultStatus = {}));
export function orderResultStatusFromJSON(object) {
    switch (object) {
        case 0:
        case "STATUS_CANCELLED":
            return OrderResultStatus.STATUS_CANCELLED;
        case 1:
        case "STATUS_SUCCESS":
            return OrderResultStatus.STATUS_SUCCESS;
        case 2:
        case "STATUS_ERROR":
            return OrderResultStatus.STATUS_ERROR;
        case -1:
        case "UNRECOGNIZED":
        default:
            return OrderResultStatus.UNRECOGNIZED;
    }
}
export function orderResultStatusToJSON(object) {
    switch (object) {
        case OrderResultStatus.STATUS_CANCELLED:
            return 0;
        case OrderResultStatus.STATUS_SUCCESS:
            return 1;
        case OrderResultStatus.STATUS_ERROR:
            return 2;
        case OrderResultStatus.UNRECOGNIZED:
        default:
            return -1;
    }
}
function createBaseCreateOrderEffect() {
    return { id: "", skus: [], metadata: {} };
}
export const CreateOrderEffect = {
    $type: "devvit.ui.effects.v1alpha.CreateOrderEffect",
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        for (const v of message.skus) {
            writer.uint32(18).string(v);
        }
        Object.entries(message.metadata).forEach(([key, value]) => {
            CreateOrderEffect_MetadataEntry.encode({ key: key, value }, writer.uint32(26).fork()).ldelim();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateOrderEffect();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.skus.push(reader.string());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    const entry3 = CreateOrderEffect_MetadataEntry.decode(reader, reader.uint32());
                    if (entry3.value !== undefined) {
                        message.metadata[entry3.key] = entry3.value;
                    }
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            skus: globalThis.Array.isArray(object?.skus) ? object.skus.map((e) => globalThis.String(e)) : [],
            metadata: isObject(object.metadata)
                ? Object.entries(object.metadata).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.skus?.length) {
            obj.skus = message.skus;
        }
        if (message.metadata) {
            const entries = Object.entries(message.metadata);
            if (entries.length > 0) {
                obj.metadata = {};
                entries.forEach(([k, v]) => {
                    obj.metadata[k] = v;
                });
            }
        }
        return obj;
    },
    create(base) {
        return CreateOrderEffect.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCreateOrderEffect();
        message.id = object.id ?? "";
        message.skus = object.skus?.map((e) => e) || [];
        message.metadata = Object.entries(object.metadata ?? {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = globalThis.String(value);
            }
            return acc;
        }, {});
        return message;
    },
};
messageTypeRegistry.set(CreateOrderEffect.$type, CreateOrderEffect);
function createBaseCreateOrderEffect_MetadataEntry() {
    return { key: "", value: "" };
}
export const CreateOrderEffect_MetadataEntry = {
    $type: "devvit.ui.effects.v1alpha.CreateOrderEffect.MetadataEntry",
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateOrderEffect_MetadataEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? globalThis.String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return CreateOrderEffect_MetadataEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCreateOrderEffect_MetadataEntry();
        message.key = object.key ?? "";
        message.value = object.value ?? "";
        return message;
    },
};
messageTypeRegistry.set(CreateOrderEffect_MetadataEntry.$type, CreateOrderEffect_MetadataEntry);
function createBaseOrderResultEvent() {
    return { errorMessage: undefined, orderId: undefined, order: undefined, status: 0, errorCode: undefined };
}
export const OrderResultEvent = {
    $type: "devvit.ui.effects.v1alpha.OrderResultEvent",
    encode(message, writer = _m0.Writer.create()) {
        if (message.errorMessage !== undefined) {
            writer.uint32(18).string(message.errorMessage);
        }
        if (message.orderId !== undefined) {
            writer.uint32(26).string(message.orderId);
        }
        if (message.order !== undefined) {
            CreateOrderEffect.encode(message.order, writer.uint32(34).fork()).ldelim();
        }
        if (message.status !== 0) {
            writer.uint32(40).int32(message.status);
        }
        if (message.errorCode !== undefined) {
            writer.uint32(48).int32(message.errorCode);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOrderResultEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.errorMessage = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.orderId = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.order = CreateOrderEffect.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.status = reader.int32();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.errorCode = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            errorMessage: isSet(object.errorMessage) ? globalThis.String(object.errorMessage) : undefined,
            orderId: isSet(object.orderId) ? globalThis.String(object.orderId) : undefined,
            order: isSet(object.order) ? CreateOrderEffect.fromJSON(object.order) : undefined,
            status: isSet(object.status) ? orderResultStatusFromJSON(object.status) : 0,
            errorCode: isSet(object.errorCode) ? globalThis.Number(object.errorCode) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.errorMessage !== undefined) {
            obj.errorMessage = message.errorMessage;
        }
        if (message.orderId !== undefined) {
            obj.orderId = message.orderId;
        }
        if (message.order !== undefined) {
            obj.order = CreateOrderEffect.toJSON(message.order);
        }
        if (message.status !== 0) {
            obj.status = orderResultStatusToJSON(message.status);
        }
        if (message.errorCode !== undefined) {
            obj.errorCode = Math.round(message.errorCode);
        }
        return obj;
    },
    create(base) {
        return OrderResultEvent.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseOrderResultEvent();
        message.errorMessage = object.errorMessage ?? undefined;
        message.orderId = object.orderId ?? undefined;
        message.order = (object.order !== undefined && object.order !== null)
            ? CreateOrderEffect.fromPartial(object.order)
            : undefined;
        message.status = object.status ?? 0;
        message.errorCode = object.errorCode ?? undefined;
        return message;
    },
};
messageTypeRegistry.set(OrderResultEvent.$type, OrderResultEvent);
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
