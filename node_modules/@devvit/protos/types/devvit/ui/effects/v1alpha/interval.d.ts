/**
 * #interval.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { Duration } from "../../../../google/protobuf/duration.js";
/**
 * This is the list of active timers.  We could choose to have an effect per timer, but
 * following realtime's lead, we send the whole list.
 *
 * This implies that if the timer disappears from the map, you should cancel it.
 */
export interface SetIntervalsEffect {
    /** hook_id => interval map */
    intervals: {
        [key: string]: IntervalDetails;
    };
}
export interface SetIntervalsEffect_IntervalsEntry {
    key: string;
    value?: IntervalDetails | undefined;
}
export interface IntervalDetails {
    duration?: Duration | undefined;
    /** Distinguishes between synchronous and asynchronous events. */
    async?: boolean | undefined;
}
export declare const SetIntervalsEffect: {
    $type: "devvit.ui.effects.v1alpha.SetIntervalsEffect";
    encode(message: SetIntervalsEffect, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SetIntervalsEffect;
    fromJSON(object: any): SetIntervalsEffect;
    toJSON(message: SetIntervalsEffect): unknown;
    create(base?: DeepPartial<SetIntervalsEffect>): SetIntervalsEffect;
    fromPartial(object: DeepPartial<SetIntervalsEffect>): SetIntervalsEffect;
};
export declare const SetIntervalsEffect_IntervalsEntry: {
    $type: "devvit.ui.effects.v1alpha.SetIntervalsEffect.IntervalsEntry";
    encode(message: SetIntervalsEffect_IntervalsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SetIntervalsEffect_IntervalsEntry;
    fromJSON(object: any): SetIntervalsEffect_IntervalsEntry;
    toJSON(message: SetIntervalsEffect_IntervalsEntry): unknown;
    create(base?: DeepPartial<SetIntervalsEffect_IntervalsEntry>): SetIntervalsEffect_IntervalsEntry;
    fromPartial(object: DeepPartial<SetIntervalsEffect_IntervalsEntry>): SetIntervalsEffect_IntervalsEntry;
};
export declare const IntervalDetails: {
    $type: "devvit.ui.effects.v1alpha.IntervalDetails";
    encode(message: IntervalDetails, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): IntervalDetails;
    fromJSON(object: any): IntervalDetails;
    toJSON(message: IntervalDetails): unknown;
    create(base?: DeepPartial<IntervalDetails>): IntervalDetails;
    fromPartial(object: DeepPartial<IntervalDetails>): IntervalDetails;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=interval.d.ts.map