/**
 * #navigate_to_url.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { messageTypeRegistry } from "../../../../typeRegistry.js";
function createBaseNavigateToUrlEffect() {
    return { url: "", target: undefined };
}
export const NavigateToUrlEffect = {
    $type: "devvit.ui.effects.v1alpha.NavigateToUrlEffect",
    encode(message, writer = _m0.Writer.create()) {
        if (message.url !== "") {
            writer.uint32(10).string(message.url);
        }
        if (message.target !== undefined) {
            writer.uint32(18).string(message.target);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseNavigateToUrlEffect();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.url = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.target = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            url: isSet(object.url) ? globalThis.String(object.url) : "",
            target: isSet(object.target) ? globalThis.String(object.target) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.url !== "") {
            obj.url = message.url;
        }
        if (message.target !== undefined) {
            obj.target = message.target;
        }
        return obj;
    },
    create(base) {
        return NavigateToUrlEffect.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseNavigateToUrlEffect();
        message.url = object.url ?? "";
        message.target = object.target ?? undefined;
        return message;
    },
};
messageTypeRegistry.set(NavigateToUrlEffect.$type, NavigateToUrlEffect);
function isSet(value) {
    return value !== null && value !== undefined;
}
