/**
 * #reload_part.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
/** Request the client to reload some or all of the content in a particular post */
export interface ReloadPartEffect {
    subreddit?: ReloadPartEffect_Subreddit | undefined;
    post?: ReloadPartEffect_Post | undefined;
    comment?: ReloadPartEffect_Comment | undefined;
}
/**
 * Reload listing
 * e.g.: an action has added or removed a post
 */
export interface ReloadPartEffect_Subreddit {
    /** Subreddit Thing ID (t5) */
    subredditId: string;
}
/**
 * Reload post contents
 * e.g.: an action has altered the post contents or parts of the comment tree
 */
export interface ReloadPartEffect_Post {
    /** Post Thing ID (t3) */
    postId: string;
    /** If true reload post body */
    body?: boolean | undefined;
    /** If true reload entire comment tree */
    comments?: boolean | undefined;
}
/**
 * Reload a comment and/or comment tree
 * e.g.: an action has altered or replied to a comment
 */
export interface ReloadPartEffect_Comment {
    /** Parent Post Thing ID (t3) */
    postId: string;
    /** Comment Thing ID (t1) */
    commentId: string;
    /** If true, reload the entire comment tree, not just the contents of the target comment */
    replies?: boolean | undefined;
}
export declare const ReloadPartEffect: {
    $type: "devvit.ui.effects.v1alpha.ReloadPartEffect";
    encode(message: ReloadPartEffect, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ReloadPartEffect;
    fromJSON(object: any): ReloadPartEffect;
    toJSON(message: ReloadPartEffect): unknown;
    create(base?: DeepPartial<ReloadPartEffect>): ReloadPartEffect;
    fromPartial(object: DeepPartial<ReloadPartEffect>): ReloadPartEffect;
};
export declare const ReloadPartEffect_Subreddit: {
    $type: "devvit.ui.effects.v1alpha.ReloadPartEffect.Subreddit";
    encode(message: ReloadPartEffect_Subreddit, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ReloadPartEffect_Subreddit;
    fromJSON(object: any): ReloadPartEffect_Subreddit;
    toJSON(message: ReloadPartEffect_Subreddit): unknown;
    create(base?: DeepPartial<ReloadPartEffect_Subreddit>): ReloadPartEffect_Subreddit;
    fromPartial(object: DeepPartial<ReloadPartEffect_Subreddit>): ReloadPartEffect_Subreddit;
};
export declare const ReloadPartEffect_Post: {
    $type: "devvit.ui.effects.v1alpha.ReloadPartEffect.Post";
    encode(message: ReloadPartEffect_Post, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ReloadPartEffect_Post;
    fromJSON(object: any): ReloadPartEffect_Post;
    toJSON(message: ReloadPartEffect_Post): unknown;
    create(base?: DeepPartial<ReloadPartEffect_Post>): ReloadPartEffect_Post;
    fromPartial(object: DeepPartial<ReloadPartEffect_Post>): ReloadPartEffect_Post;
};
export declare const ReloadPartEffect_Comment: {
    $type: "devvit.ui.effects.v1alpha.ReloadPartEffect.Comment";
    encode(message: ReloadPartEffect_Comment, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ReloadPartEffect_Comment;
    fromJSON(object: any): ReloadPartEffect_Comment;
    toJSON(message: ReloadPartEffect_Comment): unknown;
    create(base?: DeepPartial<ReloadPartEffect_Comment>): ReloadPartEffect_Comment;
    fromPartial(object: DeepPartial<ReloadPartEffect_Comment>): ReloadPartEffect_Comment;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=reload_part.d.ts.map