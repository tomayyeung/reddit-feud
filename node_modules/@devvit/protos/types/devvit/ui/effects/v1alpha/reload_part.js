/**
 * #reload_part.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { messageTypeRegistry } from "../../../../typeRegistry.js";
function createBaseReloadPartEffect() {
    return { subreddit: undefined, post: undefined, comment: undefined };
}
export const ReloadPartEffect = {
    $type: "devvit.ui.effects.v1alpha.ReloadPartEffect",
    encode(message, writer = _m0.Writer.create()) {
        if (message.subreddit !== undefined) {
            ReloadPartEffect_Subreddit.encode(message.subreddit, writer.uint32(10).fork()).ldelim();
        }
        if (message.post !== undefined) {
            ReloadPartEffect_Post.encode(message.post, writer.uint32(18).fork()).ldelim();
        }
        if (message.comment !== undefined) {
            ReloadPartEffect_Comment.encode(message.comment, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseReloadPartEffect();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.subreddit = ReloadPartEffect_Subreddit.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.post = ReloadPartEffect_Post.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.comment = ReloadPartEffect_Comment.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            subreddit: isSet(object.subreddit) ? ReloadPartEffect_Subreddit.fromJSON(object.subreddit) : undefined,
            post: isSet(object.post) ? ReloadPartEffect_Post.fromJSON(object.post) : undefined,
            comment: isSet(object.comment) ? ReloadPartEffect_Comment.fromJSON(object.comment) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.subreddit !== undefined) {
            obj.subreddit = ReloadPartEffect_Subreddit.toJSON(message.subreddit);
        }
        if (message.post !== undefined) {
            obj.post = ReloadPartEffect_Post.toJSON(message.post);
        }
        if (message.comment !== undefined) {
            obj.comment = ReloadPartEffect_Comment.toJSON(message.comment);
        }
        return obj;
    },
    create(base) {
        return ReloadPartEffect.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseReloadPartEffect();
        message.subreddit = (object.subreddit !== undefined && object.subreddit !== null)
            ? ReloadPartEffect_Subreddit.fromPartial(object.subreddit)
            : undefined;
        message.post = (object.post !== undefined && object.post !== null)
            ? ReloadPartEffect_Post.fromPartial(object.post)
            : undefined;
        message.comment = (object.comment !== undefined && object.comment !== null)
            ? ReloadPartEffect_Comment.fromPartial(object.comment)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set(ReloadPartEffect.$type, ReloadPartEffect);
function createBaseReloadPartEffect_Subreddit() {
    return { subredditId: "" };
}
export const ReloadPartEffect_Subreddit = {
    $type: "devvit.ui.effects.v1alpha.ReloadPartEffect.Subreddit",
    encode(message, writer = _m0.Writer.create()) {
        if (message.subredditId !== "") {
            writer.uint32(10).string(message.subredditId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseReloadPartEffect_Subreddit();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.subredditId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { subredditId: isSet(object.subredditId) ? globalThis.String(object.subredditId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.subredditId !== "") {
            obj.subredditId = message.subredditId;
        }
        return obj;
    },
    create(base) {
        return ReloadPartEffect_Subreddit.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseReloadPartEffect_Subreddit();
        message.subredditId = object.subredditId ?? "";
        return message;
    },
};
messageTypeRegistry.set(ReloadPartEffect_Subreddit.$type, ReloadPartEffect_Subreddit);
function createBaseReloadPartEffect_Post() {
    return { postId: "", body: undefined, comments: undefined };
}
export const ReloadPartEffect_Post = {
    $type: "devvit.ui.effects.v1alpha.ReloadPartEffect.Post",
    encode(message, writer = _m0.Writer.create()) {
        if (message.postId !== "") {
            writer.uint32(10).string(message.postId);
        }
        if (message.body !== undefined) {
            writer.uint32(16).bool(message.body);
        }
        if (message.comments !== undefined) {
            writer.uint32(24).bool(message.comments);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseReloadPartEffect_Post();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.postId = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.body = reader.bool();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.comments = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            postId: isSet(object.postId) ? globalThis.String(object.postId) : "",
            body: isSet(object.body) ? globalThis.Boolean(object.body) : undefined,
            comments: isSet(object.comments) ? globalThis.Boolean(object.comments) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.postId !== "") {
            obj.postId = message.postId;
        }
        if (message.body !== undefined) {
            obj.body = message.body;
        }
        if (message.comments !== undefined) {
            obj.comments = message.comments;
        }
        return obj;
    },
    create(base) {
        return ReloadPartEffect_Post.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseReloadPartEffect_Post();
        message.postId = object.postId ?? "";
        message.body = object.body ?? undefined;
        message.comments = object.comments ?? undefined;
        return message;
    },
};
messageTypeRegistry.set(ReloadPartEffect_Post.$type, ReloadPartEffect_Post);
function createBaseReloadPartEffect_Comment() {
    return { postId: "", commentId: "", replies: undefined };
}
export const ReloadPartEffect_Comment = {
    $type: "devvit.ui.effects.v1alpha.ReloadPartEffect.Comment",
    encode(message, writer = _m0.Writer.create()) {
        if (message.postId !== "") {
            writer.uint32(10).string(message.postId);
        }
        if (message.commentId !== "") {
            writer.uint32(18).string(message.commentId);
        }
        if (message.replies !== undefined) {
            writer.uint32(24).bool(message.replies);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseReloadPartEffect_Comment();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.postId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.commentId = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.replies = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            postId: isSet(object.postId) ? globalThis.String(object.postId) : "",
            commentId: isSet(object.commentId) ? globalThis.String(object.commentId) : "",
            replies: isSet(object.replies) ? globalThis.Boolean(object.replies) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.postId !== "") {
            obj.postId = message.postId;
        }
        if (message.commentId !== "") {
            obj.commentId = message.commentId;
        }
        if (message.replies !== undefined) {
            obj.replies = message.replies;
        }
        return obj;
    },
    create(base) {
        return ReloadPartEffect_Comment.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseReloadPartEffect_Comment();
        message.postId = object.postId ?? "";
        message.commentId = object.commentId ?? "";
        message.replies = object.replies ?? undefined;
        return message;
    },
};
messageTypeRegistry.set(ReloadPartEffect_Comment.$type, ReloadPartEffect_Comment);
function isSet(value) {
    return value !== null && value !== undefined;
}
