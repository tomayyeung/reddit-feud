/**
 * #show_toast.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { Toast } from "../../toast/toast.js";
/** Display a popup toast */
export interface ShowToastEffect {
    toast?: Toast | undefined;
}
/** Only fired if the toast has an action button and the user tapped it */
export interface ToastActionEvent {
}
export declare const ShowToastEffect: {
    $type: "devvit.ui.effects.v1alpha.ShowToastEffect";
    encode(message: ShowToastEffect, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ShowToastEffect;
    fromJSON(object: any): ShowToastEffect;
    toJSON(message: ShowToastEffect): unknown;
    create(base?: DeepPartial<ShowToastEffect>): ShowToastEffect;
    fromPartial(object: DeepPartial<ShowToastEffect>): ShowToastEffect;
};
export declare const ToastActionEvent: {
    $type: "devvit.ui.effects.v1alpha.ToastActionEvent";
    encode(_: ToastActionEvent, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ToastActionEvent;
    fromJSON(_: any): ToastActionEvent;
    toJSON(_: ToastActionEvent): unknown;
    create(base?: DeepPartial<ToastActionEvent>): ToastActionEvent;
    fromPartial(_: DeepPartial<ToastActionEvent>): ToastActionEvent;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=show_toast.d.ts.map