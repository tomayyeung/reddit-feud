/**
 * #fullscreen.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { messageTypeRegistry } from "../../../../../typeRegistry.js";
function createBaseWebViewFullScreenVisibilityEffect() {
    return { show: false, url: "" };
}
export const WebViewFullScreenVisibilityEffect = {
    $type: "devvit.ui.effects.web_view.v1alpha.WebViewFullScreenVisibilityEffect",
    encode(message, writer = _m0.Writer.create()) {
        if (message.show !== false) {
            writer.uint32(8).bool(message.show);
        }
        if (message.url !== "") {
            writer.uint32(18).string(message.url);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebViewFullScreenVisibilityEffect();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.show = reader.bool();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.url = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            show: isSet(object.show) ? globalThis.Boolean(object.show) : false,
            url: isSet(object.url) ? globalThis.String(object.url) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.show !== false) {
            obj.show = message.show;
        }
        if (message.url !== "") {
            obj.url = message.url;
        }
        return obj;
    },
    create(base) {
        return WebViewFullScreenVisibilityEffect.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseWebViewFullScreenVisibilityEffect();
        message.show = object.show ?? false;
        message.url = object.url ?? "";
        return message;
    },
};
messageTypeRegistry.set(WebViewFullScreenVisibilityEffect.$type, WebViewFullScreenVisibilityEffect);
function isSet(value) {
    return value !== null && value !== undefined;
}
