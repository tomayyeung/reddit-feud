/**
 * #post_message.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { Struct, Value } from "../../../../../google/protobuf/struct.js";
import { messageTypeRegistry } from "../../../../../typeRegistry.js";
function createBaseWebViewPostMessage() {
    return { type: "", data: undefined };
}
export const WebViewPostMessage = {
    $type: "devvit.ui.effects.web_view.v1alpha.WebViewPostMessage",
    encode(message, writer = _m0.Writer.create()) {
        if (message.type !== "") {
            writer.uint32(10).string(message.type);
        }
        if (message.data !== undefined) {
            Struct.encode(Struct.wrap(message.data), writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebViewPostMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.type = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.data = Struct.unwrap(Struct.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            type: isSet(object.type) ? globalThis.String(object.type) : "",
            data: isObject(object.data) ? object.data : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.type !== "") {
            obj.type = message.type;
        }
        if (message.data !== undefined) {
            obj.data = message.data;
        }
        return obj;
    },
    create(base) {
        return WebViewPostMessage.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseWebViewPostMessage();
        message.type = object.type ?? "";
        message.data = object.data ?? undefined;
        return message;
    },
};
messageTypeRegistry.set(WebViewPostMessage.$type, WebViewPostMessage);
function createBaseWebViewAppMessage() {
    return { message: undefined };
}
export const WebViewAppMessage = {
    $type: "devvit.ui.effects.web_view.v1alpha.WebViewAppMessage",
    encode(message, writer = _m0.Writer.create()) {
        if (message.message !== undefined) {
            Value.encode(Value.wrap(message.message), writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebViewAppMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.message = Value.unwrap(Value.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { message: isSet(object?.message) ? object.message : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.message !== undefined) {
            obj.message = message.message;
        }
        return obj;
    },
    create(base) {
        return WebViewAppMessage.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseWebViewAppMessage();
        message.message = object.message ?? undefined;
        return message;
    },
};
messageTypeRegistry.set(WebViewAppMessage.$type, WebViewAppMessage);
function createBaseWebViewStateMessage() {
    return { state: undefined };
}
export const WebViewStateMessage = {
    $type: "devvit.ui.effects.web_view.v1alpha.WebViewStateMessage",
    encode(message, writer = _m0.Writer.create()) {
        if (message.state !== undefined) {
            Struct.encode(Struct.wrap(message.state), writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebViewStateMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.state = Struct.unwrap(Struct.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { state: isObject(object.state) ? object.state : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.state !== undefined) {
            obj.state = message.state;
        }
        return obj;
    },
    create(base) {
        return WebViewStateMessage.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseWebViewStateMessage();
        message.state = object.state ?? undefined;
        return message;
    },
};
messageTypeRegistry.set(WebViewStateMessage.$type, WebViewStateMessage);
function createBaseWebViewPostMessageEffect() {
    return { webViewId: "", app: undefined, state: undefined };
}
export const WebViewPostMessageEffect = {
    $type: "devvit.ui.effects.web_view.v1alpha.WebViewPostMessageEffect",
    encode(message, writer = _m0.Writer.create()) {
        if (message.webViewId !== "") {
            writer.uint32(10).string(message.webViewId);
        }
        if (message.app !== undefined) {
            WebViewAppMessage.encode(message.app, writer.uint32(18).fork()).ldelim();
        }
        if (message.state !== undefined) {
            WebViewStateMessage.encode(message.state, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebViewPostMessageEffect();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.webViewId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.app = WebViewAppMessage.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.state = WebViewStateMessage.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            webViewId: isSet(object.webViewId) ? globalThis.String(object.webViewId) : "",
            app: isSet(object.app) ? WebViewAppMessage.fromJSON(object.app) : undefined,
            state: isSet(object.state) ? WebViewStateMessage.fromJSON(object.state) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.webViewId !== "") {
            obj.webViewId = message.webViewId;
        }
        if (message.app !== undefined) {
            obj.app = WebViewAppMessage.toJSON(message.app);
        }
        if (message.state !== undefined) {
            obj.state = WebViewStateMessage.toJSON(message.state);
        }
        return obj;
    },
    create(base) {
        return WebViewPostMessageEffect.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseWebViewPostMessageEffect();
        message.webViewId = object.webViewId ?? "";
        message.app = (object.app !== undefined && object.app !== null)
            ? WebViewAppMessage.fromPartial(object.app)
            : undefined;
        message.state = (object.state !== undefined && object.state !== null)
            ? WebViewStateMessage.fromPartial(object.state)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set(WebViewPostMessageEffect.$type, WebViewPostMessageEffect);
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
