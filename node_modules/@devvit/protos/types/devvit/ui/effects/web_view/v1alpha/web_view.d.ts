/**
 * #web_view.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { WebViewFullScreenVisibilityEffect } from "./fullscreen.js";
import { WebViewPostMessageEffect } from "./post_message.js";
/** Effect to communicate and control WebViews */
export interface WebViewEffect {
    postMessage?: WebViewPostMessageEffect | undefined;
    fullscreen?: WebViewFullScreenVisibilityEffect | undefined;
}
export declare const WebViewEffect: {
    $type: "devvit.ui.effects.web_view.v1alpha.WebViewEffect";
    encode(message: WebViewEffect, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WebViewEffect;
    fromJSON(object: any): WebViewEffect;
    toJSON(message: WebViewEffect): unknown;
    create(base?: DeepPartial<WebViewEffect>): WebViewEffect;
    fromPartial(object: DeepPartial<WebViewEffect>): WebViewEffect;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=web_view.d.ts.map