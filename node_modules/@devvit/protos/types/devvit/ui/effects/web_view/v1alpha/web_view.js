/**
 * #web_view.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { messageTypeRegistry } from "../../../../../typeRegistry.js";
import { WebViewFullScreenVisibilityEffect } from "./fullscreen.js";
import { WebViewPostMessageEffect } from "./post_message.js";
function createBaseWebViewEffect() {
    return { postMessage: undefined, fullscreen: undefined };
}
export const WebViewEffect = {
    $type: "devvit.ui.effects.web_view.v1alpha.WebViewEffect",
    encode(message, writer = _m0.Writer.create()) {
        if (message.postMessage !== undefined) {
            WebViewPostMessageEffect.encode(message.postMessage, writer.uint32(10).fork()).ldelim();
        }
        if (message.fullscreen !== undefined) {
            WebViewFullScreenVisibilityEffect.encode(message.fullscreen, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebViewEffect();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.postMessage = WebViewPostMessageEffect.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.fullscreen = WebViewFullScreenVisibilityEffect.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            postMessage: isSet(object.postMessage) ? WebViewPostMessageEffect.fromJSON(object.postMessage) : undefined,
            fullscreen: isSet(object.fullscreen) ? WebViewFullScreenVisibilityEffect.fromJSON(object.fullscreen) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.postMessage !== undefined) {
            obj.postMessage = WebViewPostMessageEffect.toJSON(message.postMessage);
        }
        if (message.fullscreen !== undefined) {
            obj.fullscreen = WebViewFullScreenVisibilityEffect.toJSON(message.fullscreen);
        }
        return obj;
    },
    create(base) {
        return WebViewEffect.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseWebViewEffect();
        message.postMessage = (object.postMessage !== undefined && object.postMessage !== null)
            ? WebViewPostMessageEffect.fromPartial(object.postMessage)
            : undefined;
        message.fullscreen = (object.fullscreen !== undefined && object.fullscreen !== null)
            ? WebViewFullScreenVisibilityEffect.fromPartial(object.fullscreen)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set(WebViewEffect.$type, WebViewEffect);
function isSet(value) {
    return value !== null && value !== undefined;
}
