/**
 * #event.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { Struct } from "../../../../google/protobuf/struct.js";
import { BoolValue, StringValue } from "../../../../google/protobuf/wrappers.js";
import { messageTypeRegistry } from "../../../../typeRegistry.js";
import { OrderResultEvent } from "../../effects/v1alpha/create_order.js";
import { RealtimeSubscriptionEvent } from "../../effects/v1alpha/realtime_subscriptions.js";
import { FormSubmittedEvent } from "../../effects/v1alpha/show_form.js";
import { ToastActionEvent } from "../../effects/v1alpha/show_toast.js";
import { WebViewEvent } from "./web_view.js";
/**
 * This is set when we want to map events to a specific runtime, examples:
 * [1] incoming realtime messages on a websocket connection
 * [2] keydown events in a text input block
 * Both are intended to be run only on local runtime
 */
export var UIEventScope;
(function (UIEventScope) {
    UIEventScope[UIEventScope["ALL"] = 0] = "ALL";
    UIEventScope[UIEventScope["LOCAL"] = 1] = "LOCAL";
    UIEventScope[UIEventScope["REMOTE"] = 2] = "REMOTE";
    UIEventScope[UIEventScope["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(UIEventScope || (UIEventScope = {}));
export function uIEventScopeFromJSON(object) {
    switch (object) {
        case 0:
        case "ALL":
            return UIEventScope.ALL;
        case 1:
        case "LOCAL":
            return UIEventScope.LOCAL;
        case 2:
        case "REMOTE":
            return UIEventScope.REMOTE;
        case -1:
        case "UNRECOGNIZED":
        default:
            return UIEventScope.UNRECOGNIZED;
    }
}
export function uIEventScopeToJSON(object) {
    switch (object) {
        case UIEventScope.ALL:
            return 0;
        case UIEventScope.LOCAL:
            return 1;
        case UIEventScope.REMOTE:
            return 2;
        case UIEventScope.UNRECOGNIZED:
        default:
            return -1;
    }
}
function createBaseUIEvent() {
    return {
        realtimeEvent: undefined,
        formSubmitted: undefined,
        orderResult: undefined,
        toastAction: undefined,
        userAction: undefined,
        asyncRequest: undefined,
        asyncResponse: undefined,
        timer: undefined,
        blocking: undefined,
        resize: undefined,
        webView: undefined,
        async: undefined,
        hook: undefined,
        retry: undefined,
        scope: undefined,
    };
}
export const UIEvent = {
    $type: "devvit.ui.events.v1alpha.UIEvent",
    encode(message, writer = _m0.Writer.create()) {
        if (message.realtimeEvent !== undefined) {
            RealtimeSubscriptionEvent.encode(message.realtimeEvent, writer.uint32(18).fork()).ldelim();
        }
        if (message.formSubmitted !== undefined) {
            FormSubmittedEvent.encode(message.formSubmitted, writer.uint32(26).fork()).ldelim();
        }
        if (message.orderResult !== undefined) {
            OrderResultEvent.encode(message.orderResult, writer.uint32(154).fork()).ldelim();
        }
        if (message.toastAction !== undefined) {
            ToastActionEvent.encode(message.toastAction, writer.uint32(34).fork()).ldelim();
        }
        if (message.userAction !== undefined) {
            UserAction.encode(message.userAction, writer.uint32(50).fork()).ldelim();
        }
        if (message.asyncRequest !== undefined) {
            AsyncRequest.encode(message.asyncRequest, writer.uint32(58).fork()).ldelim();
        }
        if (message.asyncResponse !== undefined) {
            AsyncResponse.encode(message.asyncResponse, writer.uint32(66).fork()).ldelim();
        }
        if (message.timer !== undefined) {
            TimerEvent.encode(message.timer, writer.uint32(98).fork()).ldelim();
        }
        if (message.blocking !== undefined) {
            BlockingRenderEvent.encode(message.blocking, writer.uint32(106).fork()).ldelim();
        }
        if (message.resize !== undefined) {
            ResizeEvent.encode(message.resize, writer.uint32(114).fork()).ldelim();
        }
        if (message.webView !== undefined) {
            WebViewEvent.encode(message.webView, writer.uint32(162).fork()).ldelim();
        }
        if (message.async !== undefined) {
            BoolValue.encode({ value: message.async }, writer.uint32(122).fork()).ldelim();
        }
        if (message.hook !== undefined) {
            StringValue.encode({ value: message.hook }, writer.uint32(82).fork()).ldelim();
        }
        if (message.retry !== undefined) {
            BoolValue.encode({ value: message.retry }, writer.uint32(138).fork()).ldelim();
        }
        if (message.scope !== undefined) {
            writer.uint32(144).int32(message.scope);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUIEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.realtimeEvent = RealtimeSubscriptionEvent.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.formSubmitted = FormSubmittedEvent.decode(reader, reader.uint32());
                    continue;
                case 19:
                    if (tag !== 154) {
                        break;
                    }
                    message.orderResult = OrderResultEvent.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.toastAction = ToastActionEvent.decode(reader, reader.uint32());
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.userAction = UserAction.decode(reader, reader.uint32());
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.asyncRequest = AsyncRequest.decode(reader, reader.uint32());
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.asyncResponse = AsyncResponse.decode(reader, reader.uint32());
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    message.timer = TimerEvent.decode(reader, reader.uint32());
                    continue;
                case 13:
                    if (tag !== 106) {
                        break;
                    }
                    message.blocking = BlockingRenderEvent.decode(reader, reader.uint32());
                    continue;
                case 14:
                    if (tag !== 114) {
                        break;
                    }
                    message.resize = ResizeEvent.decode(reader, reader.uint32());
                    continue;
                case 20:
                    if (tag !== 162) {
                        break;
                    }
                    message.webView = WebViewEvent.decode(reader, reader.uint32());
                    continue;
                case 15:
                    if (tag !== 122) {
                        break;
                    }
                    message.async = BoolValue.decode(reader, reader.uint32()).value;
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.hook = StringValue.decode(reader, reader.uint32()).value;
                    continue;
                case 17:
                    if (tag !== 138) {
                        break;
                    }
                    message.retry = BoolValue.decode(reader, reader.uint32()).value;
                    continue;
                case 18:
                    if (tag !== 144) {
                        break;
                    }
                    message.scope = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            realtimeEvent: isSet(object.realtimeEvent) ? RealtimeSubscriptionEvent.fromJSON(object.realtimeEvent) : undefined,
            formSubmitted: isSet(object.formSubmitted) ? FormSubmittedEvent.fromJSON(object.formSubmitted) : undefined,
            orderResult: isSet(object.orderResult) ? OrderResultEvent.fromJSON(object.orderResult) : undefined,
            toastAction: isSet(object.toastAction) ? ToastActionEvent.fromJSON(object.toastAction) : undefined,
            userAction: isSet(object.userAction) ? UserAction.fromJSON(object.userAction) : undefined,
            asyncRequest: isSet(object.asyncRequest) ? AsyncRequest.fromJSON(object.asyncRequest) : undefined,
            asyncResponse: isSet(object.asyncResponse) ? AsyncResponse.fromJSON(object.asyncResponse) : undefined,
            timer: isSet(object.timer) ? TimerEvent.fromJSON(object.timer) : undefined,
            blocking: isSet(object.blocking) ? BlockingRenderEvent.fromJSON(object.blocking) : undefined,
            resize: isSet(object.resize) ? ResizeEvent.fromJSON(object.resize) : undefined,
            webView: isSet(object.webView) ? WebViewEvent.fromJSON(object.webView) : undefined,
            async: isSet(object.async) ? Boolean(object.async) : undefined,
            hook: isSet(object.hook) ? String(object.hook) : undefined,
            retry: isSet(object.retry) ? Boolean(object.retry) : undefined,
            scope: isSet(object.scope) ? uIEventScopeFromJSON(object.scope) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.realtimeEvent !== undefined) {
            obj.realtimeEvent = RealtimeSubscriptionEvent.toJSON(message.realtimeEvent);
        }
        if (message.formSubmitted !== undefined) {
            obj.formSubmitted = FormSubmittedEvent.toJSON(message.formSubmitted);
        }
        if (message.orderResult !== undefined) {
            obj.orderResult = OrderResultEvent.toJSON(message.orderResult);
        }
        if (message.toastAction !== undefined) {
            obj.toastAction = ToastActionEvent.toJSON(message.toastAction);
        }
        if (message.userAction !== undefined) {
            obj.userAction = UserAction.toJSON(message.userAction);
        }
        if (message.asyncRequest !== undefined) {
            obj.asyncRequest = AsyncRequest.toJSON(message.asyncRequest);
        }
        if (message.asyncResponse !== undefined) {
            obj.asyncResponse = AsyncResponse.toJSON(message.asyncResponse);
        }
        if (message.timer !== undefined) {
            obj.timer = TimerEvent.toJSON(message.timer);
        }
        if (message.blocking !== undefined) {
            obj.blocking = BlockingRenderEvent.toJSON(message.blocking);
        }
        if (message.resize !== undefined) {
            obj.resize = ResizeEvent.toJSON(message.resize);
        }
        if (message.webView !== undefined) {
            obj.webView = WebViewEvent.toJSON(message.webView);
        }
        if (message.async !== undefined) {
            obj.async = message.async;
        }
        if (message.hook !== undefined) {
            obj.hook = message.hook;
        }
        if (message.retry !== undefined) {
            obj.retry = message.retry;
        }
        if (message.scope !== undefined) {
            obj.scope = uIEventScopeToJSON(message.scope);
        }
        return obj;
    },
    create(base) {
        return UIEvent.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUIEvent();
        message.realtimeEvent = (object.realtimeEvent !== undefined && object.realtimeEvent !== null)
            ? RealtimeSubscriptionEvent.fromPartial(object.realtimeEvent)
            : undefined;
        message.formSubmitted = (object.formSubmitted !== undefined && object.formSubmitted !== null)
            ? FormSubmittedEvent.fromPartial(object.formSubmitted)
            : undefined;
        message.orderResult = (object.orderResult !== undefined && object.orderResult !== null)
            ? OrderResultEvent.fromPartial(object.orderResult)
            : undefined;
        message.toastAction = (object.toastAction !== undefined && object.toastAction !== null)
            ? ToastActionEvent.fromPartial(object.toastAction)
            : undefined;
        message.userAction = (object.userAction !== undefined && object.userAction !== null)
            ? UserAction.fromPartial(object.userAction)
            : undefined;
        message.asyncRequest = (object.asyncRequest !== undefined && object.asyncRequest !== null)
            ? AsyncRequest.fromPartial(object.asyncRequest)
            : undefined;
        message.asyncResponse = (object.asyncResponse !== undefined && object.asyncResponse !== null)
            ? AsyncResponse.fromPartial(object.asyncResponse)
            : undefined;
        message.timer = (object.timer !== undefined && object.timer !== null)
            ? TimerEvent.fromPartial(object.timer)
            : undefined;
        message.blocking = (object.blocking !== undefined && object.blocking !== null)
            ? BlockingRenderEvent.fromPartial(object.blocking)
            : undefined;
        message.resize = (object.resize !== undefined && object.resize !== null)
            ? ResizeEvent.fromPartial(object.resize)
            : undefined;
        message.webView = (object.webView !== undefined && object.webView !== null)
            ? WebViewEvent.fromPartial(object.webView)
            : undefined;
        message.async = object.async ?? undefined;
        message.hook = object.hook ?? undefined;
        message.retry = object.retry ?? undefined;
        message.scope = object.scope ?? undefined;
        return message;
    },
};
messageTypeRegistry.set(UIEvent.$type, UIEvent);
function createBaseBlockingRenderEvent() {
    return {};
}
export const BlockingRenderEvent = {
    $type: "devvit.ui.events.v1alpha.BlockingRenderEvent",
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBlockingRenderEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return BlockingRenderEvent.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseBlockingRenderEvent();
        return message;
    },
};
messageTypeRegistry.set(BlockingRenderEvent.$type, BlockingRenderEvent);
function createBaseResizeEvent() {
    return {};
}
export const ResizeEvent = {
    $type: "devvit.ui.events.v1alpha.ResizeEvent",
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResizeEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return ResizeEvent.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseResizeEvent();
        return message;
    },
};
messageTypeRegistry.set(ResizeEvent.$type, ResizeEvent);
function createBaseTimerEvent() {
    return {};
}
export const TimerEvent = {
    $type: "devvit.ui.events.v1alpha.TimerEvent",
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTimerEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return TimerEvent.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseTimerEvent();
        return message;
    },
};
messageTypeRegistry.set(TimerEvent.$type, TimerEvent);
function createBaseAsyncError() {
    return { message: "", details: "" };
}
export const AsyncError = {
    $type: "devvit.ui.events.v1alpha.AsyncError",
    encode(message, writer = _m0.Writer.create()) {
        if (message.message !== "") {
            writer.uint32(10).string(message.message);
        }
        if (message.details !== "") {
            writer.uint32(18).string(message.details);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAsyncError();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.details = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            message: isSet(object.message) ? globalThis.String(object.message) : "",
            details: isSet(object.details) ? globalThis.String(object.details) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.message !== "") {
            obj.message = message.message;
        }
        if (message.details !== "") {
            obj.details = message.details;
        }
        return obj;
    },
    create(base) {
        return AsyncError.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAsyncError();
        message.message = object.message ?? "";
        message.details = object.details ?? "";
        return message;
    },
};
messageTypeRegistry.set(AsyncError.$type, AsyncError);
function createBaseAsyncRequest() {
    return { requestId: "", data: undefined };
}
export const AsyncRequest = {
    $type: "devvit.ui.events.v1alpha.AsyncRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.requestId !== "") {
            writer.uint32(10).string(message.requestId);
        }
        if (message.data !== undefined) {
            Struct.encode(Struct.wrap(message.data), writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAsyncRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.requestId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.data = Struct.unwrap(Struct.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
            data: isObject(object.data) ? object.data : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.requestId !== "") {
            obj.requestId = message.requestId;
        }
        if (message.data !== undefined) {
            obj.data = message.data;
        }
        return obj;
    },
    create(base) {
        return AsyncRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAsyncRequest();
        message.requestId = object.requestId ?? "";
        message.data = object.data ?? undefined;
        return message;
    },
};
messageTypeRegistry.set(AsyncRequest.$type, AsyncRequest);
function createBaseAsyncResponse() {
    return { requestId: "", data: undefined, error: undefined };
}
export const AsyncResponse = {
    $type: "devvit.ui.events.v1alpha.AsyncResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.requestId !== "") {
            writer.uint32(10).string(message.requestId);
        }
        if (message.data !== undefined) {
            Struct.encode(Struct.wrap(message.data), writer.uint32(18).fork()).ldelim();
        }
        if (message.error !== undefined) {
            AsyncError.encode(message.error, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAsyncResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.requestId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.data = Struct.unwrap(Struct.decode(reader, reader.uint32()));
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.error = AsyncError.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
            data: isObject(object.data) ? object.data : undefined,
            error: isSet(object.error) ? AsyncError.fromJSON(object.error) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.requestId !== "") {
            obj.requestId = message.requestId;
        }
        if (message.data !== undefined) {
            obj.data = message.data;
        }
        if (message.error !== undefined) {
            obj.error = AsyncError.toJSON(message.error);
        }
        return obj;
    },
    create(base) {
        return AsyncResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAsyncResponse();
        message.requestId = object.requestId ?? "";
        message.data = object.data ?? undefined;
        message.error = (object.error !== undefined && object.error !== null)
            ? AsyncError.fromPartial(object.error)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set(AsyncResponse.$type, AsyncResponse);
function createBaseUserAction() {
    return { actionId: "", data: undefined };
}
export const UserAction = {
    $type: "devvit.ui.events.v1alpha.UserAction",
    encode(message, writer = _m0.Writer.create()) {
        if (message.actionId !== "") {
            writer.uint32(10).string(message.actionId);
        }
        if (message.data !== undefined) {
            Struct.encode(Struct.wrap(message.data), writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUserAction();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.actionId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.data = Struct.unwrap(Struct.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            actionId: isSet(object.actionId) ? globalThis.String(object.actionId) : "",
            data: isObject(object.data) ? object.data : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.actionId !== "") {
            obj.actionId = message.actionId;
        }
        if (message.data !== undefined) {
            obj.data = message.data;
        }
        return obj;
    },
    create(base) {
        return UserAction.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUserAction();
        message.actionId = object.actionId ?? "";
        message.data = object.data ?? undefined;
        return message;
    },
};
messageTypeRegistry.set(UserAction.$type, UserAction);
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
