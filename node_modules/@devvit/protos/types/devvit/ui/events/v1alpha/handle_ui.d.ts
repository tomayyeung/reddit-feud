/**
 * #handle_ui.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { Metadata } from "../../../../../lib/Types.js";
import { Effect } from "../../effects/v1alpha/effect.js";
import { UIEvent } from "./event.js";
/** @deprecated */
export interface HandleUIEventRequest {
    state?: {
        [key: string]: any;
    } | undefined;
    event?: UIEvent | undefined;
}
/** @deprecated */
export interface HandleUIEventResponse {
    state?: {
        [key: string]: any;
    } | undefined;
    effects: Effect[];
}
export declare const HandleUIEventRequest: {
    $type: "devvit.ui.events.v1alpha.HandleUIEventRequest";
    encode(message: HandleUIEventRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): HandleUIEventRequest;
    fromJSON(object: any): HandleUIEventRequest;
    toJSON(message: HandleUIEventRequest): unknown;
    create(base?: DeepPartial<HandleUIEventRequest>): HandleUIEventRequest;
    fromPartial(object: DeepPartial<HandleUIEventRequest>): HandleUIEventRequest;
};
export declare const HandleUIEventResponse: {
    $type: "devvit.ui.events.v1alpha.HandleUIEventResponse";
    encode(message: HandleUIEventResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): HandleUIEventResponse;
    fromJSON(object: any): HandleUIEventResponse;
    toJSON(message: HandleUIEventResponse): unknown;
    create(base?: DeepPartial<HandleUIEventResponse>): HandleUIEventResponse;
    fromPartial(object: DeepPartial<HandleUIEventResponse>): HandleUIEventResponse;
};
/** @deprecated */
export interface UIEventHandler {
    HandleUIEvent(request: HandleUIEventRequest, metadata?: Metadata): Promise<HandleUIEventResponse>;
}
export declare const UIEventHandlerServiceName = "devvit.ui.events.v1alpha.UIEventHandler";
export declare class UIEventHandlerClientImpl implements UIEventHandler {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    HandleUIEvent(request: HandleUIEventRequest, metadata?: Metadata): Promise<HandleUIEventResponse>;
}
/** @deprecated */
export type UIEventHandlerDefinition = typeof UIEventHandlerDefinition;
export declare const UIEventHandlerDefinition: {
    readonly name: "UIEventHandler";
    readonly fullName: "devvit.ui.events.v1alpha.UIEventHandler";
    readonly methods: {
        readonly handleUIEvent: {
            readonly name: "HandleUIEvent";
            readonly requestType: {
                $type: "devvit.ui.events.v1alpha.HandleUIEventRequest";
                encode(message: HandleUIEventRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): HandleUIEventRequest;
                fromJSON(object: any): HandleUIEventRequest;
                toJSON(message: HandleUIEventRequest): unknown;
                create(base?: DeepPartial<HandleUIEventRequest>): HandleUIEventRequest;
                fromPartial(object: DeepPartial<HandleUIEventRequest>): HandleUIEventRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                $type: "devvit.ui.events.v1alpha.HandleUIEventResponse";
                encode(message: HandleUIEventResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): HandleUIEventResponse;
                fromJSON(object: any): HandleUIEventResponse;
                toJSON(message: HandleUIEventResponse): unknown;
                create(base?: DeepPartial<HandleUIEventResponse>): HandleUIEventResponse;
                fromPartial(object: DeepPartial<HandleUIEventResponse>): HandleUIEventResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
interface Rpc {
    request(service: string, method: string, data: Uint8Array, metadata?: Metadata): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=handle_ui.d.ts.map