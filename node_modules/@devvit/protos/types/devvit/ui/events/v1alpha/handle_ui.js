/**
 * #handle_ui.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { Struct } from "../../../../google/protobuf/struct.js";
import { messageTypeRegistry } from "../../../../typeRegistry.js";
import { Effect } from "../../effects/v1alpha/effect.js";
import { UIEvent } from "./event.js";
function createBaseHandleUIEventRequest() {
    return { state: undefined, event: undefined };
}
export const HandleUIEventRequest = {
    $type: "devvit.ui.events.v1alpha.HandleUIEventRequest",
    encode(message, writer = _m0.Writer.create()) {
        if (message.state !== undefined) {
            Struct.encode(Struct.wrap(message.state), writer.uint32(10).fork()).ldelim();
        }
        if (message.event !== undefined) {
            UIEvent.encode(message.event, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHandleUIEventRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.state = Struct.unwrap(Struct.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.event = UIEvent.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            state: isObject(object.state) ? object.state : undefined,
            event: isSet(object.event) ? UIEvent.fromJSON(object.event) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.state !== undefined) {
            obj.state = message.state;
        }
        if (message.event !== undefined) {
            obj.event = UIEvent.toJSON(message.event);
        }
        return obj;
    },
    create(base) {
        return HandleUIEventRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseHandleUIEventRequest();
        message.state = object.state ?? undefined;
        message.event = (object.event !== undefined && object.event !== null)
            ? UIEvent.fromPartial(object.event)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set(HandleUIEventRequest.$type, HandleUIEventRequest);
function createBaseHandleUIEventResponse() {
    return { state: undefined, effects: [] };
}
export const HandleUIEventResponse = {
    $type: "devvit.ui.events.v1alpha.HandleUIEventResponse",
    encode(message, writer = _m0.Writer.create()) {
        if (message.state !== undefined) {
            Struct.encode(Struct.wrap(message.state), writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.effects) {
            Effect.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHandleUIEventResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.state = Struct.unwrap(Struct.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.effects.push(Effect.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            state: isObject(object.state) ? object.state : undefined,
            effects: globalThis.Array.isArray(object?.effects) ? object.effects.map((e) => Effect.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.state !== undefined) {
            obj.state = message.state;
        }
        if (message.effects?.length) {
            obj.effects = message.effects.map((e) => Effect.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return HandleUIEventResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseHandleUIEventResponse();
        message.state = object.state ?? undefined;
        message.effects = object.effects?.map((e) => Effect.fromPartial(e)) || [];
        return message;
    },
};
messageTypeRegistry.set(HandleUIEventResponse.$type, HandleUIEventResponse);
export const UIEventHandlerServiceName = "devvit.ui.events.v1alpha.UIEventHandler";
export class UIEventHandlerClientImpl {
    constructor(rpc, opts) {
        this.service = opts?.service || UIEventHandlerServiceName;
        this.rpc = rpc;
        this.HandleUIEvent = this.HandleUIEvent.bind(this);
    }
    HandleUIEvent(request, metadata) {
        const data = HandleUIEventRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "HandleUIEvent", data, metadata);
        return promise.then((data) => HandleUIEventResponse.decode(_m0.Reader.create(data)));
    }
}
export const UIEventHandlerDefinition = {
    name: "UIEventHandler",
    fullName: "devvit.ui.events.v1alpha.UIEventHandler",
    methods: {
        handleUIEvent: {
            name: "HandleUIEvent",
            requestType: HandleUIEventRequest,
            requestStream: false,
            responseType: HandleUIEventResponse,
            responseStream: false,
            options: {},
        },
    },
};
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
