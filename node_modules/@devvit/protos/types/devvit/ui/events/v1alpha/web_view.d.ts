/**
 * #web_view.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
export declare enum WebViewVisibility {
    WEBVIEW_VISIBLE = 0,
    WEBVIEW_HIDDEN = 1,
    UNRECOGNIZED = -1
}
export declare function webViewVisibilityFromJSON(object: any): WebViewVisibility;
export declare function webViewVisibilityToJSON(object: WebViewVisibility): number;
/** Fired when the content of a WebView calls window.parent.postMessage() */
export interface WebViewPostMessageEvent {
    /** Can be a Struct or a scalar value since postMessage doesn't restrict the type of 'message'. */
    message?: any | undefined;
}
/** Fired when the visibility of a fullscreen WebView changes */
export interface WebViewFullScreenEvent {
    visibility: WebViewVisibility;
}
export interface WebViewEvent {
    postMessage?: WebViewPostMessageEvent | undefined;
    fullScreen?: WebViewFullScreenEvent | undefined;
}
export declare const WebViewPostMessageEvent: {
    $type: "devvit.ui.events.v1alpha.WebViewPostMessageEvent";
    encode(message: WebViewPostMessageEvent, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WebViewPostMessageEvent;
    fromJSON(object: any): WebViewPostMessageEvent;
    toJSON(message: WebViewPostMessageEvent): unknown;
    create(base?: DeepPartial<WebViewPostMessageEvent>): WebViewPostMessageEvent;
    fromPartial(object: DeepPartial<WebViewPostMessageEvent>): WebViewPostMessageEvent;
};
export declare const WebViewFullScreenEvent: {
    $type: "devvit.ui.events.v1alpha.WebViewFullScreenEvent";
    encode(message: WebViewFullScreenEvent, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WebViewFullScreenEvent;
    fromJSON(object: any): WebViewFullScreenEvent;
    toJSON(message: WebViewFullScreenEvent): unknown;
    create(base?: DeepPartial<WebViewFullScreenEvent>): WebViewFullScreenEvent;
    fromPartial(object: DeepPartial<WebViewFullScreenEvent>): WebViewFullScreenEvent;
};
export declare const WebViewEvent: {
    $type: "devvit.ui.events.v1alpha.WebViewEvent";
    encode(message: WebViewEvent, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WebViewEvent;
    fromJSON(object: any): WebViewEvent;
    toJSON(message: WebViewEvent): unknown;
    create(base?: DeepPartial<WebViewEvent>): WebViewEvent;
    fromPartial(object: DeepPartial<WebViewEvent>): WebViewEvent;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=web_view.d.ts.map