/**
 * #web_view.ts
 *
 * @packageDocumentation
 */
/* eslint-disable */
import _m0 from "protobufjs/minimal.js";
import { Value } from "../../../../google/protobuf/struct.js";
import { messageTypeRegistry } from "../../../../typeRegistry.js";
export var WebViewVisibility;
(function (WebViewVisibility) {
    WebViewVisibility[WebViewVisibility["WEBVIEW_VISIBLE"] = 0] = "WEBVIEW_VISIBLE";
    WebViewVisibility[WebViewVisibility["WEBVIEW_HIDDEN"] = 1] = "WEBVIEW_HIDDEN";
    WebViewVisibility[WebViewVisibility["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(WebViewVisibility || (WebViewVisibility = {}));
export function webViewVisibilityFromJSON(object) {
    switch (object) {
        case 0:
        case "WEBVIEW_VISIBLE":
            return WebViewVisibility.WEBVIEW_VISIBLE;
        case 1:
        case "WEBVIEW_HIDDEN":
            return WebViewVisibility.WEBVIEW_HIDDEN;
        case -1:
        case "UNRECOGNIZED":
        default:
            return WebViewVisibility.UNRECOGNIZED;
    }
}
export function webViewVisibilityToJSON(object) {
    switch (object) {
        case WebViewVisibility.WEBVIEW_VISIBLE:
            return 0;
        case WebViewVisibility.WEBVIEW_HIDDEN:
            return 1;
        case WebViewVisibility.UNRECOGNIZED:
        default:
            return -1;
    }
}
function createBaseWebViewPostMessageEvent() {
    return { message: undefined };
}
export const WebViewPostMessageEvent = {
    $type: "devvit.ui.events.v1alpha.WebViewPostMessageEvent",
    encode(message, writer = _m0.Writer.create()) {
        if (message.message !== undefined) {
            Value.encode(Value.wrap(message.message), writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebViewPostMessageEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.message = Value.unwrap(Value.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { message: isSet(object?.message) ? object.message : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.message !== undefined) {
            obj.message = message.message;
        }
        return obj;
    },
    create(base) {
        return WebViewPostMessageEvent.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseWebViewPostMessageEvent();
        message.message = object.message ?? undefined;
        return message;
    },
};
messageTypeRegistry.set(WebViewPostMessageEvent.$type, WebViewPostMessageEvent);
function createBaseWebViewFullScreenEvent() {
    return { visibility: 0 };
}
export const WebViewFullScreenEvent = {
    $type: "devvit.ui.events.v1alpha.WebViewFullScreenEvent",
    encode(message, writer = _m0.Writer.create()) {
        if (message.visibility !== 0) {
            writer.uint32(8).int32(message.visibility);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebViewFullScreenEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.visibility = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { visibility: isSet(object.visibility) ? webViewVisibilityFromJSON(object.visibility) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.visibility !== 0) {
            obj.visibility = webViewVisibilityToJSON(message.visibility);
        }
        return obj;
    },
    create(base) {
        return WebViewFullScreenEvent.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseWebViewFullScreenEvent();
        message.visibility = object.visibility ?? 0;
        return message;
    },
};
messageTypeRegistry.set(WebViewFullScreenEvent.$type, WebViewFullScreenEvent);
function createBaseWebViewEvent() {
    return { postMessage: undefined, fullScreen: undefined };
}
export const WebViewEvent = {
    $type: "devvit.ui.events.v1alpha.WebViewEvent",
    encode(message, writer = _m0.Writer.create()) {
        if (message.postMessage !== undefined) {
            WebViewPostMessageEvent.encode(message.postMessage, writer.uint32(10).fork()).ldelim();
        }
        if (message.fullScreen !== undefined) {
            WebViewFullScreenEvent.encode(message.fullScreen, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebViewEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.postMessage = WebViewPostMessageEvent.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.fullScreen = WebViewFullScreenEvent.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            postMessage: isSet(object.postMessage) ? WebViewPostMessageEvent.fromJSON(object.postMessage) : undefined,
            fullScreen: isSet(object.fullScreen) ? WebViewFullScreenEvent.fromJSON(object.fullScreen) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.postMessage !== undefined) {
            obj.postMessage = WebViewPostMessageEvent.toJSON(message.postMessage);
        }
        if (message.fullScreen !== undefined) {
            obj.fullScreen = WebViewFullScreenEvent.toJSON(message.fullScreen);
        }
        return obj;
    },
    create(base) {
        return WebViewEvent.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseWebViewEvent();
        message.postMessage = (object.postMessage !== undefined && object.postMessage !== null)
            ? WebViewPostMessageEvent.fromPartial(object.postMessage)
            : undefined;
        message.fullScreen = (object.fullScreen !== undefined && object.fullScreen !== null)
            ? WebViewFullScreenEvent.fromPartial(object.fullScreen)
            : undefined;
        return message;
    },
};
messageTypeRegistry.set(WebViewEvent.$type, WebViewEvent);
function isSet(value) {
    return value !== null && value !== undefined;
}
