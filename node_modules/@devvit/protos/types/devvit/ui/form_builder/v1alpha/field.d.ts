/**
 * #field.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { FormFieldType } from "./type.js";
import { FormFieldValue } from "./value.js";
/** The base type */
export interface FormField {
    /** Unique ID within the actor or app */
    fieldId: string;
    /** Field type */
    fieldType: FormFieldType;
    /** Text to display above the input field */
    label: string;
    /** Additional description to help the user */
    helpText?: string | undefined;
    /** Default/initial value */
    defaultValue?: FormFieldValue | undefined;
    /** Whether or not this field is required to submit the form */
    required?: boolean | undefined;
    /** If true, disable the input */
    disabled?: boolean | undefined;
    /** Additional field configuration */
    fieldConfig?: FieldConfig | undefined;
    /** If true, this field is some sort of API key or password */
    isSecret?: boolean | undefined;
}
/** Per-type configuration options */
export interface FieldConfig {
    stringConfig?: FieldConfig_String | undefined;
    paragraphConfig?: FieldConfig_Paragraph | undefined;
    numberConfig?: FieldConfig_Number | undefined;
    booleanConfig?: FieldConfig_Boolean | undefined;
    listConfig?: FieldConfig_List | undefined;
    selectionConfig?: FieldConfig_Selection | undefined;
    groupConfig?: FieldConfig_Group | undefined;
}
export interface FieldConfig_String {
    /** Minimum allowed length for the string */
    minLength?: number | undefined;
    /** Maximum allowed length for the string */
    maxLength?: number | undefined;
    /** Placeholder to use when rendering the input field */
    placeholder?: string | undefined;
}
export interface FieldConfig_Paragraph {
    /** Maximum allowed characters */
    maxCharacters?: number | undefined;
    /** Height based on the number of lines to display in the text area */
    lineHeight?: number | undefined;
    /** Placeholder to use when rendering the input field */
    placeholder?: string | undefined;
}
export interface FieldConfig_Number {
    /** Sets the amount the field can increment/decrement [Default: 1] */
    step?: number | undefined;
    /** Minimum allowed value */
    min?: number | undefined;
    /** Maximum allowed value */
    max?: number | undefined;
}
export interface FieldConfig_Boolean {
}
export interface FieldConfig_List {
    /** The data type of each item in the list; LIST/SELECTION/GROUP not allowed */
    itemType: FormFieldType;
    /** Additional configuration for items */
    itemConfig?: FieldConfig | undefined;
    /** Minimum number of entries allowed in the list */
    minEntries?: number | undefined;
    /** Maximum number of entries allowed in the list */
    maxEntries?: number | undefined;
    /** Label on the new entry input */
    entryLabel?: string | undefined;
}
export interface FieldConfig_Selection {
    /** Ordered list of choices to display in this field */
    choices: FieldConfig_Selection_Item[];
    /** If true allow multiple selections */
    multiSelect?: boolean | undefined;
    /** If multi_select the minimum number of selections required */
    minSelections?: number | undefined;
    /** If multi_select the maximum number of selections allowed */
    maxSelections?: number | undefined;
    /** Render the selection as a list of radio buttons or checkboxes */
    renderAsList?: boolean | undefined;
}
export interface FieldConfig_Selection_Item {
    /** User-facing label */
    label: string;
    /** Value to use when this option is selected */
    value: string;
}
export interface FieldConfig_Group {
    /** Fields included in this group */
    fields: FormField[];
}
export declare const FormField: {
    $type: "devvit.ui.form_builder.v1alpha.FormField";
    encode(message: FormField, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FormField;
    fromJSON(object: any): FormField;
    toJSON(message: FormField): unknown;
    create(base?: DeepPartial<FormField>): FormField;
    fromPartial(object: DeepPartial<FormField>): FormField;
};
export declare const FieldConfig: {
    $type: "devvit.ui.form_builder.v1alpha.FieldConfig";
    encode(message: FieldConfig, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FieldConfig;
    fromJSON(object: any): FieldConfig;
    toJSON(message: FieldConfig): unknown;
    create(base?: DeepPartial<FieldConfig>): FieldConfig;
    fromPartial(object: DeepPartial<FieldConfig>): FieldConfig;
};
export declare const FieldConfig_String: {
    $type: "devvit.ui.form_builder.v1alpha.FieldConfig.String";
    encode(message: FieldConfig_String, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FieldConfig_String;
    fromJSON(object: any): FieldConfig_String;
    toJSON(message: FieldConfig_String): unknown;
    create(base?: DeepPartial<FieldConfig_String>): FieldConfig_String;
    fromPartial(object: DeepPartial<FieldConfig_String>): FieldConfig_String;
};
export declare const FieldConfig_Paragraph: {
    $type: "devvit.ui.form_builder.v1alpha.FieldConfig.Paragraph";
    encode(message: FieldConfig_Paragraph, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FieldConfig_Paragraph;
    fromJSON(object: any): FieldConfig_Paragraph;
    toJSON(message: FieldConfig_Paragraph): unknown;
    create(base?: DeepPartial<FieldConfig_Paragraph>): FieldConfig_Paragraph;
    fromPartial(object: DeepPartial<FieldConfig_Paragraph>): FieldConfig_Paragraph;
};
export declare const FieldConfig_Number: {
    $type: "devvit.ui.form_builder.v1alpha.FieldConfig.Number";
    encode(message: FieldConfig_Number, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FieldConfig_Number;
    fromJSON(object: any): FieldConfig_Number;
    toJSON(message: FieldConfig_Number): unknown;
    create(base?: DeepPartial<FieldConfig_Number>): FieldConfig_Number;
    fromPartial(object: DeepPartial<FieldConfig_Number>): FieldConfig_Number;
};
export declare const FieldConfig_Boolean: {
    $type: "devvit.ui.form_builder.v1alpha.FieldConfig.Boolean";
    encode(_: FieldConfig_Boolean, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FieldConfig_Boolean;
    fromJSON(_: any): FieldConfig_Boolean;
    toJSON(_: FieldConfig_Boolean): unknown;
    create(base?: DeepPartial<FieldConfig_Boolean>): FieldConfig_Boolean;
    fromPartial(_: DeepPartial<FieldConfig_Boolean>): FieldConfig_Boolean;
};
export declare const FieldConfig_List: {
    $type: "devvit.ui.form_builder.v1alpha.FieldConfig.List";
    encode(message: FieldConfig_List, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FieldConfig_List;
    fromJSON(object: any): FieldConfig_List;
    toJSON(message: FieldConfig_List): unknown;
    create(base?: DeepPartial<FieldConfig_List>): FieldConfig_List;
    fromPartial(object: DeepPartial<FieldConfig_List>): FieldConfig_List;
};
export declare const FieldConfig_Selection: {
    $type: "devvit.ui.form_builder.v1alpha.FieldConfig.Selection";
    encode(message: FieldConfig_Selection, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FieldConfig_Selection;
    fromJSON(object: any): FieldConfig_Selection;
    toJSON(message: FieldConfig_Selection): unknown;
    create(base?: DeepPartial<FieldConfig_Selection>): FieldConfig_Selection;
    fromPartial(object: DeepPartial<FieldConfig_Selection>): FieldConfig_Selection;
};
export declare const FieldConfig_Selection_Item: {
    $type: "devvit.ui.form_builder.v1alpha.FieldConfig.Selection.Item";
    encode(message: FieldConfig_Selection_Item, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FieldConfig_Selection_Item;
    fromJSON(object: any): FieldConfig_Selection_Item;
    toJSON(message: FieldConfig_Selection_Item): unknown;
    create(base?: DeepPartial<FieldConfig_Selection_Item>): FieldConfig_Selection_Item;
    fromPartial(object: DeepPartial<FieldConfig_Selection_Item>): FieldConfig_Selection_Item;
};
export declare const FieldConfig_Group: {
    $type: "devvit.ui.form_builder.v1alpha.FieldConfig.Group";
    encode(message: FieldConfig_Group, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FieldConfig_Group;
    fromJSON(object: any): FieldConfig_Group;
    toJSON(message: FieldConfig_Group): unknown;
    create(base?: DeepPartial<FieldConfig_Group>): FieldConfig_Group;
    fromPartial(object: DeepPartial<FieldConfig_Group>): FieldConfig_Group;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=field.d.ts.map