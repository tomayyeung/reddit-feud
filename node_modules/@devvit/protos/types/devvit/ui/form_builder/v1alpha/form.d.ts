/**
 * #form.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { FormField } from "./field.js";
export interface Form {
    fields: FormField[];
    /** Title to display on the form */
    title?: string | undefined;
    /** Short description explaining the purpose of the form */
    shortDescription?: string | undefined;
    /** Alternate text to display on the "OK" button */
    acceptLabel?: string | undefined;
    /** Alternate text to display on the "Cancel" button */
    cancelLabel?: string | undefined;
    /** Unique ID for this form, to help differentiate results if managing more than one form at a time */
    id?: string | undefined;
}
export declare const Form: {
    $type: "devvit.ui.form_builder.v1alpha.Form";
    encode(message: Form, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Form;
    fromJSON(object: any): Form;
    toJSON(message: Form): unknown;
    create(base?: DeepPartial<Form>): Form;
    fromPartial(object: DeepPartial<Form>): Form;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=form.d.ts.map