/**
 * #value.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
import { FormFieldType } from "./type.js";
export interface FormFieldValue {
    /** The type as configured in the corresponding FormField */
    fieldType: FormFieldType;
    /** If true this value comes from a FormField that was defined as a secret */
    isSecret?: boolean | undefined;
    /** For: STRING, PARAGRAPH, IMAGE (the URL) */
    stringValue?: string | undefined;
    /** For: NUMBER */
    numberValue?: number | undefined;
    /** For: BOOLEAN */
    boolValue?: boolean | undefined;
    /** For: LIST */
    listValue?: FormFieldValue_ListValue | undefined;
    /** For: SELECTION */
    selectionValue?: FormFieldValue_SelectionValue | undefined;
    /** For: GROUP */
    groupValue?: FormFieldValue_GroupValue | undefined;
}
export interface FormFieldValue_ListValue {
    /** The type as configured in the corresponding FieldConfig */
    itemType: FormFieldType;
    items: FormFieldValue[];
}
export interface FormFieldValue_SelectionValue {
    /** One or more values from the choices defined in the Selection config. */
    values: string[];
}
/** Group does not have a value */
export interface FormFieldValue_GroupValue {
}
export declare const FormFieldValue: {
    $type: "devvit.ui.form_builder.v1alpha.FormFieldValue";
    encode(message: FormFieldValue, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FormFieldValue;
    fromJSON(object: any): FormFieldValue;
    toJSON(message: FormFieldValue): unknown;
    create(base?: DeepPartial<FormFieldValue>): FormFieldValue;
    fromPartial(object: DeepPartial<FormFieldValue>): FormFieldValue;
};
export declare const FormFieldValue_ListValue: {
    $type: "devvit.ui.form_builder.v1alpha.FormFieldValue.ListValue";
    encode(message: FormFieldValue_ListValue, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FormFieldValue_ListValue;
    fromJSON(object: any): FormFieldValue_ListValue;
    toJSON(message: FormFieldValue_ListValue): unknown;
    create(base?: DeepPartial<FormFieldValue_ListValue>): FormFieldValue_ListValue;
    fromPartial(object: DeepPartial<FormFieldValue_ListValue>): FormFieldValue_ListValue;
};
export declare const FormFieldValue_SelectionValue: {
    $type: "devvit.ui.form_builder.v1alpha.FormFieldValue.SelectionValue";
    encode(message: FormFieldValue_SelectionValue, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FormFieldValue_SelectionValue;
    fromJSON(object: any): FormFieldValue_SelectionValue;
    toJSON(message: FormFieldValue_SelectionValue): unknown;
    create(base?: DeepPartial<FormFieldValue_SelectionValue>): FormFieldValue_SelectionValue;
    fromPartial(object: DeepPartial<FormFieldValue_SelectionValue>): FormFieldValue_SelectionValue;
};
export declare const FormFieldValue_GroupValue: {
    $type: "devvit.ui.form_builder.v1alpha.FormFieldValue.GroupValue";
    encode(_: FormFieldValue_GroupValue, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FormFieldValue_GroupValue;
    fromJSON(_: any): FormFieldValue_GroupValue;
    toJSON(_: FormFieldValue_GroupValue): unknown;
    create(base?: DeepPartial<FormFieldValue_GroupValue>): FormFieldValue_GroupValue;
    fromPartial(_: DeepPartial<FormFieldValue_GroupValue>): FormFieldValue_GroupValue;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=value.d.ts.map