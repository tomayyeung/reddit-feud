/**
 * #toast.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
export declare enum ToastAppearance {
    NEUTRAL = 0,
    SUCCESS = 1,
    UNRECOGNIZED = -1
}
export declare function toastAppearanceFromJSON(object: any): ToastAppearance;
export declare function toastAppearanceToJSON(object: ToastAppearance): number;
export interface ToastLeadingElement {
    /** Icon name */
    icon?: string | undefined;
    /** Emoji name */
    emoji?: string | undefined;
    /** Username */
    avatar?: string | undefined;
}
export interface ToastTrailingElement {
    /** Text button */
    label?: string | undefined;
    /** Icon button */
    icon?: string | undefined;
}
export interface Toast {
    /** Text to display on the toast */
    text: string;
    /** Additional styling based on what this toast represents */
    appearance?: ToastAppearance | undefined;
    /** Content to display before the text */
    leadingElement?: ToastLeadingElement | undefined;
    /** Content to display after the text */
    trailingElement?: ToastTrailingElement | undefined;
}
export declare const ToastLeadingElement: {
    $type: "devvit.ui.toast.ToastLeadingElement";
    encode(message: ToastLeadingElement, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ToastLeadingElement;
    fromJSON(object: any): ToastLeadingElement;
    toJSON(message: ToastLeadingElement): unknown;
    create(base?: DeepPartial<ToastLeadingElement>): ToastLeadingElement;
    fromPartial(object: DeepPartial<ToastLeadingElement>): ToastLeadingElement;
};
export declare const ToastTrailingElement: {
    $type: "devvit.ui.toast.ToastTrailingElement";
    encode(message: ToastTrailingElement, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ToastTrailingElement;
    fromJSON(object: any): ToastTrailingElement;
    toJSON(message: ToastTrailingElement): unknown;
    create(base?: DeepPartial<ToastTrailingElement>): ToastTrailingElement;
    fromPartial(object: DeepPartial<ToastTrailingElement>): ToastTrailingElement;
};
export declare const Toast: {
    $type: "devvit.ui.toast.Toast";
    encode(message: Toast, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Toast;
    fromJSON(object: any): Toast;
    toJSON(message: Toast): unknown;
    create(base?: DeepPartial<Toast>): Toast;
    fromPartial(object: DeepPartial<Toast>): Toast;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=toast.d.ts.map