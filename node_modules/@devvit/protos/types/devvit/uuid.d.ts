/**
 * #uuid.ts
 *
 * @packageDocumentation
 */
import _m0 from "protobufjs/minimal.js";
/** Many RPCs take just a UUID as a parameter; declare a common message here to make life simpler */
export interface UUID {
    id: string;
}
export declare const UUID: {
    $type: "devvit.UUID";
    encode(message: UUID, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UUID;
    fromJSON(object: any): UUID;
    toJSON(message: UUID): unknown;
    create(base?: DeepPartial<UUID>): UUID;
    fromPartial(object: DeepPartial<UUID>): UUID;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=uuid.d.ts.map