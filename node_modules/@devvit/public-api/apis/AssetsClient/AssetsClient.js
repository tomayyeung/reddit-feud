var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _AssetsClient_instances, _AssetsClient_assetMap, _AssetsClient_webViewAssetMap, _AssetsClient_getURL, _AssetsClient_getURLs;
import { Devvit } from '../../devvit/Devvit.js';
function assertValidUrl(path) {
    // This will throw an exception if it's an invalid URL such as a relative path
    // NOTE: substring is here to only check up until the data segment if this is a data URL so we don't waste time needlessly parsing data.
    //       Technically this will lose the last character if this isn't a data URL but we're just validating structure.
    new URL(path.slice(0, path.indexOf(',')));
}
export class AssetsClient {
    constructor() {
        _AssetsClient_instances.add(this);
        _AssetsClient_assetMap.set(this, {});
        _AssetsClient_webViewAssetMap.set(this, {});
        __classPrivateFieldSet(this, _AssetsClient_assetMap, Devvit.assets, "f");
        __classPrivateFieldSet(this, _AssetsClient_webViewAssetMap, Devvit.webViewAssets, "f");
    }
    /**
     * Takes one or more asset names, relative to the 'assets/' folder, and returns either the
     * public URL for that one asset, or a map of each asset name to its URL.
     * @param assetPathOrPaths - Either the path you need the public URL for, or an array of paths.
     * @param options
     * @returns Either the public URL for the one asset you asked for, or a map of assets to their URLs.
     */
    getURL(assetPathOrPaths, options) {
        if (typeof assetPathOrPaths === 'string') {
            return __classPrivateFieldGet(this, _AssetsClient_instances, "m", _AssetsClient_getURL).call(this, assetPathOrPaths, options ?? { webView: false });
        }
        return __classPrivateFieldGet(this, _AssetsClient_instances, "m", _AssetsClient_getURLs).call(this, assetPathOrPaths, options ?? { webView: false });
    }
}
_AssetsClient_assetMap = new WeakMap(), _AssetsClient_webViewAssetMap = new WeakMap(), _AssetsClient_instances = new WeakSet(), _AssetsClient_getURL = function _AssetsClient_getURL(assetPath, options) {
    // Has the assetPath already been resolved?
    const localUrl = options.webView ? __classPrivateFieldGet(this, _AssetsClient_webViewAssetMap, "f")[assetPath] : __classPrivateFieldGet(this, _AssetsClient_assetMap, "f")[assetPath];
    if (localUrl) {
        return localUrl;
    }
    try {
        assertValidUrl(assetPath);
        // URL is valid
        return encodeURI(assetPath);
    }
    catch {
        // Not a fully qualified URL, not an asset, return an empty string
        return '';
    }
}, _AssetsClient_getURLs = function _AssetsClient_getURLs(assetPaths, options) {
    const retval = {};
    let missingPaths = [];
    // Try and short circuit using the locally available assets list if possible, keeping a list
    // of all the paths that we couldn't find locally to ask the backend about
    const cache = options.webView ? __classPrivateFieldGet(this, _AssetsClient_webViewAssetMap, "f") : __classPrivateFieldGet(this, _AssetsClient_assetMap, "f");
    if (cache) {
        for (const path of assetPaths) {
            if (cache[path]) {
                retval[path] = cache[path];
            }
            else {
                try {
                    assertValidUrl(path);
                    retval[path] = encodeURI(path);
                }
                catch {
                    // invalid URL, missing from cache
                    missingPaths.push(path);
                }
            }
        }
    }
    else {
        // No local assets - everything is missing
        missingPaths = assetPaths;
    }
    if (missingPaths.length > 0) {
        throw new Error(`The following assets were missing from the assets list: ${missingPaths.join(', ')}`);
    }
    return retval;
};
