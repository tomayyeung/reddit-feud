import type { JSONValue } from '@devvit/shared-types/json.js';
import type { AsyncUseStateInitializer, UseAsyncResult } from '../../../../types/hooks.js';
export type AsyncOptions = {
    /**
     * The data loader will re-run if the value of `depends` changes.
     */
    depends?: JSONValue;
};
export type LoadState = 'initial' | 'loading' | 'loaded' | 'error' | 'disabled';
/**
 * This tries to save an error into the state.  If the error is a circuit breaker, it will throw the error instead,
 * as those errors are not meant to be saved in state.
 *
 * @param e  -- an original error type
 * @returns A JSONValue that can be saved in states
 */
export declare function toSerializableErrorOrCircuitBreak(e: unknown): {
    message: string;
    details: string;
};
/**
 * This is the preferred way to handle async state in Devvit.
 *
 * @param initializer -- any async function that returns a JSONValue
 * @returns UseAsyncResult<S>
 */
export declare function useAsync<S extends JSONValue>(initializer: AsyncUseStateInitializer<S>, options?: AsyncOptions): UseAsyncResult<S>;
//# sourceMappingURL=useAsync.d.ts.map