import type { JSONValue } from '@devvit/shared-types/json.js';
import type { FormKey } from '@devvit/shared-types/useForm.js';
import type { Form, FormDefinition, FormFunction, FormToFormValues, FormValues } from '../../../../index.js';
import type { RenderContext } from './RenderContext.js';
import type { EventHandler, Hook, HookRef } from './types.js';
declare class UseFormHook implements Hook, FormDefinition {
    hookId: string;
    state: JSONValue;
    onUIEvent?: EventHandler | undefined;
    onStateLoaded?: (() => void) | undefined;
    form: Form | FormFunction;
    onSubmit: (values: FormValues) => void | Promise<void>;
    constructor(params: {
        hookId: string;
    }, form: Form | FormFunction, onSubmit: (values: FormValues) => void | Promise<void>);
}
export declare function useForm<const T extends Form | FormFunction>(form: T, onSubmit: (values: FormToFormValues<T>) => void | Promise<void>): FormKey;
export declare function hookRefToFormKey(hookRef: HookRef): FormKey;
export declare function getFormDefinition(renderContext: RenderContext, formKey: FormKey): UseFormHook;
export {};
//# sourceMappingURL=useForm.d.ts.map