import { Header } from '@devvit/shared-types/Header.js';
import { assertNonNull } from '@devvit/shared-types/NonNull.js';
import pkg from '../../version.json' with { type: 'json' };
export function getContextFromMetadata(metadata, postId, commentId) {
    const subredditId = metadata[Header.Subreddit]?.values[0];
    assertNonNull(subredditId, 'subreddit is missing from Context');
    const subredditName = metadata[Header.SubredditName]?.values[0];
    // devvit-app-user is only available in the remote runtime.
    const appAccountId = metadata[Header.AppUser]?.values[0];
    const appName = metadata[Header.App]?.values[0];
    const appVersion = metadata[Header.Version]?.values[0];
    const userId = metadata[Header.User]?.values[0];
    const debug = parseDebug(metadata);
    return {
        get appAccountId() {
            assertNonNull(appAccountId, 'appAccountId is missing from Context');
            return appAccountId;
        },
        subredditId,
        subredditName,
        userId,
        postId,
        commentId,
        appName,
        appVersion,
        debug,
        toJSON() {
            return {
                appAccountId,
                appName,
                appVersion,
                subredditId,
                subredditName,
                userId,
                postId,
                commentId,
                debug,
            };
        },
    };
}
/** @internal */
export function parseDebug(meta) {
    // Roughly aligns to initDevvitGlobal() except an empty devvit-debug doesn't
    // enable all.
    var _a;
    // All known AppDebug keys.
    const keyset = {
        blocks: undefined,
        emitSnapshots: undefined,
        emitState: undefined,
        realtime: undefined,
        runtime: undefined,
        surface: undefined,
        useAsync: undefined,
        payments: undefined,
        bootstrap: undefined,
        webView: undefined,
    };
    // {[key: Lowercase<AppDebug>]: AppDebug}
    const lowerKeyToKey = {};
    for (const key in keyset)
        lowerKeyToKey[key.toLowerCase()] = key;
    const debug = {};
    // hack: gRPC-web header values don't split in compute. always join then split
    //       for parity in both local and remote runtimes.
    for (const kv of (meta[Header.Debug]?.values ?? []).join().split(',')) {
        let [k, v] = kv.split('=');
        if (!k)
            continue;
        k = k.trim();
        v = v?.trim();
        if (k.toLowerCase() in lowerKeyToKey)
            k = lowerKeyToKey[k.toLowerCase()];
        debug[_a = k] ?? (debug[_a] = v || `${true}`);
    }
    // @devvit/public-api v1.2.3 emitSnapshots=true foo=bar
    if (meta[Header.Debug])
        console.info(`[api] @devvit/public-api v${pkg.version} ${Object.entries(debug)
            .map(([k, v]) => `${k}=${v}`)
            .join(' ')}`);
    return { ...debug, metadata: meta };
}
