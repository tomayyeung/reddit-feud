import { CustomPostDefinition, UIResponse } from '@devvit/protos';
import { Devvit } from '../Devvit.js';
import { BlocksHandler } from './blocks/handler/BlocksHandler.js';
import { extendDevvitPrototype } from './helpers/extendDevvitPrototype.js';
import { makeUpgradeAppComponent, parseDevvitUserAgent, shouldShowUpgradeAppScreen, } from './upgrade-app-shim.js';
const FeatureUnavailable = () => (Devvit.createElement("vstack", { alignment: "center middle", width: "100%", height: "100%" },
    Devvit.createElement("text", null, "This feature is not available yet")));
/**
 * Extend me to add new surfaces to Devvit.
 */
const UIComponentBindings = [
    [
        CustomPostDefinition,
        CustomPostDefinition.methods['renderPostContent'],
        (_props, context) => Devvit.customPostType?.render(context) ?? null,
    ],
    [
        CustomPostDefinition,
        CustomPostDefinition.methods['renderPostComposer'],
        (_props, _context) => Devvit.createElement(FeatureUnavailable, null),
    ],
];
export function makeHandler(component) {
    return async (req, metadata) => {
        const parsedUserAgent = parseDevvitUserAgent(metadata['devvit-user-agent']?.values?.[0] ?? '');
        if (parsedUserAgent && shouldShowUpgradeAppScreen(parsedUserAgent)) {
            const handler = new BlocksHandler(makeUpgradeAppComponent(parsedUserAgent.platform));
            return UIResponse.fromJSON(await handler.handle(req, metadata));
        }
        const handler = new BlocksHandler(component);
        return UIResponse.fromJSON(await handler.handle(req, metadata));
    };
}
export function registerUIRequestHandlers(config) {
    for (const [definition, method, component] of UIComponentBindings) {
        config.provides(definition);
        extendDevvitPrototype(method.name, makeHandler(component));
    }
}
