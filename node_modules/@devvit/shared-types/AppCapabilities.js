import { ContextActionDefinition, CustomPostDefinition, FlairDefinition, GraphQLDefinition, HTTPDefinition, InstallationSettingsDefinition, KVStoreDefinition, LinksAndCommentsDefinition, ListingsDefinition, MediaServiceDefinition, ModerationDefinition, ModlogDefinition, ModNoteDefinition, NewModmailDefinition, OnAppInstallDefinition, OnAppUpgradeDefinition, OnCommentCreateDefinition, OnCommentDeleteDefinition, OnCommentReportDefinition, OnCommentSubmitDefinition, OnCommentUpdateDefinition, OnModActionDefinition, OnModMailDefinition, OnPostCreateDefinition, OnPostDeleteDefinition, OnPostFlairUpdateDefinition, OnPostReportDefinition, OnPostSubmitDefinition, OnPostUpdateDefinition, PrivateMessagesDefinition, RedisAPIDefinition, SchedulerDefinition, SchedulerHandlerDefinition, SettingsDefinition, SubredditsDefinition, UIEventHandlerDefinition, UsersDefinition, WidgetsDefinition, WikiDefinition, } from '@devvit/protos';
import { PaymentProcessorDefinition, PaymentsServiceDefinition } from '@devvit/protos/payments.js';
import { OnAccountDeleteDefinition, OnSubredditSubscribeDefinition, } from '@devvit/protos/types/devvit/actor/automation/v1alpha/event_handlers.js';
import { AssetResolverDefinition } from '@devvit/protos/types/devvit/plugin/assetresolver/assetresolver.js';
export var AppCapability;
(function (AppCapability) {
    AppCapability["Unrecognized"] = "Unrecognized";
    AppCapability["AppTriggers"] = "AppTriggers";
    AppCapability["Assets"] = "Assets";
    AppCapability["Data"] = "Data";
    AppCapability["HTTP"] = "HTTP";
    AppCapability["Modlog"] = "Modlog";
    AppCapability["RedditAPI"] = "RedditAPI";
    AppCapability["RedditTriggers"] = "RedditTriggers";
    AppCapability["Scheduler"] = "Scheduler";
    AppCapability["UI"] = "UI";
    AppCapability["Moderator"] = "Moderator";
    AppCapability["Webview"] = "Webview";
    AppCapability["Payments"] = "Payments";
    AppCapability["CustomPost"] = "CustomPost";
})(AppCapability || (AppCapability = {}));
/**
 * Finds all of the capabilities that an app has based on its actor.
 */
export function appCapabilitiesFromActor(actor, hasAssets, hasWebView) {
    const names = [
        ...actor.types.map((provide) => provide.name),
        ...actor.plugins.map((use) => use.fullname),
    ];
    return appCapabilitiesFromFullNames(names, hasAssets, hasWebView);
}
/**
 * Finds all of the capabilities that an app has based on its linked bundle.
 */
export function appCapabilitiesFromLinkedBundle(bundle) {
    const getFlatListOfServiceDefinitions = (bundle) => [
        ...(bundle.provides ?? []),
        // Recursively get the provides from child uses.
        ...(bundle.uses?.length ? bundle.uses.flatMap(getFlatListOfServiceDefinitions) : []),
    ];
    const names = getFlatListOfServiceDefinitions(bundle)
        // If undefined, there is still an unknown provide that should not be
        // filtered out.
        .map((definition) => definition.fullName ?? '');
    const hasAssets = Object.keys(bundle.assets).length > 0;
    const hasWebview = Object.keys(bundle.webviewAssets).length > 0;
    return appCapabilitiesFromFullNames(names, hasAssets, hasWebview).flatMap((capablity) => capablity);
}
/**
 * Finds all of the capabilities that an app has based on its bundle.
 */
export function appCapabilitiesFromBundle(bundle) {
    const names = [
        ...(bundle.dependencies?.provides ?? []).map((provide) => provide.definition?.fullName ?? ''),
        ...(bundle.dependencies?.uses ?? []).map((use) => use.typeName),
    ];
    const hasAssets = Object.keys(bundle.assetIds).length > 0;
    const hasWebview = Object.keys(bundle.webviewAssetIds).length > 0;
    return appCapabilitiesFromFullNames(names, hasAssets, hasWebview);
}
function appCapabilitiesFromFullNames(fullNames, hasAssets, hasWebview) {
    const appCapabilities = fullNames
        .flatMap((name) => appCapabilityFromFullName(name, hasAssets))
        .filter((capability) => capability != null);
    // All apps have moderator permissions implicitly.
    appCapabilities.push(AppCapability.Moderator);
    if (hasWebview) {
        appCapabilities.push(AppCapability.Webview);
    }
    // Filter out dups.
    return [...new Set(appCapabilities)];
}
/**
 * Definition.fullName to AppCapability. We don't really care about the
 * server / client-ness--we consider the worst-case scenario. For example, the
 * worst-case for any Reddit API is an app _using_ the API but the worst-case
 * for any trigger is _providing_ it. Another example is the scheduler, if an
 * app provides a scheduler job callback OR uses the scheduler plugin, we assume
 * the scheduler capability.
 *
 * Returns an array because some definitions can map to multiple capability categories.
 */
function appCapabilityFromFullName(fullName, hasAssets) {
    switch (fullName) {
        case AssetResolverDefinition.fullName:
            // Every app depends on the asset resolver. The resolver is used for
            // conventional URLs like https://example.com/foo.gif, data URLs, and
            // relative URLs to static assets. We can only report on static assets and
            // that requires more detail.
            return [hasAssets ? AppCapability.Assets : undefined];
        case CustomPostDefinition.fullName:
            return [AppCapability.CustomPost, AppCapability.UI];
        case ContextActionDefinition.fullName:
        case UIEventHandlerDefinition.fullName:
            return [AppCapability.UI];
        case InstallationSettingsDefinition.fullName:
        case SettingsDefinition.fullName:
        case KVStoreDefinition.fullName:
        case MediaServiceDefinition.fullName:
        case RedisAPIDefinition.fullName:
            return [AppCapability.Data];
        case HTTPDefinition.fullName:
            return [AppCapability.HTTP];
        case ModlogDefinition.fullName:
            return [AppCapability.Modlog];
        case SchedulerHandlerDefinition.fullName:
        case SchedulerDefinition.fullName:
            return [AppCapability.Scheduler];
        case OnAccountDeleteDefinition.fullName:
        case OnAppInstallDefinition.fullName:
        case OnAppUpgradeDefinition.fullName:
            return [AppCapability.AppTriggers];
        case OnCommentCreateDefinition.fullName:
        case OnCommentDeleteDefinition.fullName:
        case OnCommentReportDefinition.fullName:
        case OnCommentSubmitDefinition.fullName:
        case OnCommentUpdateDefinition.fullName:
        case OnModActionDefinition.fullName:
        case OnModMailDefinition.fullName:
        case OnPostCreateDefinition.fullName:
        case OnPostDeleteDefinition.fullName:
        case OnPostUpdateDefinition.fullName:
        case OnPostFlairUpdateDefinition.fullName:
        case OnPostReportDefinition.fullName:
        case OnPostSubmitDefinition.fullName:
        case OnSubredditSubscribeDefinition.fullName:
            return [AppCapability.RedditTriggers];
        case FlairDefinition.fullName:
        case GraphQLDefinition.fullName:
        case LinksAndCommentsDefinition.fullName:
        case ListingsDefinition.fullName:
        case ModerationDefinition.fullName:
        case ModNoteDefinition.fullName:
        case NewModmailDefinition.fullName:
        case PrivateMessagesDefinition.fullName:
        case SubredditsDefinition.fullName:
        case UsersDefinition.fullName:
        case WidgetsDefinition.fullName:
        case WikiDefinition.fullName:
            return [AppCapability.RedditAPI];
        case PaymentsServiceDefinition.fullName:
        case PaymentProcessorDefinition.fullName:
            return [AppCapability.Payments];
    }
    return [AppCapability.Unrecognized];
}
