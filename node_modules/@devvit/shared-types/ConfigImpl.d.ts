import { Definition } from '@devvit/protos/lib/Types.js';
import { ActorSpec, DependencySpec, PackageQuery } from '@devvit/protos/types/devvit/runtime/bundle.js';
import type { AssetMap } from './Assets.js';
import type { DeepPartial } from './BuiltinTypes.js';
import type { Config } from './Config.js';
import type { Namespace } from './Namespace.js';
export type ClientFactory = {
    Build<T>(desc: Definition, spec: PackageQuery): T;
};
export declare class ConfigImpl implements Config {
    #private;
    get assets(): Readonly<AssetMap>;
    get webviewAssets(): Readonly<AssetMap>;
    get providedDefinitions(): Readonly<Definition>[];
    constructor(factory: ClientFactory, actorSpec: ActorSpec, assets: AssetMap, webviewAssets: AssetMap);
    export(namespace: Readonly<Namespace>): DependencySpec;
    provides(definition: Readonly<Definition>): void;
    use<T>(definition: Readonly<Definition>, options?: Readonly<DeepPartial<PackageQuery>>): T;
    uses(definition: Readonly<Definition>): boolean;
}
//# sourceMappingURL=ConfigImpl.d.ts.map