var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _ConfigImpl_instances, _ConfigImpl_factory, _ConfigImpl_name, _ConfigImpl_owner, _ConfigImpl_provides, _ConfigImpl_useQueries, _ConfigImpl_version, _ConfigImpl_assets, _ConfigImpl_webviewAssets, _ConfigImpl_newActorSpec;
import { Definition } from '@devvit/protos/lib/Types.js';
import { ActorSpec, DependencySpec, PackageQuery, } from '@devvit/protos/types/devvit/runtime/bundle.js';
import { PLUGIN_NAME, resolveActorHostname } from './HostnameUtil.js';
import { NonNull } from './NonNull.js';
export class ConfigImpl {
    get assets() {
        return __classPrivateFieldGet(this, _ConfigImpl_assets, "f");
    }
    get webviewAssets() {
        return __classPrivateFieldGet(this, _ConfigImpl_webviewAssets, "f");
    }
    get providedDefinitions() {
        return __classPrivateFieldGet(this, _ConfigImpl_provides, "f");
    }
    constructor(factory, actorSpec, assets, webviewAssets) {
        _ConfigImpl_instances.add(this);
        _ConfigImpl_factory.set(this, void 0);
        _ConfigImpl_name.set(this, void 0);
        _ConfigImpl_owner.set(this, void 0);
        _ConfigImpl_provides.set(this, []);
        _ConfigImpl_useQueries.set(this, []);
        _ConfigImpl_version.set(this, void 0);
        _ConfigImpl_assets.set(this, void 0);
        _ConfigImpl_webviewAssets.set(this, void 0);
        __classPrivateFieldSet(this, _ConfigImpl_factory, factory, "f");
        __classPrivateFieldSet(this, _ConfigImpl_name, actorSpec.name, "f");
        __classPrivateFieldSet(this, _ConfigImpl_owner, actorSpec.owner, "f");
        __classPrivateFieldSet(this, _ConfigImpl_version, actorSpec.version, "f");
        __classPrivateFieldSet(this, _ConfigImpl_assets, Object.freeze(assets), "f");
        __classPrivateFieldSet(this, _ConfigImpl_webviewAssets, Object.freeze(webviewAssets), "f");
    }
    export(namespace) {
        return {
            actor: __classPrivateFieldGet(this, _ConfigImpl_instances, "m", _ConfigImpl_newActorSpec).call(this),
            hostname: resolveActorHostname(NonNull(__classPrivateFieldGet(this, _ConfigImpl_name, "f")), namespace),
            provides: __classPrivateFieldGet(this, _ConfigImpl_provides, "f").map((definition) => {
                return {
                    actor: __classPrivateFieldGet(this, _ConfigImpl_instances, "m", _ConfigImpl_newActorSpec).call(this),
                    definition: Definition.toSerializable(definition),
                    partitionsBy: [],
                };
            }),
            uses: __classPrivateFieldGet(this, _ConfigImpl_useQueries, "f"),
        };
    }
    provides(definition) {
        __classPrivateFieldGet(this, _ConfigImpl_provides, "f").push(definition);
    }
    use(definition, options = {}) {
        const query = {
            ...options,
            name: options.name ?? PLUGIN_NAME,
            owner: options.owner,
            versions: options.versions,
            typeName: definition.fullName,
        };
        __classPrivateFieldGet(this, _ConfigImpl_useQueries, "f").push(query);
        return __classPrivateFieldGet(this, _ConfigImpl_factory, "f").Build(definition, query);
    }
    uses(definition) {
        return __classPrivateFieldGet(this, _ConfigImpl_useQueries, "f").some((query) => query.typeName === definition.fullName);
    }
}
_ConfigImpl_factory = new WeakMap(), _ConfigImpl_name = new WeakMap(), _ConfigImpl_owner = new WeakMap(), _ConfigImpl_provides = new WeakMap(), _ConfigImpl_useQueries = new WeakMap(), _ConfigImpl_version = new WeakMap(), _ConfigImpl_assets = new WeakMap(), _ConfigImpl_webviewAssets = new WeakMap(), _ConfigImpl_instances = new WeakSet(), _ConfigImpl_newActorSpec = function _ConfigImpl_newActorSpec() {
    return {
        name: __classPrivateFieldGet(this, _ConfigImpl_name, "f") ?? '',
        owner: __classPrivateFieldGet(this, _ConfigImpl_owner, "f") ?? '',
        version: __classPrivateFieldGet(this, _ConfigImpl_version, "f") ?? '',
    };
};
