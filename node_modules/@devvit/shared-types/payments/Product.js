import { AccountingType as AccountingTypeProto } from '@devvit/protos/payments.js';
import { v5 as uuidv5 } from 'uuid';
import { assertNonNull } from '../NonNull.js';
export var AccountingType;
(function (AccountingType) {
    AccountingType["INSTANT"] = "INSTANT";
    AccountingType["DURABLE"] = "DURABLE";
    AccountingType["CONSUMABLE"] = "CONSUMABLE";
    AccountingType["VALID_FOR_1D"] = "VALID_FOR_1D";
    AccountingType["VALID_FOR_7D"] = "VALID_FOR_7D";
    AccountingType["VALID_FOR_30D"] = "VALID_FOR_30D";
    AccountingType["VALID_FOR_1Y"] = "VALID_FOR_1Y";
    AccountingType["UNRECOGNIZED"] = "UNRECOGNIZED";
})(AccountingType || (AccountingType = {}));
const accountTypeToProtoMapping = {
    [AccountingType.INSTANT]: AccountingTypeProto.ACCOUNTING_TYPE_INSTANT,
    [AccountingType.DURABLE]: AccountingTypeProto.ACCOUNTING_TYPE_DURABLE,
    [AccountingType.CONSUMABLE]: AccountingTypeProto.ACCOUNTING_TYPE_CONSUMABLE,
    [AccountingType.VALID_FOR_1D]: AccountingTypeProto.ACCOUNTING_TYPE_VALID_FOR_1D,
    [AccountingType.VALID_FOR_7D]: AccountingTypeProto.ACCOUNTING_TYPE_VALID_FOR_7D,
    [AccountingType.VALID_FOR_30D]: AccountingTypeProto.ACCOUNTING_TYPE_VALID_FOR_30D,
    [AccountingType.VALID_FOR_1Y]: AccountingTypeProto.ACCOUNTING_TYPE_VALID_FOR_1Y,
    [AccountingType.UNRECOGNIZED]: AccountingTypeProto.UNRECOGNIZED,
};
/**
 * Maps an AccountingType enum to the corresponding protobuf enum value.
 */
export function mapAccountingTypeToProto(type) {
    return accountTypeToProtoMapping[type] ?? AccountingTypeProto.UNRECOGNIZED;
}
/**
 * Maps an AccountingType protobuf enum value to the corresponding AccountingType enum.
 */
export function mapProtoToAccountingType(typeProto) {
    const entry = Object.entries(accountTypeToProtoMapping).find(([_, value]) => value === typeProto);
    return entry ? entry[0] : AccountingType.UNRECOGNIZED;
}
/**
 * Converts an Product protobuf message to an Product object.
 */
export function productFromProto(data) {
    // Validate the incoming data
    assertNonNull(data.price, 'Product price is null or undefined');
    return {
        sku: data.sku,
        price: data.price.amount, // In Reddit Gold
        accountingType: mapProtoToAccountingType(data.accountingType),
        displayName: data.name,
        description: data.description,
        metadata: data.productMetadata,
    };
}
export function newProductId(appVersionId, productSku) {
    const uuidV5Name = productSku;
    const uuidV5Namespace = appVersionId;
    return uuidv5(uuidV5Name, uuidV5Namespace);
}
